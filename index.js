/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	__webpack_require__(14); //for the webpack build

	var React = __webpack_require__(15);
	var Matter = __webpack_require__(171);
	var List = Matter.List;
	var ListItem = Matter.ListItem;
	var getTheme = Matter.getTheme;

	var merge = __webpack_require__(176);
	var kebabCase = __webpack_require__(1);
	var RefreshValuePropOfInput = __webpack_require__(345);

	var Router = __webpack_require__(346);

	var DefaultRoute = Router.DefaultRoute;
	var Link = Router.Link;
	var Route = Router.Route;
	var RouteHandler = Router.RouteHandler;
	var Redirect = Router.Redirect;

	global.fakeNames = 'Yadira Smith,Meggie Wolf PhD,Hermina Trantow,Mrs. Gladys Heathcote,Mekhi Mann,Maida Veum,Makenzie Abshire,Loyal Raynor,Brisa Okuneva,Mariela McKenzie,Elise Auer,Eleonore Sipes,Libbie Labadie,Darrel Toy,Rylee McLaughlin,Kara Schiller,Sophie Rogahn,Alivia Huels,Brennon VonRueden,Efren Ankunding,Queenie Waters,Myrtis Kris II,Vaughn Nolan,Terrence Emard,Ahmed Vandervort,Cassandre Schmitt DDS,Walter Goodwin Jr.,Mattie Carroll,Mr. Cortney Gulgowski,Waino Schumm,Mr. Mark Gleason,Hailee Parker,Mathias Gottlieb Sr.,Santino Greenholt I,Ms. Archibald Tromp,Matilda Padberg,Domingo Marks,Lonny Ernser,Nicolette Douglas,Gavin Prosacco,Irving Abshire,Meaghan O\'Kon,Israel Prohaska,Ms. Carmella Lemke,Marta Moore IV,Kim Daniel,Rafael Dare,Ettie Runolfsson,Nils Mayert,Dawson Lind,Deron Larkin,Barrett Walter,Reece Ziemann,Vella Waelchi,Dewitt Thompson,D\'angelo Davis,Edgar Kassulke,Daisy Senger,Michele Homenick IV,Amelie Halvorson DDS,Pattie Davis,Marisa Dooley,Arlene Bergstrom,Adah Konopelski,Eleonore Beahan,Maya Schultz,Osbaldo Jaskolski,Elenora Greenholt,Ambrose Runolfsdottir,Sammy Fritsch,Bettye Bogan,Lilly Block,Lila Roberts,Marion Ferry,Leon Mills,Ladarius Hand,Estell Bernhard I,Dr. Shany Kirlin,Janet Reynolds,Lyric Hilll,Maude Fritsch,Fredrick McLaughlin,Natalie Dooley,Adrien Champlin,Kenyon Boyer,Mariela Rice,Kirsten Howell III,Miss Kasey Dickinson,Salvador Abbott,Albin McClure,Ms. Cole Dare,Odell Herzog,Janessa O\'Conner,Vivien Schaefer,Natalie Hagenes,King Hahn,Shanny Jaskolski,Nyah Quitzon,Joan Brekke,Guy Windler,Tess Hackett,Roman Strosin,Kobe Fisher V,Miss Leopold Kuphal,Ona Larkin,Jensen Schulist,Eldred Thiel,Dock Miller,Kira Medhurst,Molly DuBuque IV,Amalia Bernier,Murray Ratke,Brooklyn Funk,Deborah Hoeger,Mrs. Pietro Stanton,Alene Robel,Montana Parker,Destany Runte,Antonina Blick III,Chelsea Wisozk,Allie White,Roxane Ankunding,Laurine Olson'.split(',');

	var componentPages = {
	  Tests: __webpack_require__(385)
	};

	// Checkbox: require('./componentPages/Checkbox.jsx'),
	// ColorInput: require('./componentPages/ColorInput.jsx'),
	// Icon: require('./componentPages/Icon.jsx'),
	// Input: require('./componentPages/Input.jsx'),
	// ItemGroup: require('./componentPages/ItemGroup.jsx'),
	// MultiTypeInput: require('./componentPages/MultiTypeInput.jsx'),
	// Toggle: require('./componentPages/Toggle.jsx'),
	global.Matter = Matter;
	global.React = React;

	merge(global, Matter);
	global.RefreshValuePropOfInput = RefreshValuePropOfInput;

	var App = React.createClass({
	  displayName: 'App',

	  contextTypes: {
	    router: React.PropTypes.func
	  },
	  render: function render() {
	    var router = this.context.router;

	    var theme = getTheme(this);
	    var config = theme.getStyle('config');
	    var font = theme.getStyle('font');

	    var styleCont = merge({}, font, {
	      width: 920,
	      padding: '0 20px',
	      margin: '12px auto',
	      display: 'flex',
	      color: config.fontColor.normal
	    });

	    return React.createElement(
	      'div',
	      { style: styleCont },
	      React.createElement(
	        'div',
	        { style: { width: 270 } },
	        React.createElement(
	          List,
	          { style: { width: 210 } },
	          Object.keys(componentPages).map(function (name) {

	            return React.createElement(ListItem, {
	              key: name,
	              label: name,
	              onClick: function () {
	                return router.transitionTo(name);
	              },
	              selected: router.isActive(name) });
	          })
	        )
	      ),
	      React.createElement(
	        'div',
	        { style: { width: 650 } },
	        React.createElement(RouteHandler, null)
	      )
	    );
	  }
	});

	var routes = React.createElement(
	  Route,
	  { handler: App },
	  Object.keys(componentPages).map(function (name) {

	    return React.createElement(Route, {
	      key: name,
	      name: name,
	      path: kebabCase(name),
	      handler: componentPages[name] });
	  }),
	  React.createElement(Redirect, { from: '', to: 'Tests' })
	);

	Router.run(routes, function (Handler) {
	  React.render(React.createElement(Handler, null), document.querySelector('#react-mount'));
	});
	// import ColorCircle from '../../src/utils/ColorCircle'
	// React.render(<div><ColorCircle onChange={c=>console.log(c)}/></div>, document.querySelector('#react-mount'))
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(2);

	/**
	 * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the kebab cased string.
	 * @example
	 *
	 * _.kebabCase('Foo Bar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('fooBar');
	 * // => 'foo-bar'
	 *
	 * _.kebabCase('__foo_bar__');
	 * // => 'foo-bar'
	 */
	var kebabCase = createCompounder(function(result, word, index) {
	  return result + (index ? '-' : '') + word.toLowerCase();
	});

	module.exports = kebabCase;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var deburr = __webpack_require__(3),
	    words = __webpack_require__(6);

	/**
	 * Creates a function that produces compound words out of the words in a
	 * given string.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function(string) {
	    var index = -1,
	        array = words(deburr(string)),
	        length = array.length,
	        result = '';

	    while (++index < length) {
	      result = callback(result, array[index], index);
	    }
	    return result;
	  };
	}

	module.exports = createCompounder;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(4),
	    deburrLetter = __webpack_require__(5);

	/** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	/** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	/**
	 * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = baseToString(string);
	  return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	}

	module.exports = deburr;


/***/ },
/* 4 */
/***/ function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ },
/* 5 */
/***/ function(module, exports) {

	/** Used to map latin-1 supplementary letters to basic latin letters. */
	var deburredLetters = {
	  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C',  '\xe7': 'c',
	  '\xd0': 'D',  '\xf0': 'd',
	  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N',  '\xf1': 'n',
	  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss'
	};

	/**
	 * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	function deburrLetter(letter) {
	  return deburredLetters[letter];
	}

	module.exports = deburrLetter;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(4),
	    isIterateeCall = __webpack_require__(7);

	/** Used to match words to create compound words. */
	var reWords = (function() {
	  var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	      lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	}());

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  if (guard && isIterateeCall(string, pattern, guard)) {
	    pattern = undefined;
	  }
	  string = baseToString(string);
	  return string.match(pattern || reWords) || [];
	}

	module.exports = words;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(8),
	    isIndex = __webpack_require__(12),
	    isObject = __webpack_require__(13);

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(9),
	    isLength = __webpack_require__(11);

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(10);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 11 */
/***/ function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 12 */
/***/ function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 13 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "index.html"

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(16);


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(18);
	var ReactChildren = __webpack_require__(22);
	var ReactComponent = __webpack_require__(36);
	var ReactClass = __webpack_require__(51);
	var ReactContext = __webpack_require__(26);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactElement = __webpack_require__(25);
	var ReactElementValidator = __webpack_require__(44);
	var ReactDOM = __webpack_require__(54);
	var ReactDOMTextComponent = __webpack_require__(56);
	var ReactDefaultInjection = __webpack_require__(105);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMount = __webpack_require__(81);
	var ReactPerf = __webpack_require__(40);
	var ReactPropTypes = __webpack_require__(136);
	var ReactReconciler = __webpack_require__(41);
	var ReactServerRendering = __webpack_require__(168);

	var assign = __webpack_require__(27);
	var findDOMNode = __webpack_require__(125);
	var onlyChild = __webpack_require__(170);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(65);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 17 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);

	var invariant = __webpack_require__(21);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(20);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);
	var ReactFragment = __webpack_require__(24);

	var traverseAllChildren = __webpack_require__(32);
	var warning = __webpack_require__(29);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(25);

	var warning = __webpack_require__(29);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(26);
	var ReactCurrentOwner = __webpack_require__(31);

	var assign = __webpack_require__(27);
	var warning = __webpack_require__(29);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(27);
	var emptyObject = __webpack_require__(28);
	var warning = __webpack_require__(29);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 27 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(30);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactFragment = __webpack_require__(24);
	var ReactInstanceHandles = __webpack_require__(34);

	var getIteratorFn = __webpack_require__(33);
	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 33 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(35);

	var invariant = __webpack_require__(21);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(37);

	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(49);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactElement = __webpack_require__(25);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(38);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(39);
	var PooledClass = __webpack_require__(23);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactPerf = __webpack_require__(40);
	var ReactReconciler = __webpack_require__(41);
	var Transaction = __webpack_require__(48);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(44);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(43);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactFragment = __webpack_require__(24);
	var ReactPropTypeLocations = __webpack_require__(45);
	var ReactPropTypeLocationNames = __webpack_require__(46);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactNativeComponent = __webpack_require__(47);

	var getIteratorFn = __webpack_require__(33);
	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(20);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(36);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactElement = __webpack_require__(25);
	var ReactErrorUtils = __webpack_require__(52);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactLifeCycle = __webpack_require__(49);
	var ReactPropTypeLocations = __webpack_require__(45);
	var ReactPropTypeLocationNames = __webpack_require__(46);
	var ReactUpdateQueue = __webpack_require__(37);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);
	var keyMirror = __webpack_require__(20);
	var keyOf = __webpack_require__(53);
	var warning = __webpack_require__(29);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactElementValidator = __webpack_require__(44);

	var mapObject = __webpack_require__(55);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 55 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(57);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(61);
	var ReactDOMComponent = __webpack_require__(101);

	var assign = __webpack_require__(27);
	var escapeTextContentForBrowser = __webpack_require__(60);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);

	var quoteAttributeValueForBrowser = __webpack_require__(59);
	var warning = __webpack_require__(29);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(21);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(60);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(62);
	var ReactMount = __webpack_require__(81);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(63);
	var DOMChildrenOperations = __webpack_require__(72);
	var DOMPropertyOperations = __webpack_require__(57);
	var ReactMount = __webpack_require__(81);
	var ReactPerf = __webpack_require__(40);

	var invariant = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(80);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(64);
	var ExecutionEnvironment = __webpack_require__(65);

	var camelizeStyleName = __webpack_require__(66);
	var dangerousStyleValue = __webpack_require__(68);
	var hyphenateStyleName = __webpack_require__(69);
	var memoizeStringOnly = __webpack_require__(71);
	var warning = __webpack_require__(29);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(67);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(64);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(70);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 70 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(73);
	var ReactMultiChildUpdateTypes = __webpack_require__(78);

	var setTextContent = __webpack_require__(79);
	var invariant = __webpack_require__(21);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);

	var createNodesFromMarkup = __webpack_require__(74);
	var emptyFunction = __webpack_require__(30);
	var getMarkupWrap = __webpack_require__(77);
	var invariant = __webpack_require__(21);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(65);

	var createArrayFromMixed = __webpack_require__(75);
	var getMarkupWrap = __webpack_require__(77);
	var invariant = __webpack_require__(21);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(76);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(21);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(65);

	var invariant = __webpack_require__(21);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(20);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);
	var escapeTextContentForBrowser = __webpack_require__(60);
	var setInnerHTML = __webpack_require__(80);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var ReactBrowserEventEmitter = __webpack_require__(82);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactElement = __webpack_require__(25);
	var ReactElementValidator = __webpack_require__(44);
	var ReactEmptyComponent = __webpack_require__(90);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMarkupChecksum = __webpack_require__(91);
	var ReactPerf = __webpack_require__(40);
	var ReactReconciler = __webpack_require__(41);
	var ReactUpdateQueue = __webpack_require__(37);
	var ReactUpdates = __webpack_require__(38);

	var emptyObject = __webpack_require__(28);
	var containsNode = __webpack_require__(93);
	var getReactRootElementInContainer = __webpack_require__(96);
	var instantiateReactComponent = __webpack_require__(97);
	var invariant = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(80);
	var shouldUpdateReactComponent = __webpack_require__(100);
	var warning = __webpack_require__(29);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(83);
	var EventPluginRegistry = __webpack_require__(84);
	var ReactEventEmitterMixin = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(88);

	var assign = __webpack_require__(27);
	var isEventSupported = __webpack_require__(89);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(84);
	var EventPluginUtils = __webpack_require__(18);

	var accumulateInto = __webpack_require__(85);
	var forEachAccumulated = __webpack_require__(86);
	var invariant = __webpack_require__(21);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(83);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactInstanceMap = __webpack_require__(50);

	var invariant = __webpack_require__(21);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(92);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 92 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(94);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(95);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(98);
	var ReactEmptyComponent = __webpack_require__(90);
	var ReactNativeComponent = __webpack_require__(47);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(99);
	var ReactContext = __webpack_require__(26);
	var ReactCurrentOwner = __webpack_require__(31);
	var ReactElement = __webpack_require__(25);
	var ReactElementValidator = __webpack_require__(44);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactLifeCycle = __webpack_require__(49);
	var ReactNativeComponent = __webpack_require__(47);
	var ReactPerf = __webpack_require__(40);
	var ReactPropTypeLocations = __webpack_require__(45);
	var ReactPropTypeLocationNames = __webpack_require__(46);
	var ReactReconciler = __webpack_require__(41);
	var ReactUpdates = __webpack_require__(38);

	var assign = __webpack_require__(27);
	var emptyObject = __webpack_require__(28);
	var invariant = __webpack_require__(21);
	var shouldUpdateReactComponent = __webpack_require__(100);
	var warning = __webpack_require__(29);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(21);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(29);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(63);
	var DOMProperty = __webpack_require__(58);
	var DOMPropertyOperations = __webpack_require__(57);
	var ReactBrowserEventEmitter = __webpack_require__(82);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(61);
	var ReactMount = __webpack_require__(81);
	var ReactMultiChild = __webpack_require__(102);
	var ReactPerf = __webpack_require__(40);

	var assign = __webpack_require__(27);
	var escapeTextContentForBrowser = __webpack_require__(60);
	var invariant = __webpack_require__(21);
	var isEventSupported = __webpack_require__(89);
	var keyOf = __webpack_require__(53);
	var warning = __webpack_require__(29);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(99);
	var ReactMultiChildUpdateTypes = __webpack_require__(78);

	var ReactReconciler = __webpack_require__(41);
	var ReactChildReconciler = __webpack_require__(103);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(41);

	var flattenChildren = __webpack_require__(104);
	var instantiateReactComponent = __webpack_require__(97);
	var shouldUpdateReactComponent = __webpack_require__(100);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(32);
	var warning = __webpack_require__(29);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(106);
	var ChangeEventPlugin = __webpack_require__(114);
	var ClientReactRootIndex = __webpack_require__(116);
	var DefaultEventPluginOrder = __webpack_require__(117);
	var EnterLeaveEventPlugin = __webpack_require__(118);
	var ExecutionEnvironment = __webpack_require__(65);
	var HTMLDOMPropertyConfig = __webpack_require__(122);
	var MobileSafariClickEventPlugin = __webpack_require__(123);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(61);
	var ReactDefaultBatchingStrategy = __webpack_require__(126);
	var ReactDOMComponent = __webpack_require__(101);
	var ReactDOMButton = __webpack_require__(127);
	var ReactDOMForm = __webpack_require__(130);
	var ReactDOMImg = __webpack_require__(132);
	var ReactDOMIDOperations = __webpack_require__(62);
	var ReactDOMIframe = __webpack_require__(133);
	var ReactDOMInput = __webpack_require__(134);
	var ReactDOMOption = __webpack_require__(137);
	var ReactDOMSelect = __webpack_require__(138);
	var ReactDOMTextarea = __webpack_require__(139);
	var ReactDOMTextComponent = __webpack_require__(56);
	var ReactElement = __webpack_require__(25);
	var ReactEventListener = __webpack_require__(140);
	var ReactInjection = __webpack_require__(143);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMount = __webpack_require__(81);
	var ReactReconcileTransaction = __webpack_require__(144);
	var SelectEventPlugin = __webpack_require__(150);
	var ServerReactRootIndex = __webpack_require__(152);
	var SimpleEventPlugin = __webpack_require__(153);
	var SVGDOMPropertyConfig = __webpack_require__(162);

	var createFullPageComponent = __webpack_require__(163);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(164);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPropagators = __webpack_require__(107);
	var ExecutionEnvironment = __webpack_require__(65);
	var FallbackCompositionState = __webpack_require__(108);
	var SyntheticCompositionEvent = __webpack_require__(110);
	var SyntheticInputEvent = __webpack_require__(113);

	var keyOf = __webpack_require__(53);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(83);

	var accumulateInto = __webpack_require__(85);
	var forEachAccumulated = __webpack_require__(86);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);

	var assign = __webpack_require__(27);
	var getTextContentAccessor = __webpack_require__(109);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);

	var assign = __webpack_require__(27);
	var emptyFunction = __webpack_require__(30);
	var getEventTarget = __webpack_require__(112);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 112 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(83);
	var EventPropagators = __webpack_require__(107);
	var ExecutionEnvironment = __webpack_require__(65);
	var ReactUpdates = __webpack_require__(38);
	var SyntheticEvent = __webpack_require__(111);

	var isEventSupported = __webpack_require__(89);
	var isTextInputElement = __webpack_require__(115);
	var keyOf = __webpack_require__(53);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 115 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(53);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPropagators = __webpack_require__(107);
	var SyntheticMouseEvent = __webpack_require__(119);

	var ReactMount = __webpack_require__(81);
	var keyOf = __webpack_require__(53);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(120);
	var ViewportMetrics = __webpack_require__(88);

	var getEventModifierState = __webpack_require__(121);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	var getEventTarget = __webpack_require__(112);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 121 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var ExecutionEnvironment = __webpack_require__(65);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);

	var emptyFunction = __webpack_require__(30);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(125);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(31);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMount = __webpack_require__(81);

	var invariant = __webpack_require__(21);
	var isNode = __webpack_require__(95);
	var warning = __webpack_require__(29);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(38);
	var Transaction = __webpack_require__(48);

	var assign = __webpack_require__(27);
	var emptyFunction = __webpack_require__(30);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(128);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);

	var keyMirror = __webpack_require__(20);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(129);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var LocalEventTrapMixin = __webpack_require__(131);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(82);

	var accumulateInto = __webpack_require__(85);
	var forEachAccumulated = __webpack_require__(86);
	var invariant = __webpack_require__(21);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var LocalEventTrapMixin = __webpack_require__(131);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var LocalEventTrapMixin = __webpack_require__(131);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(128);
	var DOMPropertyOperations = __webpack_require__(57);
	var LinkedValueUtils = __webpack_require__(135);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);
	var ReactMount = __webpack_require__(81);
	var ReactUpdates = __webpack_require__(38);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(136);

	var invariant = __webpack_require__(21);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactFragment = __webpack_require__(24);
	var ReactPropTypeLocationNames = __webpack_require__(46);

	var emptyFunction = __webpack_require__(30);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);

	var warning = __webpack_require__(29);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(128);
	var LinkedValueUtils = __webpack_require__(135);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);
	var ReactUpdates = __webpack_require__(38);

	var assign = __webpack_require__(27);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(128);
	var DOMPropertyOperations = __webpack_require__(57);
	var LinkedValueUtils = __webpack_require__(135);
	var ReactBrowserComponentMixin = __webpack_require__(124);
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);
	var ReactUpdates = __webpack_require__(38);

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);

	var warning = __webpack_require__(29);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(141);
	var ExecutionEnvironment = __webpack_require__(65);
	var PooledClass = __webpack_require__(23);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMount = __webpack_require__(81);
	var ReactUpdates = __webpack_require__(38);

	var assign = __webpack_require__(27);
	var getEventTarget = __webpack_require__(112);
	var getUnboundedScrollPosition = __webpack_require__(142);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(30);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var EventPluginHub = __webpack_require__(83);
	var ReactComponentEnvironment = __webpack_require__(99);
	var ReactClass = __webpack_require__(51);
	var ReactEmptyComponent = __webpack_require__(90);
	var ReactBrowserEventEmitter = __webpack_require__(82);
	var ReactNativeComponent = __webpack_require__(47);
	var ReactDOMComponent = __webpack_require__(101);
	var ReactPerf = __webpack_require__(40);
	var ReactRootIndex = __webpack_require__(35);
	var ReactUpdates = __webpack_require__(38);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(39);
	var PooledClass = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(82);
	var ReactInputSelection = __webpack_require__(145);
	var ReactPutListenerQueue = __webpack_require__(149);
	var Transaction = __webpack_require__(48);

	var assign = __webpack_require__(27);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(146);

	var containsNode = __webpack_require__(93);
	var focusNode = __webpack_require__(129);
	var getActiveElement = __webpack_require__(148);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);

	var getNodeForCharacterOffset = __webpack_require__(147);
	var getTextContentAccessor = __webpack_require__(109);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(82);

	var assign = __webpack_require__(27);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPropagators = __webpack_require__(107);
	var ReactInputSelection = __webpack_require__(145);
	var SyntheticEvent = __webpack_require__(111);

	var getActiveElement = __webpack_require__(148);
	var isTextInputElement = __webpack_require__(115);
	var keyOf = __webpack_require__(53);
	var shallowEqual = __webpack_require__(151);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 151 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 152 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginUtils = __webpack_require__(18);
	var EventPropagators = __webpack_require__(107);
	var SyntheticClipboardEvent = __webpack_require__(155);
	var SyntheticEvent = __webpack_require__(111);
	var SyntheticFocusEvent = __webpack_require__(156);
	var SyntheticKeyboardEvent = __webpack_require__(157);
	var SyntheticMouseEvent = __webpack_require__(119);
	var SyntheticDragEvent = __webpack_require__(154);
	var SyntheticTouchEvent = __webpack_require__(160);
	var SyntheticUIEvent = __webpack_require__(120);
	var SyntheticWheelEvent = __webpack_require__(161);

	var getEventCharCode = __webpack_require__(158);

	var invariant = __webpack_require__(21);
	var keyOf = __webpack_require__(53);
	var warning = __webpack_require__(29);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(119);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(111);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(120);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(120);

	var getEventCharCode = __webpack_require__(158);
	var getEventKey = __webpack_require__(159);
	var getEventModifierState = __webpack_require__(121);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(158);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(120);

	var getEventModifierState = __webpack_require__(121);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(119);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(58);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(51);
	var ReactElement = __webpack_require__(25);

	var invariant = __webpack_require__(21);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(58);
	var ReactDefaultPerfAnalysis = __webpack_require__(165);
	var ReactMount = __webpack_require__(81);
	var ReactPerf = __webpack_require__(40);

	var performanceNow = __webpack_require__(166);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(27);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(167);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(65);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMarkupChecksum = __webpack_require__(91);
	var ReactServerRenderingTransaction =
	  __webpack_require__(169);

	var emptyObject = __webpack_require__(28);
	var instantiateReactComponent = __webpack_require__(97);
	var invariant = __webpack_require__(21);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);
	var CallbackQueue = __webpack_require__(39);
	var ReactPutListenerQueue = __webpack_require__(149);
	var Transaction = __webpack_require__(48);

	var assign = __webpack_require__(27);
	var emptyFunction = __webpack_require__(30);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(25);

	var invariant = __webpack_require__(21);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	module.exports = global.Matter = {
	  getTheme: __webpack_require__(172),
	  createTheme: __webpack_require__(174),
	  defaultTheme: __webpack_require__(173),

	  ClickAway: __webpack_require__(252),
	  ContextMenu: __webpack_require__(253),

	  // Accordion: require('./components/accordion/Accordion'),
	  // AccordionTab: require('./components/accordion/AccordionTab'),
	  Button: __webpack_require__(295),
	  Checkbox: __webpack_require__(297),
	  // ColorInput: require('./components/ColorInput'),
	  Dropdown: __webpack_require__(298),
	  // DropdownMenu: require('./components/DropdownMenu'),
	  Icon: __webpack_require__(296),
	  Input: __webpack_require__(321),
	  ItemGroup: __webpack_require__(330),
	  Label: __webpack_require__(320),
	  List: __webpack_require__(254),
	  ListItem: __webpack_require__(268),
	  MultiTypeInput: __webpack_require__(331),
	  Panel: __webpack_require__(294),
	  Scrollable: __webpack_require__(334),
	  // Slider: require('./components/Slider'),
	  Tabs: __webpack_require__(339),
	  Toggle: __webpack_require__(342),
	  Toolbar: __webpack_require__(343),
	  ToolbarGroup: __webpack_require__(344)
	};
	// Tooltip: require('./components/Tooltip'),
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = getTheme;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _defaultTheme = __webpack_require__(173);

	var _defaultTheme2 = _interopRequireDefault(_defaultTheme);

	function getTheme(component) {
	  return component && component.context.matterkitTheme || _defaultTheme2['default'].get();
	}

	module.exports = exports['default'];

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _createTheme = __webpack_require__(174);

	var _createTheme2 = _interopRequireDefault(_createTheme);

	var defaultTheme = (0, _createTheme2['default'])();

	exports['default'] = {
	  set: function set(nextTheme) {
	    return defaultTheme = nextTheme;
	  },
	  get: function get() {
	    return defaultTheme;
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = createTheme;

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _reactTheme = __webpack_require__(175);

	var _reactTheme2 = _interopRequireDefault(_reactTheme);

	var _lodashObjectForOwn = __webpack_require__(205);

	var _lodashObjectForOwn2 = _interopRequireDefault(_lodashObjectForOwn);

	var _sourceList = __webpack_require__(214);

	var sourceList = _interopRequireWildcard(_sourceList);

	function createTheme() {
	  var theme = new _reactTheme2['default']();

	  (0, _lodashObjectForOwn2['default'])(sourceList, function (styleSrc, name) {
	    theme.setSource(name, styleSrc);
	  });

	  return theme;
	}

	module.exports = exports['default'];

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _lodashObjectMerge = __webpack_require__(176);

	var _lodashObjectMerge2 = _interopRequireDefault(_lodashObjectMerge);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _lodashObjectForOwn = __webpack_require__(205);

	var _lodashObjectForOwn2 = _interopRequireDefault(_lodashObjectForOwn);

	var _lodashLangCloneDeep = __webpack_require__(208);

	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);

	var ReactTheme = (function () {
	  function ReactTheme(sources) {
	    var _this = this;

	    _classCallCheck(this, ReactTheme);

	    this.get = function (name, mod, additionalStyle) {
	      console.warn('theme.get() is renamed to theme.getStyle()');
	      return _this.getStyle(name, mod, additionalStyle);
	    };

	    this._sources = sources || {};
	  }

	  _createClass(ReactTheme, [{
	    key: 'clone',
	    value: function clone() {
	      return new ReactTheme((0, _lodashLangCloneDeep2['default'])(this._sources));
	    }
	  }, {
	    key: 'setSource',
	    value: function setSource(name, source) {
	      this._sources[name] = source;
	    }
	  }, {
	    key: 'extendSource',
	    value: function extendSource(name, source) {
	      var originalSource = this._sources[name];

	      if (originalSource) {
	        this.setSource(name, function () {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }

	          var extension = source.apply(undefined, args);
	          var original = originalSource.apply(undefined, args);

	          return (0, _lodashObjectMerge2['default'])(original, extension);
	        });
	      } else {
	        this.setSource(name, source);
	      }
	    }
	  }, {
	    key: 'getStyle',
	    value: function getStyle(name, mod, additionalStyle) {
	      var _this2 = this;

	      var styleSrc = this._sources[name];

	      if (!styleSrc) {
	        throw Error('Can\'t find style source for "' + name + '"');
	      }

	      styleSrc = styleSrc(this, mod);

	      if (typeof styleSrc !== 'object') {
	        throw Error('style source "' + name + '" returned "' + styleSrc + '" instead an object!');
	      }

	      if (styleSrc.mixins) {
	        (function () {
	          var mixin = {};

	          styleSrc.mixins.slice().forEach(function (mixinName) {

	            (0, _lodashObjectMerge2['default'])(mixin, _this2.getStyle(mixinName, mod));
	          });

	          delete styleSrc.mixins;
	          styleSrc = (0, _lodashObjectMerge2['default'])(mixin, styleSrc);
	        })();
	      }

	      var ret = this.resolveMod(styleSrc, mod);

	      var postProcessor = this.getPostProcessor();
	      if (postProcessor) {
	        ret = postProcessor(ret);
	      }

	      return (0, _lodashObjectAssign2['default'])(ret, additionalStyle);
	    }
	  }, {
	    key: 'resolveMod',
	    value: function resolveMod(styleSrc, mod) {
	      var _this3 = this;

	      (0, _lodashObjectForOwn2['default'])(mod, function (value, key) {
	        if (styleSrc[key]) {
	          var modStyleSrc = styleSrc[key];

	          if (typeof value === 'boolean') {
	            if (value) {
	              var modStyle = _this3.resolveMod(modStyleSrc, mod);
	              (0, _lodashObjectAssign2['default'])(styleSrc, modStyle);
	            }
	          } else if (typeof value === 'string') {
	            if (modStyleSrc[value]) {
	              var modStyle = _this3.resolveMod(modStyleSrc[value], mod);
	              (0, _lodashObjectAssign2['default'])(styleSrc, modStyle);
	            }
	          }
	        }
	      });

	      return styleSrc;
	    }
	  }, {
	    key: 'setPostProcessor',
	    value: function setPostProcessor(processor) {
	      this._postProcessor = processor;
	    }
	  }, {
	    key: 'getPostProcessor',
	    value: function getPostProcessor() {
	      return this._postProcessor;
	    }
	  }]);

	  return ReactTheme;
	})();

	exports['default'] = ReactTheme;
	module.exports = exports['default'];
	//# sourceMappingURL=react-theme.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(177),
	    createAssigner = __webpack_require__(198);

	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it is invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);

	module.exports = merge;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(178),
	    baseMergeDeep = __webpack_require__(179),
	    isArray = __webpack_require__(183),
	    isArrayLike = __webpack_require__(8),
	    isObject = __webpack_require__(13),
	    isObjectLike = __webpack_require__(182),
	    isTypedArray = __webpack_require__(193),
	    keys = __webpack_require__(196);

	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);

	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}

	module.exports = baseMerge;


/***/ },
/* 178 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(180),
	    isArguments = __webpack_require__(181),
	    isArray = __webpack_require__(183),
	    isArrayLike = __webpack_require__(8),
	    isPlainObject = __webpack_require__(187),
	    isTypedArray = __webpack_require__(193),
	    toPlainObject = __webpack_require__(194);

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];

	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;

	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}

	module.exports = baseMergeDeep;


/***/ },
/* 180 */
/***/ function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = arrayCopy;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(8),
	    isObjectLike = __webpack_require__(182);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;


/***/ },
/* 182 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(184),
	    isLength = __webpack_require__(11),
	    isObjectLike = __webpack_require__(182);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(185);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(186),
	    isObjectLike = __webpack_require__(182);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isNative;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(188),
	    isArguments = __webpack_require__(181),
	    isObjectLike = __webpack_require__(182);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;

	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}

	module.exports = isPlainObject;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(189),
	    keysIn = __webpack_require__(192);

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(190);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(191);

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(181),
	    isArray = __webpack_require__(183),
	    isIndex = __webpack_require__(12),
	    isLength = __webpack_require__(11),
	    isObject = __webpack_require__(13);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(11),
	    isObjectLike = __webpack_require__(182);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var baseCopy = __webpack_require__(195),
	    keysIn = __webpack_require__(192);

	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}

	module.exports = toPlainObject;


/***/ },
/* 195 */
/***/ function(module, exports) {

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(184),
	    isArrayLike = __webpack_require__(8),
	    isObject = __webpack_require__(13),
	    shimKeys = __webpack_require__(197);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(181),
	    isArray = __webpack_require__(183),
	    isIndex = __webpack_require__(12),
	    isLength = __webpack_require__(11),
	    keysIn = __webpack_require__(192);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var bindCallback = __webpack_require__(199),
	    isIterateeCall = __webpack_require__(7),
	    restParam = __webpack_require__(201);

	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(200);

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;


/***/ },
/* 200 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 201 */
/***/ function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var assignWith = __webpack_require__(203),
	    baseAssign = __webpack_require__(204),
	    createAssigner = __webpack_require__(198);

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it is invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});

	module.exports = assign;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(196);

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;

	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);

	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}

	module.exports = assignWith;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var baseCopy = __webpack_require__(195),
	    keys = __webpack_require__(196);

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(206),
	    createForOwn = __webpack_require__(207);

	/**
	 * Iterates over own enumerable properties of an object invoking `iteratee`
	 * for each property. The `iteratee` is bound to `thisArg` and invoked with
	 * three arguments: (value, key, object). Iteratee functions may exit iteration
	 * early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forOwn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => logs 'a' and 'b' (iteration order is not guaranteed)
	 */
	var forOwn = createForOwn(baseForOwn);

	module.exports = forOwn;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(189),
	    keys = __webpack_require__(196);

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var bindCallback = __webpack_require__(199);

	/**
	 * Creates a function for `_.forOwn` or `_.forOwnRight`.
	 *
	 * @private
	 * @param {Function} objectFunc The function to iterate over an object.
	 * @returns {Function} Returns the new each function.
	 */
	function createForOwn(objectFunc) {
	  return function(object, iteratee, thisArg) {
	    if (typeof iteratee != 'function' || thisArg !== undefined) {
	      iteratee = bindCallback(iteratee, thisArg, 3);
	    }
	    return objectFunc(object, iteratee);
	  };
	}

	module.exports = createForOwn;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(209),
	    bindCallback = __webpack_require__(199);

	/**
	 * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	 * to produce the cloned values. If `customizer` returns `undefined` cloning
	 * is handled by the method instead. The `customizer` is bound to `thisArg`
	 * and invoked with two argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the deep cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var deep = _.cloneDeep(users);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.cloneDeep(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 20
	 */
	function cloneDeep(value, customizer, thisArg) {
	  return typeof customizer == 'function'
	    ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	    : baseClone(value, true);
	}

	module.exports = cloneDeep;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(180),
	    arrayEach = __webpack_require__(178),
	    baseAssign = __webpack_require__(204),
	    baseForOwn = __webpack_require__(206),
	    initCloneArray = __webpack_require__(210),
	    initCloneByTag = __webpack_require__(211),
	    initCloneObject = __webpack_require__(213),
	    isArray = __webpack_require__(183),
	    isObject = __webpack_require__(13);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	cloneableTags[dateTag] = cloneableTags[float32Tag] =
	cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[stringTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[mapTag] = cloneableTags[setTag] =
	cloneableTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * The base implementation of `_.clone` without support for argument juggling
	 * and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The object `value` belongs to.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates clones with source counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return arrayCopy(value, result);
	    }
	  } else {
	    var tag = objToString.call(value),
	        isFunc = tag == funcTag;

	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return baseAssign(result, value);
	      }
	    } else {
	      return cloneableTags[tag]
	        ? initCloneByTag(value, tag, isDeep)
	        : (object ? value : {});
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == value) {
	      return stackB[length];
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate it with its clone.
	  stackA.push(value);
	  stackB.push(result);

	  // Recursively populate clone (susceptible to call stack limits).
	  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ },
/* 210 */
/***/ function(module, exports) {

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add array properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var bufferClone = __webpack_require__(212);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return bufferClone(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      var buffer = object.buffer;
	      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      var result = new Ctor(object.source, reFlags.exec(object));
	      result.lastIndex = object.lastIndex;
	  }
	  return result;
	}

	module.exports = initCloneByTag;


/***/ },
/* 212 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Native method references. */
	var ArrayBuffer = global.ArrayBuffer,
	    Uint8Array = global.Uint8Array;

	/**
	 * Creates a clone of the given array buffer.
	 *
	 * @private
	 * @param {ArrayBuffer} buffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function bufferClone(buffer) {
	  var result = new ArrayBuffer(buffer.byteLength),
	      view = new Uint8Array(result);

	  view.set(new Uint8Array(buffer));
	  return result;
	}

	module.exports = bufferClone;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 213 */
/***/ function(module, exports) {

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  var Ctor = object.constructor;
	  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	    Ctor = Object;
	  }
	  return new Ctor;
	}

	module.exports = initCloneObject;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _sourcesButtonBaseJs = __webpack_require__(215);

	exports.buttonBase = _interopRequire(_sourcesButtonBaseJs);

	var _sourcesButtonJs = __webpack_require__(216);

	exports.button = _interopRequire(_sourcesButtonJs);

	var _sourcesCheckboxJs = __webpack_require__(217);

	exports.checkbox = _interopRequire(_sourcesCheckboxJs);

	var _sourcesColorsJs = __webpack_require__(218);

	exports.colors = _interopRequire(_sourcesColorsJs);

	var _sourcesConfigJs = __webpack_require__(219);

	exports.config = _interopRequire(_sourcesConfigJs);

	var _sourcesDropdownJs = __webpack_require__(220);

	exports.dropdown = _interopRequire(_sourcesDropdownJs);

	var _sourcesFontJs = __webpack_require__(221);

	exports.font = _interopRequire(_sourcesFontJs);

	var _sourcesIconJs = __webpack_require__(222);

	exports.icon = _interopRequire(_sourcesIconJs);

	var _sourcesInputAddonJs = __webpack_require__(223);

	exports.inputAddon = _interopRequire(_sourcesInputAddonJs);

	var _sourcesInputBorderJs = __webpack_require__(224);

	exports.inputBorder = _interopRequire(_sourcesInputBorderJs);

	var _sourcesInputFieldJs = __webpack_require__(225);

	exports.inputField = _interopRequire(_sourcesInputFieldJs);

	var _sourcesInputJs = __webpack_require__(226);

	exports.input = _interopRequire(_sourcesInputJs);

	var _sourcesInputResetCssJs = __webpack_require__(227);

	exports.inputResetCss = _interopRequire(_sourcesInputResetCssJs);

	var _sourcesItemGroupChildJs = __webpack_require__(228);

	exports.itemGroupChild = _interopRequire(_sourcesItemGroupChildJs);

	var _sourcesLabelJs = __webpack_require__(229);

	exports.label = _interopRequire(_sourcesLabelJs);

	var _sourcesListItemJs = __webpack_require__(230);

	exports.listItem = _interopRequire(_sourcesListItemJs);

	var _sourcesListJs = __webpack_require__(231);

	exports.list = _interopRequire(_sourcesListJs);

	var _sourcesPanelJs = __webpack_require__(232);

	exports.panel = _interopRequire(_sourcesPanelJs);

	var _sourcesRoundedCornersJs = __webpack_require__(233);

	exports.roundedCorners = _interopRequire(_sourcesRoundedCornersJs);

	var _sourcesScrollbarJs = __webpack_require__(234);

	exports.scrollbar = _interopRequire(_sourcesScrollbarJs);

	var _sourcesScrollbarThumbJs = __webpack_require__(235);

	exports.scrollbarThumb = _interopRequire(_sourcesScrollbarThumbJs);

	var _sourcesTabBaseJs = __webpack_require__(236);

	exports.tabBase = _interopRequire(_sourcesTabBaseJs);

	var _sourcesTabContJs = __webpack_require__(237);

	exports.tabCont = _interopRequire(_sourcesTabContJs);

	var _sourcesTabHeaderJs = __webpack_require__(238);

	exports.tabHeader = _interopRequire(_sourcesTabHeaderJs);

	var _sourcesTabLabelJs = __webpack_require__(239);

	exports.tabLabel = _interopRequire(_sourcesTabLabelJs);

	var _sourcesToggleBaseJs = __webpack_require__(240);

	exports.toggleBase = _interopRequire(_sourcesToggleBaseJs);

	var _sourcesToggleConfigJs = __webpack_require__(241);

	exports.toggleConfig = _interopRequire(_sourcesToggleConfigJs);

	var _sourcesToggleKnobJs = __webpack_require__(242);

	exports.toggleKnob = _interopRequire(_sourcesToggleKnobJs);

	var _sourcesToggleSideJs = __webpack_require__(243);

	exports.toggleSide = _interopRequire(_sourcesToggleSideJs);

	var _sourcesToolbarGroupJs = __webpack_require__(244);

	exports.toolbarGroup = _interopRequire(_sourcesToolbarGroupJs);

	var _sourcesToolbarJs = __webpack_require__(245);

	exports.toolbar = _interopRequire(_sourcesToolbarJs);

/***/ },
/* 215 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    backgroundColor: '#363c43',
	    backgroundImage: 'linear-gradient(to top, rgba(255,255,255,0), rgba(255,255,255,.05))',
	    borderStyle: 'solid',
	    borderWidth: '1px',
	    borderColor: 'rgba(26,29,33,.32)',
	    boxShadow: 'inset 0 1px rgba(255,255,255,.01)',

	    ':hover': {
	      boxShadow: 'inset 0 1px rgba(255,255,255,.02)',
	      backgroundColor: '#3b424a'
	    },
	    ':active': {
	      backgroundColor: '#363c43',
	      boxShadow: 'inset 0 -1px rgba(255,255,255,.02)',
	      backgroundImage: 'linear-gradient(to top, rgba(0,0,0,0), rgba(0,0,0,.1))'
	    },
	    disabled: {
	      backgroundColor: '#2c3136',
	      borderStyle: 'solid',
	      borderWidth: '1px',
	      borderColor: 'rgba(26,29,33,.32)'
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 216 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    mixins: ['buttonBase', 'roundedCorners', 'font'],

	    height: config.lineHeight - 2,
	    lineHeight: config.lineHeight - 2 + 'px',
	    boxSizing: 'border-box',
	    display: 'inline-block',
	    textAlign: 'center',
	    color: '#96a6ad',
	    marginTop: 1,
	    marginLeft: 3,
	    marginBottom: 1,
	    marginRight: 3,
	    paddingLeft: 8,
	    paddingRight: 8,
	    onlyIcon: {
	      paddingLeft: 2,
	      paddingRight: 2
	    },
	    ':hover': {
	      color: '#e2e7eb'
	    },
	    ':active': {
	      color: '#6bb6c4'
	    },
	    disabled: {
	      color: 'rgba(150,166,173,.2)'
	    },
	    kind: {
	      colored: {
	        color: '#191c1f',
	        borderStyle: 'solid',
	        borderWidth: '1px',
	        borderColor: 'rgba(26,29,33,.75)',
	        // boxShadow: 'inset 0 1px rgba(255,255,255,.02)',
	        backgroundColor: '#262a2e',
	        backgroundImage: 'linear-gradient(135deg, rgba(107,182,196,.75) 0%,rgba(107,154,211,.75) 100%)',

	        ':hover': {
	          backgroundImage: 'linear-gradient(135deg, rgba(107,182,196,1) 0%,rgba(107,154,211,1) 100%)'
	        },
	        disabled: {
	          color: 'rgba(23,28,31,.7)',
	          backgroundImage: 'linear-gradient(135deg, rgba(107,182,196,.32) 0%,rgba(107,154,211,.32) 100%)'
	        }
	      },
	      stamp: {
	        backgroundImage: 'none',
	        backgroundColor: 'transparent',
	        borderStyle: 'none',
	        boxShadow: 'none',
	        ':hover': { backgroundImage: 'none', backgroundColor: 'none' },
	        ':active': { backgroundImage: 'none', backgroundColor: 'none' },
	        disabled: { backgroundImage: 'none', backgroundColor: 'none' }
	      }
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 217 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var colors = theme.getStyle('colors', mod);

	  return {
	    position: 'relative',
	    width: 18,
	    height: 18,
	    marginTop: (config.lineHeight - 18) / 2,
	    marginBottom: (config.lineHeight - 18) / 2,
	    marginLeft: 3,
	    marginRight: 3,
	    backgroundColor: colors.grey4,
	    backgroundPosition: '1px 1px',
	    backgroundRepeat: 'no-repeat'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 218 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    purple: '#8091c6',
	    blue: '#6bb6c4',
	    right: '#43aa81',
	    wrong: '#b64d65',
	    grey1: '#e2e7eb',
	    grey2: '#96a6ad',
	    grey3: '#3b424a',
	    grey4: '#1a1d21',
	    bg: '#262A2E'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 219 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var colors = theme.getStyle('colors', mod);

	  return {
	    palette: colors,

	    lineHeight: 25,
	    borderRadius: 3,

	    anim: '0.23s cubic-bezier(0.445, 0.050, 0.550, 0.950)',

	    gardient: (function () {
	      var start = '#6bb6c4';
	      var end = '#6b9ad3';

	      return {
	        start: start,
	        end: end,
	        normal: 'linear-gradient(135deg, ' + start + ' 0%, ' + end + ' 100%)',
	        backward: 'linear-gradient(-45deg, ' + start + ' 0%, ' + end + ' 100%)'
	      };
	    })(),

	    fontFamily: 'Open Sans',
	    fontWeight: '300',

	    grey: {
	      normal: '#282c30',
	      hover: '#2a3035',
	      active: '#2c3034'
	    },

	    fontColor: {
	      normal: colors.grey2,
	      hover: colors.grey1,
	      active: colors.blue
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 220 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    mixins: ['font', 'roundedCorners'],

	    display: 'inline-block',
	    height: config.lineHeight - 2,
	    lineHeight: config.lineHeight - 2 + 'px',
	    backgroundColor: '#363c43',
	    boxShadow: 'inset 0 1px rgba(255,255,255,.02)',
	    borderStyle: 'solid',
	    borderWidth: '1px',
	    borderColor: 'rgba(26,29,33,.75)',
	    backgroundImage: 'linear-gradient(to top, rgba(255,255,255,0), rgba(255,255,255,.05))',
	    overflow: 'hidden',
	    boxSizing: 'border-box',
	    marginTop: 1,
	    marginLeft: 0,
	    marginBottom: 1,
	    marginRight: 0,

	    ':hover': {
	      color: '#e2e7eb',
	      backgroundColor: '#3b424a'
	    },
	    open: {
	      zIndex: 1,
	      height: 'auto',
	      position: 'relative',
	      color: '#6bb6c4',
	      backgroundColor: '#3b424a',
	      backgroundImage: 'linear-gradient(to top, rgba(0,0,0,0), rgba(0,0,0,.1))'
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 221 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    fontFamily: config.fontFamily,
	    fontWeight: config.fontWeight,
	    fontSize: '12.9px',
	    color: config.fontColor.normal
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    lineHeight: config.lineHeight + 'px',
	    width: '12px',
	    textAlign: 'center'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 223 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    userSelect: 'none',
	    height: '100%',
	    right: 0,
	    paddingTop: 0,
	    paddingBottom: 0,
	    paddingLeft: 5,
	    paddingRight: 5,
	    backgroundColor: config.grey.normal,
	    borderTopRightRadius: config.borderRadius,
	    borderBottomRightRadius: config.borderRadius,
	    fontWeight: 'bold',

	    ':hover': {
	      color: '#e2e7eb',
	      backgroundColor: config.grey.hover
	    },
	    ':active': {
	      color: '#6bb6c4',
	      backgroundColor: config.grey.active
	    },
	    disabled: {
	      color: '#96a6ad'
	    },
	    addonBackground: {
	      transparent: {
	        backgroundColor: 'none',
	        ':hover': { backgroundColor: 'none' },
	        ':active': { backgroundColor: 'none' }
	      }
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 224 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var colors = theme.getStyle('colors', mod);

	  return {
	    borderStyle: 'solid',
	    borderWidth: '1px',
	    borderColor: 'transparent',

	    ':hover': {
	      borderColor: 'rgba(68,79,88,.5)'
	    },
	    ':focus': {
	      boxShadow: '0 0 3px rgba(86,83,136,.6), inset 0 0 4px rgba(86,83,136,.6)',
	      borderColor: 'rgba(93,169,167,1)'
	    },
	    ':active': {
	      boxShadow: '0 0 3px rgba(86,83,136,.6), inset 0 0 4px rgba(86,83,136,.6)',
	      borderColor: 'rgba(93,169,167,1)'
	    },
	    disabled: {
	      backgroundColor: 'rgba(26,29,33,.6)'
	    },
	    error: {
	      borderColor: colors.wrong
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    mixins: ['inputResetCss'],

	    flex: 1,

	    draggable: {
	      cursor: 'ew-resize'
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 226 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var colors = theme.getStyle('colors', mod);

	  return {
	    mixins: ['roundedCorners', 'inputBorder', 'font'],

	    display: 'flex',
	    position: 'relative',
	    alignItems: 'stretch',
	    color: '#96a6ad',
	    backgroundColor: colors.grey4,
	    paddingTop: '0',
	    paddingLeft: '2px',
	    paddingBottom: '0',
	    paddingRight: '0',
	    height: config.lineHeight,
	    lineHeight: config.lineHeight + 'px',
	    // marginTop: 1,
	    // marginBottom: 3,
	    marginLeft: 3,
	    marginRight: 3,
	    boxSizing: 'border-box',

	    ':hover': {
	      color: '#e2e7eb'
	    },
	    ':focus': {
	      color: '#6bb6c4'
	    },
	    ':active': {
	      color: '#6bb6c4'
	    },
	    disabled: {
	      color: '#96a6ad'
	    },
	    kind: {
	      stamp: {
	        backgroundColor: 'none',
	        ':hover': { backgroundColor: 'none' },
	        ':active': { backgroundColor: 'none' },
	        ':focus': { backgroundColor: 'none' },
	        disabled: { backgroundColor: 'none' }
	      }
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 227 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    fontSize: 'inherit',
	    fontFamily: 'inherit',
	    color: 'inherit',
	    lineHeight: 'inherit',
	    outline: 'none',
	    backgroundColor: 'transparent',
	    borderStyle: 'none'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 228 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    borderTopLeftRadius: 0,
	    borderBottomLeftRadius: 0,
	    marginLeft: 0,
	    borderLeft: 'none',
	    last: {
	      borderTopRightRadius: 0,
	      borderBottomRightRadius: 0,
	      marginRight: 0
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    mixins: ['font'],
	    lineHeight: config.lineHeight + 'px',
	    overflow: 'hidden',
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 230 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    height: config.lineHeight,
	    lineHeight: config.lineHeight + 'px',
	    paddingTop: 0,
	    paddingBottom: 0,
	    paddingLeft: 8,
	    paddingRight: 8,
	    color: config.fontColor.normal,
	    overflow: 'hidden',
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',

	    ':hover': {
	      color: config.fontColor.hover,
	      backgroundColor: 'rgba(226,231,235,.05)'
	    },

	    selected: {
	      color: config.fontColor.active
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 231 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    borderColor: '#1a1d21'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 232 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var colors = theme.getStyle('colors', mod);

	  return {
	    mixins: ['font'],
	    backgroundColor: config.grey.active,
	    borderStyle: 'solid',
	    borderWidth: '1px',
	    borderColor: colors.grey4
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var borderRadius = config.borderRadius;

	  return {
	    borderTopLeftRadius: borderRadius,
	    borderTopRightRadius: borderRadius,
	    borderBottomLeftRadius: borderRadius,
	    borderBottomRightRadius: borderRadius,
	    fontWeight: '400'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var colors = theme.getStyle('colors', mod);

	  return {
	    position: 'absolute',
	    width: 8,
	    height: '100%',
	    right: 0,
	    top: 0,
	    backgroundColor: 'transparent'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var colors = theme.getStyle('colors', mod);

	  return {
	    position: 'absolute',
	    width: 8,
	    backgroundColor: colors.grey2
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function () {

	  return {
	    display: 'flex',
	    flexDirection: 'column'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  return {
	    mixins: ['panel'],

	    borderTopLeftRadius: 0,
	    flex: 1,
	    overflow: 'auto',

	    stretchLabels: {
	      borderTopRightRadius: 0
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  return {
	    position: 'relative',
	    // top: 1,
	    width: '100%',
	    height: config.lineHeight + 'px',
	    display: 'flex',
	    flexShrink: 0
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var colors = theme.getStyle('colors', mod);

	  return {
	    mixins: ['font'],

	    height: config.lineHeight,
	    lineHeight: config.lineHeight + 'px',
	    boxSizing: 'border-box',
	    textAlign: 'center',
	    overflow: 'hidden',
	    color: config.fontColor.normal,
	    backgroundColor: config.grey.normal,
	    backgroundImage: 'none',
	    borderWidth: '1px',
	    borderColor: colors.grey4,
	    borderTopStyle: 'solid',
	    borderLeftStyle: 'solid',
	    borderBottomStyle: 'solid',
	    borderRightStyle: 'solid',
	    paddingTop: 0,
	    paddingBottom: 0,
	    paddingLeft: 8,
	    paddingRight: 8,
	    marginTop: 0,
	    marginBottom: 0,
	    marginLeft: 0,
	    marginRight: 0,

	    ':hover': {
	      color: config.fontColor.hover,
	      backgroundColor: config.grey.hover
	    },
	    ':active': {
	      color: config.fontColor.active,
	      backgroundColor: config.grey.active
	    },

	    selected: {
	      color: config.fontColor.active,
	      backgroundColor: config.grey.active,
	      borderBottomStyle: 'none'
	    },
	    stretch: {
	      flex: 1
	    },
	    first: {
	      borderTopLeftRadius: 2
	    },
	    last: {
	      borderTopRightRadius: 2
	    },
	    notFirst: {
	      borderLeftStyle: 'none'
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  var colors = theme.getStyle('colors', mod);

	  return {
	    mixins: ['roundedCorners'],

	    userSelect: 'none',
	    height: config.lineHeight,
	    display: 'inline-block',
	    backgroundColor: colors.grey4
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 241 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  return {
	    knobWidth: 32,
	    labelOffset: '7px'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 242 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  var _theme$getStyle = theme.getStyle('toggleConfig', mod);

	  var knobWidth = _theme$getStyle.knobWidth;

	  var colors = theme.getStyle('colors', mod);

	  return {
	    mixins: ['font'],

	    boxSizing: 'border-box',
	    transition: 'left ' + config.anim,
	    position: 'relative',
	    height: config.lineHeight,
	    width: knobWidth,
	    display: 'inline-block',
	    backgroundColor: colors.grey3,
	    onLeft: {
	      'true': { left: 0 },
	      'false': { left: 'calc(100% - ' + (knobWidth - 2) + 'px)' }
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 243 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);

	  var _theme$getStyle = theme.getStyle('toggleConfig', mod);

	  var knobWidth = _theme$getStyle.knobWidth;
	  var labelOffset = _theme$getStyle.labelOffset;

	  return {
	    mixins: ['font'],

	    transition: 'all ' + config.anim,
	    height: 0,
	    paddingLeft: 12,
	    paddingRight: 12,
	    lineHeight: config.lineHeight + 'px',
	    textAlign: 'center',
	    cursor: 'default',
	    opacity: 0,
	    side: {
	      left: {
	        marginLeft: knobWidth,
	        transform: 'translateX(' + labelOffset + ')'
	      },
	      right: {
	        marginRight: knobWidth,
	        transform: 'translateX(-' + labelOffset + ')'
	      }
	    },
	    on: {
	      opacity: 1,
	      transform: 'translateX(0px)'
	    }
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	exports['default'] = function (theme, mod) {

	  var config = theme.getStyle('config', mod);
	  // var size = has(mod, 'size') ? mod.size : config.lineHeight

	  return {
	    // height: size,
	    display: 'flex',
	    flexDirection: 'inherit'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _lodashObjectHas = __webpack_require__(246);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	exports['default'] = function (theme, mod) {
	  var config = theme.getStyle('config', mod);
	  var size = (0, _lodashObjectHas2['default'])(mod, 'size') ? mod.size : config.lineHeight;

	  return {
	    direction: {
	      row: {
	        height: size
	      },
	      column: {
	        width: size
	      }
	    },
	    flexDirection: mod.direction,
	    display: 'flex'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(247),
	    baseSlice = __webpack_require__(248),
	    isArguments = __webpack_require__(181),
	    isArray = __webpack_require__(183),
	    isIndex = __webpack_require__(12),
	    isKey = __webpack_require__(249),
	    isLength = __webpack_require__(11),
	    last = __webpack_require__(250),
	    toPath = __webpack_require__(251);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `path` is a direct property.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': { 'c': 3 } } };
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b.c');
	 * // => true
	 *
	 * _.has(object, ['a', 'b', 'c']);
	 * // => true
	 */
	function has(object, path) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasOwnProperty.call(object, path);
	  if (!result && !isKey(path)) {
	    path = toPath(path);
	    object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    if (object == null) {
	      return false;
	    }
	    path = last(path);
	    result = hasOwnProperty.call(object, path);
	  }
	  return result || (isLength(object.length) && isIndex(path, object.length) &&
	    (isArray(object) || isArguments(object)));
	}

	module.exports = has;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(191);

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  if (pathKey !== undefined && pathKey in toObject(object)) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 248 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(183),
	    toObject = __webpack_require__(191);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;


/***/ },
/* 250 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(4),
	    isArray = __webpack_require__(183);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);

	var ClickAway = React.createClass({
	  displayName: 'ClickAway',

	  propTypes: {
	    children: React.PropTypes.element.isRequired,
	    onClickAway: React.PropTypes.func
	  },

	  componentDidMount: function componentDidMount() {
	    this.__mountTimeStamp = Date.now();
	    this.__handleClickAway = (function (e) {
	      //prevent to catch the same initialiser mouse event when it reaches the document
	      if (this.__mountTimeStamp < e.timeStamp) {
	        var node = React.findDOMNode(this);
	        if (!node.contains(e.target) && this.props.onClickAway) {
	          this.props.onClickAway();
	        }
	      }
	    }).bind(this);

	    document.addEventListener('click', this.__handleClickAway);
	    document.addEventListener('contextmenu', this.__handleClickAway);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    document.removeEventListener('click', this.__handleClickAway);
	    document.removeEventListener('contextmenu', this.__handleClickAway);
	  },

	  render: function render() {
	    return this.props.children;
	  }
	});

	module.exports = ClickAway;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _ClickAway = __webpack_require__(252);

	var _ClickAway2 = _interopRequireDefault(_ClickAway);

	var _componentsList = __webpack_require__(254);

	var _componentsList2 = _interopRequireDefault(_componentsList);

	var _componentsPanel = __webpack_require__(294);

	var _componentsPanel2 = _interopRequireDefault(_componentsPanel);

	var ContextMenu = (function (_React$Component) {
	  _inherits(ContextMenu, _React$Component);

	  function ContextMenu() {
	    var _this = this;

	    _classCallCheck(this, ContextMenu);

	    _get(Object.getPrototypeOf(ContextMenu.prototype), 'constructor', this).apply(this, arguments);

	    this.handleContextMenu = function (e) {
	      e.preventDefault();

	      if (_this.mountNode) {
	        _this.hide();
	      } else {
	        _this.show(e.clientX, e.clientY);
	      }
	    };

	    this.handleClickAway = function () {
	      _this.hide();
	    };
	  }

	  _createClass(ContextMenu, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      var node = _react2['default'].findDOMNode(this);
	      var triggerEvent = this.props.triggerEvent;

	      node.addEventListener(triggerEvent, this.handleContextMenu);
	      this.dispose = function () {
	        node.removeEventListener(triggerEvent, _this2.handleContextMenu);
	      };
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.dispose();
	    }
	  }, {
	    key: 'show',
	    value: function show(x, y) {
	      this.mountNode = document.createElement('div');
	      this.mountNode.style.position = 'fixed';
	      this.mountNode.style.left = x + 'px';
	      this.mountNode.style.top = y + 'px';
	      document.body.appendChild(this.mountNode);
	      _react2['default'].render(this.renderContextMenu(), this.mountNode);
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      _react2['default'].unmountComponentAtNode(this.mountNode);
	      var parentNode = this.mountNode && this.mountNode.parentNode;
	      if (parentNode) {
	        parentNode.removeChild(this.mountNode);
	      }
	      this.mountNode = undefined;
	    }
	  }, {
	    key: 'renderContextMenu',
	    value: function renderContextMenu() {
	      var _this3 = this;

	      var renderContent = this.props.renderContent;

	      return _react2['default'].createElement(
	        _ClickAway2['default'],
	        { onClickAway: this.handleClickAway },
	        renderContent(this.props, function () {
	          return _this3.hide();
	        })
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }], [{
	    key: 'propTypes',
	    value: {
	      children: _react.PropTypes.element.isRequired,
	      items: _react.PropTypes.arrayOf(_react.PropTypes.object),
	      triggerEvent: _react.PropTypes.string,
	      renderContent: _react.PropTypes.func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      triggerEvent: 'contextmenu',
	      renderContent: function renderContent(props, hide) {
	        var items = (props.items || []).map(function (item) {
	          var originalClickHandler = item.onClick;
	          if (typeof item === 'string') {
	            item = { label: item };
	          }
	          return _extends({}, item, {
	            onClick: function onClick() {
	              if (originalClickHandler) {
	                originalClickHandler();
	              }
	              hide();
	            }
	          });
	        });

	        return _react2['default'].createElement(
	          _componentsPanel2['default'],
	          null,
	          _react2['default'].createElement(_componentsList2['default'], { items: items })
	        );
	      }
	    },
	    enumerable: true
	  }]);

	  return ContextMenu;
	})(_react2['default'].Component);

	exports['default'] = ContextMenu;
	module.exports = exports['default'];

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _ListItem = __webpack_require__(268);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _lodashObjectHas = __webpack_require__(246);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var List = (function (_React$Component) {
	  _inherits(List, _React$Component);

	  function List(props) {
	    _classCallCheck(this, _List);

	    _get(Object.getPrototypeOf(_List.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(List, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var items = _props.items;

	      var children;

	      if (items) {
	        children = items.map(function (item, idx) {
	          if (typeof item === 'string') {
	            item = { label: item };
	          }

	          return _react2['default'].createElement(_ListItem2['default'], _extends({}, item, {
	            key: (0, _lodashObjectHas2['default'])(item, 'key') ? item.key : idx }));
	        });
	      } else {
	        children = _react2['default'].Children.map(this.props.children, function (child, idx) {
	          if ((0, _lodashObjectHas2['default'])(child.props, 'key')) {
	            return child;
	          } else {
	            return _react2['default'].addons.cloneWithProps(child, { key: idx });
	          }
	        });
	      }

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('list', mod, style) }),
	        children
	      );
	    }
	  }]);

	  var _List = List;
	  List = (0, _utilsMatterBasics2['default'])(List) || List;
	  List = (0, _radium2['default'])(List) || List;
	  return List;
	})(_react2['default'].Component);

	exports['default'] = List;
	module.exports = exports['default'];

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Enhancer = __webpack_require__(256);

	module.exports = function (ComposedComponent) {
	  return Enhancer(ComposedComponent);
	};
	module.exports.Style = __webpack_require__(265);
	module.exports.getState = __webpack_require__(259);
	module.exports.keyframes = __webpack_require__(267);
	module.exports.Config = __webpack_require__(264);

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* @flow */

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var resolveStyles = __webpack_require__(257);

	var enhanceWithRadium = function enhanceWithRadium(ComposedComponent) {
	  var RadiumEnhancer = (function (_ComposedComponent) {
	    function RadiumEnhancer() {
	      _classCallCheck(this, RadiumEnhancer);

	      _get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'constructor', this).apply(this, arguments);

	      this.state = this.state || {};
	      this.state._radiumStyleState = {};
	    }

	    _inherits(RadiumEnhancer, _ComposedComponent);

	    _createClass(RadiumEnhancer, [{
	      key: 'render',
	      value: function render() {
	        var renderedElement = _get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'render', this).call(this);
	        return resolveStyles(this, renderedElement);
	      }
	    }, {
	      key: 'componentWillUnmount',
	      value: function componentWillUnmount() {
	        if (_get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentWillUnmount', this)) {
	          _get(Object.getPrototypeOf(RadiumEnhancer.prototype), 'componentWillUnmount', this).call(this);
	        }

	        if (this._radiumMouseUpListener) {
	          this._radiumMouseUpListener.remove();
	        }

	        if (this._radiumMediaQueryListenersByQuery) {
	          Object.keys(this._radiumMediaQueryListenersByQuery).forEach(function (query) {
	            this._radiumMediaQueryListenersByQuery[query].remove();
	          }, this);
	        }
	      }
	    }]);

	    return RadiumEnhancer;
	  })(ComposedComponent);

	  // Class inheritance uses Object.create and because of __proto__ issues
	  // with IE <10 any static properties of the superclass aren't inherited and
	  // so need to be manually populated
	  // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-
	  var staticKeys = ['defaultProps', 'propTypes', 'contextTypes', 'childContextTypes'];

	  staticKeys.forEach(function (key) {
	    if (ComposedComponent.hasOwnProperty(key)) {
	      RadiumEnhancer[key] = ComposedComponent[key];
	    }
	  });

	  if (process.env.NODE_ENV !== 'production') {
	    // This fixes React Hot Loader by exposing the original components top level
	    // prototype methods on the Radium enhanced prototype as discussed in #219.
	    Object.keys(ComposedComponent.prototype).forEach(function (key) {
	      if (!RadiumEnhancer.prototype.hasOwnProperty(key)) {
	        RadiumEnhancer.prototype[key] = ComposedComponent.prototype[key];
	      }
	    });
	  }

	  RadiumEnhancer.displayName = ComposedComponent.displayName || ComposedComponent.name || 'Component';

	  return RadiumEnhancer;
	};

	module.exports = enhanceWithRadium;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* @flow */

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var MouseUpListener = __webpack_require__(258);
	var getState = __webpack_require__(259);
	var getStateKey = __webpack_require__(260);
	var Prefixer = __webpack_require__(261);
	var Config = __webpack_require__(264);

	var ExecutionEnvironment = __webpack_require__(262);
	var React = __webpack_require__(15);

	// babel-eslint 3.1.7 fails here for some reason, error:
	//   0:0  error  Cannot call method 'isSequenceExpression' of undefined
	//
	// declare class RadiumComponent extends ReactComponent {
	//   _lastMouseDown: number,
	//   _radiumMediaQueryListenersByQuery: Object<string, {remove: () => void}>,
	//   _radiumMouseUpListener: {remove: () => void},
	// }

	var mediaQueryListByQueryString = {};

	var _isSpecialKey = function _isSpecialKey(key) {
	  return key[0] === ':' || key[0] === '@';
	};

	var _getStyleState = function _getStyleState(component, key, value) {
	  return getState(component.state, key, value);
	};

	var _setStyleState = function _setStyleState(component, key, newState) {
	  var existing = component._lastRadiumState || component.state && component.state._radiumStyleState || {};

	  var state = { _radiumStyleState: _extends({}, existing) };
	  state._radiumStyleState[key] = _extends({}, state._radiumStyleState[key], newState);

	  component._lastRadiumState = state._radiumStyleState;
	  component.setState(state);
	};

	// Merge style objects. Special casing for props starting with ';'; the values
	// should be objects, and are merged with others of the same name (instead of
	// overwriting).
	var _mergeStyles = function _mergeStyles(styles) {
	  var result = {};

	  styles.forEach(function (style) {
	    if (!style || typeof style !== 'object' || Array.isArray(style)) {
	      return;
	    }

	    Object.keys(style).forEach(function (key) {
	      if (_isSpecialKey(key) && result[key]) {
	        result[key] = _mergeStyles([result[key], style[key]]);
	      } else {
	        result[key] = style[key];
	      }
	    });
	  });

	  return result;
	};

	var _mouseUp = function _mouseUp(component) {
	  Object.keys(component.state._radiumStyleState).forEach(function (key) {
	    if (_getStyleState(component, key, ':active')) {
	      _setStyleState(component, key, { ':active': false });
	    }
	  });
	};

	var _onMediaQueryChange = function _onMediaQueryChange(component, query, mediaQueryList) {
	  var state = {};
	  state[query] = mediaQueryList.matches;
	  _setStyleState(component, '_all', state);
	};

	var _resolveMediaQueryStyles = function _resolveMediaQueryStyles(component, style) {
	  if (!Config.canMatchMedia()) {
	    return style;
	  }

	  Object.keys(style).filter(function (name) {
	    return name[0] === '@';
	  }).map(function (query) {
	    var mediaQueryStyles = style[query];
	    query = query.replace('@media ', '');

	    // Create a global MediaQueryList if one doesn't already exist
	    var mql = mediaQueryListByQueryString[query];
	    if (!mql) {
	      mediaQueryListByQueryString[query] = mql = Config.matchMedia(query);
	    }

	    // Keep track of which keys already have listeners
	    if (!component._radiumMediaQueryListenersByQuery) {
	      component._radiumMediaQueryListenersByQuery = {};
	    }

	    if (!component._radiumMediaQueryListenersByQuery[query]) {
	      var listener = _onMediaQueryChange.bind(null, component, query);
	      mql.addListener(listener);
	      component._radiumMediaQueryListenersByQuery[query] = {
	        remove: function remove() {
	          mql.removeListener(listener);
	        }
	      };
	    }

	    // Apply media query states
	    if (mql.matches) {
	      style = _mergeStyles([style, mediaQueryStyles]);
	    }
	  });

	  return style;
	};

	// Wrapper around React.cloneElement. To avoid processing the same element
	// twice, whenever we clone an element add a special non-enumerable prop to
	// make sure we don't process this element again.
	var _cloneElement = function _cloneElement(renderedElement, newProps, newChildren) {
	  var clone = React.cloneElement(renderedElement, newProps, newChildren);

	  Object.defineProperty(clone.props, '_radiumDidResolveStyles', { value: true, enumerable: false });

	  return clone;
	};

	//
	// The nucleus of Radium. resolveStyles is called on the rendered elements
	// before they are returned in render. It iterates over the elements and
	// children, rewriting props to add event handlers required to capture user
	// interactions (e.g. mouse over). It also replaces the style prop because it
	// adds in the various interaction styles (e.g. :hover).
	//
	var resolveStyles = function resolveStyles(component, // ReactComponent, flow+eslint complaining
	renderedElement, // ReactElement
	existingKeyMap) {
	  // ReactElement
	  existingKeyMap = existingKeyMap || {};

	  if (!renderedElement || renderedElement.props && renderedElement.props._radiumDidResolveStyles) {
	    return renderedElement;
	  }

	  // Recurse over children first in case we bail early. Note that children only
	  // include those rendered in `this` component. Child nodes in other components
	  // will not be here, so each component needs to use Radium.
	  var newChildren;
	  var oldChildren = renderedElement.props.children;
	  if (oldChildren) {
	    var childrenType = typeof oldChildren;
	    if (childrenType === 'string' || childrenType === 'number' || childrenType === 'function') {
	      // Don't do anything with a single primitive child or functions
	      newChildren = oldChildren;
	    } else if (React.Children.count(oldChildren) === 1 && oldChildren.type) {
	      // If a React Element is an only child, don't wrap it in an array for
	      // React.Children.map() for React.Children.only() compatibility.
	      var onlyChild = React.Children.only(oldChildren);
	      newChildren = resolveStyles(component, onlyChild, existingKeyMap);
	    } else {
	      newChildren = React.Children.map(oldChildren, function (child) {
	        if (React.isValidElement(child)) {
	          return resolveStyles(component, child, existingKeyMap);
	        }

	        return child;
	      });
	    }
	  }

	  // Bail early if element is not a simple ReactDOMElement.
	  if (!React.isValidElement(renderedElement) || typeof renderedElement.type !== 'string') {
	    if (oldChildren === newChildren) {
	      return renderedElement;
	    }

	    return _cloneElement(renderedElement, renderedElement.props, newChildren);
	  }

	  var props = renderedElement.props;
	  var style = props.style;
	  var newProps = {};

	  // Convenient syntax for multiple styles: `style={[style1, style2, etc]}`
	  // Ignores non-objects, so you can do `this.state.isCool && styles.cool`.
	  if (Array.isArray(style)) {
	    style = _mergeStyles(style);
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    // Warn if you use longhand and shorthand properties in the same style
	    // object.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties

	    var shorthandPropertyExpansions = {
	      'background': ['backgroundAttachment', 'backgroundBlendMode', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPosition', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundRepeatX', 'backgroundRepeatY', 'backgroundSize'],
	      'border': ['borderBottom', 'borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderColor', 'borderLeft', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRight', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderStyle', 'borderTop', 'borderTopColor', 'borderTopStyle', 'borderTopWidth', 'borderWidth'],
	      'borderImage': ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	      'borderRadius': ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	      'font': ['fontFamily', 'fontKerning', 'fontSize', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantLigatures', 'fontWeight', 'lineHeight'],
	      'listStyle': ['listStyleImage', 'listStylePosition', 'listStyleType'],
	      'margin': ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	      'padding': ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	      'transition': ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction']
	    };

	    var checkProps = function checkProps(s) {
	      if (typeof s !== 'object' || !s) {
	        return;
	      }

	      var styleKeys = Object.keys(s);
	      styleKeys.forEach(function (styleKey) {
	        if (shorthandPropertyExpansions[styleKey] && shorthandPropertyExpansions[styleKey].some(function (sp) {
	          return styleKeys.indexOf(sp) !== -1;
	        })) {
	          /* eslint-disable no-console */
	          console.warn('Radium: property "' + styleKey + '" in style object', style, ': do not mix longhand and ' + 'shorthand properties in the same style object. Check the render ' + 'method of ' + component.constructor.displayName + '.', 'See https://github.com/FormidableLabs/radium/issues/95 for more ' + 'information.');
	          /* eslint-enable no-console */
	        }
	      });

	      styleKeys.forEach(function (k) {
	        return checkProps(s[k]);
	      });
	    };
	    checkProps(style);
	  }

	  // Bail early if no interactive styles.
	  if (!style || !Object.keys(style).some(_isSpecialKey)) {
	    if (style) {
	      // Still perform vendor prefixing, though.
	      newProps.style = Prefixer.getPrefixedStyle(style);
	      return _cloneElement(renderedElement, newProps, newChildren);
	    } else if (newChildren) {
	      return _cloneElement(renderedElement, {}, newChildren);
	    }

	    return renderedElement;
	  }

	  // We need a unique key to correlate state changes due to user interaction
	  // with the rendered element, so we know to apply the proper interactive
	  // styles.
	  var originalKey = renderedElement.ref || renderedElement.key;
	  var key = getStateKey(originalKey);

	  if (existingKeyMap[key]) {
	    throw new Error('Radium requires each element with interactive styles to have a unique ' + 'key, set using either the ref or key prop. ' + (originalKey ? 'Key "' + originalKey + '" is a duplicate.' : 'Multiple elements have no key specified.'));
	  }

	  existingKeyMap[key] = true;

	  // Media queries can contain pseudo styles, like :hover
	  style = _resolveMediaQueryStyles(component, style);

	  var newStyle = {};
	  Object.keys(style).forEach(function (styleKey) {
	    if (!_isSpecialKey(styleKey)) {
	      newStyle[styleKey] = style[styleKey];
	    }
	  });

	  // Only add handlers if necessary
	  if (style[':hover'] || style[':active']) {
	    // Always call the existing handler if one is already defined.
	    // This code, and the very similar ones below, could be abstracted a bit
	    // more, but it hurts readability IMO.
	    var existingOnMouseEnter = props.onMouseEnter;
	    newProps.onMouseEnter = function (e) {
	      existingOnMouseEnter && existingOnMouseEnter(e);
	      _setStyleState(component, key, { ':hover': true });
	    };

	    var existingOnMouseLeave = props.onMouseLeave;
	    newProps.onMouseLeave = function (e) {
	      existingOnMouseLeave && existingOnMouseLeave(e);
	      _setStyleState(component, key, { ':hover': false });
	    };
	  }

	  if (style[':active']) {
	    var existingOnMouseDown = props.onMouseDown;
	    newProps.onMouseDown = function (e) {
	      existingOnMouseDown && existingOnMouseDown(e);
	      component._lastMouseDown = Date.now();
	      _setStyleState(component, key, { ':active': true });
	    };
	  }

	  if (style[':focus']) {
	    var existingOnFocus = props.onFocus;
	    newProps.onFocus = function (e) {
	      existingOnFocus && existingOnFocus(e);
	      _setStyleState(component, key, { ':focus': true });
	    };

	    var existingOnBlur = props.onBlur;
	    newProps.onBlur = function (e) {
	      existingOnBlur && existingOnBlur(e);
	      _setStyleState(component, key, { ':focus': false });
	    };
	  }

	  // Merge the styles in the order they were defined
	  var interactionStyles = Object.keys(style).filter(function (name) {
	    return name === ':active' && _getStyleState(component, key, ':active') || name === ':hover' && _getStyleState(component, key, ':hover') || name === ':focus' && _getStyleState(component, key, ':focus');
	  }).map(function (name) {
	    return style[name];
	  });

	  if (interactionStyles.length) {
	    newStyle = _mergeStyles([newStyle].concat(interactionStyles));
	  }

	  if (style[':active'] && !component._radiumMouseUpListener && ExecutionEnvironment.canUseEventListeners) {
	    component._radiumMouseUpListener = MouseUpListener.subscribe(_mouseUp.bind(null, component));
	  }

	  newProps.style = Prefixer.getPrefixedStyle(newStyle);

	  return _cloneElement(renderedElement, newProps, newChildren);
	};

	// Exposing methods for tests is ugly, but the alternative, re-requiring the
	// module each time, is too slow
	resolveStyles.__clearStateForTests = function () {
	  mediaQueryListByQueryString = {};
	};

	module.exports = resolveStyles;

	// Bail if we've already processed this element. This ensures that only the
	// owner of an element processes that element, since the owner's render
	// function will be called first (which will always be the case, since you
	// can't know what else to render until you render the parent component).
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 258 */
/***/ function(module, exports) {

	/* @flow */

	'use strict';

	var _callbacks = [];
	var _mouseUpListenerIsActive = false;

	var _handleMouseUp = function _handleMouseUp(ev) {
	  _callbacks.forEach(function (callback) {
	    callback(ev);
	  });
	};

	var subscribe = function subscribe(callback) {
	  if (_callbacks.indexOf(callback) === -1) {
	    _callbacks.push(callback);
	  }

	  if (!_mouseUpListenerIsActive) {
	    window.addEventListener('mouseup', _handleMouseUp);
	    _mouseUpListenerIsActive = true;
	  }

	  return {
	    remove: function remove() {
	      var index = _callbacks.indexOf(callback);
	      _callbacks.splice(index, 1);

	      if (_callbacks.length === 0 && _mouseUpListenerIsActive) {
	        window.removeEventListener('mouseup', _handleMouseUp);
	        _mouseUpListenerIsActive = false;
	      }
	    }
	  };
	};

	module.exports = {
	  subscribe: subscribe
	};

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	'use strict';

	var getStateKey = __webpack_require__(260);

	var VALID_KEYS = [':active', ':focus', ':hover'];

	var getState = function getState(state, elementKey, value) {
	  if (VALID_KEYS.indexOf(value) === -1) {
	    throw new Error('Radium.getState invalid value param: `' + value + '`');
	  }

	  var key = getStateKey(elementKey);

	  return !!(state && state._radiumStyleState && state._radiumStyleState[key] && state._radiumStyleState[key][value]) || false;
	};

	module.exports = getState;

/***/ },
/* 260 */
/***/ function(module, exports) {

	/* @flow */

	'use strict';

	var getStateKey = function getStateKey(elementKey) {
	  return elementKey === null || elementKey === undefined ? 'main' : elementKey.toString();
	};

	module.exports = getStateKey;

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Based on https://github.com/jsstyles/css-vendor, but without having to
	 * convert between different cases all the time.
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(262);
	var arrayFind = __webpack_require__(263);

	var VENDOR_PREFIX_REGEX = /-(moz|webkit|ms|o)-/;

	var infoByCssPrefix = {
	  '-moz-': {
	    cssPrefix: '-moz-',
	    jsPrefix: 'Moz',
	    alternativeProperties: {
	      // OLD - Firefox 19-
	      alignItems: [{ css: '-moz-box-align', js: 'MozBoxAlign' }],
	      flex: [{ css: '-moz-box-flex', js: 'MozBoxFlex' }],
	      flexDirection: [{ css: '-moz-box-orient', js: 'MozBoxOrient' }],
	      justifyContent: [{ css: '-moz-box-pack', js: 'MozBoxPack' }],
	      order: [{ css: '-moz-box-ordinal-group', js: 'MozBoxOrdinalGroup' }]
	    },
	    alternativeValues: {
	      // OLD - Firefox 19-
	      alignItems: {
	        'flex-start': ['start'],
	        'flex-end': ['end']
	      },
	      display: {
	        flex: ['-moz-box']
	      },
	      flexDirection: {
	        column: ['vertical'],
	        row: ['horizontal']
	      },
	      justifyContent: {
	        'flex-start': ['start'],
	        'flex-end': ['end'],
	        'space-between': ['justify']
	      }
	    }
	  },
	  '-ms-': {
	    cssPrefix: '-ms-',
	    jsPrefix: 'ms',
	    alternativeProperties: {
	      // TWEENER - IE 10
	      alignContent: [{ css: '-ms-flex-line-pack', js: 'msFlexLinePack' }],
	      alignItems: [{ css: '-ms-flex-align', js: 'msFlexAlign' }],
	      alignSelf: [{ css: '-ms-flex-align-item', js: 'msFlexAlignItem' }],
	      justifyContent: [{ css: '-ms-flex-pack', js: 'msFlexPack' }],
	      order: [{ css: '-ms-flex-order', js: 'msFlexOrder' }]
	    },
	    alternativeValues: {
	      // TWEENER - IE 10
	      alignContent: {
	        'flex-start': ['start'],
	        'flex-end': ['end'],
	        'space-between': ['justify'],
	        'space-around': ['distribute']
	      },
	      alignItems: {
	        'flex-start': ['start'],
	        'flex-end': ['end']
	      },
	      alignSelf: {
	        'flex-start': ['start'],
	        'flex-end': ['end']
	      },
	      display: {
	        flex: ['-ms-flexbox'],
	        'inline-flex': ['-ms-inline-flexbox']
	      },
	      justifyContent: {
	        'flex-start': ['start'],
	        'flex-end': ['end'],
	        'space-between': ['justify'],
	        'space-around': ['distribute']
	      }
	    }
	  },
	  '-o-': {
	    cssPrefix: '-o-',
	    jsPrefix: 'O'
	  },
	  '-webkit-': {
	    cssPrefix: '-webkit-',
	    jsPrefix: 'Webkit',
	    alternativeProperties: {
	      // OLD - iOS 6-, Safari 3.1-6
	      alignItems: [{ css: '-webkit-box-align', js: 'WebkitBoxAlign' }],
	      flex: [{ css: '-webkit-box-flex', js: 'MozBoxFlex' }],
	      flexDirection: [{ css: '-webkit-box-orient', js: 'WebkitBoxOrient' }],
	      justifyContent: [{ css: '-webkit-box-pack', js: 'WebkitBoxPack' }],
	      order: [{ css: '-webkit-box-ordinal-group', js: 'WebkitBoxOrdinalGroup' }]
	    },
	    alternativeValues: {
	      // OLD - iOS 6-, Safari 3.1-6
	      alignItems: {
	        'flex-start': ['start'],
	        'flex-end': ['end']
	      },
	      display: {
	        flex: ['-webkit-box']
	      },
	      flexDirection: {
	        row: ['horizontal'],
	        column: ['vertical']
	      },
	      justifyContent: {
	        'flex-start': ['start'],
	        'flex-end': ['end'],
	        'space-between': ['justify']
	      }
	    }
	  }
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 * Copied from React core June 22, 2015.
	 * https://github.com/facebook/react/blob/
	 * ba81b60ad8e93b747be42a03b797065932c49c96/
	 * src/renderers/dom/shared/CSSProperty.js
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	var domStyle = {};
	var prefixedPropertyCache = {};
	var prefixedValueCache = {};
	var prefixInfo = {
	  cssPrefix: '',
	  jsPrefix: ''
	};

	if (ExecutionEnvironment.canUseDOM) {
	  domStyle = document.createElement('p').style;

	  // older Firefox versions may have no float property in style object
	  // so we need to add it manually
	  if (domStyle.float === undefined) {
	    domStyle.float = '';
	  }

	  // Based on http://davidwalsh.name/vendor-prefix
	  var cssVendorPrefix;
	  var prefixMatch;
	  var windowStyles = window.getComputedStyle(document.documentElement, '');

	  // Array.prototype.slice.call(windowStyles) fails with
	  // "Uncaught TypeError: undefined is not a function"
	  // in older versions Android (KitKat) web views
	  for (var i = 0; i < windowStyles.length; i++) {
	    prefixMatch = windowStyles[i].match(VENDOR_PREFIX_REGEX);

	    if (prefixMatch) {
	      break;
	    }
	  }

	  cssVendorPrefix = prefixMatch && prefixMatch[0];

	  prefixInfo = infoByCssPrefix[cssVendorPrefix] || prefixInfo;
	}

	var _camelCaseRegex = /([a-z])?([A-Z])/g;
	var _camelCaseReplacer = function _camelCaseReplacer(match, p1, p2) {
	  return p1 + '-' + p2.toLowerCase();
	};
	var _camelCaseToDashCase = function _camelCaseToDashCase(s) {
	  return s.replace(_camelCaseRegex, _camelCaseReplacer);
	};

	var getPrefixedPropertyName = function getPrefixedPropertyName(property) {
	  if (prefixedPropertyCache.hasOwnProperty(property)) {
	    return prefixedPropertyCache[property];
	  }

	  var unprefixed = {
	    css: _camelCaseToDashCase(property),
	    js: property,
	    isDefaultForServer: true
	  };

	  // Try the prefixed version first. Chrome in particular has the `filter` and
	  // `webkitFilter` properties availalbe on the style object, but only the
	  // prefixed version actually works.
	  var possiblePropertyNames = [
	  // Prefixed
	  {
	    css: prefixInfo.cssPrefix + _camelCaseToDashCase(property),
	    js: prefixInfo.jsPrefix + property[0].toUpperCase() + property.slice(1)
	  }, unprefixed];

	  // Alternative property names
	  if (prefixInfo.alternativeProperties && prefixInfo.alternativeProperties[property]) {
	    possiblePropertyNames = possiblePropertyNames.concat(prefixInfo.alternativeProperties[property]);
	  }

	  var workingProperty = arrayFind(possiblePropertyNames, function (possiblePropertyName) {
	    if (possiblePropertyName.js in domStyle) {
	      return possiblePropertyName;
	    }
	  }) || false;

	  return prefixedPropertyCache[property] = workingProperty;
	};

	// React is planning to deprecate adding px automatically
	// (https://github.com/facebook/react/issues/1873), and if they do, this
	// should change to a warning or be removed in favor of React's warning.
	// Same goes for below.
	var _addPixelSuffixToValueIfNeeded = function _addPixelSuffixToValueIfNeeded(originalProperty, value) {
	  if (value !== 0 && !isNaN(value) && !isUnitlessNumber[originalProperty]) {
	    return value + 'px';
	  }
	  return value;
	};

	var _getPrefixedValue = function _getPrefixedValue(property, value, originalProperty) {
	  if (!Array.isArray(value)) {
	    // don't test numbers (pure or stringy), but do add 'px' prefix if needed
	    if (!isNaN(value) && value !== null) {
	      return _addPixelSuffixToValueIfNeeded(originalProperty, value);
	    }

	    if (typeof value !== 'string') {
	      if (value !== null && value !== undefined) {
	        value = value.toString();
	      } else {
	        return value;
	      }
	    }

	    // don't test numbers with units (e.g. 10em)
	    if (!isNaN(parseInt(value, 10))) {
	      return value;
	    }
	  }

	  var cacheKey = Array.isArray(value) ? value.join(' || ')
	  /* babel-eslint bug: https://github.com/babel/babel-eslint/issues/149 */
	  /* eslint-disable space-infix-ops */
	  :
	  /* eslint-enable space-infix-ops */
	  property + value;

	  if (prefixedValueCache.hasOwnProperty(cacheKey)) {
	    return prefixedValueCache[cacheKey];
	  }

	  var possibleValues;
	  if (Array.isArray(value)) {
	    // Add px for the same values React would, otherwise the testing below will
	    // fail and it will try to fallback.
	    possibleValues = value.map(function (v) {
	      return _addPixelSuffixToValueIfNeeded(originalProperty, v);
	    });

	    // Add prefixed versions
	    possibleValues = possibleValues.concat(value.filter(function (v) {
	      return !isNaN(v);
	    }) // Don't prefix numbers
	    .map(function (v) {
	      return prefixInfo.cssPrefix + v;
	    }));
	  } else {
	    possibleValues = [
	    // Unprefixed
	    value,
	    // Prefixed
	    prefixInfo.cssPrefix + value];
	  }

	  // Alternative values
	  if (prefixInfo.alternativeValues && prefixInfo.alternativeValues[originalProperty] && prefixInfo.alternativeValues[originalProperty][value]) {
	    possibleValues = possibleValues.concat(prefixInfo.alternativeValues[originalProperty][value]);
	  }

	  // Test possible value in order
	  var workingValue = arrayFind(possibleValues, function (possibleValue) {
	    domStyle[property] = '';
	    domStyle[property] = possibleValue;

	    // Note that we just make sure it is not an empty string. Browsers will
	    // sometimes rewrite values, but still accept them. They will set the value
	    // to an empty string if not supported.
	    // E.g. for border, "solid 1px black" becomes "1px solid black"
	    //      but "foobar" becomes "", since it is not supported.
	    return !!domStyle[property];
	  });

	  if (workingValue) {
	    prefixedValueCache[cacheKey] = workingValue;
	  } else {
	    // Unsupported, assume unprefixed works, but warn
	    prefixedValueCache[cacheKey] = value;

	    if (process.env.NODE_ENV !== 'production') {
	      /* eslint-disable no-console */
	      if (console && console.warn) {
	        console.warn('Unsupported CSS value "' + value + '" for property "' + property + '"');
	      }
	      /* eslint-enable no-console */
	    }
	  }

	  return prefixedValueCache[cacheKey];
	};

	// Returns a new style object with vendor prefixes added to property names
	// and values.
	var getPrefixedStyle = function getPrefixedStyle(style, mode /* 'css' or 'js' */) {
	  mode = mode || 'js';

	  if (!ExecutionEnvironment.canUseDOM) {
	    return Object.keys(style).reduce(function (newStyle, key) {
	      var value = style[key];
	      var newKey = mode === 'css' ? _camelCaseToDashCase(key) : key;
	      var newValue = Array.isArray(value) ? value[0] : value;
	      newStyle[newKey] = newValue;
	      return newStyle;
	    }, {});
	  }

	  var prefixedStyle = {};
	  Object.keys(style).forEach(function (property) {
	    var value = style[property];

	    var newProperty = getPrefixedPropertyName(property);
	    if (newProperty === false) {
	      // Ignore unsupported properties
	      /* eslint-disable no-console */
	      if (console && console.warn) {
	        console.warn('Unsupported CSS property "' + property + '"');
	      }
	      /* eslint-enable no-console */
	      return;
	    }

	    var newValue = _getPrefixedValue(newProperty.js, value, property);

	    prefixedStyle[newProperty[mode]] = newValue;
	  });
	  return prefixedStyle;
	};

	module.exports = {
	  getPrefixedPropertyName: getPrefixedPropertyName,
	  getPrefixedStyle: getPrefixedStyle,
	  cssPrefix: prefixInfo.cssPrefix,
	  jsPrefix: prefixInfo.jsPrefix
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/

	(function () {
		'use strict';

		var canUseDOM = !!(
			typeof window !== 'undefined' &&
			window.document &&
			window.document.createElement
		);

		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners:
				canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen

		};

		if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}

	}());


/***/ },
/* 263 */
/***/ function(module, exports) {

	'use strict';

	function find(array, predicate, context) {
	  if (typeof Array.prototype.find === 'function') {
	    return array.find(predicate, context);
	  }

	  context = context || this;
	  var length = array.length;
	  var i;

	  if (typeof predicate !== 'function') {
	    throw new TypeError(predicate + ' is not a function');
	  }

	  for (i = 0; i < length; i++) {
	    if (predicate.call(context, array[i], i, array)) {
	      return array[i];
	    }
	  }
	}

	module.exports = find;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(262);

	var _matchMediaFunction = ExecutionEnvironment.canUseDOM && window && window.matchMedia && function (mediaQueryString) {
	  return window.matchMedia(mediaQueryString);
	};

	module.exports = {
	  canMatchMedia: function canMatchMedia() {
	    return typeof _matchMediaFunction === 'function';
	  },

	  matchMedia: function matchMedia(query) {
	    return _matchMediaFunction(query);
	  },

	  setMatchMedia: function setMatchMedia(nextMatchMediaFunction) {
	    _matchMediaFunction = nextMatchMediaFunction;
	  }
	};

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createMarkupForStyles = __webpack_require__(266);
	var Prefixer = __webpack_require__(261);

	var React = __webpack_require__(15);

	var buildCssString = function buildCssString(selector, rules) {
	  if (!selector || !rules) {
	    return;
	  }

	  var prefixedRules = Prefixer.getPrefixedStyle(rules, 'css');
	  var serializedRules = createMarkupForStyles(prefixedRules);

	  return selector + '{' + serializedRules + '}';
	};

	var Style = React.createClass({
	  displayName: 'Style',

	  propTypes: {
	    rules: React.PropTypes.object,
	    scopeSelector: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      scopeSelector: ''
	    };
	  },

	  _buildStyles: function _buildStyles(styles) {
	    var _this = this;

	    return Object.keys(styles).reduce(function (accumulator, selector) {
	      var rules = styles[selector];

	      if (selector === 'mediaQueries') {
	        accumulator += _this._buildMediaQueryString(rules);
	      } else {
	        var completeSelector = (_this.props.scopeSelector ? _this.props.scopeSelector + ' ' : '') + selector;
	        accumulator += buildCssString(completeSelector, rules);
	      }

	      return accumulator;
	    }, '');
	  },

	  _buildMediaQueryString: function _buildMediaQueryString(mediaQueryObj) {
	    var _this2 = this;

	    var contextMediaQueries = this._getContextMediaQueries();
	    var mediaQueryString = '';

	    Object.keys(mediaQueryObj).forEach(function (query) {
	      var completeQuery = contextMediaQueries[query] ? contextMediaQueries[query] : query;
	      mediaQueryString += '@media ' + completeQuery + '{' + _this2._buildStyles(mediaQueryObj[query]) + '}';
	    });

	    return mediaQueryString;
	  },

	  _getContextMediaQueries: function _getContextMediaQueries() {
	    var contextMediaQueries = {};
	    if (this.context && this.context.mediaQueries) {
	      Object.keys(this.context.mediaQueries).forEach((function (query) {
	        contextMediaQueries[query] = this.context.mediaQueries[query].media;
	      }).bind(this));
	    }

	    return contextMediaQueries;
	  },

	  render: function render() {
	    if (!this.props.rules) {
	      return null;
	    }

	    var styles = this._buildStyles(this.props.rules);

	    return React.createElement('style', { dangerouslySetInnerHTML: { __html: styles } });
	  }
	});

	module.exports = Style;

/***/ },
/* 266 */
/***/ function(module, exports) {

	/* @flow */

	'use strict';

	var createMarkupForStyles = function createMarkupForStyles(style, spaces) {
	  spaces = spaces || '';
	  return Object.keys(style).map(function (property) {
	    return spaces + property + ': ' + style[property] + ';';
	  }).join('\n');
	};

	module.exports = createMarkupForStyles;

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	'use strict';

	var createMarkupForStyles = __webpack_require__(266);
	var Prefixer = __webpack_require__(261);

	var ExecutionEnvironment = __webpack_require__(262);

	var isAnimationSupported = ExecutionEnvironment.canUseDOM && Prefixer.getPrefixedPropertyName('animation') !== false;

	var animationIndex = 1;
	var animationStyleSheet = null;
	var keyframesPrefixed = null;

	if (isAnimationSupported) {
	  animationStyleSheet = document.createElement('style');
	  document.head.appendChild(animationStyleSheet);

	  // Test if prefix needed for keyframes (copied from PrefixFree)
	  keyframesPrefixed = 'keyframes';
	  animationStyleSheet.textContent = '@keyframes {}';
	  if (!animationStyleSheet.sheet.cssRules.length) {
	    keyframesPrefixed = Prefixer.cssPrefix + 'keyframes';
	  }
	}

	// Simple animation helper that injects CSS into a style object containing the
	// keyframes, and returns a string with the generated animation name.
	var keyframes = function keyframes(keyframeRules) {
	  var name = 'Animation' + animationIndex;
	  animationIndex += 1;

	  if (!isAnimationSupported) {
	    return name;
	  }

	  var rule = '@' + keyframesPrefixed + ' ' + name + ' {\n' + Object.keys(keyframeRules).map(function (percentage) {
	    var props = keyframeRules[percentage];
	    var prefixedProps = Prefixer.getPrefixedStyle(props, 'css');
	    var serializedProps = createMarkupForStyles(prefixedProps, '  ');
	    return '  ' + percentage + ' {\n  ' + serializedProps + '\n  }';
	  }).join('\n') + '\n}\n';

	  // for flow
	  /* istanbul ignore next */
	  if (!animationStyleSheet) {
	    throw new Error('keyframes not initialized properly');
	  }

	  animationStyleSheet.sheet.insertRule(rule, animationStyleSheet.sheet.cssRules.length);
	  return name;
	};

	module.exports = keyframes;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var ListItem = (function (_React$Component) {
	  _inherits(ListItem, _React$Component);

	  function ListItem() {
	    _classCallCheck(this, _ListItem);

	    _get(Object.getPrototypeOf(_ListItem.prototype), 'constructor', this).apply(this, arguments);
	  }

	  _createClass(ListItem, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var selected = _props.selected;
	      var label = _props.label;
	      var value = _props.value;
	      var onClick = _props.onClick;

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('listItem', _extends({ mod: mod }, selected), style),
	          onClick: function () {
	            if (onClick) {
	              onClick(value);
	            }
	          } }),
	        label
	      );
	    }
	  }], [{
	    key: 'propTypes',
	    value: {
	      label: _react.PropTypes.string.isRequired,
	      value: _react.PropTypes.any,
	      selected: _react.PropTypes.bool,
	      onClick: _react.PropTypes.func
	    },
	    enumerable: true
	  }]);

	  var _ListItem = ListItem;
	  ListItem = (0, _utilsMatterBasics2['default'])(ListItem) || ListItem;
	  ListItem = (0, _pureRenderDecorator2['default'])(ListItem) || ListItem;
	  ListItem = (0, _radium2['default'])(ListItem) || ListItem;
	  return ListItem;
	})(_react2['default'].Component);

	exports['default'] = ListItem;
	module.exports = exports['default'];

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @author Félix Girault <felix.girault@gmail.com>
	 * @license MIT
	 */
	'use strict';

	var React = __webpack_require__(270);
	var PureRenderMixin = React.addons.PureRenderMixin;



	/**
	 * Makes the given component "pure" using the PureRenderMixin.
	 *
	 * @param object component Component.
	 */
	function purify(component) {
	  component.prototype.shouldComponentUpdate
	    = PureRenderMixin.shouldComponentUpdate;
	}



	module.exports = purify;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(271);


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactWithAddons
	 */

	/**
	 * This module exists purely in the open source project, and is meant as a way
	 * to create a separate standalone build of React. This build has "addons", or
	 * functionality we've built and think might be useful but doesn't have a good
	 * place to live inside React core.
	 */

	'use strict';

	var LinkedStateMixin = __webpack_require__(272);
	var React = __webpack_require__(16);
	var ReactComponentWithPureRenderMixin =
	  __webpack_require__(275);
	var ReactCSSTransitionGroup = __webpack_require__(276);
	var ReactFragment = __webpack_require__(24);
	var ReactTransitionGroup = __webpack_require__(277);
	var ReactUpdates = __webpack_require__(38);

	var cx = __webpack_require__(285);
	var cloneWithProps = __webpack_require__(279);
	var update = __webpack_require__(286);

	React.addons = {
	  CSSTransitionGroup: ReactCSSTransitionGroup,
	  LinkedStateMixin: LinkedStateMixin,
	  PureRenderMixin: ReactComponentWithPureRenderMixin,
	  TransitionGroup: ReactTransitionGroup,

	  batchedUpdates: ReactUpdates.batchedUpdates,
	  classSet: cx,
	  cloneWithProps: cloneWithProps,
	  createFragment: ReactFragment.create,
	  update: update
	};

	if ("production" !== process.env.NODE_ENV) {
	  React.addons.Perf = __webpack_require__(164);
	  React.addons.TestUtils = __webpack_require__(287);
	}

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedStateMixin
	 * @typechecks static-only
	 */

	'use strict';

	var ReactLink = __webpack_require__(273);
	var ReactStateSetters = __webpack_require__(274);

	/**
	 * A simple mixin around ReactLink.forState().
	 */
	var LinkedStateMixin = {
	  /**
	   * Create a ReactLink that's linked to part of this component's state. The
	   * ReactLink will have the current value of this.state[key] and will call
	   * setState() when a change is requested.
	   *
	   * @param {string} key state key to update. Note: you may want to use keyOf()
	   * if you're using Google Closure Compiler advanced mode.
	   * @return {ReactLink} ReactLink instance linking to the state.
	   */
	  linkState: function(key) {
	    return new ReactLink(
	      this.state[key],
	      ReactStateSetters.createStateKeySetter(this, key)
	    );
	  }
	};

	module.exports = LinkedStateMixin;


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLink
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactLink encapsulates a common pattern in which a component wants to modify
	 * a prop received from its parent. ReactLink allows the parent to pass down a
	 * value coupled with a callback that, when invoked, expresses an intent to
	 * modify that value. For example:
	 *
	 * React.createClass({
	 *   getInitialState: function() {
	 *     return {value: ''};
	 *   },
	 *   render: function() {
	 *     var valueLink = new ReactLink(this.state.value, this._handleValueChange);
	 *     return <input valueLink={valueLink} />;
	 *   },
	 *   this._handleValueChange: function(newValue) {
	 *     this.setState({value: newValue});
	 *   }
	 * });
	 *
	 * We have provided some sugary mixins to make the creation and
	 * consumption of ReactLink easier; see LinkedValueUtils and LinkedStateMixin.
	 */

	var React = __webpack_require__(16);

	/**
	 * @param {*} value current value of the link
	 * @param {function} requestChange callback to request a change
	 */
	function ReactLink(value, requestChange) {
	  this.value = value;
	  this.requestChange = requestChange;
	}

	/**
	 * Creates a PropType that enforces the ReactLink API and optionally checks the
	 * type of the value being passed inside the link. Example:
	 *
	 * MyComponent.propTypes = {
	 *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
	 * }
	 */
	function createLinkTypeChecker(linkType) {
	  var shapes = {
	    value: typeof linkType === 'undefined' ?
	      React.PropTypes.any.isRequired :
	      linkType.isRequired,
	    requestChange: React.PropTypes.func.isRequired
	  };
	  return React.PropTypes.shape(shapes);
	}

	ReactLink.PropTypes = {
	  link: createLinkTypeChecker
	};

	module.exports = ReactLink;


/***/ },
/* 274 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactStateSetters
	 */

	'use strict';

	var ReactStateSetters = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(component, funcReturningState) {
	    return function(a, b, c, d, e, f) {
	      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
	      if (partialState) {
	        component.setState(partialState);
	      }
	    };
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {ReactCompositeComponent} component
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(component, key) {
	    // Memoize the setters.
	    var cache = component.__keySetters || (component.__keySetters = {});
	    return cache[key] || (cache[key] = createStateKeySetter(component, key));
	  }
	};

	function createStateKeySetter(component, key) {
	  // Partial state is allocated outside of the function closure so it can be
	  // reused with every call, avoiding memory allocation when this function
	  // is called.
	  var partialState = {};
	  return function stateKeySetter(value) {
	    partialState[key] = value;
	    component.setState(partialState);
	  };
	}

	ReactStateSetters.Mixin = {
	  /**
	   * Returns a function that calls the provided function, and uses the result
	   * of that to set the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateSetter(function(xValue) {
	   *     return {x: xValue};
	   *   })(1);
	   *
	   * @param {function} funcReturningState Returned callback uses this to
	   *                                      determine how to update state.
	   * @return {function} callback that when invoked uses funcReturningState to
	   *                    determined the object literal to setState.
	   */
	  createStateSetter: function(funcReturningState) {
	    return ReactStateSetters.createStateSetter(this, funcReturningState);
	  },

	  /**
	   * Returns a single-argument callback that can be used to update a single
	   * key in the component's state.
	   *
	   * For example, these statements are equivalent:
	   *
	   *   this.setState({x: 1});
	   *   this.createStateKeySetter('x')(1);
	   *
	   * Note: this is memoized function, which makes it inexpensive to call.
	   *
	   * @param {string} key The key in the state that you should update.
	   * @return {function} callback of 1 argument which calls setState() with
	   *                    the provided keyName and callback argument.
	   */
	  createStateKeySetter: function(key) {
	    return ReactStateSetters.createStateKeySetter(this, key);
	  }
	};

	module.exports = ReactStateSetters;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	'use strict';

	var shallowEqual = __webpack_require__(151);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) ||
	           !shallowEqual(this.state, nextState);
	  }
	};

	module.exports = ReactComponentWithPureRenderMixin;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(16);

	var assign = __webpack_require__(27);

	var ReactTransitionGroup = React.createFactory(
	  __webpack_require__(277)
	);
	var ReactCSSTransitionGroupChild = React.createFactory(
	  __webpack_require__(282)
	);

	var ReactCSSTransitionGroup = React.createClass({
	  displayName: 'ReactCSSTransitionGroup',

	  propTypes: {
	    transitionName: React.PropTypes.string.isRequired,
	    transitionAppear: React.PropTypes.bool,
	    transitionEnter: React.PropTypes.bool,
	    transitionLeave: React.PropTypes.bool
	  },

	  getDefaultProps: function() {
	    return {
	      transitionAppear: false,
	      transitionEnter: true,
	      transitionLeave: true
	    };
	  },

	  _wrapChild: function(child) {
	    // We need to provide this childFactory so that
	    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
	    // leave while it is leaving.
	    return ReactCSSTransitionGroupChild(
	      {
	        name: this.props.transitionName,
	        appear: this.props.transitionAppear,
	        enter: this.props.transitionEnter,
	        leave: this.props.transitionLeave
	      },
	      child
	    );
	  },

	  render: function() {
	    return (
	      ReactTransitionGroup(
	        assign({}, this.props, {childFactory: this._wrapChild})
	      )
	    );
	  }
	});

	module.exports = ReactCSSTransitionGroup;


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionGroup
	 */

	'use strict';

	var React = __webpack_require__(16);
	var ReactTransitionChildMapping = __webpack_require__(278);

	var assign = __webpack_require__(27);
	var cloneWithProps = __webpack_require__(279);
	var emptyFunction = __webpack_require__(30);

	var ReactTransitionGroup = React.createClass({
	  displayName: 'ReactTransitionGroup',

	  propTypes: {
	    component: React.PropTypes.any,
	    childFactory: React.PropTypes.func
	  },

	  getDefaultProps: function() {
	    return {
	      component: 'span',
	      childFactory: emptyFunction.thatReturnsArgument
	    };
	  },

	  getInitialState: function() {
	    return {
	      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
	    };
	  },

	  componentWillMount: function() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  },

	  componentDidMount: function() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key);
	      }
	    }
	  },

	  componentWillReceiveProps: function(nextProps) {
	    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
	      nextProps.children
	    );
	    var prevChildMapping = this.state.children;

	    this.setState({
	      children: ReactTransitionChildMapping.mergeChildMappings(
	        prevChildMapping,
	        nextChildMapping
	      )
	    });

	    var key;

	    for (key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }

	    for (key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
	      if (prevChildMapping[key] && !hasNext &&
	          !this.currentlyTransitioningKeys[key]) {
	        this.keysToLeave.push(key);
	      }
	    }

	    // If we want to someday check for reordering, we could do it here.
	  },

	  componentDidUpdate: function() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);

	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  },

	  performAppear: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillAppear) {
	      component.componentWillAppear(
	        this._handleDoneAppearing.bind(this, key)
	      );
	    } else {
	      this._handleDoneAppearing(key);
	    }
	  },

	  _handleDoneAppearing: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidAppear) {
	      component.componentDidAppear();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully appeared. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performEnter: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];

	    if (component.componentWillEnter) {
	      component.componentWillEnter(
	        this._handleDoneEntering.bind(this, key)
	      );
	    } else {
	      this._handleDoneEntering(key);
	    }
	  },

	  _handleDoneEntering: function(key) {
	    var component = this.refs[key];
	    if (component.componentDidEnter) {
	      component.componentDidEnter();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	      // This was removed before it had fully entered. Remove it.
	      this.performLeave(key);
	    }
	  },

	  performLeave: function(key) {
	    this.currentlyTransitioningKeys[key] = true;

	    var component = this.refs[key];
	    if (component.componentWillLeave) {
	      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
	    } else {
	      // Note that this is somewhat dangerous b/c it calls setState()
	      // again, effectively mutating the component before all the work
	      // is done.
	      this._handleDoneLeaving(key);
	    }
	  },

	  _handleDoneLeaving: function(key) {
	    var component = this.refs[key];

	    if (component.componentDidLeave) {
	      component.componentDidLeave();
	    }

	    delete this.currentlyTransitioningKeys[key];

	    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
	      this.props.children
	    );

	    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	      // This entered again before it fully left. Add it again.
	      this.performEnter(key);
	    } else {
	      var newChildren = assign({}, this.state.children);
	      delete newChildren[key];
	      this.setState({children: newChildren});
	    }
	  },

	  render: function() {
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	    for (var key in this.state.children) {
	      var child = this.state.children[key];
	      if (child) {
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(cloneWithProps(
	          this.props.childFactory(child),
	          {ref: key, key: key}
	        ));
	      }
	    }
	    return React.createElement(
	      this.props.component,
	      this.props,
	      childrenToRender
	    );
	  }
	});

	module.exports = ReactTransitionGroup;


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactTransitionChildMapping
	 */

	'use strict';

	var ReactChildren = __webpack_require__(22);
	var ReactFragment = __webpack_require__(24);

	var ReactTransitionChildMapping = {
	  /**
	   * Given `this.props.children`, return an object mapping key to child. Just
	   * simple syntactic sugar around ReactChildren.map().
	   *
	   * @param {*} children `this.props.children`
	   * @return {object} Mapping of key to child
	   */
	  getChildMapping: function(children) {
	    if (!children) {
	      return children;
	    }
	    return ReactFragment.extract(ReactChildren.map(children, function(child) {
	      return child;
	    }));
	  },

	  /**
	   * When you're adding or removing children some may be added or removed in the
	   * same render pass. We want to show *both* since we want to simultaneously
	   * animate elements in and out. This function takes a previous set of keys
	   * and a new set of keys and merges them with its best guess of the correct
	   * ordering. In the future we may expose some of the utilities in
	   * ReactMultiChild to make this easy, but for now React itself does not
	   * directly have this concept of the union of prevChildren and nextChildren
	   * so we implement it here.
	   *
	   * @param {object} prev prev children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @param {object} next next children as returned from
	   * `ReactTransitionChildMapping.getChildMapping()`.
	   * @return {object} a key set that contains all keys in `prev` and all keys
	   * in `next` in a reasonable order.
	   */
	  mergeChildMappings: function(prev, next) {
	    prev = prev || {};
	    next = next || {};

	    function getValueForKey(key) {
	      if (next.hasOwnProperty(key)) {
	        return next[key];
	      } else {
	        return prev[key];
	      }
	    }

	    // For each key of `next`, the list of keys to insert before that key in
	    // the combined list
	    var nextKeysPending = {};

	    var pendingKeys = [];
	    for (var prevKey in prev) {
	      if (next.hasOwnProperty(prevKey)) {
	        if (pendingKeys.length) {
	          nextKeysPending[prevKey] = pendingKeys;
	          pendingKeys = [];
	        }
	      } else {
	        pendingKeys.push(prevKey);
	      }
	    }

	    var i;
	    var childMapping = {};
	    for (var nextKey in next) {
	      if (nextKeysPending.hasOwnProperty(nextKey)) {
	        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	          var pendingNextKey = nextKeysPending[nextKey][i];
	          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
	            pendingNextKey
	          );
	        }
	      }
	      childMapping[nextKey] = getValueForKey(nextKey);
	    }

	    // Finally, add the keys which didn't appear before any key in `next`
	    for (i = 0; i < pendingKeys.length; i++) {
	      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	    }

	    return childMapping;
	  }
	};

	module.exports = ReactTransitionChildMapping;


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule cloneWithProps
	 */

	'use strict';

	var ReactElement = __webpack_require__(25);
	var ReactPropTransferer = __webpack_require__(280);

	var keyOf = __webpack_require__(53);
	var warning = __webpack_require__(29);

	var CHILDREN_PROP = keyOf({children: null});

	/**
	 * Sometimes you want to change the props of a child passed to you. Usually
	 * this is to add a CSS class.
	 *
	 * @param {ReactElement} child child element you'd like to clone
	 * @param {object} props props you'd like to modify. className and style will be
	 * merged automatically.
	 * @return {ReactElement} a clone of child with props merged in.
	 */
	function cloneWithProps(child, props) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      !child.ref,
	      'You are calling cloneWithProps() on a child with a ref. This is ' +
	      'dangerous because you\'re creating a new child which will not be ' +
	      'added as a ref to its parent.'
	    ) : null);
	  }

	  var newProps = ReactPropTransferer.mergeProps(props, child.props);

	  // Use `child.props.children` if it is provided.
	  if (!newProps.hasOwnProperty(CHILDREN_PROP) &&
	      child.props.hasOwnProperty(CHILDREN_PROP)) {
	    newProps.children = child.props.children;
	  }

	  // The current API doesn't retain _owner and _context, which is why this
	  // doesn't use ReactElement.cloneAndReplaceProps.
	  return ReactElement.createElement(child.type, newProps);
	}

	module.exports = cloneWithProps;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTransferer
	 */

	'use strict';

	var assign = __webpack_require__(27);
	var emptyFunction = __webpack_require__(30);
	var joinClasses = __webpack_require__(281);

	/**
	 * Creates a transfer strategy that will merge prop values using the supplied
	 * `mergeStrategy`. If a prop was previously unset, this just sets it.
	 *
	 * @param {function} mergeStrategy
	 * @return {function}
	 */
	function createTransferStrategy(mergeStrategy) {
	  return function(props, key, value) {
	    if (!props.hasOwnProperty(key)) {
	      props[key] = value;
	    } else {
	      props[key] = mergeStrategy(props[key], value);
	    }
	  };
	}

	var transferStrategyMerge = createTransferStrategy(function(a, b) {
	  // `merge` overrides the first object's (`props[key]` above) keys using the
	  // second object's (`value`) keys. An object's style's existing `propA` would
	  // get overridden. Flip the order here.
	  return assign({}, b, a);
	});

	/**
	 * Transfer strategies dictate how props are transferred by `transferPropsTo`.
	 * NOTE: if you add any more exceptions to this list you should be sure to
	 * update `cloneWithProps()` accordingly.
	 */
	var TransferStrategies = {
	  /**
	   * Never transfer `children`.
	   */
	  children: emptyFunction,
	  /**
	   * Transfer the `className` prop by merging them.
	   */
	  className: createTransferStrategy(joinClasses),
	  /**
	   * Transfer the `style` prop (which is an object) by merging them.
	   */
	  style: transferStrategyMerge
	};

	/**
	 * Mutates the first argument by transferring the properties from the second
	 * argument.
	 *
	 * @param {object} props
	 * @param {object} newProps
	 * @return {object}
	 */
	function transferInto(props, newProps) {
	  for (var thisKey in newProps) {
	    if (!newProps.hasOwnProperty(thisKey)) {
	      continue;
	    }

	    var transferStrategy = TransferStrategies[thisKey];

	    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
	      transferStrategy(props, thisKey, newProps[thisKey]);
	    } else if (!props.hasOwnProperty(thisKey)) {
	      props[thisKey] = newProps[thisKey];
	    }
	  }
	  return props;
	}

	/**
	 * ReactPropTransferer are capable of transferring props to another component
	 * using a `transferPropsTo` method.
	 *
	 * @class ReactPropTransferer
	 */
	var ReactPropTransferer = {

	  /**
	   * Merge two props objects using TransferStrategies.
	   *
	   * @param {object} oldProps original props (they take precedence)
	   * @param {object} newProps new props to merge in
	   * @return {object} a new object containing both sets of props merged.
	   */
	  mergeProps: function(oldProps, newProps) {
	    return transferInto(assign({}, oldProps), newProps);
	  }

	};

	module.exports = ReactPropTransferer;


/***/ },
/* 281 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule joinClasses
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */
	function joinClasses(className/*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @providesModule ReactCSSTransitionGroupChild
	 */

	'use strict';

	var React = __webpack_require__(16);

	var CSSCore = __webpack_require__(283);
	var ReactTransitionEvents = __webpack_require__(284);

	var onlyChild = __webpack_require__(170);
	var warning = __webpack_require__(29);

	// We don't remove the element from the DOM until we receive an animationend or
	// transitionend event. If the user screws up and forgets to add an animation
	// their node will be stuck in the DOM forever, so we detect if an animation
	// does not start and if it doesn't, we just call the end listener immediately.
	var TICK = 17;
	var NO_EVENT_TIMEOUT = 5000;

	var noEventListener = null;


	if ("production" !== process.env.NODE_ENV) {
	  noEventListener = function() {
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'transition(): tried to perform an animation without ' +
	      'an animationend or transitionend event after timeout (' +
	      '%sms). You should either disable this ' +
	      'transition in JS or add a CSS animation/transition.',
	      NO_EVENT_TIMEOUT
	    ) : null);
	  };
	}

	var ReactCSSTransitionGroupChild = React.createClass({
	  displayName: 'ReactCSSTransitionGroupChild',

	  transition: function(animationType, finishCallback) {
	    var node = this.getDOMNode();
	    var className = this.props.name + '-' + animationType;
	    var activeClassName = className + '-active';
	    var noEventTimeout = null;

	    var endListener = function(e) {
	      if (e && e.target !== node) {
	        return;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        clearTimeout(noEventTimeout);
	      }

	      CSSCore.removeClass(node, className);
	      CSSCore.removeClass(node, activeClassName);

	      ReactTransitionEvents.removeEndEventListener(node, endListener);

	      // Usually this optional callback is used for informing an owner of
	      // a leave animation and telling it to remove the child.
	      if (finishCallback) {
	        finishCallback();
	      }
	    };

	    ReactTransitionEvents.addEndEventListener(node, endListener);

	    CSSCore.addClass(node, className);

	    // Need to do this to actually trigger a transition.
	    this.queueClass(activeClassName);

	    if ("production" !== process.env.NODE_ENV) {
	      noEventTimeout = setTimeout(noEventListener, NO_EVENT_TIMEOUT);
	    }
	  },

	  queueClass: function(className) {
	    this.classNameQueue.push(className);

	    if (!this.timeout) {
	      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
	    }
	  },

	  flushClassNameQueue: function() {
	    if (this.isMounted()) {
	      this.classNameQueue.forEach(
	        CSSCore.addClass.bind(CSSCore, this.getDOMNode())
	      );
	    }
	    this.classNameQueue.length = 0;
	    this.timeout = null;
	  },

	  componentWillMount: function() {
	    this.classNameQueue = [];
	  },

	  componentWillUnmount: function() {
	    if (this.timeout) {
	      clearTimeout(this.timeout);
	    }
	  },

	  componentWillAppear: function(done) {
	    if (this.props.appear) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillEnter: function(done) {
	    if (this.props.enter) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function(done) {
	    if (this.props.leave) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  render: function() {
	    return onlyChild(this.props.children);
	  }
	});

	module.exports = ReactCSSTransitionGroupChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSCore
	 * @typechecks
	 */

	var invariant = __webpack_require__(21);

	/**
	 * The CSSCore module specifies the API (and implements most of the methods)
	 * that should be used when dealing with the display of elements (via their
	 * CSS classes and visibility on screen. It is an API focused on mutating the
	 * display and not reading it as no logical state should be encoded in the
	 * display of elements.
	 */

	var CSSCore = {

	  /**
	   * Adds the class passed in to the element if it doesn't already have it.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  addClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.addClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else if (!CSSCore.hasClass(element, className)) {
	        element.className = element.className + ' ' + className;
	      }
	    }
	    return element;
	  },

	  /**
	   * Removes the class passed in from the element
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {DOMElement} the element passed in
	   */
	  removeClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSSCore.removeClass takes only a single class name. "%s" contains ' +
	      'multiple classes.', className
	    ) : invariant(!/\s/.test(className)));

	    if (className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else if (CSSCore.hasClass(element, className)) {
	        element.className = element.className
	          .replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1')
	          .replace(/\s+/g, ' ') // multiple spaces to one
	          .replace(/^\s*|\s*$/g, ''); // trim the ends
	      }
	    }
	    return element;
	  },

	  /**
	   * Helper to add or remove a class from an element based on a condition.
	   *
	   * @param {DOMElement} element the element to set the class on
	   * @param {string} className the CSS className
	   * @param {*} bool condition to whether to add or remove the class
	   * @return {DOMElement} the element passed in
	   */
	  conditionClass: function(element, className, bool) {
	    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
	  },

	  /**
	   * Tests whether the element has the class specified.
	   *
	   * @param {DOMNode|DOMWindow} element the element to set the class on
	   * @param {string} className the CSS className
	   * @return {boolean} true if the element has the class, false if not
	   */
	  hasClass: function(element, className) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !/\s/.test(className),
	      'CSS.hasClass takes only a single class name.'
	    ) : invariant(!/\s/.test(className)));
	    if (element.classList) {
	      return !!className && element.classList.contains(className);
	    }
	    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
	  }

	};

	module.exports = CSSCore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTransitionEvents
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(65);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (ExecutionEnvironment.canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function(endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	module.exports = ReactTransitionEvents;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule cx
	 */

	/**
	 * This function is used to mark string literals representing CSS class names
	 * so that they can be transformed statically. This allows for modularization
	 * and minification of CSS class names.
	 *
	 * In static_upstream, this function is actually implemented, but it should
	 * eventually be replaced with something more descriptive, and the transform
	 * that is used in the main stack should be ported for use elsewhere.
	 *
	 * @param string|object className to modularize, or an object of key/values.
	 *                      In the object case, the values are conditions that
	 *                      determine if the className keys should be included.
	 * @param [string ...]  Variable list of classNames in the string case.
	 * @return string       Renderable space-separated CSS className.
	 */

	'use strict';
	var warning = __webpack_require__(29);

	var warned = false;

	function cx(classNames) {
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      warned,
	      'React.addons.classSet will be deprecated in a future version. See ' +
	      'http://fb.me/react-addons-classset'
	    ) : null);
	    warned = true;
	  }

	  if (typeof classNames == 'object') {
	    return Object.keys(classNames).filter(function(className) {
	      return classNames[className];
	    }).join(' ');
	  } else {
	    return Array.prototype.join.call(arguments, ' ');
	  }
	}

	module.exports = cx;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	 /* global hasOwnProperty:true */

	'use strict';

	var assign = __webpack_require__(27);
	var keyOf = __webpack_require__(53);
	var invariant = __webpack_require__(21);
	var hasOwnProperty = {}.hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && typeof x === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({$push: null});
	var COMMAND_UNSHIFT = keyOf({$unshift: null});
	var COMMAND_SPLICE = keyOf({$splice: null});
	var COMMAND_SET = keyOf({$set: null});
	var COMMAND_MERGE = keyOf({$merge: null});
	var COMMAND_APPLY = keyOf({$apply: null});

	var ALL_COMMANDS_LIST = [
	  COMMAND_PUSH,
	  COMMAND_UNSHIFT,
	  COMMAND_SPLICE,
	  COMMAND_SET,
	  COMMAND_MERGE,
	  COMMAND_APPLY
	];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function(command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(value),
	    'update(): expected target of %s to be an array; got %s.',
	    command,
	    value
	  ) : invariant(Array.isArray(value)));
	  var specValue = spec[command];
	  ("production" !== process.env.NODE_ENV ? invariant(
	    Array.isArray(specValue),
	    'update(): expected spec of %s to be an array; got %s. ' +
	    'Did you forget to wrap your parameter in an array?',
	    command,
	    specValue
	  ) : invariant(Array.isArray(specValue)));
	}

	function update(value, spec) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec === 'object',
	    'update(): You provided a key path to update() that did not contain one ' +
	    'of %s. Did you forget to include {%s: ...}?',
	    ALL_COMMANDS_LIST.join(', '),
	    COMMAND_SET
	  ) : invariant(typeof spec === 'object'));

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Object.keys(spec).length === 1,
	      'Cannot have more than one key in an object with %s',
	      COMMAND_SET
	    ) : invariant(Object.keys(spec).length === 1));

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    ("production" !== process.env.NODE_ENV ? invariant(
	      mergeObj && typeof mergeObj === 'object',
	      'update(): %s expects a spec of type \'object\'; got %s',
	      COMMAND_MERGE,
	      mergeObj
	    ) : invariant(mergeObj && typeof mergeObj === 'object'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      nextValue && typeof nextValue === 'object',
	      'update(): %s expects a target of type \'object\'; got %s',
	      COMMAND_MERGE,
	      nextValue
	    ) : invariant(nextValue && typeof nextValue === 'object'));
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function(item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function(item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(value),
	      'Expected %s target to be an array; got %s',
	      COMMAND_SPLICE,
	      value
	    ) : invariant(Array.isArray(value)));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      Array.isArray(spec[COMMAND_SPLICE]),
	      'update(): expected spec of %s to be an array of arrays; got %s. ' +
	      'Did you forget to wrap your parameters in an array?',
	      COMMAND_SPLICE,
	      spec[COMMAND_SPLICE]
	    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));
	    spec[COMMAND_SPLICE].forEach(function(args) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        Array.isArray(args),
	        'update(): expected spec of %s to be an array of arrays; got %s. ' +
	        'Did you forget to wrap your parameters in an array?',
	        COMMAND_SPLICE,
	        spec[COMMAND_SPLICE]
	      ) : invariant(Array.isArray(args)));
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof spec[COMMAND_APPLY] === 'function',
	      'update(): expected spec of %s to be a function; got %s.',
	      COMMAND_APPLY,
	      spec[COMMAND_APPLY]
	    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactTestUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(83);
	var EventPropagators = __webpack_require__(107);
	var React = __webpack_require__(16);
	var ReactElement = __webpack_require__(25);
	var ReactEmptyComponent = __webpack_require__(90);
	var ReactBrowserEventEmitter = __webpack_require__(82);
	var ReactCompositeComponent = __webpack_require__(98);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(50);
	var ReactMount = __webpack_require__(81);
	var ReactUpdates = __webpack_require__(38);
	var SyntheticEvent = __webpack_require__(111);

	var assign = __webpack_require__(27);
	var emptyObject = __webpack_require__(28);

	var topLevelTypes = EventConstants.topLevelTypes;

	function Event(suffix) {}

	/**
	 * @class ReactTestUtils
	 */

	/**
	 * Todo: Support the entire DOM.scry query syntax. For now, these simple
	 * utilities will suffice for testing purposes.
	 * @lends ReactTestUtils
	 */
	var ReactTestUtils = {
	  renderIntoDocument: function(instance) {
	    var div = document.createElement('div');
	    // None of our tests actually require attaching the container to the
	    // DOM, and doing so creates a mess that we rely on test isolation to
	    // clean up, so we're going to stop honoring the name of this method
	    // (and probably rename it eventually) if no problems arise.
	    // document.documentElement.appendChild(div);
	    return React.render(instance, div);
	  },

	  isElement: function(element) {
	    return ReactElement.isValidElement(element);
	  },

	  isElementOfType: function(inst, convenienceConstructor) {
	    return (
	      ReactElement.isValidElement(inst) &&
	      inst.type === convenienceConstructor
	    );
	  },

	  isDOMComponent: function(inst) {
	    // TODO: Fix this heuristic. It's just here because composites can currently
	    // pretend to be DOM components.
	    return !!(inst && inst.tagName && inst.getDOMNode);
	  },

	  isDOMComponentElement: function(inst) {
	    return !!(inst &&
	              ReactElement.isValidElement(inst) &&
	              !!inst.tagName);
	  },

	  isCompositeComponent: function(inst) {
	    return typeof inst.render === 'function' &&
	           typeof inst.setState === 'function';
	  },

	  isCompositeComponentWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponent(inst) &&
	             (inst.constructor === type));
	  },

	  isCompositeComponentElement: function(inst) {
	    if (!ReactElement.isValidElement(inst)) {
	      return false;
	    }
	    // We check the prototype of the type that will get mounted, not the
	    // instance itself. This is a future proof way of duck typing.
	    var prototype = inst.type.prototype;
	    return (
	      typeof prototype.render === 'function' &&
	      typeof prototype.setState === 'function'
	    );
	  },

	  isCompositeComponentElementWithType: function(inst, type) {
	    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
	             (inst.constructor === type));
	  },

	  getRenderedChildOfCompositeComponent: function(inst) {
	    if (!ReactTestUtils.isCompositeComponent(inst)) {
	      return null;
	    }
	    var internalInstance = ReactInstanceMap.get(inst);
	    return internalInstance._renderedComponent.getPublicInstance();
	  },

	  findAllInRenderedTree: function(inst, test) {
	    if (!inst) {
	      return [];
	    }
	    var ret = test(inst) ? [inst] : [];
	    if (ReactTestUtils.isDOMComponent(inst)) {
	      var internalInstance = ReactInstanceMap.get(inst);
	      var renderedChildren = internalInstance
	        ._renderedComponent
	        ._renderedChildren;
	      var key;
	      for (key in renderedChildren) {
	        if (!renderedChildren.hasOwnProperty(key)) {
	          continue;
	        }
	        if (!renderedChildren[key].getPublicInstance) {
	          continue;
	        }
	        ret = ret.concat(
	          ReactTestUtils.findAllInRenderedTree(
	            renderedChildren[key].getPublicInstance(),
	            test
	          )
	        );
	      }
	    } else if (ReactTestUtils.isCompositeComponent(inst)) {
	      ret = ret.concat(
	        ReactTestUtils.findAllInRenderedTree(
	          ReactTestUtils.getRenderedChildOfCompositeComponent(inst),
	          test
	        )
	      );
	    }
	    return ret;
	  },

	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the class name matching `className`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithClass: function(root, className) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      var instClassName = inst.props.className;
	      return ReactTestUtils.isDOMComponent(inst) && (
	        (instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1)
	      );
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithClass: function(root, className) {
	    var all =
	      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match ' +
	        '(found: ' + all.length + ') for class:' + className
	      );
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instance of components in the rendered tree that are DOM
	   * components with the tag name matching `tagName`.
	   * @return an array of all the matches.
	   */
	  scryRenderedDOMComponentsWithTag: function(root, tagName) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isDOMComponent(inst) &&
	            inst.tagName === tagName.toUpperCase();
	    });
	  },

	  /**
	   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactDOMComponent} The one match.
	   */
	  findRenderedDOMComponentWithTag: function(root, tagName) {
	    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
	    if (all.length !== 1) {
	      throw new Error('Did not find exactly one match for tag:' + tagName);
	    }
	    return all[0];
	  },


	  /**
	   * Finds all instances of components with type equal to `componentType`.
	   * @return an array of all the matches.
	   */
	  scryRenderedComponentsWithType: function(root, componentType) {
	    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
	      return ReactTestUtils.isCompositeComponentWithType(
	        inst,
	        componentType
	      );
	    });
	  },

	  /**
	   * Same as `scryRenderedComponentsWithType` but expects there to be one result
	   * and returns that one result, or throws exception if there is any other
	   * number of matches besides one.
	   * @return {!ReactComponent} The one match.
	   */
	  findRenderedComponentWithType: function(root, componentType) {
	    var all = ReactTestUtils.scryRenderedComponentsWithType(
	      root,
	      componentType
	    );
	    if (all.length !== 1) {
	      throw new Error(
	        'Did not find exactly one match for componentType:' + componentType
	      );
	    }
	    return all[0];
	  },

	  /**
	   * Pass a mocked component module to this method to augment it with
	   * useful methods that allow it to be used as a dummy React component.
	   * Instead of rendering as usual, the component will become a simple
	   * <div> containing any provided children.
	   *
	   * @param {object} module the mock function object exported from a
	   *                        module that defines the component to be mocked
	   * @param {?string} mockTagName optional dummy root tag name to return
	   *                              from render method (overrides
	   *                              module.mockTagName if provided)
	   * @return {object} the ReactTestUtils object (for chaining)
	   */
	  mockComponent: function(module, mockTagName) {
	    mockTagName = mockTagName || module.mockTagName || "div";

	    module.prototype.render.mockImplementation(function() {
	      return React.createElement(
	        mockTagName,
	        null,
	        this.props.children
	      );
	    });

	    return this;
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on an `Element` node.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`
	   * @param {!Element} node The dom to simulate an event occurring on.
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {
	    fakeNativeEvent.target = node;
	    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
	      topLevelType,
	      fakeNativeEvent
	    );
	  },

	  /**
	   * Simulates a top level event being dispatched from a raw event that occured
	   * on the `ReactDOMComponent` `comp`.
	   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.
	   * @param comp {!ReactDOMComponent}
	   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
	   */
	  simulateNativeEventOnDOMComponent: function(
	      topLevelType,
	      comp,
	      fakeNativeEvent) {
	    ReactTestUtils.simulateNativeEventOnNode(
	      topLevelType,
	      comp.getDOMNode(),
	      fakeNativeEvent
	    );
	  },

	  nativeTouchData: function(x, y) {
	    return {
	      touches: [
	        {pageX: x, pageY: y}
	      ]
	    };
	  },

	  createRenderer: function() {
	    return new ReactShallowRenderer();
	  },

	  Simulate: null,
	  SimulateNative: {}
	};

	/**
	 * @class ReactShallowRenderer
	 */
	var ReactShallowRenderer = function() {
	  this._instance = null;
	};

	ReactShallowRenderer.prototype.getRenderOutput = function() {
	  return (
	    (this._instance && this._instance._renderedComponent &&
	     this._instance._renderedComponent._renderedOutput)
	    || null
	  );
	};

	var NoopInternalComponent = function(element) {
	  this._renderedOutput = element;
	  this._currentElement = element === null || element === false ?
	    ReactEmptyComponent.emptyElement :
	    element;
	};

	NoopInternalComponent.prototype = {

	  mountComponent: function() {
	  },

	  receiveComponent: function(element) {
	    this._renderedOutput = element;
	    this._currentElement = element === null || element === false ?
	      ReactEmptyComponent.emptyElement :
	      element;
	  },

	  unmountComponent: function() {
	  }

	};

	var ShallowComponentWrapper = function() { };
	assign(
	  ShallowComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin, {
	    _instantiateReactComponent: function(element) {
	      return new NoopInternalComponent(element);
	    },
	    _replaceNodeWithMarkupByID: function() {},
	    _renderValidatedComponent:
	      ReactCompositeComponent.Mixin.
	        _renderValidatedComponentWithoutOwnerOrContext
	  }
	);

	ReactShallowRenderer.prototype.render = function(element, context) {
	  if (!context) {
	    context = emptyObject;
	  }
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  this._render(element, transaction, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	};

	ReactShallowRenderer.prototype.unmount = function() {
	  if (this._instance) {
	    this._instance.unmountComponent();
	  }
	};

	ReactShallowRenderer.prototype._render = function(element, transaction, context) {
	  if (!this._instance) {
	    var rootID = ReactInstanceHandles.createReactRootID();
	    var instance = new ShallowComponentWrapper(element.type);
	    instance.construct(element);

	    instance.mountComponent(rootID, transaction, context);

	    this._instance = instance;
	  } else {
	    this._instance.receiveComponent(element, transaction, context);
	  }
	};

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
	 * - ... (All keys from event plugin `eventTypes` objects)
	 */
	function makeSimulator(eventType) {
	  return function(domComponentOrNode, eventData) {
	    var node;
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      node = domComponentOrNode.getDOMNode();
	    } else if (domComponentOrNode.tagName) {
	      node = domComponentOrNode;
	    }

	    var fakeNativeEvent = new Event();
	    fakeNativeEvent.target = node;
	    // We don't use SyntheticEvent.getPooled in order to not have to worry about
	    // properly destroying any properties assigned from `eventData` upon release
	    var event = new SyntheticEvent(
	      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],
	      ReactMount.getID(node),
	      fakeNativeEvent
	    );
	    assign(event, eventData);
	    EventPropagators.accumulateTwoPhaseDispatches(event);

	    ReactUpdates.batchedUpdates(function() {
	      EventPluginHub.enqueueEvents(event);
	      EventPluginHub.processEventQueue();
	    });
	  };
	}

	function buildSimulators() {
	  ReactTestUtils.Simulate = {};

	  var eventType;
	  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {
	    /**
	     * @param {!Element || ReactDOMComponent} domComponentOrNode
	     * @param {?object} eventData Fake event data to use in SyntheticEvent.
	     */
	    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
	  }
	}

	// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
	var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
	EventPluginHub.injection.injectEventPluginOrder = function() {
	  oldInjectEventPluginOrder.apply(this, arguments);
	  buildSimulators();
	};
	var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
	EventPluginHub.injection.injectEventPluginsByName = function() {
	  oldInjectEventPlugins.apply(this, arguments);
	  buildSimulators();
	};

	buildSimulators();

	/**
	 * Exports:
	 *
	 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
	 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
	 * - ... (All keys from `EventConstants.topLevelTypes`)
	 *
	 * Note: Top level event types are a subset of the entire set of handler types
	 * (which include a broader set of "synthetic" events). For example, onDragDone
	 * is a synthetic event. Except when testing an event plugin or React's event
	 * handling code specifically, you probably want to use ReactTestUtils.Simulate
	 * to dispatch synthetic events.
	 */

	function makeNativeSimulator(eventType) {
	  return function(domComponentOrNode, nativeEventData) {
	    var fakeNativeEvent = new Event(eventType);
	    assign(fakeNativeEvent, nativeEventData);
	    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
	      ReactTestUtils.simulateNativeEventOnDOMComponent(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    } else if (!!domComponentOrNode.tagName) {
	      // Will allow on actual dom nodes.
	      ReactTestUtils.simulateNativeEventOnNode(
	        eventType,
	        domComponentOrNode,
	        fakeNativeEvent
	      );
	    }
	  };
	}

	var eventType;
	for (eventType in topLevelTypes) {
	  // Event type is stored as 'topClick' - we transform that to 'click'
	  var convenienceName = eventType.indexOf('top') === 0 ?
	    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
	  /**
	   * @param {!Element || ReactDOMComponent} domComponentOrNode
	   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
	   */
	  ReactTestUtils.SimulateNative[convenienceName] =
	    makeNativeSimulator(eventType);
	}

	module.exports = ReactTestUtils;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _themeGetTheme = __webpack_require__(172);

	var _themeGetTheme2 = _interopRequireDefault(_themeGetTheme);

	var _lodashObjectForOwn = __webpack_require__(205);

	var _lodashObjectForOwn2 = _interopRequireDefault(_lodashObjectForOwn);

	var _lodashObjectPick = __webpack_require__(289);

	var _lodashObjectPick2 = _interopRequireDefault(_lodashObjectPick);

	exports['default'] = function (Component) {
	  Component.contextTypes = {
	    matterkitTheme: _react2['default'].PropTypes.object
	  };

	  Component.prototype.getBasics = function () {
	    return (0, _lodashObjectPick2['default'])(this.props, 'id', 'className', 'onClick', 'onMouseEnter', 'onMouseLeave', 'onMouseOver', 'onMouseOut', 'onMouseDown', 'onMouseUp');
	  };

	  Component.prototype.getStyle = function (name, mod, style) {
	    var styles = (0, _themeGetTheme2['default'])(this);
	    var ret = styles.getStyle(name, mod, style);

	    (0, _lodashObjectForOwn2['default'])(ret, function (value, key) {
	      var pre = key[0];
	      if (pre !== ':' && pre !== '@' && typeof value === 'object') {
	        delete ret[key];
	      }
	    });

	    return ret;
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(290),
	    bindCallback = __webpack_require__(199),
	    pickByArray = __webpack_require__(292),
	    pickByCallback = __webpack_require__(293),
	    restParam = __webpack_require__(201);

	/**
	 * Creates an object composed of the picked `object` properties. Property
	 * names may be specified as individual arguments or as arrays of property
	 * names. If `predicate` is provided it is invoked for each property of `object`
	 * picking the properties `predicate` returns truthy for. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to pick, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.pick(object, 'user');
	 * // => { 'user': 'fred' }
	 *
	 * _.pick(object, _.isString);
	 * // => { 'user': 'fred' }
	 */
	var pick = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  return typeof props[0] == 'function'
	    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	    : pickByArray(object, baseFlatten(props));
	});

	module.exports = pick;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(291),
	    isArguments = __webpack_require__(181),
	    isArray = __webpack_require__(183),
	    isArrayLike = __webpack_require__(8),
	    isObjectLike = __webpack_require__(182);

	/**
	 * The base implementation of `_.flatten` with added support for restricting
	 * flattening and specifying the start index.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);

	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    if (isObjectLike(value) && isArrayLike(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ },
/* 291 */
/***/ function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(191);

	/**
	 * A specialized version of `_.pick` which picks `object` properties specified
	 * by `props`.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property names to pick.
	 * @returns {Object} Returns the new object.
	 */
	function pickByArray(object, props) {
	  object = toObject(object);

	  var index = -1,
	      length = props.length,
	      result = {};

	  while (++index < length) {
	    var key = props[index];
	    if (key in object) {
	      result[key] = object[key];
	    }
	  }
	  return result;
	}

	module.exports = pickByArray;


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(188);

	/**
	 * A specialized version of `_.pick` which picks `object` properties `predicate`
	 * returns truthy for.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Object} Returns the new object.
	 */
	function pickByCallback(object, predicate) {
	  var result = {};
	  baseForIn(object, function(value, key, object) {
	    if (predicate(value, key, object)) {
	      result[key] = value;
	    }
	  });
	  return result;
	}

	module.exports = pickByCallback;


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Panel = (function (_React$Component) {
	  _inherits(Panel, _React$Component);

	  function Panel(props) {
	    _classCallCheck(this, _Panel);

	    _get(Object.getPrototypeOf(_Panel.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Panel, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('panel', mod, style) }),
	        this.props.children
	      );
	    }
	  }]);

	  var _Panel = Panel;
	  Panel = (0, _utilsMatterBasics2['default'])(Panel) || Panel;
	  Panel = (0, _radium2['default'])(Panel) || Panel;
	  return Panel;
	})(_react2['default'].Component);

	exports['default'] = Panel;
	module.exports = exports['default'];

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _Icon = __webpack_require__(296);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Button = (function (_React$Component) {
	  _inherits(Button, _React$Component);

	  _createClass(Button, null, [{
	    key: 'propTypes',
	    value: {
	      label: _react.PropTypes.string,
	      icon: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.shape(_Icon2['default'].propTypes)]),
	      onClick: _react.PropTypes.func,
	      disabled: _react.PropTypes.bool,
	      mod: _react.PropTypes.shape({
	        kind: _react.PropTypes.oneOf(['normal', 'stamp', 'colored'])
	      }),
	      style: _react.PropTypes.object
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      label: '',
	      disabled: false,
	      mod: {
	        kind: 'normal'
	      }
	    },
	    enumerable: true
	  }]);

	  function Button(props) {
	    _classCallCheck(this, _Button);

	    _get(Object.getPrototypeOf(_Button.prototype), 'constructor', this).call(this, props);

	    this.state = {
	      toggled: false
	    };
	  }

	  _createClass(Button, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var icon = _props.icon;
	      var onClick = _props.onClick;
	      var label = _props.label;
	      var disabled = _props.disabled;

	      mod = _extends({}, mod, { disabled: disabled, onlyIcon: icon && !label });

	      if (typeof icon === 'string') {
	        icon = { icon: icon };
	      }

	      if (icon) {
	        var iconStyle = _extends({}, icon.style, { marginRight: label ? 4 : 0 });
	        icon = _react2['default'].createElement(_Icon2['default'], _extends({}, icon, { style: iconStyle }));
	      }

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('button', mod, style),
	          onClick: onClick }),
	        icon,
	        label
	      );
	    }
	  }]);

	  var _Button = Button;
	  Button = (0, _utilsMatterBasics2['default'])(Button) || Button;
	  Button = (0, _pureRenderDecorator2['default'])(Button) || Button;
	  Button = (0, _radium2['default'])(Button) || Button;
	  return Button;
	})(_react2['default'].Component);

	exports['default'] = Button;
	module.exports = exports['default'];

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Icon = (function (_React$Component) {
	  _inherits(Icon, _React$Component);

	  _createClass(Icon, null, [{
	    key: 'propTypes',
	    value: {
	      icon: _react.PropTypes.string,
	      className: _react.PropTypes.string,
	      onClick: _react.PropTypes.func,
	      disabled: _react.PropTypes.bool,
	      style: _react.PropTypes.object
	    },
	    enumerable: true
	  }]);

	  function Icon(props) {
	    _classCallCheck(this, _Icon);

	    _get(Object.getPrototypeOf(_Icon.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Icon, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      return _react2['default'].createElement('i', _extends({}, this.getBasics(), {
	        style: this.getStyle('icon', mod, style),
	        className: this.props.className || 'fa fa-' + this.props.icon,
	        onClick: this.props.onClick }));
	    }
	  }]);

	  var _Icon = Icon;
	  Icon = (0, _utilsMatterBasics2['default'])(Icon) || Icon;
	  Icon = (0, _pureRenderDecorator2['default'])(Icon) || Icon;
	  Icon = (0, _radium2['default'])(Icon) || Icon;
	  return Icon;
	})(_react2['default'].Component);

	exports['default'] = Icon;
	module.exports = exports['default'];

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashObjectHas = __webpack_require__(246);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Checkbox = (function (_React$Component) {
	  _inherits(Checkbox, _React$Component);

	  _createClass(Checkbox, null, [{
	    key: 'propTypes',
	    value: {
	      value: _react2['default'].PropTypes.bool,
	      disabled: _react2['default'].PropTypes.bool
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      value: false,
	      disabled: false
	    },
	    enumerable: true
	  }]);

	  function Checkbox(props) {
	    _classCallCheck(this, _Checkbox);

	    _get(Object.getPrototypeOf(_Checkbox.prototype), 'constructor', this).call(this, props);

	    this.state = {
	      value: props.value
	    };
	  }

	  _createClass(Checkbox, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {

	      this.setState({ value: nextProps.value });
	    }
	  }, {
	    key: 'handleClick',
	    value: function handleClick() {

	      var value = !this.state.value;

	      this.setState({ value: value });

	      if (this.props.onChange) {
	        this.props.onChange(value);
	      }
	    }
	  }, {
	    key: 'renderCheck',
	    value: function renderCheck() {

	      if (!this.state.value) {
	        return null;
	      }

	      var _getStyle = this.getStyle('config', { gardient: true });

	      var start = _getStyle.start;
	      var end = _getStyle.end;

	      return _react2['default'].createElement(
	        'svg',
	        { width: "18", height: "18", style: { position: 'absolute' } },
	        _react2['default'].createElement(
	          'defs',
	          null,
	          _react2['default'].createElement(
	            'linearGradient',
	            { id: "grad1", x1: "0%", y1: "0%", x2: "100%", y2: "100%" },
	            _react2['default'].createElement('stop', { offset: "0%", style: { stopColor: start, stopOpacity: 1 } }),
	            _react2['default'].createElement('stop', { offset: "100%", style: { stopColor: end, stopOpacity: 1 } })
	          )
	        ),
	        _react2['default'].createElement('path', { d: "M3.5 9 L5.5 9 L7.5 11 L12.5 3 L 14.5 3 L8.5 13 L7 13 Z", fill: "url(#grad1)" })
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('checkbox', mod, style),
	          onClick: function () {
	            return _this.handleClick();
	          } }),
	        this.renderCheck()
	      );
	    }
	  }]);

	  var _Checkbox = Checkbox;
	  Checkbox = (0, _utilsMatterBasics2['default'])(Checkbox) || Checkbox;
	  Checkbox = (0, _pureRenderDecorator2['default'])(Checkbox) || Checkbox;
	  Checkbox = (0, _radium2['default'])(Checkbox) || Checkbox;
	  return Checkbox;
	})(_react2['default'].Component);

	exports['default'] = Checkbox;
	module.exports = exports['default'];

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashCollectionFind = __webpack_require__(299);

	var _lodashCollectionFind2 = _interopRequireDefault(_lodashCollectionFind);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var _utilsClickAway = __webpack_require__(252);

	var _utilsClickAway2 = _interopRequireDefault(_utilsClickAway);

	var _Icon = __webpack_require__(296);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _ListItem = __webpack_require__(268);

	var _ListItem2 = _interopRequireDefault(_ListItem);

	var _Label = __webpack_require__(320);

	var _Label2 = _interopRequireDefault(_Label);

	var Dropdown = (function (_React$Component) {
	  _inherits(Dropdown, _React$Component);

	  _createClass(Dropdown, null, [{
	    key: 'propTypes',
	    value: {},
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      options: []
	    },
	    enumerable: true
	  }]);

	  function Dropdown(props) {
	    var _this = this;

	    _classCallCheck(this, _Dropdown);

	    _get(Object.getPrototypeOf(_Dropdown.prototype), 'constructor', this).call(this, props);

	    this.handleClickHead = function () {
	      _this.setState({ open: !_this.state.open });
	    };

	    this.handleClickAway = function () {
	      if (_this.state.open) {
	        _this.setState({ open: false });
	      }
	    };

	    this.state = {
	      open: false
	    };
	  }

	  _createClass(Dropdown, [{
	    key: 'renderItems',
	    value: function renderItems() {
	      var _this2 = this;

	      if (this.state.open) {

	        return this.props.options.map(function (option, idx) {

	          if (typeof option === 'string') {
	            option = { label: option, value: option };
	          }

	          return _react2['default'].createElement(_ListItem2['default'], {
	            key: idx,
	            label: option.label,
	            value: option.value,
	            onClick: function () {
	              if (_this2.props.onChange) {
	                _this2.props.onChange(option.value);
	              }

	              if (option.onClick) {
	                option.onClick(option.value);
	              }

	              _this2.setState({ open: false });
	            } });
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var value = _props.value;
	      var label = _props.label;
	      var options = _props.options;
	      var open = this.state.open;

	      var _getStyle = this.getStyle('config');

	      var lineHeight = _getStyle.lineHeight;

	      if (label === undefined) {
	        var currentOption = (0, _lodashCollectionFind2['default'])(options, 'value', value);
	        label = currentOption && currentOption.label;
	      }

	      mod = (0, _lodashObjectAssign2['default'])({ open: open }, mod);

	      if (open) {
	        style = (0, _lodashObjectAssign2['default'])({
	          height: lineHeight * (this.props.options.length + 1)
	        }, style);
	      }

	      return _react2['default'].createElement(
	        _utilsClickAway2['default'],
	        { onClickAway: this.handleClickAway },
	        _react2['default'].createElement(
	          'div',
	          _extends({}, this.getBasics(), {
	            style: this.getStyle('dropdown', mod, style) }),
	          _react2['default'].createElement(
	            'div',
	            {
	              style: { paddingLeft: 8, paddingRight: 8, display: 'flex' },
	              onClick: this.handleClickHead },
	            _react2['default'].createElement(
	              _Label2['default'],
	              { style: { flex: 1 } },
	              label
	            ),
	            _react2['default'].createElement(_Icon2['default'], {
	              style: { marginLeft: 4 },
	              icon: open ? 'chevron-up' : 'chevron-down' })
	          ),
	          this.renderItems()
	        )
	      );
	    }
	  }]);

	  var _Dropdown = Dropdown;
	  Dropdown = (0, _utilsMatterBasics2['default'])(Dropdown) || Dropdown;
	  Dropdown = (0, _pureRenderDecorator2['default'])(Dropdown) || Dropdown;
	  Dropdown = (0, _radium2['default'])(Dropdown) || Dropdown;
	  return Dropdown;
	})(_react2['default'].Component);

	exports['default'] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(300),
	    createFind = __webpack_require__(302);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias detect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.result(_.find(users, function(chr) {
	 *   return chr.age < 40;
	 * }), 'user');
	 * // => 'barney'
	 *
	 * // using the `_.matches` callback shorthand
	 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	 * // => 'pebbles'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.result(_.find(users, 'active', false), 'user');
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.result(_.find(users, 'active'), 'user');
	 * // => 'barney'
	 */
	var find = createFind(baseEach);

	module.exports = find;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(206),
	    createBaseEach = __webpack_require__(301);

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(9),
	    isLength = __webpack_require__(11),
	    toObject = __webpack_require__(191);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(303),
	    baseFind = __webpack_require__(318),
	    baseFindIndex = __webpack_require__(319),
	    isArray = __webpack_require__(183);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(eachFunc, fromRight) {
	  return function(collection, predicate, thisArg) {
	    predicate = baseCallback(predicate, thisArg, 3);
	    if (isArray(collection)) {
	      var index = baseFindIndex(collection, predicate, fromRight);
	      return index > -1 ? collection[index] : undefined;
	    }
	    return baseFind(collection, predicate, eachFunc);
	  };
	}

	module.exports = createFind;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(304),
	    baseMatchesProperty = __webpack_require__(315),
	    bindCallback = __webpack_require__(199),
	    identity = __webpack_require__(200),
	    property = __webpack_require__(316);

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(305),
	    getMatchData = __webpack_require__(312),
	    toObject = __webpack_require__(191);

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value && (value !== undefined || (key in toObject(object)));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(306),
	    toObject = __webpack_require__(191);

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(307),
	    isObject = __webpack_require__(13),
	    isObjectLike = __webpack_require__(182);

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var equalArrays = __webpack_require__(308),
	    equalByTag = __webpack_require__(310),
	    equalObjects = __webpack_require__(311),
	    isArray = __webpack_require__(183),
	    isTypedArray = __webpack_require__(193);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(309);

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;


/***/ },
/* 309 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 310 */
/***/ function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(196);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(313),
	    pairs = __webpack_require__(314);

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(13);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(196),
	    toObject = __webpack_require__(191);

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(247),
	    baseIsEqual = __webpack_require__(306),
	    baseSlice = __webpack_require__(248),
	    isArray = __webpack_require__(183),
	    isKey = __webpack_require__(249),
	    isStrictComparable = __webpack_require__(313),
	    last = __webpack_require__(250),
	    toObject = __webpack_require__(191),
	    toPath = __webpack_require__(251);

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(10),
	    basePropertyDeep = __webpack_require__(317),
	    isKey = __webpack_require__(249);

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(247),
	    toPath = __webpack_require__(251);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 318 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	 * without support for callback shorthands and `this` binding, which iterates
	 * over `collection` using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @param {boolean} [retKey] Specify returning the key of the found element
	 *  instead of the element itself.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFind(collection, predicate, eachFunc, retKey) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = retKey ? key : value;
	      return false;
	    }
	  });
	  return result;
	}

	module.exports = baseFind;


/***/ },
/* 319 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Label = (function (_React$Component) {
	  _inherits(Label, _React$Component);

	  function Label(props) {
	    _classCallCheck(this, _Label);

	    _get(Object.getPrototypeOf(_Label.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Label, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var label = _props.label;
	      var children = _props.children;

	      if (label === undefined) {
	        label = children;
	      }

	      return _react2['default'].createElement(
	        'span',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('label', mod, style) }),
	        label
	      );
	    }
	  }]);

	  var _Label = Label;
	  Label = (0, _utilsMatterBasics2['default'])(Label) || Label;
	  Label = (0, _pureRenderDecorator2['default'])(Label) || Label;
	  Label = (0, _radium2['default'])(Label) || Label;
	  return Label;
	})(_react2['default'].Component);

	exports['default'] = Label;
	module.exports = exports['default'];

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashLangIsFinite = __webpack_require__(323);

	var _lodashLangIsFinite2 = _interopRequireDefault(_lodashLangIsFinite);

	var _Icon = __webpack_require__(296);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _List = __webpack_require__(254);

	var _List2 = _interopRequireDefault(_List);

	var _Panel = __webpack_require__(294);

	var _Panel2 = _interopRequireDefault(_Panel);

	var _customDrag = __webpack_require__(324);

	var _customDrag2 = _interopRequireDefault(_customDrag);

	var _fuzzy = __webpack_require__(322);

	var _fuzzy2 = _interopRequireDefault(_fuzzy);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _tinycolor2 = __webpack_require__(328);

	var _tinycolor22 = _interopRequireDefault(_tinycolor2);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var _utilsColorCircle = __webpack_require__(329);

	var _utilsColorCircle2 = _interopRequireDefault(_utilsColorCircle);

	var dragOptions = {
	  onDown: function onDown(props, monitor, component) {
	    // monitor.getLastEvent().stopPropagation()
	    if (!component.isDraggable()) {
	      return false;
	    }

	    monitor.setData({
	      onDownValue: component.state.formattedValue
	    });
	  },
	  onDrag: function onDrag(props, monitor, component) {
	    var _monitor$getData = monitor.getData();

	    var onDownValue = _monitor$getData.onDownValue;

	    var _monitor$getDifferenceFromInitialOffset = monitor.getDifferenceFromInitialOffset();

	    var x = _monitor$getDifferenceFromInitialOffset.x;

	    var value = onDownValue + x * props.dragSpeed;
	    component.editValue(value);
	  },
	  onClick: function onClick(ptops, monitor, component) {
	    var node = _react2['default'].findDOMNode(component).querySelector('input');
	    node.focus();
	    node.select();
	  }
	};

	var Input = (function (_React$Component) {
	  _inherits(Input, _React$Component);

	  _createClass(Input, null, [{
	    key: 'propTypes',
	    value: {
	      value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
	      type: _react.PropTypes.oneOf(['string', 'number', 'color'])
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      disabled: false,
	      draggable: true,
	      precision: 12,
	      dragSpeed: 1,
	      value: '',
	      type: 'string',
	      min: undefined,
	      max: undefined,
	      prepareExportValue: undefined,
	      formatValue: undefined,

	      hints: undefined,
	      maxVisibleHints: 12
	    },
	    enumerable: true
	  }]);

	  function Input(props) {
	    var _this = this;

	    _classCallCheck(this, _Input);

	    _get(Object.getPrototypeOf(_Input.prototype), 'constructor', this).call(this, props);

	    this.handleInputRef = function (component) {
	      _this.inputNode = _react2['default'].findDOMNode(component);
	    };

	    this.triggerBlur = function () {
	      _this.inputNode.blur();
	    };

	    this.handleChange = function (e) {
	      _this.setState({
	        inputValue: e.target.value
	      });
	    };

	    this.handleFocus = function () {
	      _this.setState({
	        inputValue: _this.state.formattedValue,
	        focus: true
	      });
	      _this.showDropdown();
	    };

	    this.handleBlur = function () {
	      _this.editValue(_this.state.inputValue);

	      _this.setState({
	        focus: false
	      });
	      _this.hideDropdown();
	    };

	    this.state = {
	      error: false
	    };
	  }

	  _createClass(Input, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      this.setPropsValue(this.props);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.setPropsValue(nextProps);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _state = this.state;
	      var exportValue = _state.exportValue;
	      var focus = _state.focus;

	      if (!focus && exportValue !== prevState.exportValue && exportValue !== this.props.value && this.props.onChange) {
	        this.props.onChange(exportValue);
	      }
	    }
	  }, {
	    key: 'isDraggable',
	    value: function isDraggable() {
	      return this.props.type === 'number' && this.props.draggable && !this.state.focus;
	    }
	  }, {
	    key: 'setPropsValue',
	    value: function setPropsValue(props) {
	      if (!this.state.focus) {
	        this.editValue(props.value, props);
	      }
	    }
	  }, {
	    key: 'editValue',
	    value: function editValue(value, props) {
	      props = props || this.props;
	      var _props = props;
	      var prepareExportValue = _props.prepareExportValue;

	      var formattedValue = this.formatValue(value, props);
	      var prettifiedValue = this.prettifyValue(formattedValue, props);
	      var exportValue = prepareExportValue ? prepareExportValue(formattedValue) : formattedValue;

	      this.setState({ formattedValue: formattedValue, prettifiedValue: prettifiedValue, exportValue: exportValue });

	      this.validate(formattedValue);
	    }
	  }, {
	    key: 'formatValue',
	    value: function formatValue(value, props) {
	      props = props || this.props;

	      if (props.type === 'number') {
	        value = this.formatNumber(value);
	      } else if (props.type === 'string') {
	        value += '';
	      }

	      if (props.formatValue) {
	        value = props.formatValue(value);
	      }

	      return value;
	    }
	  }, {
	    key: 'formatNumber',
	    value: function formatNumber(value) {
	      var _props2 = this.props;
	      var min = _props2.min;
	      var max = _props2.max;

	      value = parseFloat(value);
	      if ((0, _lodashLangIsFinite2['default'])(min)) value = Math.max(min, value);
	      if ((0, _lodashLangIsFinite2['default'])(max)) value = Math.min(max, value);

	      return (0, _lodashLangIsFinite2['default'])(value) ? value : 0;
	    }
	  }, {
	    key: 'prettifyValue',
	    value: function prettifyValue(value, props) {
	      props = props || this.props;

	      if (props.type === 'number') {
	        value = this.prettifyNumber(value);
	      }

	      if (props.prettifyValue) {
	        value = props.prettifyValue(value);
	      }

	      return value;
	    }
	  }, {
	    key: 'prettifyNumber',
	    value: function prettifyNumber(value) {
	      var precision = this.props.precision;

	      value = parseFloat(value.toFixed(precision));
	      return value;
	    }
	  }, {
	    key: 'validate',
	    value: function validate(value) {
	      var _props3 = this.props;
	      var validate = _props3.validate;
	      var type = _props3.type;

	      if (typeof validate === 'function') {
	        this.setState({ error: !this.props.validate(value) });
	      } else if (type === 'color') {
	        this.setState({ error: !(0, _tinycolor22['default'])(value).isValid() });
	      }
	    }
	  }, {
	    key: 'forceShowDropdown',
	    value: function forceShowDropdown() {
	      this.setState({
	        forceShowDropdown: true,
	        showDropdown: true
	      });
	    }
	  }, {
	    key: 'showDropdown',
	    value: function showDropdown() {
	      this.setState({
	        showDropdown: true
	      });
	    }
	  }, {
	    key: 'hideDropdown',
	    value: function hideDropdown() {
	      this.setState({
	        forceShowDropdown: false,
	        showDropdown: false
	      });
	    }
	  }, {
	    key: 'renderHints',
	    value: function renderHints() {
	      var _this2 = this;

	      var hints = this.props.hints;
	      var _state2 = this.state;
	      var inputValue = _state2.inputValue;
	      var lastlySelectedHint = _state2.lastlySelectedHint;
	      var forceShowDropdown = _state2.forceShowDropdown;

	      if (!forceShowDropdown && (inputValue === lastlySelectedHint || !inputValue || !hints)) {
	        return null;
	      }

	      var selectedHints = _fuzzy2['default'].filter(inputValue || '', hints, {
	        pre: '<strong>',
	        post: '</strong>'
	      }).slice(0, 12).map(function (hint) {
	        return {
	          label: _react2['default'].createElement('span', { dangerouslySetInnerHTML: { __html: hint.string } }),
	          onClick: function onClick(e) {
	            var value = hint.original;
	            _this2.setState({
	              inputValue: value,
	              lastlySelectedHint: value
	            }, _this2.triggerBlur);
	            // this.editValue(value)
	            _this2.hideDropdown();
	          }
	        };
	      });

	      if (selectedHints.length === 0) {
	        return null;
	      }

	      return _react2['default'].createElement(_List2['default'], { items: selectedHints });
	    }
	  }, {
	    key: 'renderColorCircle',
	    value: function renderColorCircle() {
	      var _this3 = this;

	      var handleChange = function handleChange(hsl) {
	        hsl = _extends({}, hsl, { h: 360 * hsl.h });
	        var color = (0, _tinycolor22['default'])(_this3.state.inputValue);
	        var format = color.getFormat();
	        var alpha = color.getAlpha();
	        var value = (0, _tinycolor22['default'])(hsl).setAlpha(alpha).toString(format);
	        _this3.setState({
	          inputValue: value
	        });
	        _this3.editValue(value);
	      };

	      var inputColor = (0, _tinycolor22['default'])(this.state.inputValue);
	      var hsl = inputColor.isValid() ? inputColor.toHsl() : { h: 0, s: 0.5, l: 0.5 };
	      var radius = 234;

	      return _react2['default'].createElement(_utilsColorCircle2['default'], {
	        h: hsl.h / 360,
	        s: hsl.s,
	        l: hsl.l,
	        radius: radius,
	        width: radius * 0.16,
	        onChange: handleChange });
	    }
	  }, {
	    key: 'renderDropdown',
	    value: function renderDropdown() {
	      if (!this.state.showDropdown) {
	        return null;
	      }

	      var type = this.props.type;

	      var content = type === 'string' ? this.renderHints() : type === 'color' ? this.renderColorCircle() : null;

	      if (!content) {
	        return null;
	      }

	      return _react2['default'].createElement(
	        _Panel2['default'],
	        {
	          style: {
	            position: 'absolute',
	            zIndex: 1000,
	            top: '100%',
	            left: 0,
	            width: '100%'
	          },
	          onMouseDown: function (e) {
	            e.preventDefault();
	            e.stopPropagation();
	          } },
	        content
	      );
	    }
	  }, {
	    key: 'renderAddon',
	    value: function renderAddon() {
	      var _this4 = this;

	      var _props4 = this.props;
	      var mod = _props4.mod;
	      var addonIcon = _props4.addonIcon;
	      var addonLabel = _props4.addonLabel;
	      var addonBackground = _props4.addonBackground;
	      var addonOnClick = _props4.addonOnClick;

	      return _react2['default'].createElement(Addon, {
	        mod: mod,
	        icon: addonIcon,
	        label: addonLabel,
	        background: addonBackground,
	        onClick: addonOnClick === 'show-dropdown' ? function () {
	          return _this4.forceShowDropdown();
	        } : addonOnClick });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props5 = this.props;
	      var mod = _props5.mod;
	      var style = _props5.style;
	      var pattern = _props5.pattern;
	      var placeholder = _props5.placeholder;
	      var disabled = _props5.disabled;
	      var dragRef = _props5.dragRef;
	      var _state3 = this.state;
	      var focus = _state3.focus;
	      var inputValue = _state3.inputValue;
	      var prettifiedValue = _state3.prettifiedValue;
	      var error = _state3.error;

	      var draggable = this.isDraggable();

	      return _react2['default'].createElement(
	        'div',
	        {
	          style: this.getStyle('input', _extends({ error: error }, mod), style),
	          onMouseDown: this.handleMouseDown },
	        _react2['default'].createElement('input', _extends({
	          ref: dragRef(this.handleInputRef)
	        }, this.getBasics(), {
	          style: this.getStyle('inputField', _extends({ draggable: draggable }, mod)),
	          palceholder: placeholder,
	          value: focus ? inputValue : prettifiedValue,
	          type: 'text',
	          name: this.props.name,
	          pattern: pattern,
	          onFocus: this.handleFocus,
	          onBlur: this.handleBlur,
	          onChange: this.handleChange,
	          disabled: disabled })),
	        this.renderAddon(),
	        this.renderDropdown()
	      );
	    }
	  }]);

	  var _Input = Input;
	  Input = (0, _utilsMatterBasics2['default'])(Input) || Input;
	  Input = (0, _pureRenderDecorator2['default'])(Input) || Input;
	  Input = (0, _radium2['default'])(Input) || Input;
	  Input = (0, _customDrag2['default'])(dragOptions, function (connect) {
	    return {
	      dragRef: connect.getDragRef()
	    };
	  })(Input) || Input;
	  return Input;
	})(_react2['default'].Component);

	exports['default'] = Input;

	var Addon = (function (_React$Component2) {
	  _inherits(Addon, _React$Component2);

	  function Addon() {
	    _classCallCheck(this, _Addon);

	    _get(Object.getPrototypeOf(_Addon.prototype), 'constructor', this).apply(this, arguments);
	  }

	  _createClass(Addon, [{
	    key: 'render',
	    value: function render() {
	      var _props6 = this.props;
	      var label = _props6.label;
	      var icon = _props6.icon;
	      var mod = _props6.mod;
	      var onClick = _props6.onClick;

	      if (!label && !icon) {
	        return _react2['default'].createElement('div', { hidden: true });
	      }

	      icon = icon ? _react2['default'].createElement(_Icon2['default'], { icon: icon }) : undefined;

	      return _react2['default'].createElement(
	        'span',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('inputAddon', mod),
	          onClick: onClick }),
	        label,
	        icon
	      );
	    }
	  }]);

	  var _Addon = Addon;
	  Addon = (0, _utilsMatterBasics2['default'])(Addon) || Addon;
	  Addon = (0, _pureRenderDecorator2['default'])(Addon) || Addon;
	  Addon = (0, _radium2['default'])(Addon) || Addon;
	  return Addon;
	})(_react2['default'].Component);

	module.exports = exports['default'];

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Fuzzy
	 * https://github.com/myork/fuzzy
	 *
	 * Copyright (c) 2012 Matt York
	 * Licensed under the MIT license.
	 */

	(function() {

	var root = this;

	var fuzzy = {};

	// Use in node or in browser
	if (true) {
	  module.exports = fuzzy;
	} else {
	  root.fuzzy = fuzzy;
	}

	// Return all elements of `array` that have a fuzzy
	// match against `pattern`.
	fuzzy.simpleFilter = function(pattern, array) {
	  return array.filter(function(string) {
	    return fuzzy.test(pattern, string);
	  });
	};

	// Does `pattern` fuzzy match `string`?
	fuzzy.test = function(pattern, string) {
	  return fuzzy.match(pattern, string) !== null;
	};

	// If `pattern` matches `string`, wrap each matching character
	// in `opts.pre` and `opts.post`. If no match, return null
	fuzzy.match = function(pattern, string, opts) {
	  opts = opts || {};
	  var patternIdx = 0
	    , result = []
	    , len = string.length
	    , totalScore = 0
	    , currScore = 0
	    // prefix
	    , pre = opts.pre || ''
	    // suffix
	    , post = opts.post || ''
	    // String to compare against. This might be a lowercase version of the
	    // raw string
	    , compareString =  opts.caseSensitive && string || string.toLowerCase()
	    , ch, compareChar;

	  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

	  // For each character in the string, either add it to the result
	  // or wrap in template if its the next string in the pattern
	  for(var idx = 0; idx < len; idx++) {
	    ch = string[idx];
	    if(compareString[idx] === pattern[patternIdx]) {
	      ch = pre + ch + post;
	      patternIdx += 1;

	      // consecutive characters should increase the score more than linearly
	      currScore += 1 + currScore;
	    } else {
	      currScore = 0;
	    }
	    totalScore += currScore;
	    result[result.length] = ch;
	  }

	  // return rendered string if we have a match for every char
	  if(patternIdx === pattern.length) {
	    return {rendered: result.join(''), score: totalScore};
	  }

	  return null;
	};

	// The normal entry point. Filters `arr` for matches against `pattern`.
	// It returns an array with matching values of the type:
	//
	//     [{
	//         string:   '<b>lah' // The rendered string
	//       , index:    2        // The index of the element in `arr`
	//       , original: 'blah'   // The original element in `arr`
	//     }]
	//
	// `opts` is an optional argument bag. Details:
	//
	//    opts = {
	//        // string to put before a matching character
	//        pre:     '<b>'
	//
	//        // string to put after matching character
	//      , post:    '</b>'
	//
	//        // Optional function. Input is an element from the passed in
	//        // `arr`, output should be the string to test `pattern` against.
	//        // In this example, if `arr = [{crying: 'koala'}]` we would return
	//        // 'koala'.
	//      , extract: function(arg) { return arg.crying; }
	//    }
	fuzzy.filter = function(pattern, arr, opts) {
	  opts = opts || {};
	  return arr
	          .reduce(function(prev, element, idx, arr) {
	            var str = element;
	            if(opts.extract) {
	              str = opts.extract(element);
	            }
	            var rendered = fuzzy.match(pattern, str, opts);
	            if(rendered != null) {
	              prev[prev.length] = {
	                  string: rendered.rendered
	                , score: rendered.score
	                , index: idx
	                , original: element
	              };
	            }
	            return prev;
	          }, [])

	          // Sort by score. Browsers are inconsistent wrt stable/unstable
	          // sorting, so force stable by using the index in the case of tie.
	          // See http://ofb.net/~sethml/is-sort-stable.html
	          .sort(function(a,b) {
	            var compare = b.score - a.score;
	            if(compare) return compare;
	            return a.index - b.index;
	          });
	};


	}());



/***/ },
/* 323 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsFinite = global.isFinite;

	/**
	 * Checks if `value` is a finite primitive number.
	 *
	 * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	 * @example
	 *
	 * _.isFinite(10);
	 * // => true
	 *
	 * _.isFinite('10');
	 * // => false
	 *
	 * _.isFinite(true);
	 * // => false
	 *
	 * _.isFinite(Object(10));
	 * // => false
	 *
	 * _.isFinite(Infinity);
	 * // => false
	 */
	function isFinite(value) {
	  return typeof value == 'number' && nativeIsFinite(value);
	}

	module.exports = isFinite;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequire(obj) {
	  return obj && obj.__esModule ? obj['default'] : obj;
	}

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _CustomDragHOC = __webpack_require__(325);

	var _CustomDragHOC2 = _interopRequireDefault(_CustomDragHOC);

	exports['default'] = _CustomDragHOC2['default'];

	var _createCustomDrag = __webpack_require__(326);

	exports.create = _interopRequire(_createCustomDrag);
	//# sourceMappingURL=index.js.map

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = (function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	})();

	var _get = function get(_x, _x2, _x3) {
	  var _again = true;_function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;
	      }
	    } else if ('value' in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;if (getter === undefined) {
	        return undefined;
	      }return getter.call(receiver);
	    }
	  }
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _createCustomDrag = __webpack_require__(326);

	var _createCustomDrag2 = _interopRequireDefault(_createCustomDrag);

	var _Monitor = __webpack_require__(327);

	var _Monitor2 = _interopRequireDefault(_Monitor);

	exports['default'] = function (options, collect) {
	  //TODO warn for missing options
	  return function (ComposedComponent) {
	    return (function (_React$Component) {
	      _inherits(CustomDragHOC, _React$Component);

	      function CustomDragHOC(props) {
	        var _this = this;

	        _classCallCheck(this, CustomDragHOC);

	        _get(Object.getPrototypeOf(CustomDragHOC.prototype), 'constructor', this).call(this, props);

	        this.dragItemRef = function (dragComponent) {
	          if (typeof dragComponent === 'function') {
	            _this.__originalRef = dragComponent;
	            return _this.dragItemRef;
	          }

	          if (dragComponent) {
	            var dragNode = _react2['default'].findDOMNode(dragComponent);
	            _this.dragger = (0, _createCustomDrag2['default'])(dragNode, options, _this.composedComponent);
	          } else {
	            _this.dragger.dispose();
	          }

	          if (_this.__originalRef) {
	            _this.__originalRef(dragComponent);
	          }
	        };

	        this.handleComposedComonentRef = function (component) {
	          if (component && component.composedComponent) {
	            component = component.composedComponent;
	          }
	          _this.composedComponent = component;

	          if (_this.dragger) {
	            _this.dragger.receiveComponent(component);
	          }
	        };
	      }

	      _createClass(CustomDragHOC, [{
	        key: 'getConnect',
	        value: function getConnect() {
	          var _this2 = this;

	          return {
	            getDragRef: function getDragRef() {
	              return _this2.dragItemRef;
	            },
	            getFakeDownFunc: function getFakeDownFunc() {
	              return _this2.dragger && _this2.dragger.fakeDown;
	            }
	          };
	        }
	      }, {
	        key: 'getMonitor',
	        value: function getMonitor() {
	          return this.dragger ? this.dragger.getMonitor() : new _Monitor2['default']();
	        }
	      }, {
	        key: 'render',
	        value: function render() {
	          var collectedProps = typeof collect === 'function' ? collect(this.getConnect(), this.getMonitor()) : { draggerRef: this.dragItemRef };

	          return _react2['default'].createElement(ComposedComponent, _extends({}, this.props, collectedProps, {
	            ref: this.handleComposedComonentRef }));
	        }
	      }]);

	      return CustomDragHOC;
	    })(_react2['default'].Component);
	  };
	};

	module.exports = exports['default'];
	//# sourceMappingURL=CustomDragHOC.js.map

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = createCustomDrag;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _Monitor = __webpack_require__(327);

	var _Monitor2 = _interopRequireDefault(_Monitor);

	function createCustomDrag(node, opt, component) {
	  if (opt === undefined) opt = {};

	  var waitingMoveEvent, waitingMoveRaf;
	  var monitor = new _Monitor2['default'](node);

	  node.addEventListener('mousedown', onDown);
	  node.addEventListener('mouseover', onEnter);
	  node.addEventListener('mouseleave', onLeave);

	  return {
	    dispose: function dispose() {
	      node.removeEventListener('mousedown', onDown);
	      node.removeEventListener('mouseover', onEnter);
	      node.removeEventListener('mouseleave', onLeave);
	    },
	    receiveComponent: function receiveComponent(_component) {
	      component = _component;
	    },
	    fakeDown: function fakeDown(e) {
	      onDown(e);
	    },
	    getMonitor: function getMonitor() {
	      return monitor;
	    }
	  };

	  function onDown(e) {
	    //drag only with the left button
	    if (e.button !== 0) {
	      return;
	    }

	    monitor.reset();
	    monitor.startDrag();
	    monitor.addEvent(e);

	    var onDownReturn = call('onDown');

	    if (onDownReturn === false) {
	      //prevent dragging
	      window.addEventListener('mouseup', onUpWithoutDrag);
	      return;
	    }

	    // e.stopPropagation();//ex. prevent to drag the parent if that's draggable too
	    // - prevent to set the down state on the dragged item

	    e.preventDefault(); //ex. prevent selecting text

	    window.addEventListener('mousemove', onMove);
	    window.addEventListener('mouseup', onUp);
	    window.addEventListener('mouseleave', onUp);
	  }

	  function onMove(e) {
	    waitingMoveEvent = e;

	    if (!waitingMoveRaf) {
	      waitingMoveRaf = window.requestAnimationFrame(rafOnMove);
	    }
	  }

	  function rafOnMove() {
	    window.cancelAnimationFrame(waitingMoveRaf);
	    monitor.addEvent(waitingMoveEvent);

	    waitingMoveRaf = undefined;
	    waitingMoveEvent = undefined;

	    call('onDrag');
	  }

	  function onUp(e) {
	    window.removeEventListener('mousemove', onMove);
	    window.removeEventListener('mouseup', onUp);
	    window.removeEventListener('mouseleave', onUp);

	    if (waitingMoveEvent) {
	      rafOnMove();
	    }

	    monitor.stopDrag();
	    monitor.addEvent(e);

	    if (monitor.isOver()) {
	      onLeave();
	    }

	    call('onUp');

	    if (!monitor.isMoved()) {
	      call('onClick');
	    }
	  }

	  function onUpWithoutDrag(e) {
	    window.removeEventListener('mouseup', onUpWithoutDrag);
	    monitor.addEvent(e);
	    call('onClick');
	  }

	  function onEnter(e) {
	    monitor.addEvent(e);
	    if (!monitor.isDrag()) {
	      monitor.setOver(true);
	      call('onEnter');
	    }
	  }

	  function onLeave(e) {
	    monitor.addEvent(e);
	    if (!monitor.isDrag()) {
	      monitor.setOver(false);
	      call('onLeave');
	    }
	  }

	  function call(name) {
	    if (name in opt) {
	      return opt[name].call(undefined, component ? component.props : undefined, monitor, component);
	    }
	  }
	}

	module.exports = exports['default'];
	//# sourceMappingURL=createCustomDrag.js.map

/***/ },
/* 327 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = (function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	})();

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	var Monitor = (function () {
	  function Monitor(deTarget) {
	    _classCallCheck(this, Monitor);

	    this._deTarget = deTarget;
	    this.reset();
	  }

	  _createClass(Monitor, [{
	    key: 'reset',
	    value: function reset() {
	      this.data = Object.freeze({});
	      this._lastEvent = undefined;
	      this._firstEvent = undefined;
	      this._moved = false;
	      this._over = false;
	      this._drag = false;
	    }
	  }, {
	    key: 'addEvent',
	    value: function addEvent(nativeEvent) {
	      if (!nativeEvent) {
	        return;
	      }

	      var type = nativeEvent.type;

	      var event = {
	        nativeEvent: nativeEvent,
	        clientX: nativeEvent.clientX,
	        clientY: nativeEvent.clientY
	      };

	      if (!this._firstEvent) {
	        this._firstEvent = event;
	      }
	      this._lastEvent = event;

	      if (type === 'mousemove') {
	        this._moved = true;
	      }
	    }
	  }, {
	    key: 'getFirstEvent',
	    value: function getFirstEvent() {
	      return this._firstEvent;
	    }
	  }, {
	    key: 'getLastEvent',
	    value: function getLastEvent() {
	      return this._lastEvent;
	    }
	  }, {
	    key: 'setData',
	    value: function setData(newData) {
	      this.data = Object.freeze(_extends({}, this.data, newData));
	    }
	  }, {
	    key: 'getData',
	    value: function getData() {
	      return this.data;
	    }
	  }, {
	    key: 'getClientOffset',
	    value: function getClientOffset() {
	      return this._getClientOffsetByEvent(this.getLastEvent());
	    }
	  }, {
	    key: 'getSourceClientOffset',
	    value: function getSourceClientOffset() {
	      return this._getSourceClientOffsetByEvent(this.getLastEvent());
	    }
	  }, {
	    key: 'getInitialClientOffset',
	    value: function getInitialClientOffset() {
	      return this._getClientOffsetByEvent(this.getFirstEvent());
	    }
	  }, {
	    key: 'getInitialSourceClientOffset',
	    value: function getInitialSourceClientOffset() {
	      return this._getSourceClientOffsetByEvent(this.getFirstEvent());
	    }
	  }, {
	    key: 'getDifferenceFromInitialOffset',
	    value: function getDifferenceFromInitialOffset() {
	      var first = this.getInitialSourceClientOffset();
	      var last = this.getSourceClientOffset();

	      return {
	        x: last.x - first.x,
	        y: last.y - first.y
	      };
	    }
	  }, {
	    key: 'startDrag',
	    value: function startDrag() {
	      this._drag = true;
	    }
	  }, {
	    key: 'setOver',
	    value: function setOver(over) {
	      this._over = over;
	    }
	  }, {
	    key: 'stopDrag',
	    value: function stopDrag() {
	      this._drag = true;
	    }
	  }, {
	    key: 'isMoved',
	    value: function isMoved() {
	      return !!this._moved;
	    }
	  }, {
	    key: 'isOver',
	    value: function isOver() {
	      return !!this._over;
	    }
	  }, {
	    key: 'isDrag',
	    value: function isDrag() {
	      return !!this._drag;
	    }
	  }, {
	    key: '_getClientOffsetByEvent',
	    value: function _getClientOffsetByEvent(event) {
	      var clientX = event.clientX;
	      var clientY = event.clientY;

	      return { x: clientX, y: clientY };
	    }
	  }, {
	    key: '_getSourceClientOffsetByEvent',
	    value: function _getSourceClientOffsetByEvent(event) {
	      var _deTarget$getBoundingClientRect = this._deTarget.getBoundingClientRect();

	      var left = _deTarget$getBoundingClientRect.left;
	      var top = _deTarget$getBoundingClientRect.top;

	      return {
	        x: event.clientX - left,
	        y: event.clientY - top
	      };
	    }
	  }]);

	  return Monitor;
	})();

	exports['default'] = Monitor;
	module.exports = exports['default'];
	//# sourceMappingURL=Monitor.js.map

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.1.2
	// https://github.com/bgrins/TinyColor
	// Brian Grinstead, MIT License

	(function() {

	var trimLeft = /^[\s,#]+/,
	    trimRight = /\s+$/,
	    tinyCounter = 0,
	    math = Math,
	    mathRound = math.round,
	    mathMin = math.min,
	    mathMax = math.max,
	    mathRandom = math.random;

	function tinycolor (color, opts) {

	    color = (color) ? color : '';
	    opts = opts || { };

	    // If input is already a tinycolor, return itself
	    if (color instanceof tinycolor) {
	       return color;
	    }
	    // If we are called as a function, call using new instead
	    if (!(this instanceof tinycolor)) {
	        return new tinycolor(color, opts);
	    }

	    var rgb = inputToRGB(color);
	    this._originalInput = color,
	    this._r = rgb.r,
	    this._g = rgb.g,
	    this._b = rgb.b,
	    this._a = rgb.a,
	    this._roundA = mathRound(100*this._a) / 100,
	    this._format = opts.format || rgb.format;
	    this._gradientType = opts.gradientType;

	    // Don't let the range of [0,255] come back in [0,1].
	    // Potentially lose a little bit of precision here, but will fix issues where
	    // .5 gets interpreted as half of the total, instead of half of 1
	    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
	    if (this._r < 1) { this._r = mathRound(this._r); }
	    if (this._g < 1) { this._g = mathRound(this._g); }
	    if (this._b < 1) { this._b = mathRound(this._b); }

	    this._ok = rgb.ok;
	    this._tc_id = tinyCounter++;
	}

	tinycolor.prototype = {
	    isDark: function() {
	        return this.getBrightness() < 128;
	    },
	    isLight: function() {
	        return !this.isDark();
	    },
	    isValid: function() {
	        return this._ok;
	    },
	    getOriginalInput: function() {
	      return this._originalInput;
	    },
	    getFormat: function() {
	        return this._format;
	    },
	    getAlpha: function() {
	        return this._a;
	    },
	    getBrightness: function() {
	        //http://www.w3.org/TR/AERT#color-contrast
	        var rgb = this.toRgb();
	        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
	    },
	    getLuminance: function() {
	        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
	        var rgb = this.toRgb();
	        var RsRGB, GsRGB, BsRGB, R, G, B;
	        RsRGB = rgb.r/255;
	        GsRGB = rgb.g/255;
	        BsRGB = rgb.b/255;

	        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
	        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
	        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
	        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
	    },
	    setAlpha: function(value) {
	        this._a = boundAlpha(value);
	        this._roundA = mathRound(100*this._a) / 100;
	        return this;
	    },
	    toHsv: function() {
	        var hsv = rgbToHsv(this._r, this._g, this._b);
	        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
	    },
	    toHsvString: function() {
	        var hsv = rgbToHsv(this._r, this._g, this._b);
	        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
	        return (this._a == 1) ?
	          "hsv("  + h + ", " + s + "%, " + v + "%)" :
	          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
	    },
	    toHsl: function() {
	        var hsl = rgbToHsl(this._r, this._g, this._b);
	        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
	    },
	    toHslString: function() {
	        var hsl = rgbToHsl(this._r, this._g, this._b);
	        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
	        return (this._a == 1) ?
	          "hsl("  + h + ", " + s + "%, " + l + "%)" :
	          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
	    },
	    toHex: function(allow3Char) {
	        return rgbToHex(this._r, this._g, this._b, allow3Char);
	    },
	    toHexString: function(allow3Char) {
	        return '#' + this.toHex(allow3Char);
	    },
	    toHex8: function() {
	        return rgbaToHex(this._r, this._g, this._b, this._a);
	    },
	    toHex8String: function() {
	        return '#' + this.toHex8();
	    },
	    toRgb: function() {
	        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
	    },
	    toRgbString: function() {
	        return (this._a == 1) ?
	          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
	          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
	    },
	    toPercentageRgb: function() {
	        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
	    },
	    toPercentageRgbString: function() {
	        return (this._a == 1) ?
	          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
	          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
	    },
	    toName: function() {
	        if (this._a === 0) {
	            return "transparent";
	        }

	        if (this._a < 1) {
	            return false;
	        }

	        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
	    },
	    toFilter: function(secondColor) {
	        var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);
	        var secondHex8String = hex8String;
	        var gradientType = this._gradientType ? "GradientType = 1, " : "";

	        if (secondColor) {
	            var s = tinycolor(secondColor);
	            secondHex8String = s.toHex8String();
	        }

	        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
	    },
	    toString: function(format) {
	        var formatSet = !!format;
	        format = format || this._format;

	        var formattedString = false;
	        var hasAlpha = this._a < 1 && this._a >= 0;
	        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");

	        if (needsAlphaFormat) {
	            // Special case for "transparent", all other non-alpha formats
	            // will return rgba when there is transparency.
	            if (format === "name" && this._a === 0) {
	                return this.toName();
	            }
	            return this.toRgbString();
	        }
	        if (format === "rgb") {
	            formattedString = this.toRgbString();
	        }
	        if (format === "prgb") {
	            formattedString = this.toPercentageRgbString();
	        }
	        if (format === "hex" || format === "hex6") {
	            formattedString = this.toHexString();
	        }
	        if (format === "hex3") {
	            formattedString = this.toHexString(true);
	        }
	        if (format === "hex8") {
	            formattedString = this.toHex8String();
	        }
	        if (format === "name") {
	            formattedString = this.toName();
	        }
	        if (format === "hsl") {
	            formattedString = this.toHslString();
	        }
	        if (format === "hsv") {
	            formattedString = this.toHsvString();
	        }

	        return formattedString || this.toHexString();
	    },

	    _applyModification: function(fn, args) {
	        var color = fn.apply(null, [this].concat([].slice.call(args)));
	        this._r = color._r;
	        this._g = color._g;
	        this._b = color._b;
	        this.setAlpha(color._a);
	        return this;
	    },
	    lighten: function() {
	        return this._applyModification(lighten, arguments);
	    },
	    brighten: function() {
	        return this._applyModification(brighten, arguments);
	    },
	    darken: function() {
	        return this._applyModification(darken, arguments);
	    },
	    desaturate: function() {
	        return this._applyModification(desaturate, arguments);
	    },
	    saturate: function() {
	        return this._applyModification(saturate, arguments);
	    },
	    greyscale: function() {
	        return this._applyModification(greyscale, arguments);
	    },
	    spin: function() {
	        return this._applyModification(spin, arguments);
	    },

	    _applyCombination: function(fn, args) {
	        return fn.apply(null, [this].concat([].slice.call(args)));
	    },
	    analogous: function() {
	        return this._applyCombination(analogous, arguments);
	    },
	    complement: function() {
	        return this._applyCombination(complement, arguments);
	    },
	    monochromatic: function() {
	        return this._applyCombination(monochromatic, arguments);
	    },
	    splitcomplement: function() {
	        return this._applyCombination(splitcomplement, arguments);
	    },
	    triad: function() {
	        return this._applyCombination(triad, arguments);
	    },
	    tetrad: function() {
	        return this._applyCombination(tetrad, arguments);
	    }
	};

	// If input is an object, force 1 into "1.0" to handle ratios properly
	// String input requires "1.0" as input, so 1 will be treated as 1
	tinycolor.fromRatio = function(color, opts) {
	    if (typeof color == "object") {
	        var newColor = {};
	        for (var i in color) {
	            if (color.hasOwnProperty(i)) {
	                if (i === "a") {
	                    newColor[i] = color[i];
	                }
	                else {
	                    newColor[i] = convertToPercentage(color[i]);
	                }
	            }
	        }
	        color = newColor;
	    }

	    return tinycolor(color, opts);
	};

	// Given a string or object, convert that input to RGB
	// Possible string inputs:
	//
	//     "red"
	//     "#f00" or "f00"
	//     "#ff0000" or "ff0000"
	//     "#ff000000" or "ff000000"
	//     "rgb 255 0 0" or "rgb (255, 0, 0)"
	//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
	//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
	//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
	//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
	//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
	//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
	//
	function inputToRGB(color) {

	    var rgb = { r: 0, g: 0, b: 0 };
	    var a = 1;
	    var ok = false;
	    var format = false;

	    if (typeof color == "string") {
	        color = stringInputToObject(color);
	    }

	    if (typeof color == "object") {
	        if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
	            rgb = rgbToRgb(color.r, color.g, color.b);
	            ok = true;
	            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
	        }
	        else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
	            color.s = convertToPercentage(color.s);
	            color.v = convertToPercentage(color.v);
	            rgb = hsvToRgb(color.h, color.s, color.v);
	            ok = true;
	            format = "hsv";
	        }
	        else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
	            color.s = convertToPercentage(color.s);
	            color.l = convertToPercentage(color.l);
	            rgb = hslToRgb(color.h, color.s, color.l);
	            ok = true;
	            format = "hsl";
	        }

	        if (color.hasOwnProperty("a")) {
	            a = color.a;
	        }
	    }

	    a = boundAlpha(a);

	    return {
	        ok: ok,
	        format: color.format || format,
	        r: mathMin(255, mathMax(rgb.r, 0)),
	        g: mathMin(255, mathMax(rgb.g, 0)),
	        b: mathMin(255, mathMax(rgb.b, 0)),
	        a: a
	    };
	}


	// Conversion Functions
	// --------------------

	// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
	// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

	// `rgbToRgb`
	// Handle bounds / percentage checking to conform to CSS color spec
	// <http://www.w3.org/TR/css3-color/>
	// *Assumes:* r, g, b in [0, 255] or [0, 1]
	// *Returns:* { r, g, b } in [0, 255]
	function rgbToRgb(r, g, b){
	    return {
	        r: bound01(r, 255) * 255,
	        g: bound01(g, 255) * 255,
	        b: bound01(b, 255) * 255
	    };
	}

	// `rgbToHsl`
	// Converts an RGB color value to HSL.
	// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
	// *Returns:* { h, s, l } in [0,1]
	function rgbToHsl(r, g, b) {

	    r = bound01(r, 255);
	    g = bound01(g, 255);
	    b = bound01(b, 255);

	    var max = mathMax(r, g, b), min = mathMin(r, g, b);
	    var h, s, l = (max + min) / 2;

	    if(max == min) {
	        h = s = 0; // achromatic
	    }
	    else {
	        var d = max - min;
	        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }

	        h /= 6;
	    }

	    return { h: h, s: s, l: l };
	}

	// `hslToRgb`
	// Converts an HSL color value to RGB.
	// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
	// *Returns:* { r, g, b } in the set [0, 255]
	function hslToRgb(h, s, l) {
	    var r, g, b;

	    h = bound01(h, 360);
	    s = bound01(s, 100);
	    l = bound01(l, 100);

	    function hue2rgb(p, q, t) {
	        if(t < 0) t += 1;
	        if(t > 1) t -= 1;
	        if(t < 1/6) return p + (q - p) * 6 * t;
	        if(t < 1/2) return q;
	        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
	        return p;
	    }

	    if(s === 0) {
	        r = g = b = l; // achromatic
	    }
	    else {
	        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	        var p = 2 * l - q;
	        r = hue2rgb(p, q, h + 1/3);
	        g = hue2rgb(p, q, h);
	        b = hue2rgb(p, q, h - 1/3);
	    }

	    return { r: r * 255, g: g * 255, b: b * 255 };
	}

	// `rgbToHsv`
	// Converts an RGB color value to HSV
	// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
	// *Returns:* { h, s, v } in [0,1]
	function rgbToHsv(r, g, b) {

	    r = bound01(r, 255);
	    g = bound01(g, 255);
	    b = bound01(b, 255);

	    var max = mathMax(r, g, b), min = mathMin(r, g, b);
	    var h, s, v = max;

	    var d = max - min;
	    s = max === 0 ? 0 : d / max;

	    if(max == min) {
	        h = 0; // achromatic
	    }
	    else {
	        switch(max) {
	            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	            case g: h = (b - r) / d + 2; break;
	            case b: h = (r - g) / d + 4; break;
	        }
	        h /= 6;
	    }
	    return { h: h, s: s, v: v };
	}

	// `hsvToRgb`
	// Converts an HSV color value to RGB.
	// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
	// *Returns:* { r, g, b } in the set [0, 255]
	 function hsvToRgb(h, s, v) {

	    h = bound01(h, 360) * 6;
	    s = bound01(s, 100);
	    v = bound01(v, 100);

	    var i = math.floor(h),
	        f = h - i,
	        p = v * (1 - s),
	        q = v * (1 - f * s),
	        t = v * (1 - (1 - f) * s),
	        mod = i % 6,
	        r = [v, q, p, p, t, v][mod],
	        g = [t, v, v, q, p, p][mod],
	        b = [p, p, t, v, v, q][mod];

	    return { r: r * 255, g: g * 255, b: b * 255 };
	}

	// `rgbToHex`
	// Converts an RGB color to hex
	// Assumes r, g, and b are contained in the set [0, 255]
	// Returns a 3 or 6 character hex
	function rgbToHex(r, g, b, allow3Char) {

	    var hex = [
	        pad2(mathRound(r).toString(16)),
	        pad2(mathRound(g).toString(16)),
	        pad2(mathRound(b).toString(16))
	    ];

	    // Return a 3 character hex if possible
	    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
	        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
	    }

	    return hex.join("");
	}
	    // `rgbaToHex`
	    // Converts an RGBA color plus alpha transparency to hex
	    // Assumes r, g, b and a are contained in the set [0, 255]
	    // Returns an 8 character hex
	    function rgbaToHex(r, g, b, a) {

	        var hex = [
	            pad2(convertDecimalToHex(a)),
	            pad2(mathRound(r).toString(16)),
	            pad2(mathRound(g).toString(16)),
	            pad2(mathRound(b).toString(16))
	        ];

	        return hex.join("");
	    }

	// `equals`
	// Can be called with any tinycolor input
	tinycolor.equals = function (color1, color2) {
	    if (!color1 || !color2) { return false; }
	    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
	};
	tinycolor.random = function() {
	    return tinycolor.fromRatio({
	        r: mathRandom(),
	        g: mathRandom(),
	        b: mathRandom()
	    });
	};


	// Modification Functions
	// ----------------------
	// Thanks to less.js for some of the basics here
	// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

	function desaturate(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.s -= amount / 100;
	    hsl.s = clamp01(hsl.s);
	    return tinycolor(hsl);
	}

	function saturate(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.s += amount / 100;
	    hsl.s = clamp01(hsl.s);
	    return tinycolor(hsl);
	}

	function greyscale(color) {
	    return tinycolor(color).desaturate(100);
	}

	function lighten (color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.l += amount / 100;
	    hsl.l = clamp01(hsl.l);
	    return tinycolor(hsl);
	}

	function brighten(color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var rgb = tinycolor(color).toRgb();
	    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
	    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
	    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
	    return tinycolor(rgb);
	}

	function darken (color, amount) {
	    amount = (amount === 0) ? 0 : (amount || 10);
	    var hsl = tinycolor(color).toHsl();
	    hsl.l -= amount / 100;
	    hsl.l = clamp01(hsl.l);
	    return tinycolor(hsl);
	}

	// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
	// Values outside of this range will be wrapped into this range.
	function spin(color, amount) {
	    var hsl = tinycolor(color).toHsl();
	    var hue = (mathRound(hsl.h) + amount) % 360;
	    hsl.h = hue < 0 ? 360 + hue : hue;
	    return tinycolor(hsl);
	}

	// Combination Functions
	// ---------------------
	// Thanks to jQuery xColor for some of the ideas behind these
	// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

	function complement(color) {
	    var hsl = tinycolor(color).toHsl();
	    hsl.h = (hsl.h + 180) % 360;
	    return tinycolor(hsl);
	}

	function triad(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
	    ];
	}

	function tetrad(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
	        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
	    ];
	}

	function splitcomplement(color) {
	    var hsl = tinycolor(color).toHsl();
	    var h = hsl.h;
	    return [
	        tinycolor(color),
	        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
	        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
	    ];
	}

	function analogous(color, results, slices) {
	    results = results || 6;
	    slices = slices || 30;

	    var hsl = tinycolor(color).toHsl();
	    var part = 360 / slices;
	    var ret = [tinycolor(color)];

	    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
	        hsl.h = (hsl.h + part) % 360;
	        ret.push(tinycolor(hsl));
	    }
	    return ret;
	}

	function monochromatic(color, results) {
	    results = results || 6;
	    var hsv = tinycolor(color).toHsv();
	    var h = hsv.h, s = hsv.s, v = hsv.v;
	    var ret = [];
	    var modification = 1 / results;

	    while (results--) {
	        ret.push(tinycolor({ h: h, s: s, v: v}));
	        v = (v + modification) % 1;
	    }

	    return ret;
	}

	// Utility Functions
	// ---------------------

	tinycolor.mix = function(color1, color2, amount) {
	    amount = (amount === 0) ? 0 : (amount || 50);

	    var rgb1 = tinycolor(color1).toRgb();
	    var rgb2 = tinycolor(color2).toRgb();

	    var p = amount / 100;
	    var w = p * 2 - 1;
	    var a = rgb2.a - rgb1.a;

	    var w1;

	    if (w * a == -1) {
	        w1 = w;
	    } else {
	        w1 = (w + a) / (1 + w * a);
	    }

	    w1 = (w1 + 1) / 2;

	    var w2 = 1 - w1;

	    var rgba = {
	        r: rgb2.r * w1 + rgb1.r * w2,
	        g: rgb2.g * w1 + rgb1.g * w2,
	        b: rgb2.b * w1 + rgb1.b * w2,
	        a: rgb2.a * p  + rgb1.a * (1 - p)
	    };

	    return tinycolor(rgba);
	};


	// Readability Functions
	// ---------------------
	// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

	// `contrast`
	// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
	tinycolor.readability = function(color1, color2) {
	    var c1 = tinycolor(color1);
	    var c2 = tinycolor(color2);
	    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
	};

	// `isReadable`
	// Ensure that foreground and background color combinations meet WCAG2 guidelines.
	// The third argument is an optional Object.
	//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
	//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
	// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

	// *Example*
	//    tinycolor.isReadable("#000", "#111") => false
	//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false

	tinycolor.isReadable = function(color1, color2, wcag2) {
	    var readability = tinycolor.readability(color1, color2);
	    var wcag2Parms, out;

	    out = false;

	    wcag2Parms = validateWCAG2Parms(wcag2);
	    switch (wcag2Parms.level + wcag2Parms.size) {
	        case "AAsmall":
	        case "AAAlarge":
	            out = readability >= 4.5;
	            break;
	        case "AAlarge":
	            out = readability >= 3;
	            break;
	        case "AAAsmall":
	            out = readability >= 7;
	            break;
	    }
	    return out;

	};

	// `mostReadable`
	// Given a base color and a list of possible foreground or background
	// colors for that base, returns the most readable color.
	// Optionally returns Black or White if the most readable color is unreadable.
	// *Example*
	//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
	//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
	//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
	//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


	tinycolor.mostReadable = function(baseColor, colorList, args) {
	    var bestColor = null;
	    var bestScore = 0;
	    var readability;
	    var includeFallbackColors, level, size ;
	    args = args || {};
	    includeFallbackColors = args.includeFallbackColors ;
	    level = args.level;
	    size = args.size;

	    for (var i= 0; i < colorList.length ; i++) {
	        readability = tinycolor.readability(baseColor, colorList[i]);
	        if (readability > bestScore) {
	            bestScore = readability;
	            bestColor = tinycolor(colorList[i]);
	        }
	    }

	    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
	        return bestColor;
	    }
	    else {
	        args.includeFallbackColors=false;
	        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
	    }
	};


	// Big List of Colors
	// ------------------
	// <http://www.w3.org/TR/css3-color/#svg-color>
	var names = tinycolor.names = {
	    aliceblue: "f0f8ff",
	    antiquewhite: "faebd7",
	    aqua: "0ff",
	    aquamarine: "7fffd4",
	    azure: "f0ffff",
	    beige: "f5f5dc",
	    bisque: "ffe4c4",
	    black: "000",
	    blanchedalmond: "ffebcd",
	    blue: "00f",
	    blueviolet: "8a2be2",
	    brown: "a52a2a",
	    burlywood: "deb887",
	    burntsienna: "ea7e5d",
	    cadetblue: "5f9ea0",
	    chartreuse: "7fff00",
	    chocolate: "d2691e",
	    coral: "ff7f50",
	    cornflowerblue: "6495ed",
	    cornsilk: "fff8dc",
	    crimson: "dc143c",
	    cyan: "0ff",
	    darkblue: "00008b",
	    darkcyan: "008b8b",
	    darkgoldenrod: "b8860b",
	    darkgray: "a9a9a9",
	    darkgreen: "006400",
	    darkgrey: "a9a9a9",
	    darkkhaki: "bdb76b",
	    darkmagenta: "8b008b",
	    darkolivegreen: "556b2f",
	    darkorange: "ff8c00",
	    darkorchid: "9932cc",
	    darkred: "8b0000",
	    darksalmon: "e9967a",
	    darkseagreen: "8fbc8f",
	    darkslateblue: "483d8b",
	    darkslategray: "2f4f4f",
	    darkslategrey: "2f4f4f",
	    darkturquoise: "00ced1",
	    darkviolet: "9400d3",
	    deeppink: "ff1493",
	    deepskyblue: "00bfff",
	    dimgray: "696969",
	    dimgrey: "696969",
	    dodgerblue: "1e90ff",
	    firebrick: "b22222",
	    floralwhite: "fffaf0",
	    forestgreen: "228b22",
	    fuchsia: "f0f",
	    gainsboro: "dcdcdc",
	    ghostwhite: "f8f8ff",
	    gold: "ffd700",
	    goldenrod: "daa520",
	    gray: "808080",
	    green: "008000",
	    greenyellow: "adff2f",
	    grey: "808080",
	    honeydew: "f0fff0",
	    hotpink: "ff69b4",
	    indianred: "cd5c5c",
	    indigo: "4b0082",
	    ivory: "fffff0",
	    khaki: "f0e68c",
	    lavender: "e6e6fa",
	    lavenderblush: "fff0f5",
	    lawngreen: "7cfc00",
	    lemonchiffon: "fffacd",
	    lightblue: "add8e6",
	    lightcoral: "f08080",
	    lightcyan: "e0ffff",
	    lightgoldenrodyellow: "fafad2",
	    lightgray: "d3d3d3",
	    lightgreen: "90ee90",
	    lightgrey: "d3d3d3",
	    lightpink: "ffb6c1",
	    lightsalmon: "ffa07a",
	    lightseagreen: "20b2aa",
	    lightskyblue: "87cefa",
	    lightslategray: "789",
	    lightslategrey: "789",
	    lightsteelblue: "b0c4de",
	    lightyellow: "ffffe0",
	    lime: "0f0",
	    limegreen: "32cd32",
	    linen: "faf0e6",
	    magenta: "f0f",
	    maroon: "800000",
	    mediumaquamarine: "66cdaa",
	    mediumblue: "0000cd",
	    mediumorchid: "ba55d3",
	    mediumpurple: "9370db",
	    mediumseagreen: "3cb371",
	    mediumslateblue: "7b68ee",
	    mediumspringgreen: "00fa9a",
	    mediumturquoise: "48d1cc",
	    mediumvioletred: "c71585",
	    midnightblue: "191970",
	    mintcream: "f5fffa",
	    mistyrose: "ffe4e1",
	    moccasin: "ffe4b5",
	    navajowhite: "ffdead",
	    navy: "000080",
	    oldlace: "fdf5e6",
	    olive: "808000",
	    olivedrab: "6b8e23",
	    orange: "ffa500",
	    orangered: "ff4500",
	    orchid: "da70d6",
	    palegoldenrod: "eee8aa",
	    palegreen: "98fb98",
	    paleturquoise: "afeeee",
	    palevioletred: "db7093",
	    papayawhip: "ffefd5",
	    peachpuff: "ffdab9",
	    peru: "cd853f",
	    pink: "ffc0cb",
	    plum: "dda0dd",
	    powderblue: "b0e0e6",
	    purple: "800080",
	    rebeccapurple: "663399",
	    red: "f00",
	    rosybrown: "bc8f8f",
	    royalblue: "4169e1",
	    saddlebrown: "8b4513",
	    salmon: "fa8072",
	    sandybrown: "f4a460",
	    seagreen: "2e8b57",
	    seashell: "fff5ee",
	    sienna: "a0522d",
	    silver: "c0c0c0",
	    skyblue: "87ceeb",
	    slateblue: "6a5acd",
	    slategray: "708090",
	    slategrey: "708090",
	    snow: "fffafa",
	    springgreen: "00ff7f",
	    steelblue: "4682b4",
	    tan: "d2b48c",
	    teal: "008080",
	    thistle: "d8bfd8",
	    tomato: "ff6347",
	    turquoise: "40e0d0",
	    violet: "ee82ee",
	    wheat: "f5deb3",
	    white: "fff",
	    whitesmoke: "f5f5f5",
	    yellow: "ff0",
	    yellowgreen: "9acd32"
	};

	// Make it easy to access colors via `hexNames[hex]`
	var hexNames = tinycolor.hexNames = flip(names);


	// Utilities
	// ---------

	// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
	function flip(o) {
	    var flipped = { };
	    for (var i in o) {
	        if (o.hasOwnProperty(i)) {
	            flipped[o[i]] = i;
	        }
	    }
	    return flipped;
	}

	// Return a valid alpha value [0,1] with all invalid values being set to 1
	function boundAlpha(a) {
	    a = parseFloat(a);

	    if (isNaN(a) || a < 0 || a > 1) {
	        a = 1;
	    }

	    return a;
	}

	// Take input from [0, n] and return it as [0, 1]
	function bound01(n, max) {
	    if (isOnePointZero(n)) { n = "100%"; }

	    var processPercent = isPercentage(n);
	    n = mathMin(max, mathMax(0, parseFloat(n)));

	    // Automatically convert percentage into number
	    if (processPercent) {
	        n = parseInt(n * max, 10) / 100;
	    }

	    // Handle floating point rounding errors
	    if ((math.abs(n - max) < 0.000001)) {
	        return 1;
	    }

	    // Convert into [0, 1] range if it isn't already
	    return (n % max) / parseFloat(max);
	}

	// Force a number between 0 and 1
	function clamp01(val) {
	    return mathMin(1, mathMax(0, val));
	}

	// Parse a base-16 hex value into a base-10 integer
	function parseIntFromHex(val) {
	    return parseInt(val, 16);
	}

	// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
	// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
	function isOnePointZero(n) {
	    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
	}

	// Check to see if string passed in is a percentage
	function isPercentage(n) {
	    return typeof n === "string" && n.indexOf('%') != -1;
	}

	// Force a hex value to have 2 characters
	function pad2(c) {
	    return c.length == 1 ? '0' + c : '' + c;
	}

	// Replace a decimal with it's percentage value
	function convertToPercentage(n) {
	    if (n <= 1) {
	        n = (n * 100) + "%";
	    }

	    return n;
	}

	// Converts a decimal to a hex value
	function convertDecimalToHex(d) {
	    return Math.round(parseFloat(d) * 255).toString(16);
	}
	// Converts a hex value to a decimal
	function convertHexToDecimal(h) {
	    return (parseIntFromHex(h) / 255);
	}

	var matchers = (function() {

	    // <http://www.w3.org/TR/css3-values/#integers>
	    var CSS_INTEGER = "[-\\+]?\\d+%?";

	    // <http://www.w3.org/TR/css3-values/#number-value>
	    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

	    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
	    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

	    // Actual matching.
	    // Parentheses and commas are optional, but not required.
	    // Whitespace can take the place of commas or opening paren
	    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
	    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

	    return {
	        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
	        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
	        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
	        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
	        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
	        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
	        hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
	        hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
	        hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
	    };
	})();

	// `stringInputToObject`
	// Permissive string parsing.  Take in a number of formats, and output an object
	// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
	function stringInputToObject(color) {

	    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
	    var named = false;
	    if (names[color]) {
	        color = names[color];
	        named = true;
	    }
	    else if (color == 'transparent') {
	        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
	    }

	    // Try to match string input using regular expressions.
	    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
	    // Just return an object and let the conversion functions handle that.
	    // This way the result will be the same whether the tinycolor is initialized with string or object.
	    var match;
	    if ((match = matchers.rgb.exec(color))) {
	        return { r: match[1], g: match[2], b: match[3] };
	    }
	    if ((match = matchers.rgba.exec(color))) {
	        return { r: match[1], g: match[2], b: match[3], a: match[4] };
	    }
	    if ((match = matchers.hsl.exec(color))) {
	        return { h: match[1], s: match[2], l: match[3] };
	    }
	    if ((match = matchers.hsla.exec(color))) {
	        return { h: match[1], s: match[2], l: match[3], a: match[4] };
	    }
	    if ((match = matchers.hsv.exec(color))) {
	        return { h: match[1], s: match[2], v: match[3] };
	    }
	    if ((match = matchers.hsva.exec(color))) {
	        return { h: match[1], s: match[2], v: match[3], a: match[4] };
	    }
	    if ((match = matchers.hex8.exec(color))) {
	        return {
	            a: convertHexToDecimal(match[1]),
	            r: parseIntFromHex(match[2]),
	            g: parseIntFromHex(match[3]),
	            b: parseIntFromHex(match[4]),
	            format: named ? "name" : "hex8"
	        };
	    }
	    if ((match = matchers.hex6.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1]),
	            g: parseIntFromHex(match[2]),
	            b: parseIntFromHex(match[3]),
	            format: named ? "name" : "hex"
	        };
	    }
	    if ((match = matchers.hex3.exec(color))) {
	        return {
	            r: parseIntFromHex(match[1] + '' + match[1]),
	            g: parseIntFromHex(match[2] + '' + match[2]),
	            b: parseIntFromHex(match[3] + '' + match[3]),
	            format: named ? "name" : "hex"
	        };
	    }

	    return false;
	}

	function validateWCAG2Parms(parms) {
	    // return valid WCAG2 parms for isReadable.
	    // If input parms are invalid, return {"level":"AA", "size":"small"}
	    var level, size;
	    parms = parms || {"level":"AA", "size":"small"};
	    level = (parms.level || "AA").toUpperCase();
	    size = (parms.size || "small").toLowerCase();
	    if (level !== "AA" && level !== "AAA") {
	        level = "AA";
	    }
	    if (size !== "small" && size !== "large") {
	        size = "small";
	    }
	    return {"level":level, "size":size};
	}
	// Node: Export function
	if (typeof module !== "undefined" && module.exports) {
	    module.exports = tinycolor;
	}
	// AMD/requirejs: Define the module
	else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {return tinycolor;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	// Browser: Expose to window
	else {
	    window.tinycolor = tinycolor;
	}

	})();


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _customDrag = __webpack_require__(324);

	var _customDrag2 = _interopRequireDefault(_customDrag);

	var PI = Math.PI;
	var PI2 = PI * 2;

	function radDiff(a, b) {
	  var PI = Math.PI;

	  var diff = b - a;
	  diff = (diff + PI) % PI * 2 - PI;
	  return diff;
	}

	function setHue(monitor, component) {
	  var _monitor$getClientOffset = monitor.getClientOffset();

	  var x = _monitor$getClientOffset.x;
	  var y = _monitor$getClientOffset.y;

	  var _monitor$getData = monitor.getData();

	  var centerX = _monitor$getData.centerX;
	  var centerY = _monitor$getData.centerY;

	  x -= centerX;
	  y -= centerY;
	  var rad = Math.atan2(y, x);
	  rad = rad < 0 ? -rad : PI2 - rad;
	  var h = rad / PI2;
	  component.setState({ h: h });
	}

	function setSaturationLight(props, monitor, component) {
	  var _monitor$getClientOffset2 = monitor.getClientOffset();

	  var x = _monitor$getClientOffset2.x;
	  var y = _monitor$getClientOffset2.y;
	  var h = component.state.h;

	  var _monitor$getData2 = monitor.getData();

	  var centerX = _monitor$getData2.centerX;
	  var centerY = _monitor$getData2.centerY;

	  x -= centerX;
	  y -= centerY;
	  var dist = Math.sqrt(x * x + y * y);
	  var baseRad = -h * PI2;
	  var mouseRad = Math.atan2(y, x);
	  var diffRad = mouseRad - baseRad; //radDiff(baseRad, mouseRad)
	  x = dist * Math.cos(diffRad);
	  y = dist * Math.sin(diffRad);
	  var innerRadius = props.radius - props.width;
	  var smallAltitude = Math.sin(Math.PI / 6) * innerRadius;
	  var edge = Math.sqrt(Math.pow(innerRadius, 2) - Math.pow(smallAltitude, 2)) * 2;
	  var altitude = innerRadius + smallAltitude;

	  var saturation = (x + smallAltitude) / altitude;
	  var lightRange = edge * (1 - saturation);
	  var lightness = y / lightRange + 0.5;

	  component.setState({
	    l: Math.max(0, Math.min(1, lightness)),
	    s: Math.max(0, Math.min(1, saturation))
	  });
	}

	var customDragOptions = {
	  onDown: function onDown(props, monitor, component) {
	    var radius = props.radius;
	    var width = props.width;

	    var clientOffset = monitor.getClientOffset();
	    var sourceClientOffset = monitor.getSourceClientOffset();
	    var left = clientOffset.x - sourceClientOffset.x;
	    var top = clientOffset.y - sourceClientOffset.y;
	    var centerX = left + radius;
	    var centerY = top + radius;
	    var x = clientOffset.x - centerX;
	    var y = clientOffset.y - centerY;
	    var distanceFromCenter = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
	    var edit = undefined;

	    if (distanceFromCenter < radius) {
	      edit = distanceFromCenter > radius - width ? 'h' : 'sv';
	    }

	    if (!edit) {
	      //bail dragging
	      return false;
	    }

	    component.setState({ focus: true });

	    monitor.setData({
	      edit: edit,
	      centerX: centerX,
	      centerY: centerY
	    });

	    if (edit === 'h') {
	      setHue(monitor, component);
	    } else {
	      setSaturationLight(props, monitor, component);
	    }
	  },

	  onDrag: function onDrag(props, monitor, component) {
	    // var deg = getMouseDeg(monitor)

	    var _monitor$getData3 = monitor.getData();

	    var edit = _monitor$getData3.edit;

	    if (edit === 'h') {
	      setHue(monitor, component);
	    } else {
	      setSaturationLight(props, monitor, component);
	    }
	  },

	  onUp: function onUp(props, monitor, component) {
	    component.setState({
	      h: props.h,
	      s: props.s,
	      l: props.l,
	      focus: false
	    });
	  }
	};

	var ColorCircle = (function (_React$Component) {
	  _inherits(ColorCircle, _React$Component);

	  _createClass(ColorCircle, null, [{
	    key: 'propsTypes',
	    value: {
	      radius: _react.PropTypes.number,
	      width: _react.PropTypes.number,
	      h: _react.PropTypes.number,
	      s: _react.PropTypes.number,
	      l: _react.PropTypes.number,
	      onChange: _react.PropTypes.func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      radius: 134,
	      width: 32,
	      h: 0,
	      s: 0.5,
	      l: 0.5
	    },
	    enumerable: true
	  }]);

	  function ColorCircle(props) {
	    _classCallCheck(this, _ColorCircle);

	    _get(Object.getPrototypeOf(_ColorCircle.prototype), 'constructor', this).call(this, props);

	    this.state = {
	      h: this.props.h,
	      s: this.props.s,
	      l: this.props.l
	    };
	  }

	  _createClass(ColorCircle, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.renderRange();
	      this.renderTri();
	      this.renderShadow();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (!this.state.focus) {
	        this.setState({
	          h: nextProps.h,
	          s: nextProps.s,
	          l: nextProps.l
	        });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props = this.props;
	      var radius = _props.radius;
	      var width = _props.width;

	      if (prevProps.radius !== radius || prevProps.width !== width) {

	        this.renderRange();
	        this.renderShadow();
	      }

	      this.renderTri();

	      var hslChanged = function hslChanged(a, b) {
	        return a.h !== b.h || a.s !== b.s || a.l !== b.l;
	      };

	      if (hslChanged(this.state, prevState) && hslChanged(this.state, this.props) && this.props.onChange) {
	        this.props.onChange({
	          h: this.state.h,
	          s: this.state.s,
	          l: this.state.l
	        });
	      }
	    }
	  }, {
	    key: 'renderRange',
	    value: function renderRange() {
	      function getChannel(stops, _v) {

	        var p = _v * 6 % 1,
	            posA = parseInt(_v * 6),
	            posB = (posA + 1) % 6,
	            pos = stops[posA] + (stops[posB] - stops[posA]) * p;

	        return parseInt(pos * 256);
	      }
	      var getR = getChannel.bind(null, [1, 1, 0, 0, 0, 1, 1]);
	      var getG = getChannel.bind(null, [0, 0, 0, 1, 1, 1, 0]);
	      var getB = getChannel.bind(null, [0, 1, 1, 1, 0, 0, 0]);

	      var canvas = _react2['default'].findDOMNode(this.refs.range),
	          ctx = canvas.getContext('2d'),
	          r0 = this.props.radius - this.props.width,
	          r1 = this.props.radius,
	          step = PI2 / (2 * r1 * PI);

	      canvas.width = r1 * 2;
	      canvas.height = r1 * 2;

	      ctx.translate(r1, r1);
	      ctx.lineWidth = 2;

	      for (var rad = 0; rad < PI2; rad += step) {

	        var v = rad / PI2;
	        var color = 'rgb(' + getR(v) + ',' + getG(v) + ',' + getB(v) + ')';

	        ctx.beginPath();
	        ctx.strokeStyle = color;
	        ctx.moveTo(Math.cos(rad) * r0, Math.sin(rad) * r0);
	        ctx.lineTo(Math.cos(rad) * r1, Math.sin(rad) * r1);
	        ctx.stroke();
	      }
	    }
	  }, {
	    key: 'renderTri',
	    value: function renderTri() {
	      var canvas = _react2['default'].findDOMNode(this.refs.tri);
	      var ctx = canvas.getContext('2d');
	      var r0 = this.props.radius - this.props.width;
	      var r1 = this.props.radius;
	      var h = this.state.h;

	      canvas.width = r1 * 2;
	      canvas.height = r1 * 2;
	      ctx.translate(r1, r1);
	      ctx.moveTo(Math.cos(-PI2 / 3) * r0, Math.sin(-PI2 / 3) * r0);
	      ctx.lineTo(Math.cos(0) * r0, Math.sin(0) * r0);
	      ctx.lineTo(Math.cos(PI2 / 3) * r0, Math.sin(PI2 / 3) * r0);
	      ctx.closePath();
	      ctx.fillStyle = 'hsl(' + h * 360 + ',100%,50%)';
	      ctx.fill();
	    }
	  }, {
	    key: 'renderShadow',
	    value: function renderShadow() {
	      var canvas = _react2['default'].findDOMNode(this.refs.shadow);
	      var ctx = canvas.getContext('2d');
	      var _props2 = this.props;
	      var radius = _props2.radius;
	      var width = _props2.width;

	      var innerRadius = radius - width;
	      var a = {
	        x: Math.cos(-PI2 / 3) * innerRadius,
	        y: Math.sin(-PI2 / 3) * innerRadius
	      };
	      var b = {
	        x: Math.cos(0) * innerRadius,
	        y: Math.sin(0) * innerRadius
	      };
	      var c = {
	        x: Math.cos(PI2 / 3) * innerRadius,
	        y: Math.sin(PI2 / 3) * innerRadius
	      };
	      var triangleHeight = c.y - a.y;
	      var triangleWidth = b.x - a.x;

	      canvas.width = radius * 2;
	      canvas.height = radius * 2;
	      ctx.translate(radius + a.x, radius + a.y);
	      for (var i = 0; i < triangleWidth; i += 1) {
	        var pos = i / triangleWidth;
	        var alpha = 1 - pos;
	        var gap = triangleHeight * pos / 2;
	        var grd = ctx.createLinearGradient(0, gap, 0, triangleHeight - gap);
	        grd.addColorStop(0, 'rgba(255, 255, 255, ' + alpha + ')');
	        grd.addColorStop(1, 'rgba(0, 0, 0, ' + alpha + ')');

	        ctx.beginPath();
	        ctx.moveTo(i - 0.5, gap);
	        ctx.lineTo(i - 0.5, triangleHeight - gap + 0.23);
	        ctx.strokeStyle = grd;
	        ctx.stroke();
	        ctx.closePath();
	      }
	    }
	  }, {
	    key: 'renderControlls',
	    value: function renderControlls() {
	      var _props3 = this.props;
	      var radius = _props3.radius;
	      var width = _props3.width;
	      var _state = this.state;
	      var h = _state.h;
	      var s = _state.s;
	      var l = _state.l;

	      var rad = -h * PI2;
	      var innerRadius = radius - width;
	      var smallAltitude = Math.sin(PI / 6) * innerRadius;
	      var edge = Math.sqrt(Math.pow(innerRadius, 2) - Math.pow(smallAltitude, 2)) * 2;
	      var altitude = innerRadius + smallAltitude;
	      var cx = altitude * s - smallAltitude;
	      var cy = edge * (s - 1) * (l - 0.5);
	      var cRad = Math.atan2(cy, cx) - rad;
	      var cDist = Math.sqrt(Math.pow(cx, 2) + Math.pow(cy, 2));
	      cx = radius + Math.cos(cRad) * cDist;
	      cy = radius - Math.sin(cRad) * cDist;

	      return _react2['default'].createElement(
	        'svg',
	        { style: {
	            position: 'absolute',
	            left: 0,
	            overflow: 'visible',
	            pointerEvents: 'none'
	          } },
	        _react2['default'].createElement('circle', {
	          r: 6,
	          cx: cx,
	          cy: cy,
	          fill: 'none',
	          stroke: '#fff',
	          strokeWidth: 2 }),
	        _react2['default'].createElement('line', {
	          x1: radius + Math.cos(rad) * innerRadius,
	          y1: radius + Math.sin(rad) * innerRadius,
	          x2: radius + Math.cos(rad) * radius,
	          y2: radius + Math.sin(rad) * radius,
	          stroke: '#fff',
	          strokeWidth: 2 })
	      );
	    }
	  }, {
	    key: 'renderTriangle',
	    value: function renderTriangle() {
	      var radius = this.props.radius;
	      var h = this.state.h;

	      var rotate = 'rotate(' + -h * 360 + 'deg)';

	      return _react2['default'].createElement(
	        'div',
	        { style: {
	            position: 'absolute',
	            width: radius * 2,
	            height: radius * 2,
	            left: 0,
	            top: 0,
	            transform: rotate } },
	        _react2['default'].createElement('canvas', { ref: 'tri', style: { position: 'absolute', left: 0 } }),
	        _react2['default'].createElement('canvas', { ref: 'shadow', style: { position: 'absolute', left: 0 } })
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props4 = this.props;
	      var draggerRef = _props4.draggerRef;
	      var style = _props4.style;

	      return _react2['default'].createElement(
	        'div',
	        { ref: draggerRef, style: style },
	        _react2['default'].createElement('canvas', { ref: 'range' }),
	        this.renderTriangle(),
	        this.renderControlls()
	      );
	    }
	  }]);

	  var _ColorCircle = ColorCircle;
	  ColorCircle = (0, _pureRenderDecorator2['default'])(ColorCircle) || ColorCircle;
	  ColorCircle = (0, _customDrag2['default'])(customDragOptions)(ColorCircle) || ColorCircle;
	  return ColorCircle;
	})(_react2['default'].Component);

	exports['default'] = ColorCircle;
	module.exports = exports['default'];

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashObjectHas = __webpack_require__(246);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var ItemGroup = (function (_React$Component) {
	  _inherits(ItemGroup, _React$Component);

	  function ItemGroup(props) {
	    _classCallCheck(this, _ItemGroup);

	    _get(Object.getPrototypeOf(_ItemGroup.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(ItemGroup, [{
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      var childCount = _react2['default'].Children.count(this.props.children);
	      var children = _react2['default'].Children.map(this.props.children, function (child, idx) {

	        var last = idx !== childCount - 1;
	        var style = _this.getStyle('itemGroupChild', { last: last }, child.props.style);
	        var key = (0, _lodashObjectHas2['default'])(child.props, 'key') ? child.props.key : idx;

	        return _react2['default'].addons.cloneWithProps(child, { style: style, key: key });
	      });

	      return _react2['default'].createElement(
	        'div',
	        { style: { display: 'flex' } },
	        children
	      );
	    }
	  }]);

	  var _ItemGroup = ItemGroup;
	  ItemGroup = (0, _utilsMatterBasics2['default'])(ItemGroup) || ItemGroup;
	  ItemGroup = (0, _pureRenderDecorator2['default'])(ItemGroup) || ItemGroup;
	  ItemGroup = (0, _radium2['default'])(ItemGroup) || ItemGroup;
	  return ItemGroup;
	})(_react2['default'].Component);

	exports['default'] = ItemGroup;
	module.exports = exports['default'];

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _Input = __webpack_require__(321);

	var _Input2 = _interopRequireDefault(_Input);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var _lodashArrayFindIndex = __webpack_require__(332);

	var _lodashArrayFindIndex2 = _interopRequireDefault(_lodashArrayFindIndex);

	var MultiTypeInput = (function (_React$Component) {
	  _inherits(MultiTypeInput, _React$Component);

	  _createClass(MultiTypeInput, null, [{
	    key: 'propTypes',
	    value: {},
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      types: []
	    },
	    enumerable: true
	  }]);

	  function MultiTypeInput(props) {
	    var _this = this;

	    _classCallCheck(this, _MultiTypeInput);

	    _get(Object.getPrototypeOf(_MultiTypeInput.prototype), 'constructor', this).call(this, props);

	    this.handleAddonClick = function () {
	      var types = _this.props.types;
	      var currentTypeIndex = _this.state.currentTypeIndex;

	      currentTypeIndex = (currentTypeIndex + 1) % types.length;
	      _this.setState({ currentTypeIndex: currentTypeIndex });
	    };

	    this.handleChange = function (value) {
	      if (_this.props.onChange) {
	        _this.props.onChange(value);
	      }
	    };

	    this.state = {
	      currentTypeIndex: 0
	    };
	    this.state.currentTypeIndex = this.getCurrentTypeIndex();
	  }

	  _createClass(MultiTypeInput, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ currentTypeIndex: this.getCurrentTypeIndex(nextProps) });
	    }
	  }, {
	    key: 'getCurrentTypeIndex',
	    value: function getCurrentTypeIndex(props) {
	      props = props || this.props;

	      var _props = props;
	      var types = _props.types;
	      var value = _props.value;
	      var currentTypeIndex = this.state.currentTypeIndex;

	      function isAccept(type) {
	        return !type.acceptValue || type.acceptValue(value);
	      }

	      if (isAccept(types[currentTypeIndex])) {
	        return currentTypeIndex;
	      }

	      var nextTypeIdx = (0, _lodashArrayFindIndex2['default'])(types, function (type) {
	        return isAccept(type);
	      });

	      if (nextTypeIdx === -1) {
	        nextTypeIdx = currentTypeIndex;
	      }

	      return nextTypeIdx;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var currentTypeIndex = this.state.currentTypeIndex;

	      return _react2['default'].createElement(_Input2['default'], _extends({}, this.getBasics(), this.props, this.props.types[currentTypeIndex], {
	        onChange: this.handleChange,
	        onInitialFormat: this.handleChange,
	        addonOnClick: this.handleAddonClick }));
	    }
	  }]);

	  var _MultiTypeInput = MultiTypeInput;
	  MultiTypeInput = (0, _utilsMatterBasics2['default'])(MultiTypeInput) || MultiTypeInput;
	  MultiTypeInput = (0, _radium2['default'])(MultiTypeInput) || MultiTypeInput;
	  return MultiTypeInput;
	})(_react2['default'].Component);

	exports['default'] = MultiTypeInput;
	module.exports = exports['default'];

	// @pureRender

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var createFindIndex = __webpack_require__(333);

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(chr) {
	 *   return chr.user == 'barney';
	 * });
	 * // => 0
	 *
	 * // using the `_.matches` callback shorthand
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.findIndex(users, 'active', false);
	 * // => 0
	 *
	 * // using the `_.property` callback shorthand
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	var findIndex = createFindIndex();

	module.exports = findIndex;


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(303),
	    baseFindIndex = __webpack_require__(319);

	/**
	 * Creates a `_.findIndex` or `_.findLastIndex` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFindIndex(fromRight) {
	  return function(array, predicate, thisArg) {
	    if (!(array && array.length)) {
	      return -1;
	    }
	    predicate = baseCallback(predicate, thisArg, 3);
	    return baseFindIndex(array, predicate, fromRight);
	  };
	}

	module.exports = createFindIndex;


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var _Scrollbar = __webpack_require__(335);

	var _Scrollbar2 = _interopRequireDefault(_Scrollbar);

	var _lodashLangToArray = __webpack_require__(336);

	var _lodashLangToArray2 = _interopRequireDefault(_lodashLangToArray);

	var Scrollable = (function (_React$Component) {
	  _inherits(Scrollable, _React$Component);

	  _createClass(Scrollable, null, [{
	    key: 'propTypes',
	    value: {
	      // children: React.PropTypes.element.isRequired,
	      verticalScroll: _react2['default'].PropTypes.number,
	      onChangeVerticalScroll: _react2['default'].PropTypes.func
	    },
	    enumerable: true
	  }]);

	  function Scrollable(props) {
	    var _this = this;

	    _classCallCheck(this, _Scrollable);

	    _get(Object.getPrototypeOf(_Scrollable.prototype), 'constructor', this).call(this, props);

	    this.handleVerticalScroll = function (scroll) {
	      scroll = Math.max(0, Math.min(_this.getMaxVerticalScroll(), scroll));

	      _this.setState({ verticalScroll: scroll });
	      if (_this.props.onChangeVerticalScroll) {
	        _this.props.onChangeVerticalScroll(scroll);
	      }
	    };

	    this.handleWheel = function (e) {
	      e.stopPropagation();
	      e.preventDefault();
	      var way = e.deltaY / 3;
	      var verticalScroll = _this.state.verticalScroll;

	      _this.handleVerticalScroll(verticalScroll + way);
	    };

	    this.setSizes = function () {
	      var containerNode = _react2['default'].findDOMNode(_this);
	      var containerBr = containerNode.getBoundingClientRect();
	      var childNodes = (0, _lodashLangToArray2['default'])(containerNode.children);
	      var getHeight = function getHeight(node) {
	        return node.getBoundingClientRect().height;
	      };
	      var contentHeight = Math.max.apply(Math, _toConsumableArray(childNodes.map(getHeight)));

	      _this.setState({
	        containerHeight: containerBr.height,
	        contentHeight: contentHeight
	      });
	    };

	    this.state = {
	      verticalScroll: 0,
	      containerHeight: 0,
	      contentHeight: 0
	    };
	  }

	  _createClass(Scrollable, [{
	    key: 'getMaxVerticalScroll',
	    value: function getMaxVerticalScroll() {
	      var _state = this.state;
	      var containerHeight = _state.containerHeight;
	      var contentHeight = _state.contentHeight;

	      return contentHeight - containerHeight;
	    }
	  }, {
	    key: 'renderChildren',
	    value: function renderChildren(top) {
	      return _react2['default'].Children.map(this.props.children, function (child) {
	        var style = _extends({}, child.props.style, { transform: 'translateY(' + top + 'px)' });
	        return _react2['default'].cloneElement(child, { style: style });
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var _state2 = this.state;
	      var containerHeight = _state2.containerHeight;
	      var contentHeight = _state2.contentHeight;

	      var verticalScroll = this.props.verticalScroll === undefined ? this.state.verticalScroll : this.props.verticalScroll;
	      var maxVerticalScroll = this.getMaxVerticalScroll();

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(verticalScroll), {
	          onWheel: this.handleWheel,
	          style: _extends({}, style, {
	            overflow: 'hidden',
	            position: 'relative',
	            //the basic is stretch for display:flex but it's needs the children
	            // in they original size
	            alignItems: 'flex-start'
	          }) }),
	        this.renderChildren(-verticalScroll),
	        maxVerticalScroll > 0 && _react2['default'].createElement(_Scrollbar2['default'], {
	          type: 'vertical',
	          scroll: verticalScroll,
	          height: containerHeight,
	          maxScroll: maxVerticalScroll,
	          onChange: this.handleVerticalScroll })
	      );
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setSizes();
	      this._setSizesSetI = setInterval(this.setSizes, 312);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearInterval(this._setSizesSetI);
	    }
	  }]);

	  var _Scrollable = Scrollable;
	  Scrollable = (0, _utilsMatterBasics2['default'])(Scrollable) || Scrollable;
	  Scrollable = (0, _pureRenderDecorator2['default'])(Scrollable) || Scrollable;
	  Scrollable = (0, _radium2['default'])(Scrollable) || Scrollable;
	  return Scrollable;
	})(_react2['default'].Component);

	exports['default'] = Scrollable;
	module.exports = exports['default'];

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _customDrag = __webpack_require__(324);

	var _customDrag2 = _interopRequireDefault(_customDrag);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var dragOptions = {
	  onDown: function onDown(props, monitor) {
	    monitor.setData({
	      initScroll: props.scroll
	    });
	  },
	  onDrag: function onDrag(props, monitor) {
	    var _monitor$getDifferenceFromInitialOffset = monitor.getDifferenceFromInitialOffset();

	    var mouseOffset = _monitor$getDifferenceFromInitialOffset.y;
	    var initScroll = monitor.data.initScroll;
	    var maxScroll = props.maxScroll;
	    var height = props.height;

	    var offset = maxScroll / height * mouseOffset;
	    var scroll = Math.max(0, Math.min(maxScroll, initScroll + offset));
	    props.onChange(scroll);
	  }
	};

	var Scrollbar = (function (_React$Component) {
	  _inherits(Scrollbar, _React$Component);

	  function Scrollbar() {
	    _classCallCheck(this, _Scrollbar);

	    _get(Object.getPrototypeOf(_Scrollbar.prototype), 'constructor', this).apply(this, arguments);
	  }

	  _createClass(Scrollbar, [{
	    key: 'getThumbStyle',
	    value: function getThumbStyle() {
	      var _props = this.props;
	      var maxScroll = _props.maxScroll;
	      var height = _props.height;
	      var scroll = _props.scroll;

	      var display = maxScroll > 0 ? 'hidden' : 'visible';
	      var thumbHeight = Math.max(17, height * (height / (maxScroll + height))) || 0;
	      var top = (height - thumbHeight) * (scroll / maxScroll) || 0;
	      console.log({ top: top, height: height, thumbHeight: thumbHeight, scroll: scroll, maxScroll: maxScroll });
	      return { display: display, height: thumbHeight, top: top };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props;
	      var height = _props2.height;
	      var scroll = _props2.scroll;
	      var maxScroll = _props2.maxScroll;
	      var mod = _props2.mod;
	      var style = _props2.style;
	      var dragRef = _props2.dragRef;

	      return _react2['default'].createElement(
	        'div',
	        { style: this.getStyle('scrollbar', mod, style) },
	        _react2['default'].createElement('div', {
	          ref: dragRef,
	          style: this.getStyle('scrollbarThumb', mod, this.getThumbStyle()) })
	      );
	    }
	  }], [{
	    key: 'propTypes',
	    value: {
	      height: _react.PropTypes.number,
	      scroll: _react.PropTypes.number,
	      maxScroll: _react.PropTypes.number,
	      onChange: _react.PropTypes.func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      height: 0,
	      scroll: 0,
	      maxScroll: 0
	    },
	    enumerable: true
	  }]);

	  var _Scrollbar = Scrollbar;
	  Scrollbar = (0, _utilsMatterBasics2['default'])(Scrollbar) || Scrollbar;
	  Scrollbar = (0, _radium2['default'])(Scrollbar) || Scrollbar;
	  Scrollbar = (0, _customDrag2['default'])(dragOptions, function (connect) {
	    return {
	      dragRef: connect.getDragRef()
	    };
	  })(Scrollbar) || Scrollbar;
	  return Scrollbar;
	})(_react2['default'].Component);

	exports['default'] = Scrollbar;
	module.exports = exports['default'];

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(180),
	    getLength = __webpack_require__(9),
	    isLength = __webpack_require__(11),
	    values = __webpack_require__(337);

	/**
	 * Converts `value` to an array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the converted array.
	 * @example
	 *
	 * (function() {
	 *   return _.toArray(arguments).slice(1);
	 * }(1, 2, 3));
	 * // => [2, 3]
	 */
	function toArray(value) {
	  var length = value ? getLength(value) : 0;
	  if (!isLength(length)) {
	    return values(value);
	  }
	  if (!length) {
	    return [];
	  }
	  return arrayCopy(value);
	}

	module.exports = toArray;


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(338),
	    keys = __webpack_require__(196);

	/**
	 * Creates an array of the own enumerable property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return baseValues(object, keys(object));
	}

	module.exports = values;


/***/ },
/* 338 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  var index = -1,
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = object[props[index]];
	  }
	  return result;
	}

	module.exports = baseValues;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _TabHeader = __webpack_require__(340);

	var _TabHeader2 = _interopRequireDefault(_TabHeader);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Tabs = (function (_React$Component) {
	  _inherits(Tabs, _React$Component);

	  _createClass(Tabs, null, [{
	    key: 'propTypes',
	    value: {},
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      stretchLabels: true,
	      defaultTabIdx: 0
	    },
	    enumerable: true
	  }]);

	  function Tabs(props) {
	    _classCallCheck(this, _Tabs);

	    _get(Object.getPrototypeOf(_Tabs.prototype), 'constructor', this).call(this, props);

	    this.state = {
	      currTabIdx: props.defaultTabIdx
	    };
	  }

	  _createClass(Tabs, [{
	    key: '_selectTab',
	    value: function _selectTab(idx) {
	      this.setState({ currTabIdx: idx });

	      if (this.props.onChangeTabIdx) {

	        this.props.onChangeTabIdx(idx);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ currTabIdx: nextProps.defaultTabIdx });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      var currTab;

	      _react2['default'].Children.forEach(this.props.children, function (child, idx) {

	        if (_this.state.currTabIdx === idx) {

	          currTab = child;
	        }
	      });

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('tabBase', mod, style) }),
	        _react2['default'].createElement(_TabHeader2['default'], {
	          currTabIdx: this.state.currTabIdx,
	          onSelectTab: function (idx) {
	            return _this._selectTab(idx);
	          },
	          children: this.props.children,
	          stretchLabels: this.props.stretchLabels }),
	        _react2['default'].createElement(
	          'div',
	          { style: this.getStyle('tabCont', mod) },
	          currTab
	        )
	      );
	    }
	  }]);

	  var _Tabs = Tabs;
	  Tabs = (0, _utilsMatterBasics2['default'])(Tabs) || Tabs;
	  Tabs = (0, _pureRenderDecorator2['default'])(Tabs) || Tabs;
	  Tabs = (0, _radium2['default'])(Tabs) || Tabs;
	  return Tabs;
	})(_react2['default'].Component);

	exports['default'] = Tabs;
	module.exports = exports['default'];

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _TabLabel = __webpack_require__(341);

	var _TabLabel2 = _interopRequireDefault(_TabLabel);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var TabHeader = (function (_React$Component) {
	  _inherits(TabHeader, _React$Component);

	  _createClass(TabHeader, null, [{
	    key: 'propTypes',
	    value: {},
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      stretchLabels: true
	    },
	    enumerable: true
	  }]);

	  function TabHeader(props) {
	    _classCallCheck(this, _TabHeader);

	    _get(Object.getPrototypeOf(_TabHeader.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(TabHeader, [{
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      var childCount = _react2['default'].Children.count(this.props.children);

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('tabHeader', mod, style) }),
	        _react2['default'].Children.map(this.props.children, function (child, idx) {

	          return _react2['default'].createElement(_TabLabel2['default'], {
	            stretch: _this.props.stretchLabels,
	            first: idx === 0,
	            last: idx === childCount - 1,
	            selected: _this.props.currTabIdx === idx,
	            icon: child.props.icon,
	            label: child.props.label,
	            onSelect: function () {
	              return _this.props.onSelectTab(idx);
	            } });
	        })
	      );
	    }
	  }]);

	  var _TabHeader = TabHeader;
	  TabHeader = (0, _utilsMatterBasics2['default'])(TabHeader) || TabHeader;
	  TabHeader = (0, _pureRenderDecorator2['default'])(TabHeader) || TabHeader;
	  TabHeader = (0, _radium2['default'])(TabHeader) || TabHeader;
	  return TabHeader;
	})(_react2['default'].Component);

	exports['default'] = TabHeader;
	module.exports = exports['default'];

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _Icon = __webpack_require__(296);

	var _Icon2 = _interopRequireDefault(_Icon);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var TabLabel = (function (_React$Component) {
	  _inherits(TabLabel, _React$Component);

	  _createClass(TabLabel, null, [{
	    key: 'propTypes',
	    value: {},
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      selected: false
	    },
	    enumerable: true
	  }]);

	  function TabLabel(props) {
	    _classCallCheck(this, _TabLabel);

	    _get(Object.getPrototypeOf(_TabLabel.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(TabLabel, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      mod = (0, _lodashObjectAssign2['default'])({
	        selected: this.props.selected,
	        stretch: this.props.stretch,
	        first: this.props.first,
	        notFirst: !this.props.first,
	        last: this.props.last
	      }, mod);

	      var icon;
	      if (this.props.icon) {
	        icon = _react2['default'].createElement(_Icon2['default'], { icon: this.props.icon,
	          style: { marginRight: this.props.text ? 4 : 0 } });
	      }

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('tabLabel', mod, style),
	          onClick: this.props.onSelect,
	          onDragEnter: this.props.onSelect }),
	        icon,
	        this.props.label
	      );
	    }
	  }]);

	  var _TabLabel = TabLabel;
	  TabLabel = (0, _utilsMatterBasics2['default'])(TabLabel) || TabLabel;
	  TabLabel = (0, _pureRenderDecorator2['default'])(TabLabel) || TabLabel;
	  TabLabel = (0, _radium2['default'])(TabLabel) || TabLabel;
	  return TabLabel;
	})(_react2['default'].Component);

	exports['default'] = TabLabel;
	module.exports = exports['default'];

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _lodashObjectHas = __webpack_require__(246);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _pureRenderDecorator = __webpack_require__(269);

	var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Toggle = (function (_React$Component) {
	  _inherits(Toggle, _React$Component);

	  _createClass(Toggle, null, [{
	    key: 'propTypes',
	    value: {
	      labelLeft: _react2['default'].PropTypes.string,
	      valueLeft: _react2['default'].PropTypes.any,
	      labelRight: _react2['default'].PropTypes.string,
	      valueRight: _react2['default'].PropTypes.any
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      valueLeft: true,
	      valueRight: false,
	      labelLeft: 'ON',
	      labelRight: 'OFF'
	    },
	    enumerable: true
	  }]);

	  function Toggle(props) {
	    _classCallCheck(this, _Toggle);

	    _get(Object.getPrototypeOf(_Toggle.prototype), 'constructor', this).call(this, props);

	    var defaultValue = props.defaultValue;
	    var valueRight = props.valueRight;

	    this.state = {
	      left: defaultValue === valueRight ? false : true
	    };
	  }

	  _createClass(Toggle, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {

	      if ((0, _lodashObjectHas2['default'])(nextProps, 'defaultValue')) {
	        var _props = this.props;
	        var defaultValue = _props.defaultValue;
	        var valueLeft = _props.valueLeft;
	        var valueRight = _props.valueRight;

	        var left = undefined;

	        if (defaultValue === valueLeft) left = true;else if (defaultValue === valueRight) left = false;

	        if (left !== undefined) {
	          this.setState({ left: left });
	        }
	      }
	    }
	  }, {
	    key: 'renderSide',
	    value: function renderSide(label, on, side) {
	      var mod = (0, _lodashObjectAssign2['default'])({ on: on, side: side }, this.props.mod);

	      return _react2['default'].createElement(
	        'div',
	        { style: this.getStyle('toggleSide', mod) },
	        label
	      );
	    }
	  }, {
	    key: 'renderKnob',
	    value: function renderKnob(left) {
	      var mod = (0, _lodashObjectAssign2['default'])({ onLeft: left ? 'true' : 'false' }, this.props.mod);

	      return _react2['default'].createElement(
	        'div',
	        { style: this.getStyle('toggleKnob', mod) },
	        this.renderGrip()
	      );
	    }
	  }, {
	    key: 'renderGrip',
	    value: function renderGrip() {
	      var grey = 'white';

	      return _react2['default'].createElement(
	        'svg',
	        { width: '32', height: '32' },
	        _react2['default'].createElement('line', { x1: '13.5', y1: '12', x2: '13.5', y2: '20', stroke: grey, strokeWidth: '1' }),
	        _react2['default'].createElement('line', { x1: '15.5', y1: '12', x2: '15.5', y2: '20', stroke: grey, strokeWidth: '1' }),
	        _react2['default'].createElement('line', { x1: '17.5', y1: '12', x2: '17.5', y2: '20', stroke: grey, strokeWidth: '1' })
	      );
	    }
	  }, {
	    key: 'handleClick',
	    value: function handleClick() {

	      var left = !this.state.left;

	      if (this.props.onChange) {
	        var value = left ? this.props.valueLeft : this.props.valueRight;
	        this.props.onChange(value);
	      }

	      this.setState({ left: left });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this = this;

	      var _props2 = this.props;
	      var mod = _props2.mod;
	      var style = _props2.style;
	      var labelLeft = _props2.labelLeft;
	      var labelRight = _props2.labelRight;

	      return _react2['default'].createElement(
	        'div',
	        {
	          style: this.getStyle('toggleBase', mod, style),
	          onClick: function () {
	            return _this.handleClick();
	          } },
	        this.renderSide(labelLeft, this.state.left, 'left'),
	        this.renderSide(labelRight, !this.state.left, 'right'),
	        this.renderKnob(this.state.left)
	      );
	    }
	  }]);

	  var _Toggle = Toggle;
	  Toggle = (0, _utilsMatterBasics2['default'])(Toggle) || Toggle;
	  Toggle = (0, _pureRenderDecorator2['default'])(Toggle) || Toggle;
	  Toggle = (0, _radium2['default'])(Toggle) || Toggle;
	  return Toggle;
	})(_react2['default'].Component);

	exports['default'] = Toggle;
	module.exports = exports['default'];

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Toolbar = (function (_React$Component) {
	  _inherits(Toolbar, _React$Component);

	  _createClass(Toolbar, null, [{
	    key: 'defaultProps',
	    value: {
	      direction: 'row'
	    },
	    enumerable: true
	  }]);

	  function Toolbar(props) {
	    _classCallCheck(this, _Toolbar);

	    _get(Object.getPrototypeOf(_Toolbar.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Toolbar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;
	      var direction = _props.direction;
	      var size = _props.size;

	      mod = (0, _lodashObjectAssign2['default'])({ direction: direction, size: size }, mod);

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('toolbar', mod, style),
	          onClick: this.props.onClick }),
	        this.props.children
	      );
	    }
	  }]);

	  var _Toolbar = Toolbar;
	  Toolbar = (0, _utilsMatterBasics2['default'])(Toolbar) || Toolbar;
	  Toolbar = (0, _radium2['default'])(Toolbar) || Toolbar;
	  return Toolbar;
	})(_react2['default'].Component);

	exports['default'] = Toolbar;
	module.exports = exports['default'];

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var _radium = __webpack_require__(255);

	var _radium2 = _interopRequireDefault(_radium);

	var _lodashObjectAssign = __webpack_require__(202);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _lodashObjectHas = __webpack_require__(246);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _utilsMatterBasics = __webpack_require__(288);

	var _utilsMatterBasics2 = _interopRequireDefault(_utilsMatterBasics);

	var Toolbar = (function (_React$Component) {
	  _inherits(Toolbar, _React$Component);

	  function Toolbar(props) {
	    _classCallCheck(this, _Toolbar);

	    _get(Object.getPrototypeOf(_Toolbar.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(Toolbar, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props;
	      var mod = _props.mod;
	      var style = _props.style;

	      mod = (0, _lodashObjectAssign2['default'])({}, mod);
	      if (!(0, _lodashObjectHas2['default'])(mod, 'size')) {
	        mod.size = this.getStyle('config').lineHeight;
	      }

	      return _react2['default'].createElement(
	        'div',
	        _extends({}, this.getBasics(), {
	          style: this.getStyle('toolbarGroup', mod, style) }),
	        this.props.children
	      );
	    }
	  }]);

	  var _Toolbar = Toolbar;
	  Toolbar = (0, _utilsMatterBasics2['default'])(Toolbar) || Toolbar;
	  Toolbar = (0, _radium2['default'])(Toolbar) || Toolbar;
	  return Toolbar;
	})(_react2['default'].Component);

	exports['default'] = Toolbar;
	module.exports = exports['default'];

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _react = __webpack_require__(15);

	var _react2 = _interopRequireDefault(_react);

	var RefreshValuePropOfInput = (function (_React$Component) {
	  _inherits(RefreshValuePropOfInput, _React$Component);

	  _createClass(RefreshValuePropOfInput, null, [{
	    key: 'propTypes',
	    value: {
	      children: _react2['default'].PropTypes.element.isRequired
	    },
	    enumerable: true
	  }]);

	  function RefreshValuePropOfInput(props) {
	    var _this = this;

	    _classCallCheck(this, RefreshValuePropOfInput);

	    _get(Object.getPrototypeOf(RefreshValuePropOfInput.prototype), 'constructor', this).call(this, props);

	    this.handleChange = function (value) {
	      _this.setState({ value: value });
	    };

	    this.state = {};
	  }

	  _createClass(RefreshValuePropOfInput, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var children = this.props.children;
	      var state = this.state;

	      var input = _react2['default'].cloneElement(children, {
	        value: state.value === undefined ? children.props.value : state.value,
	        onChange: function onChange(value) {
	          if (children.props.onChange) {
	            children.props.onChange(value);
	          }
	          _this2.handleChange(value);
	        }
	      });
	      return input;
	    }
	  }]);

	  return RefreshValuePropOfInput;
	})(_react2['default'].Component);

	exports['default'] = RefreshValuePropOfInput;
	module.exports = exports['default'];

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.DefaultRoute = __webpack_require__(347);
	exports.Link = __webpack_require__(360);
	exports.NotFoundRoute = __webpack_require__(361);
	exports.Redirect = __webpack_require__(362);
	exports.Route = __webpack_require__(359);
	exports.ActiveHandler = __webpack_require__(357);
	exports.RouteHandler = exports.ActiveHandler;

	exports.HashLocation = __webpack_require__(363);
	exports.HistoryLocation = __webpack_require__(366);
	exports.RefreshLocation = __webpack_require__(367);
	exports.StaticLocation = __webpack_require__(368);
	exports.TestLocation = __webpack_require__(369);

	exports.ImitateBrowserBehavior = __webpack_require__(370);
	exports.ScrollToTopBehavior = __webpack_require__(371);

	exports.History = __webpack_require__(365);
	exports.Navigation = __webpack_require__(372);
	exports.State = __webpack_require__(373);

	exports.createRoute = __webpack_require__(349).createRoute;
	exports.createDefaultRoute = __webpack_require__(349).createDefaultRoute;
	exports.createNotFoundRoute = __webpack_require__(349).createNotFoundRoute;
	exports.createRedirect = __webpack_require__(349).createRedirect;
	exports.createRoutesFromReactChildren = __webpack_require__(374);

	exports.create = __webpack_require__(375);
	exports.run = __webpack_require__(384);

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(348);
	var RouteHandler = __webpack_require__(357);
	var Route = __webpack_require__(359);

	/**
	 * A <DefaultRoute> component is a special kind of <Route> that
	 * renders when its parent matches but none of its siblings do.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var DefaultRoute = (function (_Route) {
	  function DefaultRoute() {
	    _classCallCheck(this, DefaultRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(DefaultRoute, _Route);

	  return DefaultRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	DefaultRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	DefaultRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = DefaultRoute;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(27);
	var ReactPropTypes = __webpack_require__(15).PropTypes;
	var Route = __webpack_require__(349);

	var PropTypes = assign({}, ReactPropTypes, {

	  /**
	   * Indicates that a prop should be falsy.
	   */
	  falsy: function falsy(props, propName, componentName) {
	    if (props[propName]) {
	      return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	    }
	  },

	  /**
	   * Indicates that a prop should be a Route object.
	   */
	  route: ReactPropTypes.instanceOf(Route),

	  /**
	   * Indicates that a prop should be a Router object.
	   */
	  //router: ReactPropTypes.instanceOf(Router) // TODO
	  router: ReactPropTypes.func

	});

	module.exports = PropTypes;

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var assign = __webpack_require__(27);
	var invariant = __webpack_require__(21);
	var warning = __webpack_require__(29);
	var PathUtils = __webpack_require__(350);

	var _currentRoute;

	var Route = (function () {
	  function Route(name, path, ignoreScrollBehavior, isDefault, isNotFound, onEnter, onLeave, handler) {
	    _classCallCheck(this, Route);

	    this.name = name;
	    this.path = path;
	    this.paramNames = PathUtils.extractParamNames(this.path);
	    this.ignoreScrollBehavior = !!ignoreScrollBehavior;
	    this.isDefault = !!isDefault;
	    this.isNotFound = !!isNotFound;
	    this.onEnter = onEnter;
	    this.onLeave = onLeave;
	    this.handler = handler;
	  }

	  _createClass(Route, [{
	    key: 'appendChild',

	    /**
	     * Appends the given route to this route's child routes.
	     */
	    value: function appendChild(route) {
	      invariant(route instanceof Route, 'route.appendChild must use a valid Route');

	      if (!this.childRoutes) this.childRoutes = [];

	      this.childRoutes.push(route);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var string = '<Route';

	      if (this.name) string += ' name="' + this.name + '"';

	      string += ' path="' + this.path + '">';

	      return string;
	    }
	  }], [{
	    key: 'createRoute',

	    /**
	     * Creates and returns a new route. Options may be a URL pathname string
	     * with placeholders for named params or an object with any of the following
	     * properties:
	     *
	     * - name                     The name of the route. This is used to lookup a
	     *                            route relative to its parent route and should be
	     *                            unique among all child routes of the same parent
	     * - path                     A URL pathname string with optional placeholders
	     *                            that specify the names of params to extract from
	     *                            the URL when the path matches. Defaults to `/${name}`
	     *                            when there is a name given, or the path of the parent
	     *                            route, or /
	     * - ignoreScrollBehavior     True to make this route (and all descendants) ignore
	     *                            the scroll behavior of the router
	     * - isDefault                True to make this route the default route among all
	     *                            its siblings
	     * - isNotFound               True to make this route the "not found" route among
	     *                            all its siblings
	     * - onEnter                  A transition hook that will be called when the
	     *                            router is going to enter this route
	     * - onLeave                  A transition hook that will be called when the
	     *                            router is going to leave this route
	     * - handler                  A React component that will be rendered when
	     *                            this route is active
	     * - parentRoute              The parent route to use for this route. This option
	     *                            is automatically supplied when creating routes inside
	     *                            the callback to another invocation of createRoute. You
	     *                            only ever need to use this when declaring routes
	     *                            independently of one another to manually piece together
	     *                            the route hierarchy
	     *
	     * The callback may be used to structure your route hierarchy. Any call to
	     * createRoute, createDefaultRoute, createNotFoundRoute, or createRedirect
	     * inside the callback automatically uses this route as its parent.
	     */
	    value: function createRoute(options, callback) {
	      options = options || {};

	      if (typeof options === 'string') options = { path: options };

	      var parentRoute = _currentRoute;

	      if (parentRoute) {
	        warning(options.parentRoute == null || options.parentRoute === parentRoute, 'You should not use parentRoute with createRoute inside another route\'s child callback; it is ignored');
	      } else {
	        parentRoute = options.parentRoute;
	      }

	      var name = options.name;
	      var path = options.path || name;

	      if (path && !(options.isDefault || options.isNotFound)) {
	        if (PathUtils.isAbsolute(path)) {
	          if (parentRoute) {
	            invariant(path === parentRoute.path || parentRoute.paramNames.length === 0, 'You cannot nest path "%s" inside "%s"; the parent requires URL parameters', path, parentRoute.path);
	          }
	        } else if (parentRoute) {
	          // Relative paths extend their parent.
	          path = PathUtils.join(parentRoute.path, path);
	        } else {
	          path = '/' + path;
	        }
	      } else {
	        path = parentRoute ? parentRoute.path : '/';
	      }

	      if (options.isNotFound && !/\*$/.test(path)) path += '*'; // Auto-append * to the path of not found routes.

	      var route = new Route(name, path, options.ignoreScrollBehavior, options.isDefault, options.isNotFound, options.onEnter, options.onLeave, options.handler);

	      if (parentRoute) {
	        if (route.isDefault) {
	          invariant(parentRoute.defaultRoute == null, '%s may not have more than one default route', parentRoute);

	          parentRoute.defaultRoute = route;
	        } else if (route.isNotFound) {
	          invariant(parentRoute.notFoundRoute == null, '%s may not have more than one not found route', parentRoute);

	          parentRoute.notFoundRoute = route;
	        }

	        parentRoute.appendChild(route);
	      }

	      // Any routes created in the callback
	      // use this route as their parent.
	      if (typeof callback === 'function') {
	        var currentRoute = _currentRoute;
	        _currentRoute = route;
	        callback.call(route, route);
	        _currentRoute = currentRoute;
	      }

	      return route;
	    }
	  }, {
	    key: 'createDefaultRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL.
	     */
	    value: function createDefaultRoute(options) {
	      return Route.createRoute(assign({}, options, { isDefault: true }));
	    }
	  }, {
	    key: 'createNotFoundRoute',

	    /**
	     * Creates and returns a route that is rendered when its parent matches
	     * the current URL but none of its siblings do.
	     */
	    value: function createNotFoundRoute(options) {
	      return Route.createRoute(assign({}, options, { isNotFound: true }));
	    }
	  }, {
	    key: 'createRedirect',

	    /**
	     * Creates and returns a route that automatically redirects the transition
	     * to another route. In addition to the normal options to createRoute, this
	     * function accepts the following options:
	     *
	     * - from         An alias for the `path` option. Defaults to *
	     * - to           The path/route/route name to redirect to
	     * - params       The params to use in the redirect URL. Defaults
	     *                to using the current params
	     * - query        The query to use in the redirect URL. Defaults
	     *                to using the current query
	     */
	    value: function createRedirect(options) {
	      return Route.createRoute(assign({}, options, {
	        path: options.path || options.from || '*',
	        onEnter: function onEnter(transition, params, query) {
	          transition.redirect(options.to, options.params || params, options.query || query);
	        }
	      }));
	    }
	  }]);

	  return Route;
	})();

	module.exports = Route;

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(21);
	var assign = __webpack_require__(351);
	var qs = __webpack_require__(352);

	var paramCompileMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|[*.()\[\]\\+|{}^$]/g;
	var paramInjectMatcher = /:([a-zA-Z_$][a-zA-Z0-9_$?]*[?]?)|[*]/g;
	var paramInjectTrailingSlashMatcher = /\/\/\?|\/\?\/|\/\?/g;
	var queryMatcher = /\?(.*)$/;

	var _compiledPatterns = {};

	function compilePattern(pattern) {
	  if (!(pattern in _compiledPatterns)) {
	    var paramNames = [];
	    var source = pattern.replace(paramCompileMatcher, function (match, paramName) {
	      if (paramName) {
	        paramNames.push(paramName);
	        return '([^/?#]+)';
	      } else if (match === '*') {
	        paramNames.push('splat');
	        return '(.*?)';
	      } else {
	        return '\\' + match;
	      }
	    });

	    _compiledPatterns[pattern] = {
	      matcher: new RegExp('^' + source + '$', 'i'),
	      paramNames: paramNames
	    };
	  }

	  return _compiledPatterns[pattern];
	}

	var PathUtils = {

	  /**
	   * Returns true if the given path is absolute.
	   */
	  isAbsolute: function isAbsolute(path) {
	    return path.charAt(0) === '/';
	  },

	  /**
	   * Joins two URL paths together.
	   */
	  join: function join(a, b) {
	    return a.replace(/\/*$/, '/') + b;
	  },

	  /**
	   * Returns an array of the names of all parameters in the given pattern.
	   */
	  extractParamNames: function extractParamNames(pattern) {
	    return compilePattern(pattern).paramNames;
	  },

	  /**
	   * Extracts the portions of the given URL path that match the given pattern
	   * and returns an object of param name => value pairs. Returns null if the
	   * pattern does not match the given path.
	   */
	  extractParams: function extractParams(pattern, path) {
	    var _compilePattern = compilePattern(pattern);

	    var matcher = _compilePattern.matcher;
	    var paramNames = _compilePattern.paramNames;

	    var match = path.match(matcher);

	    if (!match) {
	      return null;
	    }var params = {};

	    paramNames.forEach(function (paramName, index) {
	      params[paramName] = match[index + 1];
	    });

	    return params;
	  },

	  /**
	   * Returns a version of the given route path with params interpolated. Throws
	   * if there is a dynamic segment of the route path for which there is no param.
	   */
	  injectParams: function injectParams(pattern, params) {
	    params = params || {};

	    var splatIndex = 0;

	    return pattern.replace(paramInjectMatcher, function (match, paramName) {
	      paramName = paramName || 'splat';

	      // If param is optional don't check for existence
	      if (paramName.slice(-1) === '?') {
	        paramName = paramName.slice(0, -1);

	        if (params[paramName] == null) return '';
	      } else {
	        invariant(params[paramName] != null, 'Missing "%s" parameter for path "%s"', paramName, pattern);
	      }

	      var segment;
	      if (paramName === 'splat' && Array.isArray(params[paramName])) {
	        segment = params[paramName][splatIndex++];

	        invariant(segment != null, 'Missing splat # %s for path "%s"', splatIndex, pattern);
	      } else {
	        segment = params[paramName];
	      }

	      return segment;
	    }).replace(paramInjectTrailingSlashMatcher, '/');
	  },

	  /**
	   * Returns an object that is the result of parsing any query string contained
	   * in the given path, null if the path contains no query string.
	   */
	  extractQuery: function extractQuery(path) {
	    var match = path.match(queryMatcher);
	    return match && qs.parse(match[1]);
	  },

	  /**
	   * Returns a version of the given path without the query string.
	   */
	  withoutQuery: function withoutQuery(path) {
	    return path.replace(queryMatcher, '');
	  },

	  /**
	   * Returns a version of the given path with the parameters in the given
	   * query merged into the query string.
	   */
	  withQuery: function withQuery(path, query) {
	    var existingQuery = PathUtils.extractQuery(path);

	    if (existingQuery) query = query ? assign(existingQuery, query) : existingQuery;

	    var queryString = qs.stringify(query, { arrayFormat: 'brackets' });

	    if (queryString) {
	      return PathUtils.withoutQuery(path) + '?' + queryString;
	    }return PathUtils.withoutQuery(path);
	  }

	};

	module.exports = PathUtils;

/***/ },
/* 351 */
/***/ function(module, exports) {

	'use strict';

	function ToObject(val) {
		if (val == null) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var keys;
		var to = ToObject(target);

		for (var s = 1; s < arguments.length; s++) {
			from = arguments[s];
			keys = Object.keys(Object(from));

			for (var i = 0; i < keys.length; i++) {
				to[keys[i]] = from[keys[i]];
			}
		}

		return to;
	};


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(353);


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Stringify = __webpack_require__(354);
	var Parse = __webpack_require__(356);


	// Declare internals

	var internals = {};


	module.exports = {
	    stringify: Stringify,
	    parse: Parse
	};


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(355);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    arrayPrefixGenerators: {
	        brackets: function (prefix, key) {
	            return prefix + '[]';
	        },
	        indices: function (prefix, key) {
	            return prefix + '[' + key + ']';
	        },
	        repeat: function (prefix, key) {
	            return prefix;
	        }
	    }
	};


	internals.stringify = function (obj, prefix, generateArrayPrefix) {

	    if (Utils.isBuffer(obj)) {
	        obj = obj.toString();
	    }
	    else if (obj instanceof Date) {
	        obj = obj.toISOString();
	    }
	    else if (obj === null) {
	        obj = '';
	    }

	    if (typeof obj === 'string' ||
	        typeof obj === 'number' ||
	        typeof obj === 'boolean') {

	        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        if (Array.isArray(obj)) {
	            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
	        }
	        else {
	            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
	        }
	    }

	    return values;
	};


	module.exports = function (obj, options) {

	    options = options || {};
	    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

	    var keys = [];

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return '';
	    }

	    var arrayFormat;
	    if (options.arrayFormat in internals.arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    }
	    else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    }
	    else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

	    var objKeys = Object.keys(obj);
	    for (var i = 0, il = objKeys.length; i < il; ++i) {
	        var key = objKeys[i];
	        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
	    }

	    return keys.join(delimiter);
	};


/***/ },
/* 355 */
/***/ function(module, exports) {

	// Load modules


	// Declare internals

	var internals = {};


	exports.arrayToObject = function (source) {

	    var obj = {};
	    for (var i = 0, il = source.length; i < il; ++i) {
	        if (typeof source[i] !== 'undefined') {

	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};


	exports.merge = function (target, source) {

	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        }
	        else {
	            target[source] = true;
	        }

	        return target;
	    }

	    if (typeof target !== 'object') {
	        target = [target].concat(source);
	        return target;
	    }

	    if (Array.isArray(target) &&
	        !Array.isArray(source)) {

	        target = exports.arrayToObject(target);
	    }

	    var keys = Object.keys(source);
	    for (var k = 0, kl = keys.length; k < kl; ++k) {
	        var key = keys[k];
	        var value = source[key];

	        if (!target[key]) {
	            target[key] = value;
	        }
	        else {
	            target[key] = exports.merge(target[key], value);
	        }
	    }

	    return target;
	};


	exports.decode = function (str) {

	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};


	exports.compact = function (obj, refs) {

	    if (typeof obj !== 'object' ||
	        obj === null) {

	        return obj;
	    }

	    refs = refs || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }

	    refs.push(obj);

	    if (Array.isArray(obj)) {
	        var compacted = [];

	        for (var i = 0, il = obj.length; i < il; ++i) {
	            if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }

	        return compacted;
	    }

	    var keys = Object.keys(obj);
	    for (i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        obj[key] = exports.compact(obj[key], refs);
	    }

	    return obj;
	};


	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};


	exports.isBuffer = function (obj) {

	    if (obj === null ||
	        typeof obj === 'undefined') {

	        return false;
	    }

	    return !!(obj.constructor &&
	        obj.constructor.isBuffer &&
	        obj.constructor.isBuffer(obj));
	};


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	// Load modules

	var Utils = __webpack_require__(355);


	// Declare internals

	var internals = {
	    delimiter: '&',
	    depth: 5,
	    arrayLimit: 20,
	    parameterLimit: 1000
	};


	internals.parseValues = function (str, options) {

	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

	    for (var i = 0, il = parts.length; i < il; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

	        if (pos === -1) {
	            obj[Utils.decode(part)] = '';
	        }
	        else {
	            var key = Utils.decode(part.slice(0, pos));
	            var val = Utils.decode(part.slice(pos + 1));

	            if (Object.prototype.hasOwnProperty(key)) {
	                continue;
	            }

	            if (!obj.hasOwnProperty(key)) {
	                obj[key] = val;
	            }
	            else {
	                obj[key] = [].concat(obj[key]).concat(val);
	            }
	        }
	    }

	    return obj;
	};


	internals.parseObject = function (chain, val, options) {

	    if (!chain.length) {
	        return val;
	    }

	    var root = chain.shift();

	    var obj = {};
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(internals.parseObject(chain, val, options));
	    }
	    else {
	        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
	        var index = parseInt(cleanRoot, 10);
	        var indexString = '' + index;
	        if (!isNaN(index) &&
	            root !== cleanRoot &&
	            indexString === cleanRoot &&
	            index >= 0 &&
	            index <= options.arrayLimit) {

	            obj = [];
	            obj[index] = internals.parseObject(chain, val, options);
	        }
	        else {
	            obj[cleanRoot] = internals.parseObject(chain, val, options);
	        }
	    }

	    return obj;
	};


	internals.parseKeys = function (key, val, options) {

	    if (!key) {
	        return;
	    }

	    // The regex chunks

	    var parent = /^([^\[\]]*)/;
	    var child = /(\[[^\[\]]*\])/g;

	    // Get the parent

	    var segment = parent.exec(key);

	    // Don't allow them to overwrite object prototype properties

	    if (Object.prototype.hasOwnProperty(segment[1])) {
	        return;
	    }

	    // Stash the parent if it exists

	    var keys = [];
	    if (segment[1]) {
	        keys.push(segment[1]);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {

	        ++i;
	        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
	            keys.push(segment[1]);
	        }
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return internals.parseObject(keys, val, options);
	};


	module.exports = function (str, options) {

	    if (str === '' ||
	        str === null ||
	        typeof str === 'undefined') {

	        return {};
	    }

	    options = options || {};
	    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

	    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
	    var obj = {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0, il = keys.length; i < il; ++i) {
	        var key = keys[i];
	        var newObj = internals.parseKeys(key, tempObj[key], options);
	        obj = Utils.merge(obj, newObj);
	    }

	    return Utils.compact(obj);
	};


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(15);
	var ContextWrapper = __webpack_require__(358);
	var assign = __webpack_require__(27);
	var PropTypes = __webpack_require__(348);

	var REF_NAME = '__routeHandler__';

	/**
	 * A <RouteHandler> component renders the active child route handler
	 * when routes are nested.
	 */

	var RouteHandler = (function (_React$Component) {
	  function RouteHandler() {
	    _classCallCheck(this, RouteHandler);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(RouteHandler, _React$Component);

	  _createClass(RouteHandler, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        routeDepth: this.context.routeDepth + 1
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._updateRouteComponent(this.refs[REF_NAME]);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._updateRouteComponent(null);
	    }
	  }, {
	    key: '_updateRouteComponent',
	    value: function _updateRouteComponent(component) {
	      this.context.router.setRouteComponentAtDepth(this.getRouteDepth(), component);
	    }
	  }, {
	    key: 'getRouteDepth',
	    value: function getRouteDepth() {
	      return this.context.routeDepth;
	    }
	  }, {
	    key: 'createChildRouteHandler',
	    value: function createChildRouteHandler(props) {
	      var route = this.context.router.getRouteAtDepth(this.getRouteDepth());

	      if (route == null) {
	        return null;
	      }var childProps = assign({}, props || this.props, {
	        ref: REF_NAME,
	        params: this.context.router.getCurrentParams(),
	        query: this.context.router.getCurrentQuery()
	      });

	      return React.createElement(route.handler, childProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var handler = this.createChildRouteHandler();
	      // <script/> for things like <CSSTransitionGroup/> that don't like null
	      return handler ? React.createElement(
	        ContextWrapper,
	        null,
	        handler
	      ) : React.createElement('script', null);
	    }
	  }]);

	  return RouteHandler;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	RouteHandler.contextTypes = {
	  routeDepth: PropTypes.number.isRequired,
	  router: PropTypes.router.isRequired
	};

	RouteHandler.childContextTypes = {
	  routeDepth: PropTypes.number.isRequired
	};

	module.exports = RouteHandler;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	/**
	 * This component is necessary to get around a context warning
	 * present in React 0.13.0. It sovles this by providing a separation
	 * between the "owner" and "parent" contexts.
	 */

	var React = __webpack_require__(15);

	var ContextWrapper = (function (_React$Component) {
	  function ContextWrapper() {
	    _classCallCheck(this, ContextWrapper);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(ContextWrapper, _React$Component);

	  _createClass(ContextWrapper, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return ContextWrapper;
	})(React.Component);

	module.exports = ContextWrapper;

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(15);
	var invariant = __webpack_require__(21);
	var PropTypes = __webpack_require__(348);
	var RouteHandler = __webpack_require__(357);

	/**
	 * <Route> components specify components that are rendered to the page when the
	 * URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is requested,
	 * the tree is searched depth-first to find a route whose path matches the URL.
	 * When one is found, all routes in the tree that lead to it are considered
	 * "active" and their components are rendered into the DOM, nested in the same
	 * order as they are in the tree.
	 *
	 * The preferred way to configure a router is using JSX. The XML-like syntax is
	 * a great way to visualize how routes are laid out in an application.
	 *
	 *   var routes = [
	 *     <Route handler={App}>
	 *       <Route name="login" handler={Login}/>
	 *       <Route name="logout" handler={Logout}/>
	 *       <Route name="about" handler={About}/>
	 *     </Route>
	 *   ];
	 *   
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 *
	 * Handlers for Route components that contain children can render their active
	 * child route using a <RouteHandler> element.
	 *
	 *   var App = React.createClass({
	 *     render: function () {
	 *       return (
	 *         <div class="application">
	 *           <RouteHandler/>
	 *         </div>
	 *       );
	 *     }
	 *   });
	 *
	 * If no handler is provided for the route, it will render a matched child route.
	 */

	var Route = (function (_React$Component) {
	  function Route() {
	    _classCallCheck(this, Route);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Route, _React$Component);

	  _createClass(Route, [{
	    key: 'render',
	    value: function render() {
	      invariant(false, '%s elements are for router configuration only and should not be rendered', this.constructor.name);
	    }
	  }]);

	  return Route;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Route.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.string,
	  handler: PropTypes.func,
	  ignoreScrollBehavior: PropTypes.bool
	};

	Route.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = Route;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var React = __webpack_require__(15);
	var assign = __webpack_require__(27);
	var PropTypes = __webpack_require__(348);

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	/**
	 * <Link> components are used to create an <a> element that links to a route.
	 * When that route is active, the link gets an "active" class name (or the
	 * value of its `activeClassName` prop).
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route name="showPost" path="/posts/:postID" handler={Post}/>
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} />
	 *
	 * In addition to params, links may pass along query string parameters
	 * using the `query` prop.
	 *
	 *   <Link to="showPost" params={{ postID: "123" }} query={{ show:true }}/>
	 */

	var Link = (function (_React$Component) {
	  function Link() {
	    _classCallCheck(this, Link);

	    if (_React$Component != null) {
	      _React$Component.apply(this, arguments);
	    }
	  }

	  _inherits(Link, _React$Component);

	  _createClass(Link, [{
	    key: 'handleClick',
	    value: function handleClick(event) {
	      var allowTransition = true;
	      var clickResult;

	      if (this.props.onClick) clickResult = this.props.onClick(event);

	      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
	        return;
	      }if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

	      event.preventDefault();

	      if (allowTransition) this.context.router.transitionTo(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getHref',

	    /**
	     * Returns the value of the "href" attribute to use on the DOM element.
	     */
	    value: function getHref() {
	      return this.context.router.makeHref(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'getClassName',

	    /**
	     * Returns the value of the "class" attribute to use on the DOM element, which contains
	     * the value of the activeClassName property when this <Link> is active.
	     */
	    value: function getClassName() {
	      var className = this.props.className;

	      if (this.getActiveState()) className += ' ' + this.props.activeClassName;

	      return className;
	    }
	  }, {
	    key: 'getActiveState',
	    value: function getActiveState() {
	      return this.context.router.isActive(this.props.to, this.props.params, this.props.query);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = assign({}, this.props, {
	        href: this.getHref(),
	        className: this.getClassName(),
	        onClick: this.handleClick.bind(this)
	      });

	      if (props.activeStyle && this.getActiveState()) props.style = props.activeStyle;

	      return React.DOM.a(props, this.props.children);
	    }
	  }]);

	  return Link;
	})(React.Component);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Link.contextTypes = {
	  router: PropTypes.router.isRequired
	};

	Link.propTypes = {
	  activeClassName: PropTypes.string.isRequired,
	  to: PropTypes.oneOfType([PropTypes.string, PropTypes.route]).isRequired,
	  params: PropTypes.object,
	  query: PropTypes.object,
	  activeStyle: PropTypes.object,
	  onClick: PropTypes.func
	};

	Link.defaultProps = {
	  activeClassName: 'active',
	  className: ''
	};

	module.exports = Link;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(348);
	var RouteHandler = __webpack_require__(357);
	var Route = __webpack_require__(359);

	/**
	 * A <NotFoundRoute> is a special kind of <Route> that
	 * renders when the beginning of its parent's path matches
	 * but none of its siblings do, including any <DefaultRoute>.
	 * Only one such route may be used at any given level in the
	 * route hierarchy.
	 */

	var NotFoundRoute = (function (_Route) {
	  function NotFoundRoute() {
	    _classCallCheck(this, NotFoundRoute);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(NotFoundRoute, _Route);

	  return NotFoundRoute;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	NotFoundRoute.propTypes = {
	  name: PropTypes.string,
	  path: PropTypes.falsy,
	  children: PropTypes.falsy,
	  handler: PropTypes.func.isRequired
	};

	NotFoundRoute.defaultProps = {
	  handler: RouteHandler
	};

	module.exports = NotFoundRoute;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _inherits = function (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

	var PropTypes = __webpack_require__(348);
	var Route = __webpack_require__(359);

	/**
	 * A <Redirect> component is a special kind of <Route> that always
	 * redirects to another route when it matches.
	 */

	var Redirect = (function (_Route) {
	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    if (_Route != null) {
	      _Route.apply(this, arguments);
	    }
	  }

	  _inherits(Redirect, _Route);

	  return Redirect;
	})(Route);

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	Redirect.propTypes = {
	  path: PropTypes.string,
	  from: PropTypes.string, // Alias for path.
	  to: PropTypes.string,
	  handler: PropTypes.falsy
	};

	// Redirects should not have a default handler
	Redirect.defaultProps = {};

	module.exports = Redirect;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(364);
	var History = __webpack_require__(365);

	var _listeners = [];
	var _isListening = false;
	var _actionType;

	function notifyChange(type) {
	  if (type === LocationActions.PUSH) History.length += 1;

	  var change = {
	    path: HashLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HashLocation, change);
	  });
	}

	function ensureSlash() {
	  var path = HashLocation.getCurrentPath();

	  if (path.charAt(0) === '/') {
	    return true;
	  }HashLocation.replace('/' + path);

	  return false;
	}

	function onHashChange() {
	  if (ensureSlash()) {
	    // If we don't have an _actionType then all we know is the hash
	    // changed. It was probably caused by the user clicking the Back
	    // button, but may have also been the Forward button or manual
	    // manipulation. So just guess 'pop'.
	    var curActionType = _actionType;
	    _actionType = null;
	    notifyChange(curActionType || LocationActions.POP);
	  }
	}

	/**
	 * A Location that uses `window.location.hash`.
	 */
	var HashLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    // Do this BEFORE listening for hashchange.
	    ensureSlash();

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('hashchange', onHashChange, false);
	      } else {
	        window.attachEvent('onhashchange', onHashChange);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.removeEventListener) {
	        window.removeEventListener('hashchange', onHashChange, false);
	      } else {
	        window.removeEvent('onhashchange', onHashChange);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    _actionType = LocationActions.PUSH;
	    window.location.hash = path;
	  },

	  replace: function replace(path) {
	    _actionType = LocationActions.REPLACE;
	    window.location.replace(window.location.pathname + window.location.search + '#' + path);
	  },

	  pop: function pop() {
	    _actionType = LocationActions.POP;
	    History.back();
	  },

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(
	    // We can't use window.location.hash here because it's not
	    // consistent across browsers - Firefox will pre-decode it!
	    window.location.href.split('#')[1] || '');
	  },

	  toString: function toString() {
	    return '<HashLocation>';
	  }

	};

	module.exports = HashLocation;

/***/ },
/* 364 */
/***/ function(module, exports) {

	/**
	 * Actions that modify the URL.
	 */
	'use strict';

	var LocationActions = {

	  /**
	   * Indicates a new location is being pushed to the history stack.
	   */
	  PUSH: 'push',

	  /**
	   * Indicates the current location should be replaced.
	   */
	  REPLACE: 'replace',

	  /**
	   * Indicates the most recent entry should be removed from the history stack.
	   */
	  POP: 'pop'

	};

	module.exports = LocationActions;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(21);
	var canUseDOM = __webpack_require__(65).canUseDOM;

	var History = {

	  /**
	   * The current number of entries in the history.
	   *
	   * Note: This property is read-only.
	   */
	  length: 1,

	  /**
	   * Sends the browser back one entry in the history.
	   */
	  back: function back() {
	    invariant(canUseDOM, 'Cannot use History.back without a DOM');

	    // Do this first so that History.length will
	    // be accurate in location change listeners.
	    History.length -= 1;

	    window.history.back();
	  }

	};

	module.exports = History;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(364);
	var History = __webpack_require__(365);

	var _listeners = [];
	var _isListening = false;

	function notifyChange(type) {
	  var change = {
	    path: HistoryLocation.getCurrentPath(),
	    type: type
	  };

	  _listeners.forEach(function (listener) {
	    listener.call(HistoryLocation, change);
	  });
	}

	function onPopState(event) {
	  if (event.state === undefined) {
	    return;
	  } // Ignore extraneous popstate events in WebKit.

	  notifyChange(LocationActions.POP);
	}

	/**
	 * A Location that uses HTML5 history.
	 */
	var HistoryLocation = {

	  addChangeListener: function addChangeListener(listener) {
	    _listeners.push(listener);

	    if (!_isListening) {
	      if (window.addEventListener) {
	        window.addEventListener('popstate', onPopState, false);
	      } else {
	        window.attachEvent('onpopstate', onPopState);
	      }

	      _isListening = true;
	    }
	  },

	  removeChangeListener: function removeChangeListener(listener) {
	    _listeners = _listeners.filter(function (l) {
	      return l !== listener;
	    });

	    if (_listeners.length === 0) {
	      if (window.addEventListener) {
	        window.removeEventListener('popstate', onPopState, false);
	      } else {
	        window.removeEvent('onpopstate', onPopState);
	      }

	      _isListening = false;
	    }
	  },

	  push: function push(path) {
	    window.history.pushState({ path: path }, '', path);
	    History.length += 1;
	    notifyChange(LocationActions.PUSH);
	  },

	  replace: function replace(path) {
	    window.history.replaceState({ path: path }, '', path);
	    notifyChange(LocationActions.REPLACE);
	  },

	  pop: History.back,

	  getCurrentPath: function getCurrentPath() {
	    return decodeURI(window.location.pathname + window.location.search);
	  },

	  toString: function toString() {
	    return '<HistoryLocation>';
	  }

	};

	module.exports = HistoryLocation;

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var HistoryLocation = __webpack_require__(366);
	var History = __webpack_require__(365);

	/**
	 * A Location that uses full page refreshes. This is used as
	 * the fallback for HistoryLocation in browsers that do not
	 * support the HTML5 history API.
	 */
	var RefreshLocation = {

	  push: function push(path) {
	    window.location = path;
	  },

	  replace: function replace(path) {
	    window.location.replace(path);
	  },

	  pop: History.back,

	  getCurrentPath: HistoryLocation.getCurrentPath,

	  toString: function toString() {
	    return '<RefreshLocation>';
	  }

	};

	module.exports = RefreshLocation;

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(21);

	function throwCannotModify() {
	  invariant(false, 'You cannot modify a static location');
	}

	/**
	 * A location that only ever contains a single path. Useful in
	 * stateless environments like servers where there is no path history,
	 * only the path that was used in the request.
	 */

	var StaticLocation = (function () {
	  function StaticLocation(path) {
	    _classCallCheck(this, StaticLocation);

	    this.path = path;
	  }

	  _createClass(StaticLocation, [{
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.path;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<StaticLocation path="' + this.path + '">';
	    }
	  }]);

	  return StaticLocation;
	})();

	// TODO: Include these in the above class definition
	// once we can use ES7 property initializers.
	// https://github.com/babel/babel/issues/619

	StaticLocation.prototype.push = throwCannotModify;
	StaticLocation.prototype.replace = throwCannotModify;
	StaticLocation.prototype.pop = throwCannotModify;

	module.exports = StaticLocation;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var invariant = __webpack_require__(21);
	var LocationActions = __webpack_require__(364);
	var History = __webpack_require__(365);

	/**
	 * A location that is convenient for testing and does not require a DOM.
	 */

	var TestLocation = (function () {
	  function TestLocation(history) {
	    _classCallCheck(this, TestLocation);

	    this.history = history || [];
	    this.listeners = [];
	    this._updateHistoryLength();
	  }

	  _createClass(TestLocation, [{
	    key: 'needsDOM',
	    get: function () {
	      return false;
	    }
	  }, {
	    key: '_updateHistoryLength',
	    value: function _updateHistoryLength() {
	      History.length = this.history.length;
	    }
	  }, {
	    key: '_notifyChange',
	    value: function _notifyChange(type) {
	      var change = {
	        path: this.getCurrentPath(),
	        type: type
	      };

	      for (var i = 0, len = this.listeners.length; i < len; ++i) this.listeners[i].call(this, change);
	    }
	  }, {
	    key: 'addChangeListener',
	    value: function addChangeListener(listener) {
	      this.listeners.push(listener);
	    }
	  }, {
	    key: 'removeChangeListener',
	    value: function removeChangeListener(listener) {
	      this.listeners = this.listeners.filter(function (l) {
	        return l !== listener;
	      });
	    }
	  }, {
	    key: 'push',
	    value: function push(path) {
	      this.history.push(path);
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.PUSH);
	    }
	  }, {
	    key: 'replace',
	    value: function replace(path) {
	      invariant(this.history.length, 'You cannot replace the current path with no history');

	      this.history[this.history.length - 1] = path;

	      this._notifyChange(LocationActions.REPLACE);
	    }
	  }, {
	    key: 'pop',
	    value: function pop() {
	      this.history.pop();
	      this._updateHistoryLength();
	      this._notifyChange(LocationActions.POP);
	    }
	  }, {
	    key: 'getCurrentPath',
	    value: function getCurrentPath() {
	      return this.history[this.history.length - 1];
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '<TestLocation>';
	    }
	  }]);

	  return TestLocation;
	})();

	module.exports = TestLocation;

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var LocationActions = __webpack_require__(364);

	/**
	 * A scroll behavior that attempts to imitate the default behavior
	 * of modern browsers.
	 */
	var ImitateBrowserBehavior = {

	  updateScrollPosition: function updateScrollPosition(position, actionType) {
	    switch (actionType) {
	      case LocationActions.PUSH:
	      case LocationActions.REPLACE:
	        window.scrollTo(0, 0);
	        break;
	      case LocationActions.POP:
	        if (position) {
	          window.scrollTo(position.x, position.y);
	        } else {
	          window.scrollTo(0, 0);
	        }
	        break;
	    }
	  }

	};

	module.exports = ImitateBrowserBehavior;

/***/ },
/* 371 */
/***/ function(module, exports) {

	/**
	 * A scroll behavior that always scrolls to the top of the page
	 * after a transition.
	 */
	"use strict";

	var ScrollToTopBehavior = {

	  updateScrollPosition: function updateScrollPosition() {
	    window.scrollTo(0, 0);
	  }

	};

	module.exports = ScrollToTopBehavior;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(348);

	/**
	 * A mixin for components that modify the URL.
	 *
	 * Example:
	 *
	 *   var MyLink = React.createClass({
	 *     mixins: [ Router.Navigation ],
	 *     handleClick(event) {
	 *       event.preventDefault();
	 *       this.transitionTo('aRoute', { the: 'params' }, { the: 'query' });
	 *     },
	 *     render() {
	 *       return (
	 *         <a onClick={this.handleClick}>Click me!</a>
	 *       );
	 *     }
	 *   });
	 */
	var Navigation = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns an absolute URL path created from the given route
	   * name, URL parameters, and query values.
	   */
	  makePath: function makePath(to, params, query) {
	    return this.context.router.makePath(to, params, query);
	  },

	  /**
	   * Returns a string that may safely be used as the href of a
	   * link to the route with the given name.
	   */
	  makeHref: function makeHref(to, params, query) {
	    return this.context.router.makeHref(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by pushing
	   * a new URL onto the history stack.
	   */
	  transitionTo: function transitionTo(to, params, query) {
	    this.context.router.transitionTo(to, params, query);
	  },

	  /**
	   * Transitions to the URL specified in the arguments by replacing
	   * the current URL in the history stack.
	   */
	  replaceWith: function replaceWith(to, params, query) {
	    this.context.router.replaceWith(to, params, query);
	  },

	  /**
	   * Transitions to the previous URL.
	   */
	  goBack: function goBack() {
	    return this.context.router.goBack();
	  }

	};

	module.exports = Navigation;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var PropTypes = __webpack_require__(348);

	/**
	 * A mixin for components that need to know the path, routes, URL
	 * params and query that are currently active.
	 *
	 * Example:
	 *
	 *   var AboutLink = React.createClass({
	 *     mixins: [ Router.State ],
	 *     render() {
	 *       var className = this.props.className;
	 *
	 *       if (this.isActive('about'))
	 *         className += ' is-active';
	 *
	 *       return React.DOM.a({ className: className }, this.props.children);
	 *     }
	 *   });
	 */
	var State = {

	  contextTypes: {
	    router: PropTypes.router.isRequired
	  },

	  /**
	   * Returns the current URL path.
	   */
	  getPath: function getPath() {
	    return this.context.router.getCurrentPath();
	  },

	  /**
	   * Returns the current URL path without the query string.
	   */
	  getPathname: function getPathname() {
	    return this.context.router.getCurrentPathname();
	  },

	  /**
	   * Returns an object of the URL params that are currently active.
	   */
	  getParams: function getParams() {
	    return this.context.router.getCurrentParams();
	  },

	  /**
	   * Returns an object of the query params that are currently active.
	   */
	  getQuery: function getQuery() {
	    return this.context.router.getCurrentQuery();
	  },

	  /**
	   * Returns an array of the routes that are currently active.
	   */
	  getRoutes: function getRoutes() {
	    return this.context.router.getCurrentRoutes();
	  },

	  /**
	   * A helper method to determine if a given route, params, and query
	   * are active.
	   */
	  isActive: function isActive(to, params, query) {
	    return this.context.router.isActive(to, params, query);
	  }

	};

	module.exports = State;

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W084 */
	'use strict';

	var React = __webpack_require__(15);
	var assign = __webpack_require__(27);
	var warning = __webpack_require__(29);
	var DefaultRoute = __webpack_require__(347);
	var NotFoundRoute = __webpack_require__(361);
	var Redirect = __webpack_require__(362);
	var Route = __webpack_require__(349);

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      if (error instanceof Error) warning(false, error.message);
	    }
	  }
	}

	function createRouteOptions(props) {
	  var options = assign({}, props);
	  var handler = options.handler;

	  if (handler) {
	    options.onEnter = handler.willTransitionTo;
	    options.onLeave = handler.willTransitionFrom;
	  }

	  return options;
	}

	function createRouteFromReactElement(element) {
	  if (!React.isValidElement(element)) {
	    return;
	  }var type = element.type;
	  var props = assign({}, type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName, type.propTypes, props);

	  if (type === DefaultRoute) {
	    return Route.createDefaultRoute(createRouteOptions(props));
	  }if (type === NotFoundRoute) {
	    return Route.createNotFoundRoute(createRouteOptions(props));
	  }if (type === Redirect) {
	    return Route.createRedirect(createRouteOptions(props));
	  }return Route.createRoute(createRouteOptions(props), function () {
	    if (props.children) createRoutesFromReactChildren(props.children);
	  });
	}

	/**
	 * Creates and returns an array of routes created from the given
	 * ReactChildren, all of which should be one of <Route>, <DefaultRoute>,
	 * <NotFoundRoute>, or <Redirect>, e.g.:
	 *
	 *   var { createRoutesFromReactChildren, Route, Redirect } = require('react-router');
	 *
	 *   var routes = createRoutesFromReactChildren(
	 *     <Route path="/" handler={App}>
	 *       <Route name="user" path="/user/:userId" handler={User}>
	 *         <Route name="task" path="tasks/:taskId" handler={Task}/>
	 *         <Redirect from="todos/:taskId" to="task"/>
	 *       </Route>
	 *     </Route>
	 *   );
	 */
	function createRoutesFromReactChildren(children) {
	  var routes = [];

	  React.Children.forEach(children, function (child) {
	    if (child = createRouteFromReactElement(child)) routes.push(child);
	  });

	  return routes;
	}

	module.exports = createRoutesFromReactChildren;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* jshint -W058 */
	'use strict';

	var React = __webpack_require__(15);
	var warning = __webpack_require__(29);
	var invariant = __webpack_require__(21);
	var canUseDOM = __webpack_require__(65).canUseDOM;
	var LocationActions = __webpack_require__(364);
	var ImitateBrowserBehavior = __webpack_require__(370);
	var HashLocation = __webpack_require__(363);
	var HistoryLocation = __webpack_require__(366);
	var RefreshLocation = __webpack_require__(367);
	var StaticLocation = __webpack_require__(368);
	var ScrollHistory = __webpack_require__(376);
	var createRoutesFromReactChildren = __webpack_require__(374);
	var isReactChildren = __webpack_require__(378);
	var Transition = __webpack_require__(379);
	var PropTypes = __webpack_require__(348);
	var Redirect = __webpack_require__(381);
	var History = __webpack_require__(365);
	var Cancellation = __webpack_require__(380);
	var Match = __webpack_require__(382);
	var Route = __webpack_require__(349);
	var supportsHistory = __webpack_require__(383);
	var PathUtils = __webpack_require__(350);

	/**
	 * The default location for new routers.
	 */
	var DEFAULT_LOCATION = canUseDOM ? HashLocation : '/';

	/**
	 * The default scroll behavior for new routers.
	 */
	var DEFAULT_SCROLL_BEHAVIOR = canUseDOM ? ImitateBrowserBehavior : null;

	function hasProperties(object, properties) {
	  for (var propertyName in properties) if (properties.hasOwnProperty(propertyName) && object[propertyName] !== properties[propertyName]) {
	    return false;
	  }return true;
	}

	function hasMatch(routes, route, prevParams, nextParams, prevQuery, nextQuery) {
	  return routes.some(function (r) {
	    if (r !== route) return false;

	    var paramNames = route.paramNames;
	    var paramName;

	    // Ensure that all params the route cares about did not change.
	    for (var i = 0, len = paramNames.length; i < len; ++i) {
	      paramName = paramNames[i];

	      if (nextParams[paramName] !== prevParams[paramName]) return false;
	    }

	    // Ensure the query hasn't changed.
	    return hasProperties(prevQuery, nextQuery) && hasProperties(nextQuery, prevQuery);
	  });
	}

	function addRoutesToNamedRoutes(routes, namedRoutes) {
	  var route;
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    route = routes[i];

	    if (route.name) {
	      invariant(namedRoutes[route.name] == null, 'You may not have more than one route named "%s"', route.name);

	      namedRoutes[route.name] = route;
	    }

	    if (route.childRoutes) addRoutesToNamedRoutes(route.childRoutes, namedRoutes);
	  }
	}

	function routeIsActive(activeRoutes, routeName) {
	  return activeRoutes.some(function (route) {
	    return route.name === routeName;
	  });
	}

	function paramsAreActive(activeParams, params) {
	  for (var property in params) if (String(activeParams[property]) !== String(params[property])) {
	    return false;
	  }return true;
	}

	function queryIsActive(activeQuery, query) {
	  for (var property in query) if (String(activeQuery[property]) !== String(query[property])) {
	    return false;
	  }return true;
	}

	/**
	 * Creates and returns a new router using the given options. A router
	 * is a ReactComponent class that knows how to react to changes in the
	 * URL and keep the contents of the page in sync.
	 *
	 * Options may be any of the following:
	 *
	 * - routes           (required) The route config
	 * - location         The location to use. Defaults to HashLocation when
	 *                    the DOM is available, "/" otherwise
	 * - scrollBehavior   The scroll behavior to use. Defaults to ImitateBrowserBehavior
	 *                    when the DOM is available, null otherwise
	 * - onError          A function that is used to handle errors
	 * - onAbort          A function that is used to handle aborted transitions
	 *
	 * When rendering in a server-side environment, the location should simply
	 * be the URL path that was used in the request, including the query string.
	 */
	function createRouter(options) {
	  options = options || {};

	  if (isReactChildren(options)) options = { routes: options };

	  var mountedComponents = [];
	  var location = options.location || DEFAULT_LOCATION;
	  var scrollBehavior = options.scrollBehavior || DEFAULT_SCROLL_BEHAVIOR;
	  var state = {};
	  var nextState = {};
	  var pendingTransition = null;
	  var dispatchHandler = null;

	  if (typeof location === 'string') location = new StaticLocation(location);

	  if (location instanceof StaticLocation) {
	    warning(!canUseDOM || process.env.NODE_ENV === 'test', 'You should not use a static location in a DOM environment because ' + 'the router will not be kept in sync with the current URL');
	  } else {
	    invariant(canUseDOM || location.needsDOM === false, 'You cannot use %s without a DOM', location);
	  }

	  // Automatically fall back to full page refreshes in
	  // browsers that don't support the HTML history API.
	  if (location === HistoryLocation && !supportsHistory()) location = RefreshLocation;

	  var Router = React.createClass({

	    displayName: 'Router',

	    statics: {

	      isRunning: false,

	      cancelPendingTransition: function cancelPendingTransition() {
	        if (pendingTransition) {
	          pendingTransition.cancel();
	          pendingTransition = null;
	        }
	      },

	      clearAllRoutes: function clearAllRoutes() {
	        Router.cancelPendingTransition();
	        Router.namedRoutes = {};
	        Router.routes = [];
	      },

	      /**
	       * Adds routes to this router from the given children object (see ReactChildren).
	       */
	      addRoutes: function addRoutes(routes) {
	        if (isReactChildren(routes)) routes = createRoutesFromReactChildren(routes);

	        addRoutesToNamedRoutes(routes, Router.namedRoutes);

	        Router.routes.push.apply(Router.routes, routes);
	      },

	      /**
	       * Replaces routes of this router from the given children object (see ReactChildren).
	       */
	      replaceRoutes: function replaceRoutes(routes) {
	        Router.clearAllRoutes();
	        Router.addRoutes(routes);
	        Router.refresh();
	      },

	      /**
	       * Performs a match of the given path against this router and returns an object
	       * with the { routes, params, pathname, query } that match. Returns null if no
	       * match can be made.
	       */
	      match: function match(path) {
	        return Match.findMatch(Router.routes, path);
	      },

	      /**
	       * Returns an absolute URL path created from the given route
	       * name, URL parameters, and query.
	       */
	      makePath: function makePath(to, params, query) {
	        var path;
	        if (PathUtils.isAbsolute(to)) {
	          path = to;
	        } else {
	          var route = to instanceof Route ? to : Router.namedRoutes[to];

	          invariant(route instanceof Route, 'Cannot find a route named "%s"', to);

	          path = route.path;
	        }

	        return PathUtils.withQuery(PathUtils.injectParams(path, params), query);
	      },

	      /**
	       * Returns a string that may safely be used as the href of a link
	       * to the route with the given name, URL parameters, and query.
	       */
	      makeHref: function makeHref(to, params, query) {
	        var path = Router.makePath(to, params, query);
	        return location === HashLocation ? '#' + path : path;
	      },

	      /**
	       * Transitions to the URL specified in the arguments by pushing
	       * a new URL onto the history stack.
	       */
	      transitionTo: function transitionTo(to, params, query) {
	        var path = Router.makePath(to, params, query);

	        if (pendingTransition) {
	          // Replace so pending location does not stay in history.
	          location.replace(path);
	        } else {
	          location.push(path);
	        }
	      },

	      /**
	       * Transitions to the URL specified in the arguments by replacing
	       * the current URL in the history stack.
	       */
	      replaceWith: function replaceWith(to, params, query) {
	        location.replace(Router.makePath(to, params, query));
	      },

	      /**
	       * Transitions to the previous URL if one is available. Returns true if the
	       * router was able to go back, false otherwise.
	       *
	       * Note: The router only tracks history entries in your application, not the
	       * current browser session, so you can safely call this function without guarding
	       * against sending the user back to some other site. However, when using
	       * RefreshLocation (which is the fallback for HistoryLocation in browsers that
	       * don't support HTML5 history) this method will *always* send the client back
	       * because we cannot reliably track history length.
	       */
	      goBack: function goBack() {
	        if (History.length > 1 || location === RefreshLocation) {
	          location.pop();
	          return true;
	        }

	        warning(false, 'goBack() was ignored because there is no router history');

	        return false;
	      },

	      handleAbort: options.onAbort || function (abortReason) {
	        if (location instanceof StaticLocation) throw new Error('Unhandled aborted transition! Reason: ' + abortReason);

	        if (abortReason instanceof Cancellation) {
	          return;
	        } else if (abortReason instanceof Redirect) {
	          location.replace(Router.makePath(abortReason.to, abortReason.params, abortReason.query));
	        } else {
	          location.pop();
	        }
	      },

	      handleError: options.onError || function (error) {
	        // Throw so we don't silently swallow async errors.
	        throw error; // This error probably originated in a transition hook.
	      },

	      handleLocationChange: function handleLocationChange(change) {
	        Router.dispatch(change.path, change.type);
	      },

	      /**
	       * Performs a transition to the given path and calls callback(error, abortReason)
	       * when the transition is finished. If both arguments are null the router's state
	       * was updated. Otherwise the transition did not complete.
	       *
	       * In a transition, a router first determines which routes are involved by beginning
	       * with the current route, up the route tree to the first parent route that is shared
	       * with the destination route, and back down the tree to the destination route. The
	       * willTransitionFrom hook is invoked on all route handlers we're transitioning away
	       * from, in reverse nesting order. Likewise, the willTransitionTo hook is invoked on
	       * all route handlers we're transitioning to.
	       *
	       * Both willTransitionFrom and willTransitionTo hooks may either abort or redirect the
	       * transition. To resolve asynchronously, they may use the callback argument. If no
	       * hooks wait, the transition is fully synchronous.
	       */
	      dispatch: function dispatch(path, action) {
	        Router.cancelPendingTransition();

	        var prevPath = state.path;
	        var isRefreshing = action == null;

	        if (prevPath === path && !isRefreshing) {
	          return;
	        } // Nothing to do!

	        // Record the scroll position as early as possible to
	        // get it before browsers try update it automatically.
	        if (prevPath && action === LocationActions.PUSH) Router.recordScrollPosition(prevPath);

	        var match = Router.match(path);

	        warning(match != null, 'No route matches path "%s". Make sure you have <Route path="%s"> somewhere in your routes', path, path);

	        if (match == null) match = {};

	        var prevRoutes = state.routes || [];
	        var prevParams = state.params || {};
	        var prevQuery = state.query || {};

	        var nextRoutes = match.routes || [];
	        var nextParams = match.params || {};
	        var nextQuery = match.query || {};

	        var fromRoutes, toRoutes;
	        if (prevRoutes.length) {
	          fromRoutes = prevRoutes.filter(function (route) {
	            return !hasMatch(nextRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });

	          toRoutes = nextRoutes.filter(function (route) {
	            return !hasMatch(prevRoutes, route, prevParams, nextParams, prevQuery, nextQuery);
	          });
	        } else {
	          fromRoutes = [];
	          toRoutes = nextRoutes;
	        }

	        var transition = new Transition(path, Router.replaceWith.bind(Router, path));
	        pendingTransition = transition;

	        var fromComponents = mountedComponents.slice(prevRoutes.length - fromRoutes.length);

	        Transition.from(transition, fromRoutes, fromComponents, function (error) {
	          if (error || transition.abortReason) return dispatchHandler.call(Router, error, transition); // No need to continue.

	          Transition.to(transition, toRoutes, nextParams, nextQuery, function (error) {
	            dispatchHandler.call(Router, error, transition, {
	              path: path,
	              action: action,
	              pathname: match.pathname,
	              routes: nextRoutes,
	              params: nextParams,
	              query: nextQuery
	            });
	          });
	        });
	      },

	      /**
	       * Starts this router and calls callback(router, state) when the route changes.
	       *
	       * If the router's location is static (i.e. a URL path in a server environment)
	       * the callback is called only once. Otherwise, the location should be one of the
	       * Router.*Location objects (e.g. Router.HashLocation or Router.HistoryLocation).
	       */
	      run: function run(callback) {
	        invariant(!Router.isRunning, 'Router is already running');

	        dispatchHandler = function (error, transition, newState) {
	          if (error) Router.handleError(error);

	          if (pendingTransition !== transition) return;

	          pendingTransition = null;

	          if (transition.abortReason) {
	            Router.handleAbort(transition.abortReason);
	          } else {
	            callback.call(Router, Router, nextState = newState);
	          }
	        };

	        if (!(location instanceof StaticLocation)) {
	          if (location.addChangeListener) location.addChangeListener(Router.handleLocationChange);

	          Router.isRunning = true;
	        }

	        // Bootstrap using the current path.
	        Router.refresh();
	      },

	      refresh: function refresh() {
	        Router.dispatch(location.getCurrentPath(), null);
	      },

	      stop: function stop() {
	        Router.cancelPendingTransition();

	        if (location.removeChangeListener) location.removeChangeListener(Router.handleLocationChange);

	        Router.isRunning = false;
	      },

	      getLocation: function getLocation() {
	        return location;
	      },

	      getScrollBehavior: function getScrollBehavior() {
	        return scrollBehavior;
	      },

	      getRouteAtDepth: function getRouteAtDepth(routeDepth) {
	        var routes = state.routes;
	        return routes && routes[routeDepth];
	      },

	      setRouteComponentAtDepth: function setRouteComponentAtDepth(routeDepth, component) {
	        mountedComponents[routeDepth] = component;
	      },

	      /**
	       * Returns the current URL path + query string.
	       */
	      getCurrentPath: function getCurrentPath() {
	        return state.path;
	      },

	      /**
	       * Returns the current URL path without the query string.
	       */
	      getCurrentPathname: function getCurrentPathname() {
	        return state.pathname;
	      },

	      /**
	       * Returns an object of the currently active URL parameters.
	       */
	      getCurrentParams: function getCurrentParams() {
	        return state.params;
	      },

	      /**
	       * Returns an object of the currently active query parameters.
	       */
	      getCurrentQuery: function getCurrentQuery() {
	        return state.query;
	      },

	      /**
	       * Returns an array of the currently active routes.
	       */
	      getCurrentRoutes: function getCurrentRoutes() {
	        return state.routes;
	      },

	      /**
	       * Returns true if the given route, params, and query are active.
	       */
	      isActive: function isActive(to, params, query) {
	        if (PathUtils.isAbsolute(to)) {
	          return to === state.path;
	        }return routeIsActive(state.routes, to) && paramsAreActive(state.params, params) && (query == null || queryIsActive(state.query, query));
	      }

	    },

	    mixins: [ScrollHistory],

	    propTypes: {
	      children: PropTypes.falsy
	    },

	    childContextTypes: {
	      routeDepth: PropTypes.number.isRequired,
	      router: PropTypes.router.isRequired
	    },

	    getChildContext: function getChildContext() {
	      return {
	        routeDepth: 1,
	        router: Router
	      };
	    },

	    getInitialState: function getInitialState() {
	      return state = nextState;
	    },

	    componentWillReceiveProps: function componentWillReceiveProps() {
	      this.setState(state = nextState);
	    },

	    componentWillUnmount: function componentWillUnmount() {
	      Router.stop();
	    },

	    render: function render() {
	      var route = Router.getRouteAtDepth(0);
	      return route ? React.createElement(route.handler, this.props) : null;
	    }

	  });

	  Router.clearAllRoutes();

	  if (options.routes) Router.addRoutes(options.routes);

	  return Router;
	}

	module.exports = createRouter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(21);
	var canUseDOM = __webpack_require__(65).canUseDOM;
	var getWindowScrollPosition = __webpack_require__(377);

	function shouldUpdateScroll(state, prevState) {
	  if (!prevState) {
	    return true;
	  } // Don't update scroll position when only the query has changed.
	  if (state.pathname === prevState.pathname) {
	    return false;
	  }var routes = state.routes;
	  var prevRoutes = prevState.routes;

	  var sharedAncestorRoutes = routes.filter(function (route) {
	    return prevRoutes.indexOf(route) !== -1;
	  });

	  return !sharedAncestorRoutes.some(function (route) {
	    return route.ignoreScrollBehavior;
	  });
	}

	/**
	 * Provides the router with the ability to manage window scroll position
	 * according to its scroll behavior.
	 */
	var ScrollHistory = {

	  statics: {

	    /**
	     * Records curent scroll position as the last known position for the given URL path.
	     */
	    recordScrollPosition: function recordScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      this.scrollHistory[path] = getWindowScrollPosition();
	    },

	    /**
	     * Returns the last known scroll position for the given URL path.
	     */
	    getScrollPosition: function getScrollPosition(path) {
	      if (!this.scrollHistory) this.scrollHistory = {};

	      return this.scrollHistory[path] || null;
	    }

	  },

	  componentWillMount: function componentWillMount() {
	    invariant(this.constructor.getScrollBehavior() == null || canUseDOM, 'Cannot use scroll behavior without a DOM');
	  },

	  componentDidMount: function componentDidMount() {
	    this._updateScroll();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    this._updateScroll(prevState);
	  },

	  _updateScroll: function _updateScroll(prevState) {
	    if (!shouldUpdateScroll(this.state, prevState)) {
	      return;
	    }var scrollBehavior = this.constructor.getScrollBehavior();

	    if (scrollBehavior) scrollBehavior.updateScrollPosition(this.constructor.getScrollPosition(this.state.path), this.state.action);
	  }

	};

	module.exports = ScrollHistory;

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var invariant = __webpack_require__(21);
	var canUseDOM = __webpack_require__(65).canUseDOM;

	/**
	 * Returns the current scroll position of the window as { x, y }.
	 */
	function getWindowScrollPosition() {
	  invariant(canUseDOM, 'Cannot get current scroll position without a DOM');

	  return {
	    x: window.pageXOffset || document.documentElement.scrollLeft,
	    y: window.pageYOffset || document.documentElement.scrollTop
	  };
	}

	module.exports = getWindowScrollPosition;

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);

	function isValidChild(object) {
	  return object == null || React.isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	module.exports = isReactChildren;

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/* jshint -W058 */

	'use strict';

	var Cancellation = __webpack_require__(380);
	var Redirect = __webpack_require__(381);

	/**
	 * Encapsulates a transition to a given path.
	 *
	 * The willTransitionTo and willTransitionFrom handlers receive
	 * an instance of this class as their first argument.
	 */
	function Transition(path, retry) {
	  this.path = path;
	  this.abortReason = null;
	  // TODO: Change this to router.retryTransition(transition)
	  this.retry = retry.bind(this);
	}

	Transition.prototype.abort = function (reason) {
	  if (this.abortReason == null) this.abortReason = reason || 'ABORT';
	};

	Transition.prototype.redirect = function (to, params, query) {
	  this.abort(new Redirect(to, params, query));
	};

	Transition.prototype.cancel = function () {
	  this.abort(new Cancellation());
	};

	Transition.from = function (transition, routes, components, callback) {
	  routes.reduce(function (callback, route, index) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onLeave) {
	        try {
	          route.onLeave(transition, components[index], callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onLeave.length < 3) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	Transition.to = function (transition, routes, params, query, callback) {
	  routes.reduceRight(function (callback, route) {
	    return function (error) {
	      if (error || transition.abortReason) {
	        callback(error);
	      } else if (route.onEnter) {
	        try {
	          route.onEnter(transition, params, query, callback);

	          // If there is no callback in the argument list, call it automatically.
	          if (route.onEnter.length < 4) callback();
	        } catch (e) {
	          callback(e);
	        }
	      } else {
	        callback();
	      }
	    };
	  }, callback)();
	};

	module.exports = Transition;

/***/ },
/* 380 */
/***/ function(module, exports) {

	/**
	 * Represents a cancellation caused by navigating away
	 * before the previous transition has fully resolved.
	 */
	"use strict";

	function Cancellation() {}

	module.exports = Cancellation;

/***/ },
/* 381 */
/***/ function(module, exports) {

	/**
	 * Encapsulates a redirect to the given route.
	 */
	"use strict";

	function Redirect(to, params, query) {
	  this.to = to;
	  this.params = params;
	  this.query = query;
	}

	module.exports = Redirect;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	/* jshint -W084 */
	var PathUtils = __webpack_require__(350);

	function deepSearch(route, pathname, query) {
	  // Check the subtree first to find the most deeply-nested match.
	  var childRoutes = route.childRoutes;
	  if (childRoutes) {
	    var match, childRoute;
	    for (var i = 0, len = childRoutes.length; i < len; ++i) {
	      childRoute = childRoutes[i];

	      if (childRoute.isDefault || childRoute.isNotFound) continue; // Check these in order later.

	      if (match = deepSearch(childRoute, pathname, query)) {
	        // A route in the subtree matched! Add this route and we're done.
	        match.routes.unshift(route);
	        return match;
	      }
	    }
	  }

	  // No child routes matched; try the default route.
	  var defaultRoute = route.defaultRoute;
	  if (defaultRoute && (params = PathUtils.extractParams(defaultRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, defaultRoute]);
	  } // Does the "not found" route match?
	  var notFoundRoute = route.notFoundRoute;
	  if (notFoundRoute && (params = PathUtils.extractParams(notFoundRoute.path, pathname))) {
	    return new Match(pathname, params, query, [route, notFoundRoute]);
	  } // Last attempt: check this route.
	  var params = PathUtils.extractParams(route.path, pathname);
	  if (params) {
	    return new Match(pathname, params, query, [route]);
	  }return null;
	}

	var Match = (function () {
	  function Match(pathname, params, query, routes) {
	    _classCallCheck(this, Match);

	    this.pathname = pathname;
	    this.params = params;
	    this.query = query;
	    this.routes = routes;
	  }

	  _createClass(Match, null, [{
	    key: 'findMatch',

	    /**
	     * Attempts to match depth-first a route in the given route's
	     * subtree against the given path and returns the match if it
	     * succeeds, null if no match can be made.
	     */
	    value: function findMatch(routes, path) {
	      var pathname = PathUtils.withoutQuery(path);
	      var query = PathUtils.extractQuery(path);
	      var match = null;

	      for (var i = 0, len = routes.length; match == null && i < len; ++i) match = deepSearch(routes[i], pathname, query);

	      return match;
	    }
	  }]);

	  return Match;
	})();

	module.exports = Match;

/***/ },
/* 383 */
/***/ function(module, exports) {

	'use strict';

	function supportsHistory() {
	  /*! taken from modernizr
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	module.exports = supportsHistory;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var createRouter = __webpack_require__(375);

	/**
	 * A high-level convenience method that creates, configures, and
	 * runs a router in one shot. The method signature is:
	 *
	 *   Router.run(routes[, location ], callback);
	 *
	 * Using `window.location.hash` to manage the URL, you could do:
	 *
	 *   Router.run(routes, function (Handler) {
	 *     React.render(<Handler/>, document.body);
	 *   });
	 * 
	 * Using HTML5 history and a custom "cursor" prop:
	 * 
	 *   Router.run(routes, Router.HistoryLocation, function (Handler) {
	 *     React.render(<Handler cursor={cursor}/>, document.body);
	 *   });
	 *
	 * Returns the newly created router.
	 *
	 * Note: If you need to specify further options for your router such
	 * as error/abort handling or custom scroll behavior, use Router.create
	 * instead.
	 *
	 *   var router = Router.create(options);
	 *   router.run(function (Handler) {
	 *     // ...
	 *   });
	 */
	function runRouter(routes, location, callback) {
	  if (typeof location === 'function') {
	    callback = location;
	    location = null;
	  }

	  var router = createRouter({
	    routes: routes,
	    location: location
	  });

	  router.run(callback);

	  return router;
	}

	module.exports = runRouter;

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);
	var Template = __webpack_require__(386);
	var Matter = __webpack_require__(171);

	var description = '\nlabel: String';

	var demos = [{ code: '<Label label="i\'m da label!"/>', docClass: Matter.Label }, { code: '<Input value={32} addonLabel=\'px\' min={0} type=\'number\'/>', docClass: Matter.Input }, { code: '<Input type=\'string\' hints={fakeNames} onChange={c=>console.log(c)}/>', docClass: Matter.Input }, { code: '<Input type=\'string\' hints={fakeNames} addonIcon=\'chevron-down\' addonOnClick=\'show-dropdown\'/>', docClass: Matter.Input }, { code: '<Input type=\'color\'/>', docClass: Matter.Input }, { code: '<Toggle value={false}/>', docClass: Matter.Toggle }, { code: '<Icon icon=\'github\'/>', docClass: Matter.Icon }, { code: '<Checkbox value={false}/>', docClass: Matter.Checkbox }, { code: '<Button label="button"/>', docClass: Matter.Button }, { code: '<Button label="button" mod={{kind: \'colored\'}}/>', docClass: Matter.Button }, { code: '<Button label="button" icon="github"/>', docClass: Matter.Button }, { code: '<Button icon="github"/>', docClass: Matter.Button }, { code: '<Panel/>', docClass: Matter.Panel }, { code: '<Dropdown options={[\'foo\', \'bar\', \'Loooooooooooooooooooooooooooooooong label\', \'qux\']} label=\'Dropdown loooooooooooooooooooooooooooooooong\' style={{width: 200}}/>', docClass: Matter.Dropdown }, { code: '<ItemGroup>\n  <Button\n    icon=\'github\'\n    disabled={true}/>\n  <Input placeholder=\'type here\'/>\n  <Button label=\'second\'/>\n</ItemGroup>', docClass: Matter.InputGroup }, { code: '<RefreshValuePropOfInput>\n  <MultiTypeInput types={[\n    {\n      type: \'number\',\n      addonLabel: \'px\',\n      prepareExportValue: value => value + \'px\',\n      precision: 0,\n    },\n    {\n      type: \'number\',\n      addonLabel: \'%\',\n      prepareExportValue: value => value + \'%\',\n      dragSpeed: 0.25,\n      precision: 2,\n    },\n    {\n      type: \'string\',\n      addonIcon: \'quote-right\',\n      hints: [\'auto\', \'inherit\'],\n    },\n  ]}\n  value=\'32\'\n  chooseType = {value => {\n    if (_.isFinite(value) || _.endsWith(value, \'px\')) return 0\n    else if (_.endsWith(value, \'%\')) return 1\n    else return 2\n  }}\n  onChange = {value => console.log(value, typeof(value))}/>\n</RefreshValuePropOfInput>', docClass: Matter.ItemGroup }, { code: '<Tabs>\n  <div label=\'first tab\'><p>first tab content</p></div>\n  <div label=\'secound tab\' icon=\'github\'><p>secound tab content</p></div>\n  <div icon=\'cog\'><h1>third tab content</h1></div>\n</Tabs>', docClass: Matter.Tabs }, { code: '<Scrollable style={{width: 200, height: 300}}>\n  <List items={fakeNames.map(label => ({label}))}/>\n</Scrollable>', docClass: Matter.Scrollable }, { code: '\n<ContextMenu items={[\n  {label: \'one\'},\n  {label: \'two\'},\n  {label: \'three\'},\n]}>\n  <Button label=\'I have a context menu!\'/>\n</ContextMenu>', docClass: Matter.ContextMenu }];

	module.exports = React.createClass({
	  displayName: 'exports',

	  render: function render() {

	    return React.createElement(Template, {
	      title: 'Tests',
	      Class: Matter.Button,
	      description: description,
	      demos: demos,
	      props: [{
	        name: 'label',
	        type: 'string',
	        value: 'default: empty string',
	        description: 'the label of the button'
	      }] });
	  }
	});

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);
	var Playground = __webpack_require__(387);
	var marked = __webpack_require__(491);
	var scope = __webpack_require__(492);

	var Template = React.createClass({
	  displayName: 'Template',

	  contextTypes: {
	    router: React.PropTypes.func
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      codes: ['<Button label="button"/>;'],
	      description: '',
	      title: 'Title'
	    };
	  },
	  renderProps: function renderProps(props) {
	    // if (props instanceof Array) {
	    //
	    //   return props.map(prop => {
	    //     return <Prop {...prop} key={prop.name}/>
	    //   })
	    // }
	    // else {
	    //   return Object.keys(props).map(groupName => {
	    //
	    //     return <div>
	    //       <h3>{groupName}</h3>
	    //       {this.renderProps(props[groupName])}
	    //     </div>
	    //   })
	    // }
	  },
	  renderCode: function renderCode() {
	    var demos = this.props.demos;

	    return demos.map(function (demo, idx) {
	      var code = demo.code;
	      var docClass = demo.docClass;

	      return React.createElement(
	        'div',
	        { key: idx, style: { marginBottom: 12 } },
	        React.createElement(Playground, {
	          codeText: code,
	          scope: scope,
	          docClass: docClass,
	          es6Console: false,
	          noRender: true })
	      );
	    });
	  },

	  render: function render() {

	    var rawMarkup = marked(this.props.description);

	    return React.createElement(
	      'div',
	      null,
	      React.createElement(
	        'h1',
	        { style: { fontWeight: 400 } },
	        this.props.title
	      ),
	      this.renderCode(),
	      React.createElement('span', { dangerouslySetInnerHTML: { __html: rawMarkup } }),
	      this.renderProps(this.props.props),
	      this.props.children
	    );
	  }
	});

	module.exports = Template;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Playground = __webpack_require__(388);

	module.exports = Playground;


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/* no-unused-vars:0 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _babelPolyfill = __webpack_require__(395);

	var _babelPolyfill2 = _interopRequireDefault(_babelPolyfill);

	var _reactAddons = __webpack_require__(270);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var _editor = __webpack_require__(488);

	var _editor2 = _interopRequireDefault(_editor);

	var _preview = __webpack_require__(389);

	var _preview2 = _interopRequireDefault(_preview);

	var _es6Preview = __webpack_require__(489);

	var _es6Preview2 = _interopRequireDefault(_es6Preview);

	var _doc = __webpack_require__(490);

	var _doc2 = _interopRequireDefault(_doc);

	var ReactPlayground = _reactAddons2["default"].createClass({
	  displayName: "ReactPlayground",

	  propTypes: {
	    codeText: _reactAddons2["default"].PropTypes.string.isRequired,
	    scope: _reactAddons2["default"].PropTypes.object.isRequired,
	    collapsableCode: _reactAddons2["default"].PropTypes.bool,
	    docClass: _reactAddons2["default"].PropTypes.renderable,
	    propDescriptionMap: _reactAddons2["default"].PropTypes.string,
	    theme: _reactAddons2["default"].PropTypes.string,
	    noRender: _reactAddons2["default"].PropTypes.bool,
	    es6Console: _reactAddons2["default"].PropTypes.bool,
	    context: _reactAddons2["default"].PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      theme: "monokai",
	      noRender: true,
	      context: {}
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      code: this.props.codeText,
	      expandedCode: false
	    };
	  },

	  _handleCodeChange: function _handleCodeChange(code) {
	    this.setState({ code: code });
	  },

	  _toggleCode: function _toggleCode() {
	    this.setState({
	      expandedCode: !this.state.expandedCode
	    });
	  },

	  render: function render() {
	    if (this.props.noRender === false) {
	      console.warn("\n        Deprecation warning: noRender is being deprecated in favor of wrapped components and will be removed in the 1.x release.\n        https://github.com/FormidableLabs/component-playground/issues/19 for details.\n      ");
	    }

	    return _reactAddons2["default"].createElement(
	      "div",
	      { className: "playground" + (this.props.collapsableCode ? " collapsableCode" : "") },
	      this.props.docClass ? _reactAddons2["default"].createElement(_doc2["default"], {
	        componentClass: this.props.docClass,
	        propDescriptionMap: this.props.propDescriptionMap }) : "",
	      _reactAddons2["default"].createElement(
	        "div",
	        { className: "playgroundCode" + (this.state.expandedCode ? " expandedCode" : "") },
	        _reactAddons2["default"].createElement(_editor2["default"], {
	          onChange: this._handleCodeChange,
	          className: "playgroundStage",
	          codeText: this.state.code,
	          theme: this.props.theme })
	      ),
	      this.props.collapsableCode ? _reactAddons2["default"].createElement(
	        "div",
	        { className: "playgroundToggleCodeBar" },
	        _reactAddons2["default"].createElement(
	          "span",
	          { className: "playgroundToggleCodeLink", onClick: this._toggleCode },
	          this.state.expandedCode ? "collapse" : "expand"
	        )
	      ) : "",
	      _reactAddons2["default"].createElement(
	        "div",
	        { className: "playgroundPreview" },
	        this.props.es6Console ? _reactAddons2["default"].createElement(_es6Preview2["default"], {
	          code: this.state.code,
	          scope: this.props.scope }) : _reactAddons2["default"].createElement(_preview2["default"], {
	          context: this.props.context,
	          code: this.state.code,
	          scope: this.props.scope,
	          noRender: this.props.noRender })
	      )
	    );
	  }
	});

	exports["default"] = ReactPlayground;
	module.exports = exports["default"];

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _reactAddons = __webpack_require__(270);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var _babelCoreBrowser = __webpack_require__(390);

	var _babelCoreBrowser2 = _interopRequireDefault(_babelCoreBrowser);

	var Preview = _reactAddons2["default"].createClass({
	  displayName: "Preview",

	  propTypes: {
	    code: _reactAddons2["default"].PropTypes.string.isRequired,
	    scope: _reactAddons2["default"].PropTypes.object.isRequired
	  },

	  getInitialState: function getInitialState() {
	    return {
	      error: null
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this._executeCode();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    clearTimeout(this.timeoutID);
	    if (this.props.code !== prevProps.code) {
	      this._executeCode();
	    }
	  },

	  _compileCode: function _compileCode() {
	    if (this.props.noRender) {
	      var generateContextTypes = function generateContextTypes(context) {
	        var keys = Object.keys(context).map(function (val) {
	          return val + ": React.PropTypes.any.isRequired";
	        });
	        return "{ " + keys.join(", ") + " }";
	      };

	      return _babelCoreBrowser2["default"].transform("\n          (function (" + Object.keys(this.props.scope).join(", ") + ", mountNode) {\n            return React.createClass({\n              // childContextTypes: { test: React.PropTypes.string },\n              childContextTypes: " + generateContextTypes(this.props.context) + ",\n              getChildContext: function () { return " + JSON.stringify(this.props.context) + "; },\n              render: function () {\n                return (\n                  " + this.props.code + "\n                );\n              }\n            });\n          });\n        ", { stage: 0 }).code;
	    } else {
	      return _babelCoreBrowser2["default"].transform("\n          (function (" + Object.keys(this.props.scope).join(",") + ", mountNode) {\n            " + this.props.code + "\n          });\n        ", { stage: 0 }).code;
	    }
	  },

	  _setTimeout: function _setTimeout() {
	    clearTimeout(this.timeoutID);
	    this.timeoutID = setTimeout.apply(null, arguments);
	  },

	  _executeCode: function _executeCode() {
	    var mountNode = this.refs.mount.getDOMNode();

	    // try {

	    var scope = [];

	    for (var s in this.props.scope) {
	      if (this.props.scope.hasOwnProperty(s)) {
	        scope.push(this.props.scope[s]);
	      }
	    }

	    scope.push(mountNode);

	    var compiledCode = this._compileCode();
	    if (this.props.noRender) {
	      var Component = _reactAddons2["default"].createElement(eval(compiledCode).apply(null, scope));
	      _reactAddons2["default"].render(Component, mountNode);
	    } else {
	      eval(compiledCode).apply(null, scope);
	    }

	    this.setState({
	      error: null
	    });
	    // } catch (err) {
	    //   var self = this;
	    //   this._setTimeout(function () {
	    //     self.setState({
	    //       error: err.toString()
	    //     });
	    //   }, 500);
	    //   console.log(err);
	    // }
	  },

	  render: function render() {
	    return _reactAddons2["default"].createElement(
	      "div",
	      null,
	      this.state.error !== null ? _reactAddons2["default"].createElement(
	        "div",
	        { className: "playgroundError" },
	        this.state.error
	      ) : null,
	      _reactAddons2["default"].createElement("div", { ref: "mount", className: "previewArea" })
	    );
	  }
	});

	exports["default"] = Preview;
	module.exports = exports["default"];

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(Buffer, global) {(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.babel = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = require('util/');

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	},{"util/":30}],2:[function(require,module,exports){
	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

	},{}],3:[function(require,module,exports){

	},{}],4:[function(require,module,exports){
	arguments[4][3][0].apply(exports,arguments)
	},{"dup":3}],5:[function(require,module,exports){
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = require('base64-js')
	var ieee754 = require('ieee754')
	var isArray = require('is-array')

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Foo () {}
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    arr.constructor = Foo
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Foo && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}

	},{"base64-js":2,"ieee754":8,"is-array":10}],6:[function(require,module,exports){
	(function (Buffer){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	function isBuffer(arg) {
	  return Buffer.isBuffer(arg);
	}
	exports.isBuffer = isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	}).call(this,require("buffer").Buffer)
	},{"buffer":5}],7:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	},{}],8:[function(require,module,exports){
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}

	},{}],9:[function(require,module,exports){
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}

	},{}],10:[function(require,module,exports){

	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};

	},{}],11:[function(require,module,exports){
	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	},{}],12:[function(require,module,exports){
	(function (process){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	}).call(this,require('_process'))
	},{"_process":14}],13:[function(require,module,exports){
	(function (process){
	'use strict';
	module.exports = nextTick;

	function nextTick(fn) {
	  var args = new Array(arguments.length - 1);
	  var i = 0;
	  while (i < arguments.length) {
	    args[i++] = arguments[i];
	  }
	  process.nextTick(function afterTick() {
	    fn.apply(null, args);
	  });
	}

	}).call(this,require('_process'))
	},{"_process":14}],14:[function(require,module,exports){
	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };

	},{}],15:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = require('events').EventEmitter;
	var inherits = require('inherits');

	inherits(Stream, EE);
	Stream.Readable = require('readable-stream/readable.js');
	Stream.Writable = require('readable-stream/writable.js');
	Stream.Duplex = require('readable-stream/duplex.js');
	Stream.Transform = require('readable-stream/transform.js');
	Stream.PassThrough = require('readable-stream/passthrough.js');

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

	},{"events":7,"inherits":9,"readable-stream/duplex.js":16,"readable-stream/passthrough.js":22,"readable-stream/readable.js":23,"readable-stream/transform.js":24,"readable-stream/writable.js":25}],16:[function(require,module,exports){
	module.exports = require("./lib/_stream_duplex.js")

	},{"./lib/_stream_duplex.js":17}],17:[function(require,module,exports){
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = require('process-nextick-args');
	/*</replacement>*/



	/*<replacement>*/
	var util = require('core-util-is');
	util.inherits = require('inherits');
	/*</replacement>*/

	var Readable = require('./_stream_readable');
	var Writable = require('./_stream_writable');

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	},{"./_stream_readable":19,"./_stream_writable":21,"core-util-is":6,"inherits":9,"process-nextick-args":13}],18:[function(require,module,exports){
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = require('./_stream_transform');

	/*<replacement>*/
	var util = require('core-util-is');
	util.inherits = require('inherits');
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};

	},{"./_stream_transform":20,"core-util-is":6,"inherits":9}],19:[function(require,module,exports){
	(function (process){
	'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = require('process-nextick-args');
	/*</replacement>*/


	/*<replacement>*/
	var isArray = require('isarray');
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = require('buffer').Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = require('events').EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/



	/*<replacement>*/
	var Stream;
	(function (){try{
	  Stream = require('st' + 'ream');
	}catch(_){}finally{
	  if (!Stream)
	    Stream = require('events').EventEmitter;
	}}())
	/*</replacement>*/

	var Buffer = require('buffer').Buffer;

	/*<replacement>*/
	var util = require('core-util-is');
	util.inherits = require('inherits');
	/*</replacement>*/



	/*<replacement>*/
	var debug = require('util');
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var StringDecoder;

	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = require('./_stream_duplex');

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = require('string_decoder/').StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = require('./_stream_duplex');

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function')
	    this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function() {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = require('string_decoder/').StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (n === null || isNaN(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else {
	      return state.length;
	    }
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (typeof n !== 'number' || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (ret !== null)
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!(Buffer.isBuffer(chunk)) &&
	      typeof chunk !== 'string' &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      processNextTick(emitReadable_, stream);
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    processNextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined))
	      return;
	    else if (!state.objectMode && (!chunk || !chunk.length))
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }; }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	}).call(this,require('_process'))
	},{"./_stream_duplex":17,"_process":14,"buffer":5,"core-util-is":6,"events":7,"inherits":9,"isarray":11,"process-nextick-args":13,"string_decoder/":26,"util":3}],20:[function(require,module,exports){
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = require('./_stream_duplex');

	/*<replacement>*/
	var util = require('core-util-is');
	util.inherits = require('inherits');
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined)
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function')
	      this._transform = options.transform;

	    if (typeof options.flush === 'function')
	      this._flush = options.flush;
	  }

	  this.once('prefinish', function() {
	    if (typeof this._flush === 'function')
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}

	},{"./_stream_duplex":17,"core-util-is":6,"inherits":9}],21:[function(require,module,exports){
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = require('process-nextick-args');
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = require('buffer').Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = require('core-util-is');
	util.inherits = require('inherits');
	/*</replacement>*/



	/*<replacement>*/
	var Stream;
	(function (){try{
	  Stream = require('st' + 'ream');
	}catch(_){}finally{
	  if (!Stream)
	    Stream = require('events').EventEmitter;
	}}())
	/*</replacement>*/

	var Buffer = require('buffer').Buffer;

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	function WritableState(options, stream) {
	  var Duplex = require('./_stream_duplex');

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function (){try {
	Object.defineProperty(WritableState.prototype, 'buffer', {
	  get: require('util-deprecate')(function() {
	    return this.getBuffer();
	  }, '_writableState.buffer is deprecated. Use ' +
	      '_writableState.getBuffer() instead.')
	});
	}catch(_){}}());


	function Writable(options) {
	  var Duplex = require('./_stream_duplex');

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function')
	      this._write = options.write;

	    if (typeof options.writev === 'function')
	      this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;

	  if (!(Buffer.isBuffer(chunk)) &&
	      typeof chunk !== 'string' &&
	      chunk !== null &&
	      chunk !== undefined &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (typeof cb !== 'function')
	    cb = nop;

	  if (state.ended)
	    writeAfterEnd(this, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.bufferedRequest)
	      clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string')
	    encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
	'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
	.indexOf((encoding + '').toLowerCase()) > -1))
	    throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      typeof chunk === 'string') {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync)
	    processNextTick(cb, er);
	  else
	    cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      processNextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var buffer = [];
	    var cbs = [];
	    while (entry) {
	      cbs.push(entry.callback);
	      buffer.push(entry);
	      entry = entry.next;
	    }

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    doWrite(stream, state, true, state.length, buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null)
	      state.lastBufferedRequest = null;
	  }
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined)
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(state) {
	  return (state.ending &&
	          state.length === 0 &&
	          state.bufferedRequest === null &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      processNextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	},{"./_stream_duplex":17,"buffer":5,"core-util-is":6,"events":7,"inherits":9,"process-nextick-args":13,"util-deprecate":28}],22:[function(require,module,exports){
	module.exports = require("./lib/_stream_passthrough.js")

	},{"./lib/_stream_passthrough.js":18}],23:[function(require,module,exports){
	var Stream = (function (){
	  try {
	    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = require('./lib/_stream_readable.js');
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = require('./lib/_stream_writable.js');
	exports.Duplex = require('./lib/_stream_duplex.js');
	exports.Transform = require('./lib/_stream_transform.js');
	exports.PassThrough = require('./lib/_stream_passthrough.js');

	},{"./lib/_stream_duplex.js":17,"./lib/_stream_passthrough.js":18,"./lib/_stream_readable.js":19,"./lib/_stream_transform.js":20,"./lib/_stream_writable.js":21}],24:[function(require,module,exports){
	module.exports = require("./lib/_stream_transform.js")

	},{"./lib/_stream_transform.js":20}],25:[function(require,module,exports){
	module.exports = require("./lib/_stream_writable.js")

	},{"./lib/_stream_writable.js":21}],26:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = require('buffer').Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

	},{"buffer":5}],27:[function(require,module,exports){
	exports.isatty = function () { return false; };

	function ReadStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	exports.ReadStream = ReadStream;

	function WriteStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	exports.WriteStream = WriteStream;

	},{}],28:[function(require,module,exports){
	(function (global){

	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  if (!global.localStorage) return false;
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],29:[function(require,module,exports){
	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}
	},{}],30:[function(require,module,exports){
	(function (process,global){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = require('./support/isBuffer');

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = require('inherits');

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./support/isBuffer":29,"_process":14,"inherits":9}],31:[function(require,module,exports){
	(function (global){
	/* eslint no-new-func: 0 */

	"use strict";

	require("./node");
	var transform = module.exports = require("../transformation");

	/**
	 * Add `options` and `version` to `babel` global.
	 */

	transform.options = require("../transformation/file/options");
	transform.version = require("../../package").version;

	/**
	 * Add `transform` api to `babel` global.
	 */

	transform.transform = transform;

	/**
	 * Tranform and execute script, adding in inline sourcemaps.
	 */

	transform.run = function (code) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.sourceMaps = "inline";
	  return new Function(transform(code, opts).code)();
	};

	/**
	 * Load scripts via xhr, and `transform` when complete (optional).
	 */

	transform.load = function (url, callback, opts, hold) {
	  if (opts === undefined) opts = {};

	  opts.filename = opts.filename || url;

	  var xhr = global.ActiveXObject ? new global.ActiveXObject("Microsoft.XMLHTTP") : new global.XMLHttpRequest();
	  xhr.open("GET", url, true);
	  if ("overrideMimeType" in xhr) xhr.overrideMimeType("text/plain");

	  /**
	   * When successfully loaded, transform (optional), and call `callback`.
	   */

	  xhr.onreadystatechange = function () {
	    if (xhr.readyState !== 4) return;

	    var status = xhr.status;
	    if (status === 0 || status === 200) {
	      var param = [xhr.responseText, opts];
	      if (!hold) transform.run.apply(transform, param);
	      if (callback) callback(param);
	    } else {
	      throw new Error("Could not load " + url);
	    }
	  };

	  xhr.send(null);
	};

	/**
	 * Load and transform all scripts of `types`.
	 *
	 * @example
	 * <script type="module"></script>
	 */

	var runScripts = function runScripts() {
	  var scripts = [];
	  var types = ["text/ecmascript-6", "text/6to5", "text/babel", "module"];
	  var index = 0;

	  /**
	   * Transform and execute script. Ensures correct load order.
	   */

	  var exec = function exec() {
	    var param = scripts[index];
	    if (param instanceof Array) {
	      transform.run.apply(transform, param);
	      index++;
	      exec();
	    }
	  };

	  /**
	   * Load, transform, and execute all scripts.
	   */

	  var run = function run(script, i) {
	    var opts = {};

	    if (script.src) {
	      transform.load(script.src, function (param) {
	        scripts[i] = param;
	        exec();
	      }, opts, true);
	    } else {
	      opts.filename = "embedded";
	      scripts[i] = [script.innerHTML, opts];
	    }
	  };

	  // Collect scripts with Babel `types`.

	  var _scripts = global.document.getElementsByTagName("script");

	  for (var i = 0; i < _scripts.length; ++i) {
	    var _script = _scripts[i];
	    if (types.indexOf(_script.type) >= 0) scripts.push(_script);
	  }

	  for (i in scripts) {
	    run(scripts[i], i);
	  }

	  exec();
	};

	/**
	 * Register load event to transform and execute scripts.
	 */

	if (global.addEventListener) {
	  global.addEventListener("DOMContentLoaded", runScripts, false);
	} else if (global.attachEvent) {
	  global.attachEvent("onload", runScripts);
	}
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../../package":534,"../transformation":83,"../transformation/file/options":66,"./node":32}],32:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.register = register;
	exports.polyfill = polyfill;
	exports.transformFile = transformFile;
	exports.transformFileSync = transformFileSync;
	exports.parse = parse;
	// istanbul ignore next

	function _interopRequire(obj) { return obj && obj.__esModule ? obj["default"] : obj; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashLangIsFunction = require("lodash/lang/isFunction");

	var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);

	var _transformation = require("../transformation");

	var _transformation2 = _interopRequireDefault(_transformation);

	var _babylon = require("babylon");

	var babylon = _interopRequireWildcard(_babylon);

	var _util = require("../util");

	var util = _interopRequireWildcard(_util);

	var _fs = require("fs");

	var _fs2 = _interopRequireDefault(_fs);

	var _types = require("../types");

	var t = _interopRequireWildcard(_types);

	exports.util = util;
	exports.acorn = babylon;
	exports.transform = _transformation2["default"];
	exports.pipeline = _transformation.pipeline;
	exports.canCompile = _util.canCompile;

	var _transformationFileOptionsConfig = require("../transformation/file/options/config");

	exports.options = _interopRequire(_transformationFileOptionsConfig);

	var _transformationPlugin = require("../transformation/plugin");

	exports.Plugin = _interopRequire(_transformationPlugin);

	var _transformationTransformer = require("../transformation/transformer");

	exports.Transformer = _interopRequire(_transformationTransformer);

	var _transformationPipeline = require("../transformation/pipeline");

	exports.Pipeline = _interopRequire(_transformationPipeline);

	var _traversal = require("../traversal");

	exports.traverse = _interopRequire(_traversal);

	var _toolsBuildExternalHelpers = require("../tools/build-external-helpers");

	exports.buildExternalHelpers = _interopRequire(_toolsBuildExternalHelpers);

	var _package = require("../../package");

	exports.version = _package.version;
	exports.types = t;

	/**
	 * Register Babel and polyfill globally.
	 */

	function register(opts) {
	  var callback = require("./register/node-polyfill");
	  if (opts != null) callback(opts);
	  return callback;
	}

	/**
	 * Register polyfill globally.
	 */

	function polyfill() {
	  require("../polyfill");
	}

	/**
	 * Asynchronously transform `filename` with optional `opts`, calls `callback` when complete.
	 */

	function transformFile(filename, opts, callback) {
	  if (_lodashLangIsFunction2["default"](opts)) {
	    callback = opts;
	    opts = {};
	  }

	  opts.filename = filename;

	  _fs2["default"].readFile(filename, function (err, code) {
	    if (err) return callback(err);

	    var result;

	    try {
	      result = _transformation2["default"](code, opts);
	    } catch (err) {
	      return callback(err);
	    }

	    callback(null, result);
	  });
	}

	/**
	 * Synchronous form of `transformFile`.
	 */

	function transformFileSync(filename) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.filename = filename;
	  return _transformation2["default"](_fs2["default"].readFileSync(filename, "utf8"), opts);
	}

	/**
	 * Parse script with Babel's parser.
	 */

	function parse(code) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.allowHashBang = true;
	  opts.sourceType = "module";
	  opts.ecmaVersion = Infinity;
	  opts.plugins = {
	    jsx: true,
	    flow: true
	  };
	  opts.features = {};

	  for (var key in _transformation2["default"].pipeline.transformers) {
	    opts.features[key] = true;
	  }

	  var ast = babylon.parse(code, opts);

	  if (opts.onToken) {
	    // istanbul ignore next

	    var _opts$onToken;

	    (_opts$onToken = opts.onToken).push.apply(_opts$onToken, ast.tokens);
	  }

	  if (opts.onComment) {
	    // istanbul ignore next

	    var _opts$onComment;

	    (_opts$onComment = opts.onComment).push.apply(_opts$onComment, ast.comments);
	  }

	  return ast.program;
	}
	},{"../../package":534,"../polyfill":61,"../tools/build-external-helpers":62,"../transformation":83,"../transformation/file/options/config":65,"../transformation/pipeline":96,"../transformation/plugin":98,"../transformation/transformer":99,"../traversal":162,"../types":193,"../util":196,"./register/node-polyfill":34,"babylon":536,"fs":4,"lodash/lang/isFunction":428}],33:[function(require,module,exports){
	// required to safely use babel/register within a browserify codebase

	"use strict";

	exports.__esModule = true;

	require("../../polyfill");

	exports["default"] = function () {};

	module.exports = exports["default"];
	},{"../../polyfill":61}],34:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequire(obj) { return obj && obj.__esModule ? obj["default"] : obj; }

	require("../../polyfill");

	var _node = require("./node");

	exports["default"] = _interopRequire(_node);
	module.exports = exports["default"];
	},{"../../polyfill":61,"./node":33}],35:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _repeating = require("repeating");

	var _repeating2 = _interopRequireDefault(_repeating);

	var _trimRight = require("trim-right");

	var _trimRight2 = _interopRequireDefault(_trimRight);

	var _lodashLangIsBoolean = require("lodash/lang/isBoolean");

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _lodashLangIsNumber = require("lodash/lang/isNumber");

	/**
	 * Buffer for collecting generated output.
	 */

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var Buffer = (function () {
	  function Buffer(position, format) {
	    _classCallCheck(this, Buffer);

	    this.parenPushNewlineState = null;

	    this.position = position;
	    this._indent = format.indent.base;
	    this.format = format;
	    this.buf = "";
	  }

	  /**
	   * Get the current trimmed buffer.
	   */

	  Buffer.prototype.get = function get() {
	    return _trimRight2["default"](this.buf);
	  };

	  /**
	   * Get the current indent.
	   */

	  Buffer.prototype.getIndent = function getIndent() {
	    if (this.format.compact || this.format.concise) {
	      return "";
	    } else {
	      return _repeating2["default"](this.format.indent.style, this._indent);
	    }
	  };

	  /**
	   * Get the current indent size.
	   */

	  Buffer.prototype.indentSize = function indentSize() {
	    return this.getIndent().length;
	  };

	  /**
	   * Increment indent size.
	   */

	  Buffer.prototype.indent = function indent() {
	    this._indent++;
	  };

	  /**
	   * Decrement indent size.
	   */

	  Buffer.prototype.dedent = function dedent() {
	    this._indent--;
	  };

	  /**
	   * Add a semicolon to the buffer.
	   */

	  Buffer.prototype.semicolon = function semicolon() {
	    this.push(";");
	  };

	  /**
	   * Ensure last character is a semicolon.
	   */

	  Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
	    if (!this.isLast(";")) this.semicolon();
	  };

	  /**
	   * Add a right brace to the buffer.
	   */

	  Buffer.prototype.rightBrace = function rightBrace() {
	    this.newline(true);
	    this.push("}");
	  };

	  /**
	   * Add a keyword to the buffer.
	   */

	  Buffer.prototype.keyword = function keyword(name) {
	    this.push(name);
	    this.space();
	  };

	  /**
	   * Add a space to the buffer unless it is compact (override with force).
	   */

	  Buffer.prototype.space = function space(force) {
	    if (!force && this.format.compact) return;

	    if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
	      this.push(" ");
	    }
	  };

	  /**
	   * Remove the last character.
	   */

	  Buffer.prototype.removeLast = function removeLast(cha) {
	    if (this.format.compact) return;
	    if (!this.isLast(cha)) return;

	    this.buf = this.buf.substr(0, this.buf.length - 1);
	    this.position.unshift(cha);
	  };

	  /**
	   * Set some state that will be modified if a newline has been inserted before any
	   * non-space characters.
	   *
	   * This is to prevent breaking semantics for terminatorless separator nodes. eg:
	   *
	   *    return foo;
	   *
	   * returns `foo`. But if we do:
	   *
	   *   return
	   *   foo;
	   *
	   *  `undefined` will be returned and not `foo` due to the terminator.
	   */

	  Buffer.prototype.startTerminatorless = function startTerminatorless() {
	    return this.parenPushNewlineState = {
	      printed: false
	    };
	  };

	  /**
	   * Print an ending parentheses if a starting one has been printed.
	   */

	  Buffer.prototype.endTerminatorless = function endTerminatorless(state) {
	    if (state.printed) {
	      this.dedent();
	      this.newline();
	      this.push(")");
	    }
	  };

	  /**
	   * Add a newline (or many newlines), maintaining formatting.
	   * Strips multiple newlines if removeLast is true.
	   */

	  Buffer.prototype.newline = function newline(i, removeLast) {
	    if (this.format.compact || this.format.retainLines) return;

	    if (this.format.concise) {
	      this.space();
	      return;
	    }

	    removeLast = removeLast || false;

	    if (_lodashLangIsNumber2["default"](i)) {
	      i = Math.min(2, i);

	      if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
	      if (i <= 0) return;

	      while (i > 0) {
	        this._newline(removeLast);
	        i--;
	      }
	      return;
	    }

	    if (_lodashLangIsBoolean2["default"](i)) {
	      removeLast = i;
	    }

	    this._newline(removeLast);
	  };

	  /**
	   * Adds a newline unless there is already two previous newlines.
	   */

	  Buffer.prototype._newline = function _newline(removeLast) {
	    // never allow more than two lines
	    if (this.endsWith("\n\n")) return;

	    // remove the last newline
	    if (removeLast && this.isLast("\n")) this.removeLast("\n");

	    this.removeLast(" ");
	    this._removeSpacesAfterLastNewline();
	    this._push("\n");
	  };

	  /**
	   * If buffer ends with a newline and some spaces after it, trim those spaces.
	   */

	  Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
	    var lastNewlineIndex = this.buf.lastIndexOf("\n");
	    if (lastNewlineIndex === -1) {
	      return;
	    }

	    var index = this.buf.length - 1;
	    while (index > lastNewlineIndex) {
	      if (this.buf[index] !== " ") {
	        break;
	      }

	      index--;
	    }

	    if (index === lastNewlineIndex) {
	      this.buf = this.buf.substring(0, index + 1);
	    }
	  };

	  /**
	   * Push a string to the buffer, maintaining indentation and newlines.
	   */

	  Buffer.prototype.push = function push(str, noIndent) {
	    if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
	      // we have an indent level and we aren't pushing a newline
	      var indent = this.getIndent();

	      // replace all newlines with newlines with the indentation
	      str = str.replace(/\n/g, "\n" + indent);

	      // we've got a newline before us so prepend on the indentation
	      if (this.isLast("\n")) this._push(indent);
	    }

	    this._push(str);
	  };

	  /**
	   * Push a string to the buffer.
	   */

	  Buffer.prototype._push = function _push(str) {
	    // see startTerminatorless() instance method
	    var parenPushNewlineState = this.parenPushNewlineState;
	    if (parenPushNewlineState) {
	      for (var i = 0; i < str.length; i++) {
	        var cha = str[i];

	        // we can ignore spaces since they wont interupt a terminatorless separator
	        if (cha === " ") continue;

	        this.parenPushNewlineState = null;

	        if (cha === "\n" || cha === "/") {
	          // we're going to break this terminator expression so we need to add a parentheses
	          this._push("(");
	          this.indent();
	          parenPushNewlineState.printed = true;
	        }

	        break;
	      }
	    }

	    //
	    this.position.push(str);
	    this.buf += str;
	  };

	  /**
	   * Test if the buffer ends with a string.
	   */

	  Buffer.prototype.endsWith = function endsWith(str) {
	    var buf = arguments.length <= 1 || arguments[1] === undefined ? this.buf : arguments[1];

	    if (str.length === 1) {
	      return buf[buf.length - 1] === str;
	    } else {
	      return buf.slice(-str.length) === str;
	    }
	  };

	  /**
	   * Test if a character is last in the buffer.
	   */

	  Buffer.prototype.isLast = function isLast(cha) {
	    if (this.format.compact) return false;

	    var buf = this.buf;
	    var last = buf[buf.length - 1];

	    if (Array.isArray(cha)) {
	      return _lodashCollectionIncludes2["default"](cha, last);
	    } else {
	      return cha === last;
	    }
	  };

	  return Buffer;
	})();

	exports["default"] = Buffer;
	module.exports = exports["default"];
	},{"lodash/collection/includes":341,"lodash/lang/isBoolean":426,"lodash/lang/isNumber":430,"repeating":513,"trim-right":532}],36:[function(require,module,exports){
	/**
	 * Print File.program
	 */

	"use strict";

	exports.__esModule = true;
	exports.File = File;
	exports.Program = Program;
	exports.BlockStatement = BlockStatement;
	exports.Noop = Noop;

	function File(node, print) {
	  print.plain(node.program);
	}

	/**
	 * Print all nodes in a Program.body.
	 */

	function Program(node, print) {
	  print.sequence(node.body);
	}

	/**
	 * Print BlockStatement, collapses empty blocks, prints body.
	 */

	function BlockStatement(node, print) {
	  this.push("{");
	  if (node.body.length) {
	    this.newline();
	    print.sequence(node.body, { indent: true });
	    if (!this.format.retainLines) this.removeLast("\n");
	    this.rightBrace();
	  } else {
	    print.printInnerComments();
	    this.push("}");
	  }
	}

	/**
	 * What is my purpose?
	 * Why am I here?
	 * Why are any of us here?
	 * Does any of this really matter?
	 */

	function Noop() {}
	},{}],37:[function(require,module,exports){
	/**
	 * Print ClassDeclaration, prints decorators, typeParameters, extends, implements, and body.
	 */

	"use strict";

	exports.__esModule = true;
	exports.ClassDeclaration = ClassDeclaration;
	exports.ClassBody = ClassBody;
	exports.ClassProperty = ClassProperty;
	exports.MethodDefinition = MethodDefinition;

	function ClassDeclaration(node, print) {
	  print.list(node.decorators, { separator: "" });
	  this.push("class");

	  if (node.id) {
	    this.push(" ");
	    print.plain(node.id);
	  }

	  print.plain(node.typeParameters);

	  if (node.superClass) {
	    this.push(" extends ");
	    print.plain(node.superClass);
	    print.plain(node.superTypeParameters);
	  }

	  if (node["implements"]) {
	    this.push(" implements ");
	    print.join(node["implements"], { separator: ", " });
	  }

	  this.space();
	  print.plain(node.body);
	}

	/**
	 * Alias ClassDeclaration printer as ClassExpression.
	 */

	exports.ClassExpression = ClassDeclaration;

	/**
	 * Print ClassBody, collapses empty blocks, prints body.
	 */

	function ClassBody(node, print) {
	  this.push("{");
	  if (node.body.length === 0) {
	    print.printInnerComments();
	    this.push("}");
	  } else {
	    this.newline();

	    this.indent();
	    print.sequence(node.body);
	    this.dedent();

	    this.rightBrace();
	  }
	}

	/**
	 * Print ClassProperty, prints decorators, static, key, typeAnnotation, and value.
	 * Also: semicolons, deal with it.
	 */

	function ClassProperty(node, print) {
	  print.list(node.decorators, { separator: "" });

	  if (node["static"]) this.push("static ");
	  print.plain(node.key);
	  print.plain(node.typeAnnotation);
	  if (node.value) {
	    this.space();
	    this.push("=");
	    this.space();
	    print.plain(node.value);
	  }
	  this.semicolon();
	}

	/**
	 * Print MethodDefinition, prints decorations, static, and method.
	 */

	function MethodDefinition(node, print) {
	  print.list(node.decorators, { separator: "" });

	  if (node["static"]) {
	    this.push("static ");
	  }

	  this._method(node, print);
	}
	},{}],38:[function(require,module,exports){
	/**
	 * Prints ComprehensionBlock, prints left and right.
	 */

	"use strict";

	exports.__esModule = true;
	exports.ComprehensionBlock = ComprehensionBlock;
	exports.ComprehensionExpression = ComprehensionExpression;

	function ComprehensionBlock(node, print) {
	  this.keyword("for");
	  this.push("(");
	  print.plain(node.left);
	  this.push(" of ");
	  print.plain(node.right);
	  this.push(")");
	}

	/**
	 * Prints ComprehensionExpression, prints blocks, filter, and body. Handles generators.
	 */

	function ComprehensionExpression(node, print) {
	  this.push(node.generator ? "(" : "[");

	  print.join(node.blocks, { separator: " " });
	  this.space();

	  if (node.filter) {
	    this.keyword("if");
	    this.push("(");
	    print.plain(node.filter);
	    this.push(")");
	    this.space();
	  }

	  print.plain(node.body);

	  this.push(node.generator ? ")" : "]");
	}
	},{}],39:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.UnaryExpression = UnaryExpression;
	exports.DoExpression = DoExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.NewExpression = NewExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.ThisExpression = ThisExpression;
	exports.Super = Super;
	exports.Decorator = Decorator;
	exports.CallExpression = CallExpression;
	exports.EmptyStatement = EmptyStatement;
	exports.ExpressionStatement = ExpressionStatement;
	exports.AssignmentPattern = AssignmentPattern;
	exports.AssignmentExpression = AssignmentExpression;
	exports.BindExpression = BindExpression;
	exports.MemberExpression = MemberExpression;
	exports.MetaProperty = MetaProperty;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _isInteger = require("is-integer");

	var _isInteger2 = _interopRequireDefault(_isInteger);

	var _lodashLangIsNumber = require("lodash/lang/isNumber");

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var _types = require("../../types");

	/**
	 * RegExp for testing scientific notation in literals.
	 */

	var t = _interopRequireWildcard(_types);

	var SCIENTIFIC_NOTATION = /e/i;

	/**
	 * Prints UnaryExpression, prints operator and argument.
	 */

	function UnaryExpression(node, print) {
	  var needsSpace = /[a-z]$/.test(node.operator);
	  var arg = node.argument;

	  if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
	    needsSpace = true;
	  }

	  if (t.isUnaryExpression(arg) && arg.operator === "!") {
	    needsSpace = false;
	  }

	  this.push(node.operator);
	  if (needsSpace) this.push(" ");
	  print.plain(node.argument);
	}

	/**
	 * Prints DoExpression, prints body.
	 */

	function DoExpression(node, print) {
	  this.push("do");
	  this.space();
	  print.plain(node.body);
	}

	/**
	 * Prints ParenthesizedExpression, prints expression.
	 */

	function ParenthesizedExpression(node, print) {
	  this.push("(");
	  print.plain(node.expression);
	  this.push(")");
	}

	/**
	 * Prints UpdateExpression, prints operator and argument.
	 */

	function UpdateExpression(node, print) {
	  if (node.prefix) {
	    this.push(node.operator);
	    print.plain(node.argument);
	  } else {
	    print.plain(node.argument);
	    this.push(node.operator);
	  }
	}

	/**
	 * Prints ConditionalExpression, prints test, consequent, and alternate.
	 */

	function ConditionalExpression(node, print) {
	  print.plain(node.test);
	  this.space();
	  this.push("?");
	  this.space();
	  print.plain(node.consequent);
	  this.space();
	  this.push(":");
	  this.space();
	  print.plain(node.alternate);
	}

	/**
	 * Prints NewExpression, prints callee and arguments.
	 */

	function NewExpression(node, print) {
	  this.push("new ");
	  print.plain(node.callee);
	  this.push("(");
	  print.list(node.arguments);
	  this.push(")");
	}

	/**
	 * Prints SequenceExpression.expressions.
	 */

	function SequenceExpression(node, print) {
	  print.list(node.expressions);
	}

	/**
	 * Prints ThisExpression.
	 */

	function ThisExpression() {
	  this.push("this");
	}

	/**
	 * Prints Super.
	 */

	function Super() {
	  this.push("super");
	}

	/**
	 * Prints Decorator, prints expression.
	 */

	function Decorator(node, print) {
	  this.push("@");
	  print.plain(node.expression);
	  this.newline();
	}

	/**
	 * Prints CallExpression, prints callee and arguments.
	 */

	function CallExpression(node, print) {
	  print.plain(node.callee);

	  this.push("(");

	  var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;

	  var separator;
	  if (isPrettyCall) {
	    separator = ",\n";
	    this.newline();
	    this.indent();
	  }

	  print.list(node.arguments, { separator: separator });

	  if (isPrettyCall) {
	    this.newline();
	    this.dedent();
	  }

	  this.push(")");
	}

	/**
	 * Builds yield or await expression printer.
	 * Prints delegate, all, and argument.
	 */

	var buildYieldAwait = function buildYieldAwait(keyword) {
	  return function (node, print) {
	    this.push(keyword);

	    if (node.delegate || node.all) {
	      this.push("*");
	    }

	    if (node.argument) {
	      this.push(" ");
	      var terminatorState = this.startTerminatorless();
	      print.plain(node.argument);
	      this.endTerminatorless(terminatorState);
	    }
	  };
	};

	/**
	 * Create YieldExpression and AwaitExpression printers.
	 */

	var YieldExpression = buildYieldAwait("yield");
	exports.YieldExpression = YieldExpression;
	var AwaitExpression = buildYieldAwait("await");

	/**
	 * Prints EmptyStatement.
	 */

	exports.AwaitExpression = AwaitExpression;

	function EmptyStatement() {
	  this.semicolon();
	}

	/**
	 * Prints ExpressionStatement, prints expression.
	 */

	function ExpressionStatement(node, print) {
	  print.plain(node.expression);
	  this.semicolon();
	}

	/**
	 * Prints AssignmentPattern, prints left and right.
	 */

	function AssignmentPattern(node, print) {
	  print.plain(node.left);
	  this.push(" = ");
	  print.plain(node.right);
	}

	/**
	 * Prints AssignmentExpression, prints left, operator, and right.
	 */

	function AssignmentExpression(node, print) {
	  // todo: add cases where the spaces can be dropped when in compact mode
	  print.plain(node.left);

	  var spaces = node.operator === "in" || node.operator === "instanceof";
	  spaces = true; // todo: https://github.com/babel/babel/issues/1835
	  this.space(spaces);

	  this.push(node.operator);

	  if (!spaces) {
	    // space is mandatory to avoid outputting <!--
	    // http://javascript.spec.whatwg.org/#comment-syntax
	    spaces = node.operator === "<" && t.isUnaryExpression(node.right, { prefix: true, operator: "!" }) && t.isUnaryExpression(node.right.argument, { prefix: true, operator: "--" });
	  }

	  this.space(spaces);

	  print.plain(node.right);
	}

	/**
	 * Prints BindExpression, prints object and callee.
	 */

	function BindExpression(node, print) {
	  print.plain(node.object);
	  this.push("::");
	  print.plain(node.callee);
	}

	/**
	 * Alias ClassDeclaration printer as ClassExpression,
	 * and AssignmentExpression printer as LogicalExpression.
	 */

	exports.BinaryExpression = AssignmentExpression;

	/**
	 * Print MemberExpression, prints object, property, and value. Handles computed.
	 */

	exports.LogicalExpression = AssignmentExpression;

	function MemberExpression(node, print) {
	  var obj = node.object;
	  print.plain(obj);

	  if (!node.computed && t.isMemberExpression(node.property)) {
	    throw new TypeError("Got a MemberExpression for MemberExpression property");
	  }

	  var computed = node.computed;
	  if (t.isLiteral(node.property) && _lodashLangIsNumber2["default"](node.property.value)) {
	    computed = true;
	  }

	  if (computed) {
	    this.push("[");
	    print.plain(node.property);
	    this.push("]");
	  } else {
	    if (t.isLiteral(node.object)) {
	      var val = this._Literal(node.object);
	      if (_isInteger2["default"](+val) && !SCIENTIFIC_NOTATION.test(val)) {
	        this.push(".");
	      }
	    }

	    this.push(".");
	    print.plain(node.property);
	  }
	}

	/**
	 * Print MetaProperty, prints meta and property.
	 */

	function MetaProperty(node, print) {
	  print.plain(node.meta);
	  this.push(".");
	  print.plain(node.property);
	}
	},{"../../types":193,"is-integer":322,"lodash/lang/isNumber":430}],40:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.AnyTypeAnnotation = AnyTypeAnnotation;
	exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
	exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
	exports.DeclareClass = DeclareClass;
	exports.DeclareFunction = DeclareFunction;
	exports.DeclareModule = DeclareModule;
	exports.DeclareVariable = DeclareVariable;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
	exports.FunctionTypeParam = FunctionTypeParam;
	exports.InterfaceExtends = InterfaceExtends;
	exports._interfaceish = _interfaceish;
	exports.InterfaceDeclaration = InterfaceDeclaration;
	exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
	exports.MixedTypeAnnotation = MixedTypeAnnotation;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.NumberTypeAnnotation = NumberTypeAnnotation;
	exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
	exports.StringTypeAnnotation = StringTypeAnnotation;
	exports.TupleTypeAnnotation = TupleTypeAnnotation;
	exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
	exports.TypeAlias = TypeAlias;
	exports.TypeAnnotation = TypeAnnotation;
	exports.TypeParameterInstantiation = TypeParameterInstantiation;
	exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
	exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
	exports.ObjectTypeIndexer = ObjectTypeIndexer;
	exports.ObjectTypeProperty = ObjectTypeProperty;
	exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
	exports.UnionTypeAnnotation = UnionTypeAnnotation;
	exports.TypeCastExpression = TypeCastExpression;
	exports.VoidTypeAnnotation = VoidTypeAnnotation;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * Prints AnyTypeAnnotation.
	 */

	var t = _interopRequireWildcard(_types);

	function AnyTypeAnnotation() {
	  this.push("any");
	}

	/**
	 * Prints ArrayTypeAnnotation, prints elementType.
	 */

	function ArrayTypeAnnotation(node, print) {
	  print.plain(node.elementType);
	  this.push("[");
	  this.push("]");
	}

	/**
	 * Prints BooleanTypeAnnotation.
	 */

	function BooleanTypeAnnotation(node) {
	  this.push("bool");
	}

	/**
	 * Prints DeclareClass, prints node.
	 */

	function DeclareClass(node, print) {
	  this.push("declare class ");
	  this._interfaceish(node, print);
	}

	/**
	 * Prints DeclareFunction, prints id and id.typeAnnotation.
	 */

	function DeclareFunction(node, print) {
	  this.push("declare function ");
	  print.plain(node.id);
	  print.plain(node.id.typeAnnotation.typeAnnotation);
	  this.semicolon();
	}

	/**
	 * Prints DeclareModule, prints id and body.
	 */

	function DeclareModule(node, print) {
	  this.push("declare module ");
	  print.plain(node.id);
	  this.space();
	  print.plain(node.body);
	}

	/**
	 * Prints DeclareVariable, prints id and id.typeAnnotation.
	 */

	function DeclareVariable(node, print) {
	  this.push("declare var ");
	  print.plain(node.id);
	  print.plain(node.id.typeAnnotation);
	  this.semicolon();
	}

	/**
	 * Prints FunctionTypeAnnotation, prints typeParameters, params, and rest.
	 */

	function FunctionTypeAnnotation(node, print, parent) {
	  print.plain(node.typeParameters);
	  this.push("(");
	  print.list(node.params);

	  if (node.rest) {
	    if (node.params.length) {
	      this.push(",");
	      this.space();
	    }
	    this.push("...");
	    print.plain(node.rest);
	  }

	  this.push(")");

	  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying
	  if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
	    this.push(":");
	  } else {
	    this.space();
	    this.push("=>");
	  }

	  this.space();
	  print.plain(node.returnType);
	}

	/**
	 * Prints FunctionTypeParam, prints name and typeAnnotation, handles optional.
	 */

	function FunctionTypeParam(node, print) {
	  print.plain(node.name);
	  if (node.optional) this.push("?");
	  this.push(":");
	  this.space();
	  print.plain(node.typeAnnotation);
	}

	/**
	 * Prints InterfaceExtends, prints id and typeParameters.
	 */

	function InterfaceExtends(node, print) {
	  print.plain(node.id);
	  print.plain(node.typeParameters);
	}

	/**
	 * Alias InterfaceExtends printer as ClassImplements,
	 * and InterfaceExtends printer as GenericTypeAnnotation.
	 */

	exports.ClassImplements = InterfaceExtends;

	/**
	 * Prints interface-like node, prints id, typeParameters, extends, and body.
	 */

	exports.GenericTypeAnnotation = InterfaceExtends;

	function _interfaceish(node, print) {
	  print.plain(node.id);
	  print.plain(node.typeParameters);
	  if (node["extends"].length) {
	    this.push(" extends ");
	    print.join(node["extends"], { separator: ", " });
	  }
	  this.space();
	  print.plain(node.body);
	}

	/**
	 * Prints InterfaceDeclaration, prints node.
	 */

	function InterfaceDeclaration(node, print) {
	  this.push("interface ");
	  this._interfaceish(node, print);
	}

	/**
	 * Prints IntersectionTypeAnnotation, prints types.
	 */

	function IntersectionTypeAnnotation(node, print) {
	  print.join(node.types, { separator: " & " });
	}

	/**
	 * Prints MixedTypeAnnotation.
	 */

	function MixedTypeAnnotation() {
	  this.push("mixed");
	}

	/**
	 * Prints NullableTypeAnnotation, prints typeAnnotation.
	 */

	function NullableTypeAnnotation(node, print) {
	  this.push("?");
	  print.plain(node.typeAnnotation);
	}

	/**
	 * Prints NumberLiteralTypeAnnotation, prints value.
	 */

	var _types2 = require("./types");

	/**
	 * Prints NumberTypeAnnotation.
	 */

	exports.NumberLiteralTypeAnnotation = _types2.Literal;

	function NumberTypeAnnotation() {
	  this.push("number");
	}

	/**
	 * Prints StringLiteralTypeAnnotation, prints value.
	 */

	function StringLiteralTypeAnnotation(node) {
	  this.push(this._stringLiteral(node.value));
	}

	/**
	 * Prints StringTypeAnnotation.
	 */

	function StringTypeAnnotation() {
	  this.push("string");
	}

	/**
	 * Prints TupleTypeAnnotation, prints types.
	 */

	function TupleTypeAnnotation(node, print) {
	  this.push("[");
	  print.join(node.types, { separator: ", " });
	  this.push("]");
	}

	/**
	 * Prints TypeofTypeAnnotation, prints argument.
	 */

	function TypeofTypeAnnotation(node, print) {
	  this.push("typeof ");
	  print.plain(node.argument);
	}

	/**
	 * Prints TypeAlias, prints id, typeParameters, and right.
	 */

	function TypeAlias(node, print) {
	  this.push("type ");
	  print.plain(node.id);
	  print.plain(node.typeParameters);
	  this.space();
	  this.push("=");
	  this.space();
	  print.plain(node.right);
	  this.semicolon();
	}

	/**
	 * Prints TypeAnnotation, prints typeAnnotation, handles optional.
	 */

	function TypeAnnotation(node, print) {
	  this.push(":");
	  this.space();
	  if (node.optional) this.push("?");
	  print.plain(node.typeAnnotation);
	}

	/**
	 * Prints TypeParameterInstantiation, prints params.
	 */

	function TypeParameterInstantiation(node, print) {
	  this.push("<");
	  print.join(node.params, {
	    separator: ", ",
	    iterator: function iterator(node) {
	      print.plain(node.typeAnnotation);
	    }
	  });
	  this.push(">");
	}

	/**
	 * Alias TypeParameterInstantiation printer as TypeParameterDeclaration
	 */

	exports.TypeParameterDeclaration = TypeParameterInstantiation;

	/**
	 * Prints ObjectTypeAnnotation, prints properties, callProperties, and indexers.
	 */

	function ObjectTypeAnnotation(node, print) {
	  // istanbul ignore next

	  var _this = this;

	  this.push("{");
	  var props = node.properties.concat(node.callProperties, node.indexers);

	  if (props.length) {
	    this.space();

	    print.list(props, {
	      separator: false,
	      indent: true,
	      iterator: function iterator() {
	        if (props.length !== 1) {
	          _this.semicolon();
	          _this.space();
	        }
	      }
	    });

	    this.space();
	  }

	  this.push("}");
	}

	/**
	 * Prints ObjectTypeCallProperty, prints value, handles static.
	 */

	function ObjectTypeCallProperty(node, print) {
	  if (node["static"]) this.push("static ");
	  print.plain(node.value);
	}

	/**
	 * Prints ObjectTypeIndexer, prints id, key, and value, handles static.
	 */

	function ObjectTypeIndexer(node, print) {
	  if (node["static"]) this.push("static ");
	  this.push("[");
	  print.plain(node.id);
	  this.push(":");
	  this.space();
	  print.plain(node.key);
	  this.push("]");
	  this.push(":");
	  this.space();
	  print.plain(node.value);
	}

	/**
	 * Prints ObjectTypeProperty, prints static, key, and value.
	 */

	function ObjectTypeProperty(node, print) {
	  if (node["static"]) this.push("static ");
	  print.plain(node.key);
	  if (node.optional) this.push("?");
	  if (!t.isFunctionTypeAnnotation(node.value)) {
	    this.push(":");
	    this.space();
	  }
	  print.plain(node.value);
	}

	/**
	 * Prints QualifiedTypeIdentifier, prints qualification and id.
	 */

	function QualifiedTypeIdentifier(node, print) {
	  print.plain(node.qualification);
	  this.push(".");
	  print.plain(node.id);
	}

	/**
	 * Prints UnionTypeAnnotation, prints types.
	 */

	function UnionTypeAnnotation(node, print) {
	  print.join(node.types, { separator: " | " });
	}

	/**
	 * Prints TypeCastExpression, prints expression and typeAnnotation.
	 */

	function TypeCastExpression(node, print) {
	  this.push("(");
	  print.plain(node.expression);
	  print.plain(node.typeAnnotation);
	  this.push(")");
	}

	/**
	 * Prints VoidTypeAnnotation.
	 */

	function VoidTypeAnnotation(node) {
	  this.push("void");
	}
	},{"../../types":193,"./types":46}],41:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.JSXAttribute = JSXAttribute;
	exports.JSXIdentifier = JSXIdentifier;
	exports.JSXNamespacedName = JSXNamespacedName;
	exports.JSXMemberExpression = JSXMemberExpression;
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	exports.JSXExpressionContainer = JSXExpressionContainer;
	exports.JSXElement = JSXElement;
	exports.JSXOpeningElement = JSXOpeningElement;
	exports.JSXClosingElement = JSXClosingElement;
	exports.JSXEmptyExpression = JSXEmptyExpression;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * Prints JSXAttribute, prints name and value.
	 */

	var t = _interopRequireWildcard(_types);

	function JSXAttribute(node, print) {
	  print.plain(node.name);
	  if (node.value) {
	    this.push("=");
	    print.plain(node.value);
	  }
	}

	/**
	 * Prints JSXIdentifier, prints name.
	 */

	function JSXIdentifier(node) {
	  this.push(node.name);
	}

	/**
	 * Prints JSXNamespacedName, prints namespace and name.
	 */

	function JSXNamespacedName(node, print) {
	  print.plain(node.namespace);
	  this.push(":");
	  print.plain(node.name);
	}

	/**
	 * Prints JSXMemberExpression, prints object and property.
	 */

	function JSXMemberExpression(node, print) {
	  print.plain(node.object);
	  this.push(".");
	  print.plain(node.property);
	}

	/**
	 * Prints JSXSpreadAttribute, prints argument.
	 */

	function JSXSpreadAttribute(node, print) {
	  this.push("{...");
	  print.plain(node.argument);
	  this.push("}");
	}

	/**
	 * Prints JSXExpressionContainer, prints expression.
	 */

	function JSXExpressionContainer(node, print) {
	  this.push("{");
	  print.plain(node.expression);
	  this.push("}");
	}

	/**
	 * Prints JSXElement, prints openingElement, children, and closingElement.
	 */

	function JSXElement(node, print) {
	  var open = node.openingElement;
	  print.plain(open);
	  if (open.selfClosing) return;

	  this.indent();
	  var _arr = node.children;
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var child = _arr[_i];
	    if (t.isLiteral(child)) {
	      this.push(child.value, true);
	    } else {
	      print.plain(child);
	    }
	  }
	  this.dedent();

	  print.plain(node.closingElement);
	}

	/**
	 * Prints JSXOpeningElement, prints name and attributes, handles selfClosing.
	 */

	function JSXOpeningElement(node, print) {
	  this.push("<");
	  print.plain(node.name);
	  if (node.attributes.length > 0) {
	    this.push(" ");
	    print.join(node.attributes, { separator: " " });
	  }
	  this.push(node.selfClosing ? " />" : ">");
	}

	/**
	 * Prints JSXClosingElement, prints name.
	 */

	function JSXClosingElement(node, print) {
	  this.push("</");
	  print.plain(node.name);
	  this.push(">");
	}

	/**
	 * Prints JSXEmptyExpression.
	 */

	function JSXEmptyExpression() {}
	},{"../../types":193}],42:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports._params = _params;
	exports._method = _method;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * Prints nodes with params, prints typeParameters, params, and returnType, handles optional params.
	 */

	var t = _interopRequireWildcard(_types);

	function _params(node, print) {
	  // istanbul ignore next

	  var _this = this;

	  print.plain(node.typeParameters);
	  this.push("(");
	  print.list(node.params, {
	    iterator: function iterator(node) {
	      if (node.optional) _this.push("?");
	      print.plain(node.typeAnnotation);
	    }
	  });
	  this.push(")");

	  if (node.returnType) {
	    print.plain(node.returnType);
	  }
	}

	/**
	 * Prints method-like nodes, prints key, value, and body, handles async, generator, computed, and get or set.
	 */

	function _method(node, print) {
	  var value = node.value;
	  var kind = node.kind;
	  var key = node.key;

	  if (kind === "method" || kind === "init") {
	    if (value.generator) {
	      this.push("*");
	    }
	  }

	  if (kind === "get" || kind === "set") {
	    this.push(kind + " ");
	  }

	  if (value.async) this.push("async ");

	  if (node.computed) {
	    this.push("[");
	    print.plain(key);
	    this.push("]");
	  } else {
	    print.plain(key);
	  }

	  this._params(value, print);
	  this.space();
	  print.plain(value.body);
	}

	/**
	 * Prints FunctionExpression, prints id and body, handles async and generator.
	 */

	function FunctionExpression(node, print) {
	  if (node.async) this.push("async ");
	  this.push("function");
	  if (node.generator) this.push("*");

	  if (node.id) {
	    this.push(" ");
	    print.plain(node.id);
	  } else {
	    this.space();
	  }

	  this._params(node, print);
	  this.space();
	  print.plain(node.body);
	}

	/**
	 * Alias FunctionExpression printer as FunctionDeclaration.
	 */

	exports.FunctionDeclaration = FunctionExpression;

	/**
	 * Prints ArrowFunctionExpression, prints params and body, handles async.
	 * Leaves out parentheses when single param.
	 */

	function ArrowFunctionExpression(node, print) {
	  if (node.async) this.push("async ");

	  if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
	    print.plain(node.params[0]);
	  } else {
	    this._params(node, print);
	  }

	  this.push(" => ");

	  var bodyNeedsParens = t.isObjectExpression(node.body);

	  if (bodyNeedsParens) {
	    this.push("(");
	  }

	  print.plain(node.body);

	  if (bodyNeedsParens) {
	    this.push(")");
	  }
	}
	},{"../../types":193}],43:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.ImportSpecifier = ImportSpecifier;
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
	exports.ExportSpecifier = ExportSpecifier;
	exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
	exports.ExportAllDeclaration = ExportAllDeclaration;
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	exports.ImportDeclaration = ImportDeclaration;
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * Prints ImportSpecifier, prints imported and local.
	 */

	var t = _interopRequireWildcard(_types);

	function ImportSpecifier(node, print) {
	  print.plain(node.imported);
	  if (node.local && node.local.name !== node.imported.name) {
	    this.push(" as ");
	    print.plain(node.local);
	  }
	}

	/**
	 * Prints ImportDefaultSpecifier, prints local.
	 */

	function ImportDefaultSpecifier(node, print) {
	  print.plain(node.local);
	}

	/**
	 * Prints ExportDefaultSpecifier, prints exported.
	 */

	function ExportDefaultSpecifier(node, print) {
	  print.plain(node.exported);
	}

	/**
	 * Prints ExportSpecifier, prints local and exported.
	 */

	function ExportSpecifier(node, print) {
	  print.plain(node.local);
	  if (node.exported && node.local.name !== node.exported.name) {
	    this.push(" as ");
	    print.plain(node.exported);
	  }
	}

	/**
	 * Prints ExportNamespaceSpecifier, prints exported.
	 */

	function ExportNamespaceSpecifier(node, print) {
	  this.push("* as ");
	  print.plain(node.exported);
	}

	/**
	 * Prints ExportAllDeclaration, prints exported and source.
	 */

	function ExportAllDeclaration(node, print) {
	  this.push("export *");
	  if (node.exported) {
	    this.push(" as ");
	    print.plain(node.exported);
	  }
	  this.push(" from ");
	  print.plain(node.source);
	  this.semicolon();
	}

	/**
	 * Prints ExportNamedDeclaration, delegates to ExportDeclaration.
	 */

	function ExportNamedDeclaration(node, print) {
	  this.push("export ");
	  ExportDeclaration.call(this, node, print);
	}

	/**
	 * Prints ExportDefaultDeclaration, delegates to ExportDeclaration.
	 */

	function ExportDefaultDeclaration(node, print) {
	  this.push("export default ");
	  ExportDeclaration.call(this, node, print);
	}

	/**
	 * Prints ExportDeclaration, prints specifiers, declration, and source.
	 */

	function ExportDeclaration(node, print) {
	  var specifiers = node.specifiers;

	  if (node.declaration) {
	    var declar = node.declaration;
	    print.plain(declar);
	    if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar)) return;
	  } else {
	    var first = specifiers[0];
	    var hasSpecial = false;
	    if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
	      hasSpecial = true;
	      print.plain(specifiers.shift());
	      if (specifiers.length) {
	        this.push(", ");
	      }
	    }

	    if (specifiers.length || !specifiers.length && !hasSpecial) {
	      this.push("{");
	      if (specifiers.length) {
	        this.space();
	        print.join(specifiers, { separator: ", " });
	        this.space();
	      }
	      this.push("}");
	    }

	    if (node.source) {
	      this.push(" from ");
	      print.plain(node.source);
	    }
	  }

	  this.ensureSemicolon();
	}

	/**
	 * Prints ImportDeclaration, prints specifiers and source, handles isType.
	 */

	function ImportDeclaration(node, print) {
	  this.push("import ");

	  if (node.importKind === "type" || node.importKind === "typeof") {
	    this.push(node.importKind + " ");
	  }

	  var specfiers = node.specifiers;
	  if (specfiers && specfiers.length) {
	    var first = node.specifiers[0];
	    if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
	      print.plain(node.specifiers.shift());
	      if (node.specifiers.length) {
	        this.push(", ");
	      }
	    }

	    if (node.specifiers.length) {
	      this.push("{");
	      this.space();
	      print.join(node.specifiers, { separator: ", " });
	      this.space();
	      this.push("}");
	    }

	    this.push(" from ");
	  }

	  print.plain(node.source);
	  this.semicolon();
	}

	/**
	 * Prints ImportNamespaceSpecifier, prints local.
	 */

	function ImportNamespaceSpecifier(node, print) {
	  this.push("* as ");
	  print.plain(node.local);
	}
	},{"../../types":193}],44:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.WithStatement = WithStatement;
	exports.IfStatement = IfStatement;
	exports.ForStatement = ForStatement;
	exports.WhileStatement = WhileStatement;
	exports.DoWhileStatement = DoWhileStatement;
	exports.LabeledStatement = LabeledStatement;
	exports.TryStatement = TryStatement;
	exports.CatchClause = CatchClause;
	exports.SwitchStatement = SwitchStatement;
	exports.SwitchCase = SwitchCase;
	exports.DebuggerStatement = DebuggerStatement;
	exports.VariableDeclaration = VariableDeclaration;
	exports.VariableDeclarator = VariableDeclarator;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _repeating = require("repeating");

	var _repeating2 = _interopRequireDefault(_repeating);

	var _types = require("../../types");

	/**
	 * Prints WithStatement, prints object and body.
	 */

	var t = _interopRequireWildcard(_types);

	function WithStatement(node, print) {
	  this.keyword("with");
	  this.push("(");
	  print.plain(node.object);
	  this.push(")");
	  print.block(node.body);
	}

	/**
	 * Prints IfStatement, prints test, consequent, and alternate.
	 */

	function IfStatement(node, print) {
	  this.keyword("if");
	  this.push("(");
	  print.plain(node.test);
	  this.push(")");
	  this.space();

	  print.indentOnComments(node.consequent);

	  if (node.alternate) {
	    if (this.isLast("}")) this.space();
	    this.push("else ");
	    print.indentOnComments(node.alternate);
	  }
	}

	/**
	 * Prints ForStatement, prints init, test, update, and body.
	 */

	function ForStatement(node, print) {
	  this.keyword("for");
	  this.push("(");

	  print.plain(node.init);
	  this.push(";");

	  if (node.test) {
	    this.space();
	    print.plain(node.test);
	  }
	  this.push(";");

	  if (node.update) {
	    this.space();
	    print.plain(node.update);
	  }

	  this.push(")");
	  print.block(node.body);
	}

	/**
	 * Prints WhileStatement, prints test and body.
	 */

	function WhileStatement(node, print) {
	  this.keyword("while");
	  this.push("(");
	  print.plain(node.test);
	  this.push(")");
	  print.block(node.body);
	}

	/**
	 * Builds ForIn or ForOf statement printers.
	 * Prints left, right, and body.
	 */

	var buildForXStatement = function buildForXStatement(op) {
	  return function (node, print) {
	    this.keyword("for");
	    this.push("(");
	    print.plain(node.left);
	    this.push(" " + op + " ");
	    print.plain(node.right);
	    this.push(")");
	    print.block(node.body);
	  };
	};

	/**
	 * Create ForInStatement and ForOfStatement printers.
	 */

	var ForInStatement = buildForXStatement("in");
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = buildForXStatement("of");

	/**
	 * Prints DoWhileStatement, prints body and test.
	 */

	exports.ForOfStatement = ForOfStatement;

	function DoWhileStatement(node, print) {
	  this.push("do ");
	  print.plain(node.body);
	  this.space();
	  this.keyword("while");
	  this.push("(");
	  print.plain(node.test);
	  this.push(");");
	}

	/**
	 * Builds continue, return, or break statement printers.
	 * Prints label (or key).
	 */

	var buildLabelStatement = function buildLabelStatement(prefix) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];

	  return function (node, print) {
	    this.push(prefix);

	    var label = node[key];
	    if (label) {
	      this.push(" ");
	      var terminatorState = this.startTerminatorless();
	      print.plain(label);
	      this.endTerminatorless(terminatorState);
	    }

	    this.semicolon();
	  };
	};

	/**
	 * Create ContinueStatement, ReturnStatement, and BreakStatement printers.
	 */

	var ContinueStatement = buildLabelStatement("continue");
	exports.ContinueStatement = ContinueStatement;
	var ReturnStatement = buildLabelStatement("return", "argument");
	exports.ReturnStatement = ReturnStatement;
	var BreakStatement = buildLabelStatement("break");
	exports.BreakStatement = BreakStatement;
	var ThrowStatement = buildLabelStatement("throw", "argument");

	/**
	 * Prints LabeledStatement, prints label and body.
	 */

	exports.ThrowStatement = ThrowStatement;

	function LabeledStatement(node, print) {
	  print.plain(node.label);
	  this.push(": ");
	  print.plain(node.body);
	}

	/**
	 * Prints TryStatement, prints block, handlers, and finalizer.
	 */

	function TryStatement(node, print) {
	  this.keyword("try");
	  print.plain(node.block);
	  this.space();

	  // Esprima bug puts the catch clause in a `handlers` array.
	  // see https://code.google.com/p/esprima/issues/detail?id=433
	  // We run into this from regenerator generated ast.
	  if (node.handlers) {
	    print.plain(node.handlers[0]);
	  } else {
	    print.plain(node.handler);
	  }

	  if (node.finalizer) {
	    this.space();
	    this.push("finally ");
	    print.plain(node.finalizer);
	  }
	}

	/**
	 * Prints CatchClause, prints param and body.
	 */

	function CatchClause(node, print) {
	  this.keyword("catch");
	  this.push("(");
	  print.plain(node.param);
	  this.push(") ");
	  print.plain(node.body);
	}

	/**
	 * Prints SwitchStatement, prints discriminant and cases.
	 */

	function SwitchStatement(node, print) {
	  this.keyword("switch");
	  this.push("(");
	  print.plain(node.discriminant);
	  this.push(")");
	  this.space();
	  this.push("{");

	  print.sequence(node.cases, {
	    indent: true,
	    addNewlines: function addNewlines(leading, cas) {
	      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
	    }
	  });

	  this.push("}");
	}

	/**
	 * Prints SwitchCase, prints test and consequent.
	 */

	function SwitchCase(node, print) {
	  if (node.test) {
	    this.push("case ");
	    print.plain(node.test);
	    this.push(":");
	  } else {
	    this.push("default:");
	  }

	  if (node.consequent.length) {
	    this.newline();
	    print.sequence(node.consequent, { indent: true });
	  }
	}

	/**
	 * Prints DebuggerStatement.
	 */

	function DebuggerStatement() {
	  this.push("debugger;");
	}

	/**
	 * Prints VariableDeclaration, prints declarations, handles kind and format.
	 */

	function VariableDeclaration(node, print, parent) {
	  this.push(node.kind + " ");

	  var hasInits = false;
	  // don't add whitespace to loop heads
	  if (!t.isFor(parent)) {
	    var _arr = node.declarations;

	    for (var _i = 0; _i < _arr.length; _i++) {
	      var declar = _arr[_i];
	      if (declar.init) {
	        // has an init so let's split it up over multiple lines
	        hasInits = true;
	      }
	    }
	  }

	  //
	  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on
	  // this will format declarations like:
	  //
	  //   var foo = "bar", bar = "foo";
	  //
	  // into
	  //
	  //   var foo = "bar",
	  //       bar = "foo";
	  //

	  var sep;
	  if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
	    sep = ",\n" + _repeating2["default"](" ", node.kind.length + 1);
	  }

	  //

	  print.list(node.declarations, { separator: sep });

	  if (t.isFor(parent)) {
	    // don't give semicolons to these nodes since they'll be inserted in the parent generator
	    if (parent.left === node || parent.init === node) return;
	  }

	  this.semicolon();
	}

	/**
	 * Prints VariableDeclarator, handles id, id.typeAnnotation, and init.
	 */

	function VariableDeclarator(node, print) {
	  print.plain(node.id);
	  print.plain(node.id.typeAnnotation);
	  if (node.init) {
	    this.space();
	    this.push("=");
	    this.space();
	    print.plain(node.init);
	  }
	}
	},{"../../types":193,"repeating":513}],45:[function(require,module,exports){
	/**
	 * Prints TaggedTemplateExpression, prints tag and quasi.
	 */

	"use strict";

	exports.__esModule = true;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	exports.TemplateElement = TemplateElement;
	exports.TemplateLiteral = TemplateLiteral;

	function TaggedTemplateExpression(node, print) {
	  print.plain(node.tag);
	  print.plain(node.quasi);
	}

	/**
	 * Prints TemplateElement, prints value.
	 */

	function TemplateElement(node) {
	  this._push(node.value.raw);
	}

	/**
	 * Prints TemplateLiteral, prints quasis, and expressions.
	 */

	function TemplateLiteral(node, print) {
	  this.push("`");

	  var quasis = node.quasis;
	  var len = quasis.length;

	  for (var i = 0; i < len; i++) {
	    print.plain(quasis[i]);

	    if (i + 1 < len) {
	      this.push("${ ");
	      print.plain(node.expressions[i]);
	      this.push(" }");
	    }
	  }

	  this._push("`");
	}
	},{}],46:[function(require,module,exports){
	/* eslint quotes: 0 */

	"use strict";

	exports.__esModule = true;
	exports.Identifier = Identifier;
	exports.RestElement = RestElement;
	exports.ObjectExpression = ObjectExpression;
	exports.Property = Property;
	exports.ArrayExpression = ArrayExpression;
	exports.Literal = Literal;
	exports._Literal = _Literal;
	exports._stringLiteral = _stringLiteral;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * Prints Identifier, prints name.
	 */

	var t = _interopRequireWildcard(_types);

	function Identifier(node) {
	  this.push(node.name);
	}

	/**
	 * Prints RestElement, prints argument.
	 */

	function RestElement(node, print) {
	  this.push("...");
	  print.plain(node.argument);
	}

	/**
	 * Alias RestElement printer as SpreadElement,
	 * and RestElement printer as SpreadProperty.
	 */

	exports.SpreadElement = RestElement;

	/**
	 * Prints ObjectExpression, prints properties.
	 */

	exports.SpreadProperty = RestElement;

	function ObjectExpression(node, print) {
	  var props = node.properties;

	  this.push("{");
	  print.printInnerComments();

	  if (props.length) {
	    this.space();
	    print.list(props, { indent: true });
	    this.space();
	  }

	  this.push("}");
	}

	/**
	 * Alias ObjectExpression printer as ObjectPattern.
	 */

	exports.ObjectPattern = ObjectExpression;

	/**
	 * Prints Property, prints decorators, key, and value, handles kind, computed, and shorthand.
	 */

	function Property(node, print) {
	  print.list(node.decorators, { separator: "" });

	  if (node.method || node.kind === "get" || node.kind === "set") {
	    this._method(node, print);
	  } else {
	    if (node.computed) {
	      this.push("[");
	      print.plain(node.key);
	      this.push("]");
	    } else {
	      // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`
	      if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
	        print.plain(node.value);
	        return;
	      }

	      print.plain(node.key);

	      // shorthand!
	      if (node.shorthand && (t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name)) {
	        return;
	      }
	    }

	    this.push(":");
	    this.space();
	    print.plain(node.value);
	  }
	}

	/**
	 * Prints ArrayExpression, prints elements.
	 */

	function ArrayExpression(node, print) {
	  var elems = node.elements;
	  var len = elems.length;

	  this.push("[");
	  print.printInnerComments();

	  for (var i = 0; i < elems.length; i++) {
	    var elem = elems[i];
	    if (!elem) {
	      // If the array expression ends with a hole, that hole
	      // will be ignored by the interpreter, but if it ends with
	      // two (or more) holes, we need to write out two (or more)
	      // commas so that the resulting code is interpreted with
	      // both (all) of the holes.
	      this.push(",");
	    } else {
	      if (i > 0) this.space();
	      print.plain(elem);
	      if (i < len - 1) this.push(",");
	    }
	  }

	  this.push("]");
	}

	/**
	 * Alias ArrayExpression printer as ArrayPattern.
	 */

	exports.ArrayPattern = ArrayExpression;

	/**
	 * Prints Literal, prints value, regex, raw, handles val type.
	 */

	function Literal(node, print) {
	  this.push(""); // hack: catch up indentation
	  this._push(this._Literal(node));
	}

	function _Literal(node) {
	  var val = node.value;

	  if (node.regex) {
	    return "/" + node.regex.pattern + "/" + node.regex.flags;
	  }

	  // just use the raw property if our current value is equivalent to the one we got
	  // when we populated raw
	  if (node.raw != null && node.rawValue != null && val === node.rawValue) {
	    return node.raw;
	  }

	  switch (typeof val) {
	    case "string":
	      return this._stringLiteral(val);

	    case "number":
	      return val + "";

	    case "boolean":
	      return val ? "true" : "false";

	    default:
	      if (val === null) {
	        return "null";
	      } else {
	        throw new Error("Invalid Literal type");
	      }
	  }
	}

	/**
	 * Prints string literals, handles format.
	 */

	function _stringLiteral(val) {
	  val = JSON.stringify(val);

	  // escape illegal js but valid json unicode characters
	  val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function (c) {
	    return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
	  });

	  if (this.format.quotes === "single") {
	    // remove double quotes
	    val = val.slice(1, -1);

	    // unescape double quotes
	    val = val.replace(/\\"/g, '"');

	    // escape single quotes
	    val = val.replace(/'/g, "\\'");

	    // add single quotes
	    val = "'" + val + "'";
	  }

	  return val;
	}
	},{"../../types":193}],47:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _detectIndent = require("detect-indent");

	var _detectIndent2 = _interopRequireDefault(_detectIndent);

	var _whitespace = require("./whitespace");

	var _whitespace2 = _interopRequireDefault(_whitespace);

	var _nodePrinter = require("./node/printer");

	var _nodePrinter2 = _interopRequireDefault(_nodePrinter);

	var _repeating = require("repeating");

	var _repeating2 = _interopRequireDefault(_repeating);

	var _sourceMap = require("./source-map");

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _position = require("./position");

	var _position2 = _interopRequireDefault(_position);

	var _messages = require("../messages");

	var messages = _interopRequireWildcard(_messages);

	var _buffer = require("./buffer");

	var _buffer2 = _interopRequireDefault(_buffer);

	var _lodashObjectExtend = require("lodash/object/extend");

	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _node2 = require("./node");

	var _node3 = _interopRequireDefault(_node2);

	var _types = require("../types");

	/**
	 * Babel's code generator, turns an ast into code, maintaining sourcemaps,
	 * user preferences, and valid output.
	 */

	var t = _interopRequireWildcard(_types);

	var CodeGenerator = (function () {
	  function CodeGenerator(ast, opts, code) {
	    _classCallCheck(this, CodeGenerator);

	    opts = opts || {};

	    this.comments = ast.comments || [];
	    this.tokens = ast.tokens || [];
	    this.format = CodeGenerator.normalizeOptions(code, opts, this.tokens);
	    this.opts = opts;
	    this.ast = ast;

	    this.whitespace = new _whitespace2["default"](this.tokens);
	    this.position = new _position2["default"]();
	    this.map = new _sourceMap2["default"](this.position, opts, code);
	    this.buffer = new _buffer2["default"](this.position, this.format);
	  }

	  /**
	   * [Please add a description.]
	   */

	  /**
	   * Normalize generator options, setting defaults.
	   *
	   * - Detects code indentation.
	   * - If `opts.compact = "auto"` and the code is over 100KB, `compact` will be set to `true`.
	   */

	  CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
	    var style = "  ";
	    if (code) {
	      var indent = _detectIndent2["default"](code).indent;
	      if (indent && indent !== " ") style = indent;
	    }

	    var format = {
	      shouldPrintComment: opts.shouldPrintComment,
	      retainLines: opts.retainLines,
	      comments: opts.comments == null || opts.comments,
	      compact: opts.compact,
	      quotes: CodeGenerator.findCommonStringDelimiter(code, tokens),
	      indent: {
	        adjustMultilineComment: true,
	        style: style,
	        base: 0
	      }
	    };

	    if (format.compact === "auto") {
	      format.compact = code.length > 100000; // 100KB

	      if (format.compact) {
	        console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
	      }
	    }

	    if (format.compact) {
	      format.indent.adjustMultilineComment = false;
	    }

	    return format;
	  };

	  /**
	   * Determine if input code uses more single or double quotes.
	   */

	  CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
	    var occurences = {
	      single: 0,
	      double: 0
	    };

	    var checked = 0;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];
	      if (token.type.label !== "string") continue;

	      var raw = code.slice(token.start, token.end);
	      if (raw[0] === "'") {
	        occurences.single++;
	      } else {
	        occurences.double++;
	      }

	      checked++;
	      if (checked >= 3) break;
	    }
	    if (occurences.single > occurences.double) {
	      return "single";
	    } else {
	      return "double";
	    }
	  };

	  /**
	   * All node generators.
	   */

	  /**
	   * Generate code and sourcemap from ast.
	   *
	   * Appends comments that weren't attached to any node to the end of the generated output.
	   */

	  CodeGenerator.prototype.generate = function generate() {
	    var ast = this.ast;

	    this.print(ast);

	    if (ast.comments) {
	      var comments = [];
	      var _arr = ast.comments;
	      for (var _i = 0; _i < _arr.length; _i++) {
	        var comment = _arr[_i];
	        if (!comment._displayed) comments.push(comment);
	      }
	      this._printComments(comments);
	    }

	    return {
	      map: this.map.get(),
	      code: this.buffer.get()
	    };
	  };

	  /**
	   * Build NodePrinter.
	   */

	  CodeGenerator.prototype.buildPrint = function buildPrint(parent) {
	    return new _nodePrinter2["default"](this, parent);
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.catchUp = function catchUp(node) {
	    // catch up to this nodes newline if we're behind
	    if (node.loc && this.format.retainLines && this.buffer.buf) {
	      while (this.position.line < node.loc.start.line) {
	        this._push("\n");
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
	    if (!opts.statement && !_node3["default"].isUserWhitespacable(node, parent)) {
	      return;
	    }

	    var lines = 0;

	    if (node.start != null && !node._ignoreUserWhitespace) {
	      // user node
	      if (leading) {
	        lines = this.whitespace.getNewlinesBefore(node);
	      } else {
	        lines = this.whitespace.getNewlinesAfter(node);
	      }
	    } else {
	      // generated node
	      if (!leading) lines++; // always include at least a single line after
	      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;

	      var needs = _node3["default"].needsWhitespaceAfter;
	      if (leading) needs = _node3["default"].needsWhitespaceBefore;
	      if (needs(node, parent)) lines++;

	      // generated nodes can't add starting file whitespace
	      if (!this.buffer.buf) lines = 0;
	    }

	    this.newline(lines);
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.print = function print(node, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (!node) return;

	    if (parent && parent._compact) {
	      node._compact = true;
	    }

	    var oldConcise = this.format.concise;
	    if (node._compact) {
	      this.format.concise = true;
	    }

	    if (!this[node.type]) {
	      throw new ReferenceError("unknown node of type " + JSON.stringify(node.type) + " with constructor " + JSON.stringify(node && node.constructor.name));
	    }

	    var needsParens = _node3["default"].needsParens(node, parent);
	    if (needsParens) this.push("(");

	    this.printLeadingComments(node, parent);

	    this.catchUp(node);

	    this._printNewline(true, node, parent, opts);

	    if (opts.before) opts.before();
	    this.map.mark(node, "start");

	    this[node.type](node, this.buildPrint(node), parent);

	    if (needsParens) this.push(")");

	    this.map.mark(node, "end");
	    if (opts.after) opts.after();

	    this.format.concise = oldConcise;

	    this._printNewline(false, node, parent, opts);

	    this.printTrailingComments(node, parent);
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.printJoin = function printJoin(print, nodes) {
	    // istanbul ignore next

	    var _this = this;

	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (!nodes || !nodes.length) return;

	    var len = nodes.length;

	    if (opts.indent) this.indent();

	    var printOpts = {
	      statement: opts.statement,
	      addNewlines: opts.addNewlines,
	      after: function after() {
	        if (opts.iterator) {
	          opts.iterator(node, i);
	        }

	        if (opts.separator && i < len - 1) {
	          _this.push(opts.separator);
	        }
	      }
	    };

	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      print.plain(node, printOpts);
	    }

	    if (opts.indent) this.dedent();
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.printAndIndentOnComments = function printAndIndentOnComments(print, node) {
	    var indent = !!node.leadingComments;
	    if (indent) this.indent();
	    print.plain(node);
	    if (indent) this.dedent();
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.printBlock = function printBlock(print, node) {
	    if (t.isEmptyStatement(node)) {
	      this.semicolon();
	    } else {
	      this.push(" ");
	      print.plain(node);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.generateComment = function generateComment(comment) {
	    var val = comment.value;
	    if (comment.type === "CommentLine") {
	      val = "//" + val;
	    } else {
	      val = "/*" + val + "*/";
	    }
	    return val;
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.printTrailingComments = function printTrailingComments(node, parent) {
	    this._printComments(this.getComments("trailingComments", node, parent));
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.printLeadingComments = function printLeadingComments(node, parent) {
	    this._printComments(this.getComments("leadingComments", node, parent));
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.getComments = function getComments(key, node, parent) {
	    if (t.isExpressionStatement(parent)) {
	      return [];
	    }

	    var comments = [];
	    var nodes = [node];

	    if (t.isExpressionStatement(node)) {
	      nodes.push(node.argument);
	    }

	    var _arr2 = nodes;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var _node = _arr2[_i2];
	      comments = comments.concat(this._getComments(key, _node));
	    }

	    return comments;
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype._getComments = function _getComments(key, node) {
	    return node && node[key] || [];
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype.shouldPrintComment = function shouldPrintComment(comment) {
	    if (this.format.shouldPrintComment) {
	      return this.format.shouldPrintComment(comment.value);
	    } else {
	      if (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0) {
	        return true;
	      } else {
	        return this.format.comments;
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  CodeGenerator.prototype._printComments = function _printComments(comments) {
	    if (!comments || !comments.length) return;

	    var _arr3 = comments;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var comment = _arr3[_i3];
	      if (!this.shouldPrintComment(comment)) continue;
	      if (comment._displayed) continue;
	      comment._displayed = true;

	      this.catchUp(comment);

	      // whitespace before
	      this.newline(this.whitespace.getNewlinesBefore(comment));

	      var column = this.position.column;
	      var val = this.generateComment(comment);

	      if (column && !this.isLast(["\n", " ", "[", "{"])) {
	        this._push(" ");
	        column++;
	      }

	      //
	      if (comment.type === "CommentBlock" && this.format.indent.adjustMultilineComment) {
	        var offset = comment.loc && comment.loc.start.column;
	        if (offset) {
	          var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
	          val = val.replace(newlineRegex, "\n");
	        }

	        var indent = Math.max(this.indentSize(), column);
	        val = val.replace(/\n/g, "\n" + _repeating2["default"](" ", indent));
	      }

	      if (column === 0) {
	        val = this.getIndent() + val;
	      }

	      // force a newline for line comments when retainLines is set in case the next printed node
	      // doesn't catch up
	      if ((this.format.compact || this.format.retainLines) && comment.type === "CommentLine") {
	        val += "\n";
	      }

	      //
	      this._push(val);

	      // whitespace after
	      this.newline(this.whitespace.getNewlinesAfter(comment));
	    }
	  };

	  _createClass(CodeGenerator, null, [{
	    key: "generators",
	    value: {
	      templateLiterals: require("./generators/template-literals"),
	      comprehensions: require("./generators/comprehensions"),
	      expressions: require("./generators/expressions"),
	      statements: require("./generators/statements"),
	      classes: require("./generators/classes"),
	      methods: require("./generators/methods"),
	      modules: require("./generators/modules"),
	      types: require("./generators/types"),
	      flow: require("./generators/flow"),
	      base: require("./generators/base"),
	      jsx: require("./generators/jsx")
	    },
	    enumerable: true
	  }]);

	  return CodeGenerator;
	})();

	_lodashCollectionEach2["default"](_buffer2["default"].prototype, function (fn, key) {
	  CodeGenerator.prototype[key] = function () {
	    return fn.apply(this.buffer, arguments);
	  };
	});

	/**
	 * [Please add a description.]
	 */

	_lodashCollectionEach2["default"](CodeGenerator.generators, function (generator) {
	  _lodashObjectExtend2["default"](CodeGenerator.prototype, generator);
	});

	/**
	 * [Please add a description.]
	 */

	module.exports = function (ast, opts, code) {
	  var gen = new CodeGenerator(ast, opts, code);
	  return gen.generate();
	};

	module.exports.CodeGenerator = CodeGenerator;
	},{"../messages":60,"../types":193,"./buffer":35,"./generators/base":36,"./generators/classes":37,"./generators/comprehensions":38,"./generators/expressions":39,"./generators/flow":40,"./generators/jsx":41,"./generators/methods":42,"./generators/modules":43,"./generators/statements":44,"./generators/template-literals":45,"./generators/types":46,"./node":48,"./node/printer":50,"./position":52,"./source-map":53,"./whitespace":54,"detect-indent":315,"lodash/collection/each":339,"lodash/object/extend":439,"repeating":513}],48:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _whitespace = require("./whitespace");

	var _whitespace2 = _interopRequireDefault(_whitespace);

	var _parentheses = require("./parentheses");

	var parens = _interopRequireWildcard(_parentheses);

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashCollectionSome = require("lodash/collection/some");

	var _lodashCollectionSome2 = _interopRequireDefault(_lodashCollectionSome);

	var _types = require("../../types");

	/**
	 * Test if node matches a set of type-matcher pairs.
	 * @example
	 * find({
	 *   VariableDeclaration(node, parent) {
	 *     return true;
	 *   }
	 * }, node, parent);
	 */

	var t = _interopRequireWildcard(_types);

	var find = function find(obj, node, parent) {
	  if (!obj) return;
	  var result;

	  var types = Object.keys(obj);
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];

	    if (t.is(type, node)) {
	      var fn = obj[type];
	      result = fn(node, parent);
	      if (result != null) break;
	    }
	  }

	  return result;
	};

	/**
	 * Whitespace and Parenthesis related methods for nodes.
	 */

	var Node = (function () {
	  function Node(node, parent) {
	    _classCallCheck(this, Node);

	    this.parent = parent;
	    this.node = node;
	  }

	  /**
	   * Add all static methods from `Node` to `Node.prototype`.
	   */

	  /**
	   * Test if `node` can have whitespace set by the user.
	   */

	  Node.isUserWhitespacable = function isUserWhitespacable(node) {
	    return t.isUserWhitespacable(node);
	  };

	  /**
	   * Test if a `node` requires whitespace.
	   */

	  Node.needsWhitespace = function needsWhitespace(node, parent, type) {
	    if (!node) return 0;

	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }

	    var linesInfo = find(_whitespace2["default"].nodes, node, parent);

	    if (!linesInfo) {
	      var items = find(_whitespace2["default"].list, node, parent);
	      if (items) {
	        for (var i = 0; i < items.length; i++) {
	          linesInfo = Node.needsWhitespace(items[i], node, type);
	          if (linesInfo) break;
	        }
	      }
	    }

	    return linesInfo && linesInfo[type] || 0;
	  };

	  /**
	   * Test if a `node` requires whitespace before it.
	   */

	  Node.needsWhitespaceBefore = function needsWhitespaceBefore(node, parent) {
	    return Node.needsWhitespace(node, parent, "before");
	  };

	  /**
	   * Test if a `note` requires whitespace after it.
	   */

	  Node.needsWhitespaceAfter = function needsWhitespaceAfter(node, parent) {
	    return Node.needsWhitespace(node, parent, "after");
	  };

	  /**
	   * Test if a `node` needs parentheses around it.
	   */

	  Node.needsParens = function needsParens(node, parent) {
	    if (!parent) return false;

	    if (t.isNewExpression(parent) && parent.callee === node) {
	      if (t.isCallExpression(node)) return true;

	      var hasCall = _lodashCollectionSome2["default"](node, function (val) {
	        return t.isCallExpression(val);
	      });
	      if (hasCall) return true;
	    }

	    return find(parens, node, parent);
	  };

	  return Node;
	})();

	exports["default"] = Node;
	_lodashCollectionEach2["default"](Node, function (fn, key) {
	  Node.prototype[key] = function () {
	    // Avoid leaking arguments to prevent deoptimization
	    var args = new Array(arguments.length + 2);

	    args[0] = this.node;
	    args[1] = this.parent;

	    for (var i = 0; i < args.length; i++) {
	      args[i + 2] = arguments[i];
	    }

	    return Node[key].apply(null, args);
	  };
	});
	module.exports = exports["default"];
	},{"../../types":193,"./parentheses":49,"./whitespace":51,"lodash/collection/each":339,"lodash/collection/some":344}],49:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.UpdateExpression = UpdateExpression;
	exports.ObjectExpression = ObjectExpression;
	exports.Binary = Binary;
	exports.BinaryExpression = BinaryExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.YieldExpression = YieldExpression;
	exports.ClassExpression = ClassExpression;
	exports.UnaryLike = UnaryLike;
	exports.FunctionExpression = FunctionExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.AssignmentExpression = AssignmentExpression;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _types = require("../../types");

	/**
	 * Create a mapping of operators to precendence.
	 *
	 * @example
	 * { "==": 6, "+": 9 }
	 */

	var t = _interopRequireWildcard(_types);

	var PRECEDENCE = {};

	_lodashCollectionEach2["default"]([["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]], function (tier, i) {
	  _lodashCollectionEach2["default"](tier, function (op) {
	    PRECEDENCE[op] = i;
	  });
	});

	/**
	 * Test if NullableTypeAnnotation needs parentheses.
	 */

	function NullableTypeAnnotation(node, parent) {
	  return t.isArrayTypeAnnotation(parent);
	}

	/**
	 * Alias NullableTypeAnnotation test as FunctionTypeAnnotation.
	 */

	exports.FunctionTypeAnnotation = NullableTypeAnnotation;

	/**
	 * Test if UpdateExpression needs parentheses.
	 */

	function UpdateExpression(node, parent) {
	  if (t.isMemberExpression(parent) && parent.object === node) {
	    // (foo++).test()
	    return true;
	  }
	}

	/**
	 * Test if ObjectExpression needs parentheses.
	 */

	function ObjectExpression(node, parent) {
	  if (t.isExpressionStatement(parent)) {
	    // ({ foo: "bar" });
	    return true;
	  }

	  if (t.isMemberExpression(parent) && parent.object === node) {
	    // ({ foo: "bar" }).foo
	    return true;
	  }

	  return false;
	}

	/**
	 * Test if Binary needs parentheses.
	 */

	function Binary(node, parent) {
	  if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
	    return true;
	  }

	  if (t.isUnaryLike(parent)) {
	    return true;
	  }

	  if (t.isMemberExpression(parent) && parent.object === node) {
	    return true;
	  }

	  if (t.isBinary(parent)) {
	    var parentOp = parent.operator;
	    var parentPos = PRECEDENCE[parentOp];

	    var nodeOp = node.operator;
	    var nodePos = PRECEDENCE[nodeOp];

	    if (parentPos > nodePos) {
	      return true;
	    }

	    if (parentPos === nodePos && parent.right === node) {
	      return true;
	    }
	  }
	}

	/**
	 * Test if BinaryExpression needs parentheses.
	 */

	function BinaryExpression(node, parent) {
	  if (node.operator === "in") {
	    // var i = (1 in []);
	    if (t.isVariableDeclarator(parent)) {
	      return true;
	    }

	    // for ((1 in []);;);
	    if (t.isFor(parent)) {
	      return true;
	    }
	  }
	}

	/**
	 * Test if SequenceExpression needs parentheses.
	 */

	function SequenceExpression(node, parent) {
	  if (t.isForStatement(parent)) {
	    // Although parentheses wouldn't hurt around sequence
	    // expressions in the head of for loops, traditional style
	    // dictates that e.g. i++, j++ should not be wrapped with
	    // parentheses.
	    return false;
	  }

	  if (t.isExpressionStatement(parent) && parent.expression === node) {
	    return false;
	  }

	  // Otherwise err on the side of overparenthesization, adding
	  // explicit exceptions above if this proves overzealous.
	  return true;
	}

	/**
	 * Test if YieldExpression needs parentheses.
	 */

	function YieldExpression(node, parent) {
	  return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent) || t.isConditionalExpression(parent) || t.isYieldExpression(parent);
	}

	/**
	 * Test if ClassExpression needs parentheses.
	 */

	function ClassExpression(node, parent) {
	  return t.isExpressionStatement(parent);
	}

	/**
	 * Test if UnaryLike needs parentheses.
	 */

	function UnaryLike(node, parent) {
	  return t.isMemberExpression(parent) && parent.object === node;
	}

	/**
	 * Test if FunctionExpression needs parentheses.
	 */

	function FunctionExpression(node, parent) {
	  // function () {};
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }

	  // (function test() {}).name;
	  if (t.isMemberExpression(parent) && parent.object === node) {
	    return true;
	  }

	  // (function () {})();
	  if (t.isCallExpression(parent) && parent.callee === node) {
	    return true;
	  }
	}

	/**
	 * Test if ConditionalExpression needs parentheses.
	 */

	function ConditionalExpression(node, parent) {
	  if (t.isUnaryLike(parent)) {
	    return true;
	  }

	  if (t.isBinary(parent)) {
	    return true;
	  }

	  if (t.isCallExpression(parent) || t.isNewExpression(parent)) {
	    if (parent.callee === node) {
	      return true;
	    }
	  }

	  if (t.isConditionalExpression(parent) && parent.test === node) {
	    return true;
	  }

	  if (t.isMemberExpression(parent) && parent.object === node) {
	    return true;
	  }

	  return false;
	}

	/**
	 * Test if AssignmentExpression needs parentheses.
	 */

	function AssignmentExpression(node) {
	  if (t.isObjectPattern(node.left)) {
	    return true;
	  } else {
	    return ConditionalExpression.apply(undefined, arguments);
	  }
	}
	},{"../../types":193,"lodash/collection/each":339}],50:[function(require,module,exports){
	/**
	 * Printer for nodes, needs a `generator` and a `parent`.
	 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NodePrinter = (function () {
	  function NodePrinter(generator, parent) {
	    _classCallCheck(this, NodePrinter);

	    this.generator = generator;
	    this.parent = parent;
	  }

	  /**
	   * Description
	   */

	  NodePrinter.prototype.printInnerComments = function printInnerComments() {
	    if (!this.parent.innerComments) return;
	    var gen = this.generator;
	    gen.indent();
	    gen._printComments(this.parent.innerComments);
	    gen.dedent();
	  };

	  /**
	   * Print a plain node.
	   */

	  NodePrinter.prototype.plain = function plain(node, opts) {
	    return this.generator.print(node, this.parent, opts);
	  };

	  /**
	   * Print a sequence of nodes as statements.
	   */

	  NodePrinter.prototype.sequence = function sequence(nodes) {
	    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    opts.statement = true;
	    return this.generator.printJoin(this, nodes, opts);
	  };

	  /**
	   * Print a sequence of nodes as expressions.
	   */

	  NodePrinter.prototype.join = function join(nodes, opts) {
	    return this.generator.printJoin(this, nodes, opts);
	  };

	  /**
	   * Print a list of nodes, with a customizable separator (defaults to ",").
	   */

	  NodePrinter.prototype.list = function list(items) {
	    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    if (opts.separator == null) {
	      opts.separator = ",";
	      if (!this.generator.format.compact) opts.separator += " ";
	    }

	    return this.join(items, opts);
	  };

	  /**
	   * Print a block-like node.
	   */

	  NodePrinter.prototype.block = function block(node) {
	    return this.generator.printBlock(this, node);
	  };

	  /**
	   * Print node and indent comments.
	   */

	  NodePrinter.prototype.indentOnComments = function indentOnComments(node) {
	    return this.generator.printAndIndentOnComments(this, node);
	  };

	  return NodePrinter;
	})();

	exports["default"] = NodePrinter;
	module.exports = exports["default"];
	},{}],51:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashLangIsBoolean = require("lodash/lang/isBoolean");

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashCollectionMap = require("lodash/collection/map");

	var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);

	var _types = require("../../types");

	/**
	 * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.
	 *
	 * @example
	 * crawl(node)
	 * // { hasCall: false, hasFunction: true, hasHelper: false }
	 */

	var t = _interopRequireWildcard(_types);

	function crawl(node) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  if (t.isMemberExpression(node)) {
	    crawl(node.object, state);
	    if (node.computed) crawl(node.property, state);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    crawl(node.left, state);
	    crawl(node.right, state);
	  } else if (t.isCallExpression(node)) {
	    state.hasCall = true;
	    crawl(node.callee, state);
	  } else if (t.isFunction(node)) {
	    state.hasFunction = true;
	  } else if (t.isIdentifier(node)) {
	    state.hasHelper = state.hasHelper || isHelper(node.callee);
	  }

	  return state;
	}

	/**
	 * Test if a node is or has a helper.
	 */

	function isHelper(node) {
	  if (t.isMemberExpression(node)) {
	    return isHelper(node.object) || isHelper(node.property);
	  } else if (t.isIdentifier(node)) {
	    return node.name === "require" || node.name[0] === "_";
	  } else if (t.isCallExpression(node)) {
	    return isHelper(node.callee);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
	  } else {
	    return false;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function isType(node) {
	  return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
	}

	/**
	 * Tests for node types that need whitespace.
	 */

	exports.nodes = {

	  /**
	   * Test if AssignmentExpression needs whitespace.
	   */

	  AssignmentExpression: function AssignmentExpression(node) {
	    var state = crawl(node.right);
	    if (state.hasCall && state.hasHelper || state.hasFunction) {
	      return {
	        before: state.hasFunction,
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if SwitchCase needs whitespace.
	   */

	  SwitchCase: function SwitchCase(node, parent) {
	    return {
	      before: node.consequent.length || parent.cases[0] === node
	    };
	  },

	  /**
	   * Test if LogicalExpression needs whitespace.
	   */

	  LogicalExpression: function LogicalExpression(node) {
	    if (t.isFunction(node.left) || t.isFunction(node.right)) {
	      return {
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if Literal needs whitespace.
	   */

	  Literal: function Literal(node) {
	    if (node.value === "use strict") {
	      return {
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if CallExpression needs whitespace.
	   */

	  CallExpression: function CallExpression(node) {
	    if (t.isFunction(node.callee) || isHelper(node)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if VariableDeclaration needs whitespace.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];

	      var enabled = isHelper(declar.id) && !isType(declar.init);
	      if (!enabled) {
	        var state = crawl(declar.init);
	        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
	      }

	      if (enabled) {
	        return {
	          before: true,
	          after: true
	        };
	      }
	    }
	  },

	  /**
	   * Test if IfStatement needs whitespace.
	   */

	  IfStatement: function IfStatement(node) {
	    if (t.isBlockStatement(node.consequent)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  }
	};

	/**
	 * Test if Property or SpreadProperty needs whitespace.
	 */

	exports.nodes.Property = exports.nodes.SpreadProperty = function (node, parent) {
	  if (parent.properties[0] === node) {
	    return {
	      before: true
	    };
	  }
	};

	/**
	 * Returns lists from node types that need whitespace.
	 */

	exports.list = {

	  /**
	   * Return VariableDeclaration declarations init properties.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    return _lodashCollectionMap2["default"](node.declarations, "init");
	  },

	  /**
	   * Return VariableDeclaration elements.
	   */

	  ArrayExpression: function ArrayExpression(node) {
	    return node.elements;
	  },

	  /**
	   * Return VariableDeclaration properties.
	   */

	  ObjectExpression: function ObjectExpression(node) {
	    return node.properties;
	  }
	};

	/**
	 * Add whitespace tests for nodes and their aliases.
	 */

	_lodashCollectionEach2["default"]({
	  Function: true,
	  Class: true,
	  Loop: true,
	  LabeledStatement: true,
	  SwitchStatement: true,
	  TryStatement: true
	}, function (amounts, type) {
	  if (_lodashLangIsBoolean2["default"](amounts)) {
	    amounts = { after: amounts, before: amounts };
	  }

	  _lodashCollectionEach2["default"]([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function (type) {
	    exports.nodes[type] = function () {
	      return amounts;
	    };
	  });
	});
	},{"../../types":193,"lodash/collection/each":339,"lodash/collection/map":342,"lodash/lang/isBoolean":426}],52:[function(require,module,exports){
	/**
	 * Track current position in code generation.
	 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Position = (function () {
	  function Position() {
	    _classCallCheck(this, Position);

	    this.line = 1;
	    this.column = 0;
	  }

	  /**
	   * Push a string to the current position, mantaining the current line and column.
	   */

	  Position.prototype.push = function push(str) {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line++;
	        this.column = 0;
	      } else {
	        this.column++;
	      }
	    }
	  };

	  /**
	   * Unshift a string from the current position, mantaining the current line and column.
	   */

	  Position.prototype.unshift = function unshift(str) {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line--;
	      } else {
	        this.column--;
	      }
	    }
	  };

	  return Position;
	})();

	exports["default"] = Position;
	module.exports = exports["default"];
	},{}],53:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _sourceMap = require("source-map");

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _types = require("../types");

	/**
	 * Build a sourcemap.
	 */

	var t = _interopRequireWildcard(_types);

	var SourceMap = (function () {
	  function SourceMap(position, opts, code) {
	    _classCallCheck(this, SourceMap);

	    this.position = position;
	    this.opts = opts;

	    if (opts.sourceMaps) {
	      this.map = new _sourceMap2["default"].SourceMapGenerator({
	        file: opts.sourceMapTarget,
	        sourceRoot: opts.sourceRoot
	      });

	      this.map.setSourceContent(opts.sourceFileName, code);
	    } else {
	      this.map = null;
	    }
	  }

	  /**
	   * Get the sourcemap.
	   */

	  SourceMap.prototype.get = function get() {
	    var map = this.map;
	    if (map) {
	      return map.toJSON();
	    } else {
	      return map;
	    }
	  };

	  /**
	   * Mark a node's generated position, and add it to the sourcemap.
	   */

	  SourceMap.prototype.mark = function mark(node, type) {
	    var loc = node.loc;
	    if (!loc) return; // no location info

	    var map = this.map;
	    if (!map) return; // no source map

	    if (t.isProgram(node) || t.isFile(node)) return; // illegal mapping nodes

	    var position = this.position;

	    var generated = {
	      line: position.line,
	      column: position.column
	    };

	    var original = loc[type];

	    map.addMapping({
	      source: this.opts.sourceFileName,
	      generated: generated,
	      original: original
	    });
	  };

	  return SourceMap;
	})();

	exports["default"] = SourceMap;
	module.exports = exports["default"];
	},{"../types":193,"source-map":518}],54:[function(require,module,exports){
	/**
	 * Returns `i`th number from `base`, continuing from 0 when `max` is reached.
	 * Useful for shifting `for` loop by a fixed number but going over all items.
	 *
	 * @param {Number} i Current index in the loop
	 * @param {Number} base Start index for which to return 0
	 * @param {Number} max Array length
	 * @returns {Number} shiftedIndex
	 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function getLookupIndex(i, base, max) {
	  i += base;

	  if (i >= max) {
	    i -= max;
	  }

	  return i;
	}

	/**
	 * Get whitespace around tokens.
	 */

	var Whitespace = (function () {
	  function Whitespace(tokens) {
	    _classCallCheck(this, Whitespace);

	    this.tokens = tokens;
	    this.used = {};

	    // Profiling this code shows that while generator passes over it, indexes
	    // returned by `getNewlinesBefore` and `getNewlinesAfter` are always increasing.

	    // We use this implementation detail for an optimization: instead of always
	    // starting to look from `this.tokens[0]`, we will start `for` loops from the
	    // previous successful match. We will enumerate all tokens—but the common
	    // case will be much faster.

	    this._lastFoundIndex = 0;
	  }

	  /**
	   * Count all the newlines before a node.
	   */

	  Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
	    var startToken;
	    var endToken;
	    var tokens = this.tokens;

	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];

	      // this is the token this node starts with
	      if (node.start === token.start) {
	        startToken = tokens[i - 1];
	        endToken = token;

	        this._lastFoundIndex = i;
	        break;
	      }
	    }

	    return this.getNewlinesBetween(startToken, endToken);
	  };

	  /**
	   * Count all the newlines after a node.
	   */

	  Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
	    var startToken;
	    var endToken;
	    var tokens = this.tokens;

	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];

	      // this is the token this node ends with
	      if (node.end === token.end) {
	        startToken = token;
	        endToken = tokens[i + 1];
	        if (endToken.type.label === ",") endToken = tokens[i + 2];

	        this._lastFoundIndex = i;
	        break;
	      }
	    }

	    if (endToken && endToken.type.label === "eof") {
	      return 1;
	    } else {
	      var lines = this.getNewlinesBetween(startToken, endToken);
	      if (node.type === "CommentLine" && !lines) {
	        // line comment
	        return 1;
	      } else {
	        return lines;
	      }
	    }
	  };

	  /**
	   * Count all the newlines between two tokens.
	   */

	  Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
	    if (!endToken || !endToken.loc) return 0;

	    var start = startToken ? startToken.loc.end.line : 1;
	    var end = endToken.loc.start.line;
	    var lines = 0;

	    for (var line = start; line < end; line++) {
	      if (typeof this.used[line] === "undefined") {
	        this.used[line] = true;
	        lines++;
	      }
	    }

	    return lines;
	  };

	  return Whitespace;
	})();

	exports["default"] = Whitespace;
	module.exports = exports["default"];
	},{}],55:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lineNumbers = require("line-numbers");

	var _lineNumbers2 = _interopRequireDefault(_lineNumbers);

	var _repeating = require("repeating");

	var _repeating2 = _interopRequireDefault(_repeating);

	var _jsTokens = require("js-tokens");

	var _jsTokens2 = _interopRequireDefault(_jsTokens);

	var _esutils = require("esutils");

	var _esutils2 = _interopRequireDefault(_esutils);

	var _chalk = require("chalk");

	/**
	 * Chalk styles for token types.
	 */

	var _chalk2 = _interopRequireDefault(_chalk);

	var defs = {
	  string: _chalk2["default"].red,
	  punctuator: _chalk2["default"].bold,
	  curly: _chalk2["default"].green,
	  parens: _chalk2["default"].blue.bold,
	  square: _chalk2["default"].yellow,
	  keyword: _chalk2["default"].cyan,
	  number: _chalk2["default"].magenta,
	  regex: _chalk2["default"].magenta,
	  comment: _chalk2["default"].grey,
	  invalid: _chalk2["default"].inverse
	};

	/**
	 * RegExp to test for newlines in terminal.
	 */

	var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

	/**
	 * Get the type of token, specifying punctuator type.
	 */

	function getTokenType(match) {
	  var token = _jsTokens2["default"].matchToToken(match);
	  if (token.type === "name" && _esutils2["default"].keyword.isReservedWordES6(token.value)) {
	    return "keyword";
	  }

	  if (token.type === "punctuator") {
	    switch (token.value) {
	      case "{":
	      case "}":
	        return "curly";
	      case "(":
	      case ")":
	        return "parens";
	      case "[":
	      case "]":
	        return "square";
	    }
	  }

	  return token.type;
	}

	/**
	 * Highlight `text`.
	 */

	function highlight(text) {
	  return text.replace(_jsTokens2["default"], function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var type = getTokenType(args);
	    var colorize = defs[type];
	    if (colorize) {
	      return args[0].split(NEWLINE).map(function (str) {
	        return colorize(str);
	      }).join("\n");
	    } else {
	      return args[0];
	    }
	  });
	}

	/**
	 * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.
	 */

	exports["default"] = function (lines, lineNumber, colNumber) {
	  var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	  colNumber = Math.max(colNumber, 0);

	  var highlighted = opts.highlightCode && _chalk2["default"].supportsColor;
	  if (highlighted) lines = highlight(lines);

	  lines = lines.split(NEWLINE);

	  var start = Math.max(lineNumber - 3, 0);
	  var end = Math.min(lines.length, lineNumber + 3);

	  if (!lineNumber && !colNumber) {
	    start = 0;
	    end = lines.length;
	  }

	  var frame = _lineNumbers2["default"](lines.slice(start, end), {
	    start: start + 1,
	    before: "  ",
	    after: " | ",
	    transform: function transform(params) {
	      if (params.number !== lineNumber) {
	        return;
	      }

	      if (colNumber) {
	        params.line += "\n" + params.before + _repeating2["default"](" ", params.width) + params.after + _repeating2["default"](" ", colNumber - 1) + "^";
	      }

	      params.before = params.before.replace(/^./, ">");
	    }
	  }).join("\n");

	  if (highlighted) {
	    return _chalk2["default"].reset(frame);
	  } else {
	    return frame;
	  }
	};

	module.exports = exports["default"];
	},{"chalk":214,"esutils":319,"js-tokens":330,"line-numbers":331,"repeating":513}],56:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashObjectMerge = require("lodash/object/merge");

	/**
	 * Merge options.
	 */

	var _lodashObjectMerge2 = _interopRequireDefault(_lodashObjectMerge);

	exports["default"] = function (dest, src) {
	  if (!dest || !src) return;

	  return _lodashObjectMerge2["default"](dest, src, function (a, b) {
	    if (b && Array.isArray(a)) {
	      var c = a.slice(0);
	      for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var v = _ref;

	        if (a.indexOf(v) < 0) {
	          c.push(v);
	        }
	      }
	      return c;
	    }
	  });
	};

	module.exports = exports["default"];
	},{"lodash/object/merge":443}],57:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../types");

	/**
	 * Normalize an AST.
	 *
	 * - Wrap `Program` node with a `File` node.
	 */

	var t = _interopRequireWildcard(_types);

	exports["default"] = function (ast, comments, tokens) {
	  if (ast && ast.type === "Program") {
	    return t.file(ast, comments || [], tokens || []);
	  } else {
	    throw new Error("Not a valid ast?");
	  }
	};

	module.exports = exports["default"];
	},{"../types":193}],58:[function(require,module,exports){
	/**
	 * Create an object with a `null` prototype.
	 */

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return Object.create(null);
	};

	module.exports = exports["default"];
	},{}],59:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _babylon = require("babylon");

	/**
	 * Parse `code` with normalized options, collecting tokens and comments.
	 */

	var babylon = _interopRequireWildcard(_babylon);

	exports["default"] = function (code) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var parseOpts = {
	    allowImportExportEverywhere: opts.looseModules,
	    allowReturnOutsideFunction: opts.looseModules,
	    allowHashBang: true,
	    ecmaVersion: 6,
	    strictMode: opts.strictMode,
	    sourceType: opts.sourceType,
	    locations: true,
	    features: opts.features || {},
	    plugins: opts.plugins || {}
	  };

	  if (opts.nonStandard) {
	    parseOpts.plugins.jsx = true;
	    parseOpts.plugins.flow = true;
	  }

	  return babylon.parse(code, parseOpts);
	};

	module.exports = exports["default"];
	},{"babylon":536}],60:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.get = get;
	exports.parseArgs = parseArgs;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _util = require("util");

	/**
	 * Mapping of messages to be used in Babel.
	 * Messages can include $0-style placeholders.
	 */

	var util = _interopRequireWildcard(_util);

	var MESSAGES = {
	  tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
	  JSXNamespacedTags: "Namespace tags are not supported. ReactJSX is not XML.",
	  classesIllegalBareSuper: "Illegal use of bare super",
	  classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
	  scopeDuplicateDeclaration: "Duplicate declaration $1",
	  settersNoRest: "Setters aren't allowed to have a rest",
	  noAssignmentsInForHead: "No assignments allowed in for-in/of head",
	  expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
	  invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
	  readOnly: "$1 is read-only",
	  unknownForHead: "Unknown node type $1 in ForStatement",
	  didYouMean: "Did you mean $1?",
	  codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
	  missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
	  unsupportedOutputType: "Unsupported output type $1",
	  illegalMethodName: "Illegal method name $1",
	  lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",

	  modulesIllegalExportName: "Illegal export $1",
	  modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",

	  undeclaredVariable: "Reference to undeclared variable $1",
	  undeclaredVariableType: "Referencing a type alias outside of a type annotation",
	  undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",

	  traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File got a $1 node",
	  traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
	  traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
	  traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",

	  pluginIllegalKind: "Illegal kind $1 for plugin $2",
	  pluginIllegalPosition: "Illegal position $1 for plugin $2",
	  pluginKeyCollision: "The plugin $1 collides with another of the same name",
	  pluginNotTransformer: "The plugin $1 didn't export a Plugin instance",
	  pluginUnknown: "Unknown plugin $1",

	  pluginNotFile: "Plugin $1 is resolving to a different Babel version than what is performing the transformation.",

	  pluginInvalidProperty: "Plugin $1 provided an invalid property of $2.",
	  pluginInvalidPropertyVisitor: "Define your visitor methods inside a `visitor` property like so:\n\n  new Plugin(\"foobar\", {\n    visitor: {\n      // define your visitor methods here!\n    }\n  });\n"
	};

	/**
	 * Get a message with $0 placeholders replaced by arguments.
	 */

	exports.MESSAGES = MESSAGES;

	function get(key) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  var msg = MESSAGES[key];
	  if (!msg) throw new ReferenceError("Unknown message " + JSON.stringify(key));

	  // stringify args
	  args = parseArgs(args);

	  // replace $0 placeholders with args
	  return msg.replace(/\$(\d+)/g, function (str, i) {
	    return args[--i];
	  });
	}

	/**
	 * Stingify arguments to be used inside messages.
	 */

	function parseArgs(args) {
	  return args.map(function (val) {
	    if (val != null && val.inspect) {
	      return val.inspect();
	    } else {
	      try {
	        return JSON.stringify(val) || val + "";
	      } catch (e) {
	        return util.inspect(val);
	      }
	    }
	  });
	}
	},{"util":30}],61:[function(require,module,exports){
	(function (global){
	"use strict";

	require("core-js/shim");

	require("regenerator/runtime");

	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel/polyfill is allowed");
	}
	global._babelPolyfill = true;
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"core-js/shim":311,"regenerator/runtime":506}],62:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _generation = require("../generation");

	var _generation2 = _interopRequireDefault(_generation);

	var _messages = require("../messages");

	var messages = _interopRequireWildcard(_messages);

	var _util = require("../util");

	var util = _interopRequireWildcard(_util);

	var _transformationFile = require("../transformation/file");

	var _transformationFile2 = _interopRequireDefault(_transformationFile);

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _types = require("../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function buildGlobal(namespace, builder) {
	  var body = [];
	  var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
	  var tree = t.program([t.expressionStatement(t.callExpression(container, [util.template("helper-self-global")]))]);

	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));

	  builder(body);

	  return tree;
	}

	/**
	 * [Please add a description.]
	 */

	function buildUmd(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));

	  builder(body);

	  var container = util.template("umd-commonjs-strict", {
	    FACTORY_PARAMETERS: t.identifier("global"),
	    BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression({})),
	    COMMON_ARGUMENTS: t.identifier("exports"),
	    AMD_ARGUMENTS: t.arrayExpression([t.literal("exports")]),
	    FACTORY_BODY: body,
	    UMD_ROOT: t.identifier("this")
	  });
	  return t.program([container]);
	}

	/**
	 * [Please add a description.]
	 */

	function buildVar(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression({}))]));
	  builder(body);
	  return t.program(body);
	}

	/**
	 * [Please add a description.]
	 */

	function buildHelpers(body, namespace, whitelist) {
	  _lodashCollectionEach2["default"](_transformationFile2["default"].helpers, function (name) {
	    if (whitelist && whitelist.indexOf(name) === -1) return;

	    var key = t.identifier(t.toIdentifier(name));
	    body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), util.template("helper-" + name))));
	  });
	}

	/**
	 * [Please add a description.]
	 */

	exports["default"] = function (whitelist) {
	  var outputType = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];

	  var namespace = t.identifier("babelHelpers");

	  var builder = function builder(body) {
	    return buildHelpers(body, namespace, whitelist);
	  };

	  var tree;

	  var build = ({
	    global: buildGlobal,
	    umd: buildUmd,
	    "var": buildVar
	  })[outputType];

	  if (build) {
	    tree = build(namespace, builder);
	  } else {
	    throw new Error(messages.get("unsupportedOutputType", outputType));
	  }

	  return _generation2["default"](tree).code;
	};

	module.exports = exports["default"];
	},{"../generation":47,"../messages":60,"../transformation/file":63,"../types":193,"../util":196,"lodash/collection/each":339}],63:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _convertSourceMap = require("convert-source-map");

	var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);

	var _modules = require("../modules");

	var _modules2 = _interopRequireDefault(_modules);

	var _optionsOptionManager = require("./options/option-manager");

	var _optionsOptionManager2 = _interopRequireDefault(_optionsOptionManager);

	var _pluginManager = require("./plugin-manager");

	var _pluginManager2 = _interopRequireDefault(_pluginManager);

	var _shebangRegex = require("shebang-regex");

	var _shebangRegex2 = _interopRequireDefault(_shebangRegex);

	var _traversalPath = require("../../traversal/path");

	var _traversalPath2 = _interopRequireDefault(_traversalPath);

	var _lodashLangIsFunction = require("lodash/lang/isFunction");

	var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);

	var _sourceMap = require("source-map");

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _generation = require("../../generation");

	var _generation2 = _interopRequireDefault(_generation);

	var _helpersCodeFrame = require("../../helpers/code-frame");

	var _helpersCodeFrame2 = _interopRequireDefault(_helpersCodeFrame);

	var _lodashObjectDefaults = require("lodash/object/defaults");

	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _traversal = require("../../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _tryResolve = require("try-resolve");

	var _tryResolve2 = _interopRequireDefault(_tryResolve);

	var _logger = require("./logger");

	var _logger2 = _interopRequireDefault(_logger);

	var _plugin = require("../plugin");

	var _plugin2 = _interopRequireDefault(_plugin);

	var _helpersParse = require("../../helpers/parse");

	var _helpersParse2 = _interopRequireDefault(_helpersParse);

	var _traversalHub = require("../../traversal/hub");

	var _traversalHub2 = _interopRequireDefault(_traversalHub);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _path = require("path");

	var _path2 = _interopRequireDefault(_path);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var File = (function () {
	  function File(opts, pipeline) {
	    if (opts === undefined) opts = {};

	    _classCallCheck(this, File);

	    this.transformerDependencies = {};

	    this.dynamicImportTypes = {};
	    this.dynamicImportIds = {};
	    this.dynamicImports = [];

	    this.declarations = {};
	    this.usedHelpers = {};
	    this.dynamicData = {};
	    this.data = {};

	    this.metadata = {
	      modules: {
	        imports: [],
	        exports: {
	          exported: [],
	          specifiers: []
	        }
	      }
	    };

	    this.pipeline = pipeline;
	    this.log = new _logger2["default"](this, opts.filename || "unknown");
	    this.opts = this.initOptions(opts);
	    this.ast = {};

	    this.buildTransformers();

	    this.hub = new _traversalHub2["default"](this);
	  }

	  /**
	   * [Please add a description.]
	   */

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.initOptions = function initOptions(opts) {
	    opts = new _optionsOptionManager2["default"](this.log, this.pipeline).init(opts);

	    if (opts.inputSourceMap) {
	      opts.sourceMaps = true;
	    }

	    if (opts.moduleId) {
	      opts.moduleIds = true;
	    }

	    opts.basename = _path2["default"].basename(opts.filename, _path2["default"].extname(opts.filename));

	    opts.ignore = util.arrayify(opts.ignore, util.regexify);

	    if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);

	    _lodashObjectDefaults2["default"](opts, {
	      moduleRoot: opts.sourceRoot
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      sourceRoot: opts.moduleRoot
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      filenameRelative: opts.filename
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      sourceFileName: opts.filenameRelative,
	      sourceMapTarget: opts.filenameRelative
	    });

	    //

	    if (opts.externalHelpers) {
	      this.set("helpersNamespace", t.identifier("babelHelpers"));
	    }

	    return opts;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.isLoose = function isLoose(key) {
	    return _lodashCollectionIncludes2["default"](this.opts.loose, key);
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.buildTransformers = function buildTransformers() {
	    var file = this;

	    var transformers = this.transformers = {};

	    var secondaryStack = [];
	    var stack = [];

	    // build internal transformers
	    for (var key in this.pipeline.transformers) {
	      var transformer = this.pipeline.transformers[key];
	      var pass = transformers[key] = transformer.buildPass(file);

	      if (pass.canTransform()) {
	        stack.push(pass);

	        if (transformer.metadata.secondPass) {
	          secondaryStack.push(pass);
	        }

	        if (transformer.manipulateOptions) {
	          transformer.manipulateOptions(file.opts, file);
	        }
	      }
	    }

	    // init plugins!
	    var beforePlugins = [];
	    var afterPlugins = [];
	    var pluginManager = new _pluginManager2["default"]({
	      file: this,
	      transformers: this.transformers,
	      before: beforePlugins,
	      after: afterPlugins
	    });
	    for (var i = 0; i < file.opts.plugins.length; i++) {
	      pluginManager.add(file.opts.plugins[i]);
	    }
	    stack = beforePlugins.concat(stack, afterPlugins);

	    // build transformer stack
	    this.uncollapsedTransformerStack = stack = stack.concat(secondaryStack);

	    // build dependency graph
	    var _arr = stack;

	    // collapse stack categories
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var pass = _arr[_i];var _arr2 = pass.plugin.dependencies;

	      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	        var dep = _arr2[_i2];
	        this.transformerDependencies[dep] = pass.key;
	      }
	    }this.transformerStack = this.collapseStack(stack);
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.collapseStack = function collapseStack(_stack) {
	    var stack = [];
	    var ignore = [];

	    var _arr3 = _stack;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var pass = _arr3[_i3];
	      // been merged
	      if (ignore.indexOf(pass) >= 0) continue;

	      var group = pass.plugin.metadata.group;

	      // can't merge
	      if (!pass.canTransform() || !group) {
	        stack.push(pass);
	        continue;
	      }

	      var mergeStack = [];
	      var _arr4 = _stack;
	      for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
	        var _pass = _arr4[_i4];
	        if (_pass.plugin.metadata.group === group) {
	          mergeStack.push(_pass);
	          ignore.push(_pass);
	        }
	      }

	      var visitors = [];
	      var _arr5 = mergeStack;
	      for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
	        var _pass2 = _arr5[_i5];
	        visitors.push(_pass2.plugin.visitor);
	      }
	      var visitor = _traversal2["default"].visitors.merge(visitors);
	      var mergePlugin = new _plugin2["default"](group, { visitor: visitor });
	      stack.push(mergePlugin.buildPass(this));
	    }

	    return stack;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.set = function set(key, val) {
	    return this.data[key] = val;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.setDynamic = function setDynamic(key, fn) {
	    this.dynamicData[key] = fn;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.get = function get(key) {
	    var data = this.data[key];
	    if (data) {
	      return data;
	    } else {
	      var dynamic = this.dynamicData[key];
	      if (dynamic) {
	        return this.set(key, dynamic());
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.resolveModuleSource = function resolveModuleSource(source) {
	    var resolveModuleSource = this.opts.resolveModuleSource;
	    if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);
	    return source;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.addImport = function addImport(source, name, type) {
	    name = name || source;
	    var id = this.dynamicImportIds[name];

	    if (!id) {
	      source = this.resolveModuleSource(source);
	      id = this.dynamicImportIds[name] = this.scope.generateUidIdentifier(name);

	      var specifiers = [t.importDefaultSpecifier(id)];
	      var declar = t.importDeclaration(specifiers, t.literal(source));
	      declar._blockHoist = 3;

	      if (type) {
	        var modules = this.dynamicImportTypes[type] = this.dynamicImportTypes[type] || [];
	        modules.push(declar);
	      }

	      if (this.transformers["es6.modules"].canTransform()) {
	        this.moduleFormatter.importSpecifier(specifiers[0], declar, this.dynamicImports, this.scope);
	        this.moduleFormatter.hasLocalImports = true;
	      } else {
	        this.dynamicImports.push(declar);
	      }
	    }

	    return id;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.attachAuxiliaryComment = function attachAuxiliaryComment(node) {
	    var beforeComment = this.opts.auxiliaryCommentBefore;
	    if (beforeComment) {
	      node.leadingComments = node.leadingComments || [];
	      node.leadingComments.push({
	        type: "CommentLine",
	        value: " " + beforeComment
	      });
	    }

	    var afterComment = this.opts.auxiliaryCommentAfter;
	    if (afterComment) {
	      node.trailingComments = node.trailingComments || [];
	      node.trailingComments.push({
	        type: "CommentLine",
	        value: " " + afterComment
	      });
	    }

	    return node;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.addHelper = function addHelper(name) {
	    var isSolo = _lodashCollectionIncludes2["default"](File.soloHelpers, name);

	    if (!isSolo && !_lodashCollectionIncludes2["default"](File.helpers, name)) {
	      throw new ReferenceError("Unknown helper " + name);
	    }

	    var declar = this.declarations[name];
	    if (declar) return declar;

	    this.usedHelpers[name] = true;

	    if (!isSolo) {
	      var generator = this.get("helperGenerator");
	      var runtime = this.get("helpersNamespace");
	      if (generator) {
	        return generator(name);
	      } else if (runtime) {
	        var id = t.identifier(t.toIdentifier(name));
	        return t.memberExpression(runtime, id);
	      }
	    }

	    var ref = util.template("helper-" + name);

	    var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);

	    if (t.isFunctionExpression(ref) && !ref.id) {
	      ref.body._compact = true;
	      ref._generated = true;
	      ref.id = uid;
	      ref.type = "FunctionDeclaration";
	      this.attachAuxiliaryComment(ref);
	      this.path.unshiftContainer("body", ref);
	    } else {
	      ref._compact = true;
	      this.scope.push({
	        id: uid,
	        init: ref,
	        unique: true
	      });
	    }

	    return uid;
	  };

	  File.prototype.addTemplateObject = function addTemplateObject(helperName, strings, raw) {
	    // Generate a unique name based on the string literals so we dedupe
	    // identical strings used in the program.
	    var stringIds = raw.elements.map(function (string) {
	      return string.value;
	    });
	    var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");

	    var declar = this.declarations[name];
	    if (declar) return declar;

	    var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");

	    var helperId = this.addHelper(helperName);
	    var init = t.callExpression(helperId, [strings, raw]);
	    init._compact = true;
	    this.scope.push({
	      id: uid,
	      init: init,
	      _blockHoist: 1.9 // This ensures that we don't fail if not using function expression helpers
	    });
	    return uid;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.errorWithNode = function errorWithNode(node, msg) {
	    var Error = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];

	    var err;
	    var loc = node && (node.loc || node._loc);
	    if (loc) {
	      err = new Error("Line " + loc.start.line + ": " + msg);
	      err.loc = loc.start;
	    } else {
	      // todo: find errors with nodes inside to at least point to something
	      err = new Error("There's been an error on a dynamic node. This is almost certainly an internal error. Please report it.");
	    }
	    return err;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.mergeSourceMap = function mergeSourceMap(map) {
	    var opts = this.opts;

	    var inputMap = opts.inputSourceMap;

	    if (inputMap) {
	      map.sources[0] = inputMap.file;

	      var inputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(inputMap);
	      var outputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(map);
	      var outputMapGenerator = _sourceMap2["default"].SourceMapGenerator.fromSourceMap(outputMapConsumer);
	      outputMapGenerator.applySourceMap(inputMapConsumer);

	      var mergedMap = outputMapGenerator.toJSON();
	      mergedMap.sources = inputMap.sources;
	      mergedMap.file = inputMap.file;
	      return mergedMap;
	    }

	    return map;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.getModuleFormatter = function getModuleFormatter(type) {
	    if (_lodashLangIsFunction2["default"](type) || !_modules2["default"][type]) {
	      this.log.deprecate("Custom module formatters are deprecated and will be removed in the next major. Please use Babel plugins instead.");
	    }

	    var ModuleFormatter = _lodashLangIsFunction2["default"](type) ? type : _modules2["default"][type];

	    if (!ModuleFormatter) {
	      var loc = _tryResolve2["default"].relative(type);
	      if (loc) ModuleFormatter = require(loc);
	    }

	    if (!ModuleFormatter) {
	      throw new ReferenceError("Unknown module formatter type " + JSON.stringify(type));
	    }

	    return new ModuleFormatter(this);
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.parse = function parse(code) {
	    var opts = this.opts;

	    //

	    var parseOpts = {
	      highlightCode: opts.highlightCode,
	      nonStandard: opts.nonStandard,
	      sourceType: opts.sourceType,
	      filename: opts.filename,
	      plugins: {}
	    };

	    var features = parseOpts.features = {};
	    for (var key in this.transformers) {
	      var transformer = this.transformers[key];
	      features[key] = transformer.canTransform();
	    }

	    parseOpts.looseModules = this.isLoose("es6.modules");
	    parseOpts.strictMode = features.strict;

	    this.log.debug("Parse start");
	    var ast = _helpersParse2["default"](code, parseOpts);
	    this.log.debug("Parse stop");
	    return ast;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype._addAst = function _addAst(ast) {
	    this.path = _traversalPath2["default"].get({
	      hub: this.hub,
	      parentPath: null,
	      parent: ast,
	      container: ast,
	      key: "program"
	    }).setContext();
	    this.scope = this.path.scope;
	    this.ast = ast;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.addAst = function addAst(ast) {
	    this.log.debug("Start set AST");
	    this._addAst(ast);
	    this.log.debug("End set AST");

	    this.log.debug("Start module formatter init");
	    var modFormatter = this.moduleFormatter = this.getModuleFormatter(this.opts.modules);
	    if (modFormatter.init && this.transformers["es6.modules"].canTransform()) {
	      modFormatter.init();
	    }
	    this.log.debug("End module formatter init");
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.transform = function transform() {
	    this.call("pre");
	    var _arr6 = this.transformerStack;
	    for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
	      var pass = _arr6[_i6];
	      pass.transform();
	    }
	    this.call("post");

	    return this.generate();
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.wrap = function wrap(code, callback) {
	    code = code + "";

	    try {
	      if (this.shouldIgnore()) {
	        return this.makeResult({ code: code, ignored: true });
	      } else {
	        return callback();
	      }
	    } catch (err) {
	      if (err._babel) {
	        throw err;
	      } else {
	        err._babel = true;
	      }

	      var message = err.message = this.opts.filename + ": " + err.message;

	      var loc = err.loc;
	      if (loc) {
	        err.codeFrame = _helpersCodeFrame2["default"](code, loc.line, loc.column + 1, this.opts);
	        message += "\n" + err.codeFrame;
	      }

	      if (err.stack) {
	        var newStack = err.stack.replace(err.message, message);
	        try {
	          err.stack = newStack;
	        } catch (e) {
	          // `err.stack` may be a readonly property in some environments
	        }
	      }

	      throw err;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.addCode = function addCode(code) {
	    code = (code || "") + "";
	    code = this.parseInputSourceMap(code);
	    this.code = code;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.parseCode = function parseCode() {
	    this.parseShebang();
	    var ast = this.parse(this.code);
	    this.addAst(ast);
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.shouldIgnore = function shouldIgnore() {
	    var opts = this.opts;
	    return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.call = function call(key) {
	    var _arr7 = this.uncollapsedTransformerStack;

	    for (var _i7 = 0; _i7 < _arr7.length; _i7++) {
	      var pass = _arr7[_i7];
	      var fn = pass.plugin[key];
	      if (fn) fn(this);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.parseInputSourceMap = function parseInputSourceMap(code) {
	    var opts = this.opts;

	    if (opts.inputSourceMap !== false) {
	      var inputMap = _convertSourceMap2["default"].fromSource(code);
	      if (inputMap) {
	        opts.inputSourceMap = inputMap.toObject();
	        code = _convertSourceMap2["default"].removeComments(code);
	      }
	    }

	    return code;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.parseShebang = function parseShebang() {
	    var shebangMatch = _shebangRegex2["default"].exec(this.code);
	    if (shebangMatch) {
	      this.shebang = shebangMatch[0];
	      this.code = this.code.replace(_shebangRegex2["default"], "");
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.makeResult = function makeResult(_ref) {
	    var code = _ref.code;
	    var _ref$map = _ref.map;
	    var map = _ref$map === undefined ? null : _ref$map;
	    var ast = _ref.ast;
	    var ignored = _ref.ignored;

	    var result = {
	      metadata: null,
	      ignored: !!ignored,
	      code: null,
	      ast: null,
	      map: map
	    };

	    if (this.opts.code) {
	      result.code = code;
	    }

	    if (this.opts.ast) {
	      result.ast = ast;
	    }

	    if (this.opts.metadata) {
	      result.metadata = this.metadata;
	      result.metadata.usedHelpers = Object.keys(this.usedHelpers);
	    }

	    return result;
	  };

	  /**
	   * [Please add a description.]
	   */

	  File.prototype.generate = function generate() {
	    var opts = this.opts;
	    var ast = this.ast;

	    var result = { ast: ast };
	    if (!opts.code) return this.makeResult(result);

	    this.log.debug("Generation start");

	    var _result = _generation2["default"](ast, opts, this.code);
	    result.code = _result.code;
	    result.map = _result.map;

	    this.log.debug("Generation end");

	    if (this.shebang) {
	      // add back shebang
	      result.code = this.shebang + "\n" + result.code;
	    }

	    if (result.map) {
	      result.map = this.mergeSourceMap(result.map);
	    }

	    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
	      result.code += "\n" + _convertSourceMap2["default"].fromObject(result.map).toComment();
	    }

	    if (opts.sourceMaps === "inline") {
	      result.map = null;
	    }

	    return this.makeResult(result);
	  };

	  _createClass(File, null, [{
	    key: "helpers",
	    value: ["inherits", "defaults", "create-class", "create-decorated-class", "create-decorated-object", "define-decorated-property-descriptor", "tagged-template-literal", "tagged-template-literal-loose", "to-array", "to-consumable-array", "sliced-to-array", "sliced-to-array-loose", "object-without-properties", "has-own", "slice", "bind", "define-property", "async-to-generator", "interop-require-wildcard", "interop-require-default", "typeof", "extends", "get", "set", "class-call-check", "object-destructuring-empty", "temporal-undefined", "temporal-assert-defined", "self-global", "default-props", "instanceof",

	    // legacy
	    "interop-require"],

	    /**
	     * [Please add a description.]
	     */

	    enumerable: true
	  }, {
	    key: "soloHelpers",
	    value: [],
	    enumerable: true
	  }]);

	  return File;
	})();

	exports["default"] = File;
	module.exports = exports["default"];
	},{"../../generation":47,"../../helpers/code-frame":55,"../../helpers/parse":59,"../../traversal":162,"../../traversal/hub":161,"../../traversal/path":169,"../../types":193,"../../util":196,"../modules":91,"../plugin":98,"./logger":64,"./options/option-manager":67,"./plugin-manager":69,"convert-source-map":222,"lodash/collection/includes":341,"lodash/lang/isFunction":428,"lodash/object/defaults":438,"path":12,"shebang-regex":516,"source-map":518,"try-resolve":533}],64:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _debugNode = require("debug/node");

	var _debugNode2 = _interopRequireDefault(_debugNode);

	var verboseDebug = _debugNode2["default"]("babel:verbose");
	var generalDebug = _debugNode2["default"]("babel");

	var seenDeprecatedMessages = [];

	/**
	 * [Please add a description.]
	 */

	var Logger = (function () {
	  function Logger(file, filename) {
	    _classCallCheck(this, Logger);

	    this.filename = filename;
	    this.file = file;
	  }

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype._buildMessage = function _buildMessage(msg) {
	    var parts = "[BABEL] " + this.filename;
	    if (msg) parts += ": " + msg;
	    return parts;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype.warn = function warn(msg) {
	    console.warn(this._buildMessage(msg));
	  };

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype.error = function error(msg) {
	    var Constructor = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];

	    throw new Constructor(this._buildMessage(msg));
	  };

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype.deprecate = function deprecate(msg) {
	    if (this.file.opts && this.file.opts.suppressDeprecationMessages) return;

	    msg = this._buildMessage(msg);

	    // already seen this message
	    if (seenDeprecatedMessages.indexOf(msg) >= 0) return;

	    // make sure we don't see it again
	    seenDeprecatedMessages.push(msg);

	    console.error(msg);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype.verbose = function verbose(msg) {
	    if (verboseDebug.enabled) verboseDebug(this._buildMessage(msg));
	  };

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype.debug = function debug(msg) {
	    if (generalDebug.enabled) generalDebug(this._buildMessage(msg));
	  };

	  /**
	   * [Please add a description.]
	   */

	  Logger.prototype.deopt = function deopt(node, msg) {
	    this.debug(msg);
	  };

	  return Logger;
	})();

	exports["default"] = Logger;
	module.exports = exports["default"];
	},{"debug/node":313}],65:[function(require,module,exports){
	module.exports={
	  "filename": {
	    "type": "filename",
	    "description": "filename to use when reading from stdin - this will be used in source-maps, errors etc",
	    "default": "unknown",
	    "shorthand": "f"
	  },

	  "filenameRelative": {
	    "hidden": true,
	    "type": "string"
	  },

	  "inputSourceMap": {
	    "hidden": true
	  },

	  "extra": {
	    "hidden": true,
	    "default": {}
	  },

	  "env": {
	    "hidden": true,
	    "default": {}
	  },

	  "moduleId": {
	    "description": "specify a custom name for module ids",
	    "type": "string"
	  },

	  "getModuleId": {
	    "hidden": true
	  },

	  "retainLines": {
	    "type": "boolean",
	    "default": false,
	    "description": "retain line numbers - will result in really ugly code"
	  },

	  "nonStandard": {
	    "type": "boolean",
	    "default": true,
	    "description": "enable/disable support for JSX and Flow (on by default)"
	  },

	  "experimental": {
	    "type": "boolean",
	    "description": "allow use of experimental transformers",
	    "default": false
	  },

	  "highlightCode": {
	    "description": "enable/disable ANSI syntax highlighting of code frames (on by default)",
	    "type": "boolean",
	    "default": true
	  },

	  "suppressDeprecationMessages": {
	    "type": "boolean",
	    "default": false,
	    "hidden": true
	  },

	  "resolveModuleSource": {
	    "hidden": true
	  },

	  "stage": {
	    "description": "ECMAScript proposal stage version to allow [0-4]",
	    "shorthand": "e",
	    "type": "number",
	    "default": 2
	  },

	  "blacklist": {
	    "type": "transformerList",
	    "description": "blacklist of transformers to NOT use",
	    "shorthand": "b",
	    "default": []
	  },

	  "whitelist": {
	    "type": "transformerList",
	    "optional": true,
	    "description": "whitelist of transformers to ONLY use",
	    "shorthand": "l"
	  },

	  "optional": {
	    "type": "transformerList",
	    "description": "list of optional transformers to enable",
	    "default": []
	  },

	  "modules": {
	    "type": "string",
	    "description": "module formatter type to use [common]",
	    "default": "common",
	    "shorthand": "m"
	  },

	  "moduleIds": {
	    "type": "boolean",
	    "default": false,
	    "shorthand": "M",
	    "description": "insert an explicit id for modules"
	  },

	  "loose": {
	    "type": "transformerList",
	    "description": "list of transformers to enable loose mode ON",
	    "shorthand": "L"
	  },

	  "jsxPragma": {
	    "type": "string",
	    "description": "custom pragma to use with JSX (same functionality as @jsx comments)",
	    "default": "React.createElement",
	    "shorthand": "P"
	  },

	  "plugins": {
	    "type": "list",
	    "description": "",
	    "default": []
	  },

	  "ignore": {
	    "type": "list",
	    "description": "list of glob paths to **not** compile",
	    "default": []
	  },

	  "only": {
	    "type": "list",
	    "description": "list of glob paths to **only** compile"
	  },

	  "code": {
	    "hidden": true,
	    "default": true,
	    "type": "boolean"
	  },

	  "metadata": {
	    "hidden": true,
	    "default": true,
	    "type": "boolean"
	  },

	  "ast": {
	    "hidden": true,
	    "default": true,
	    "type": "boolean"
	  },

	  "comments": {
	    "type": "boolean",
	    "default": true,
	    "description": "strip/output comments in generated output (on by default)"
	  },

	  "shouldPrintComment": {
	    "hidden": true,
	    "description": "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
	  },

	  "compact": {
	    "type": "booleanString",
	    "default": "auto",
	    "description": "do not include superfluous whitespace characters and line terminators [true|false|auto]"
	  },

	  "keepModuleIdExtensions": {
	    "type": "boolean",
	    "description": "keep extensions when generating module ids",
	    "default": false,
	    "shorthand": "k"
	  },

	  "auxiliaryComment": {
	    "deprecated": "renamed to auxiliaryCommentBefore",
	    "shorthand": "a",
	    "alias": "auxiliaryCommentBefore"
	  },

	  "auxiliaryCommentBefore": {
	    "type": "string",
	    "default": "",
	    "description": "attach a comment before all helper declarations and auxiliary code"
	  },

	  "auxiliaryCommentAfter": {
	    "type": "string",
	    "default": "",
	    "description": "attach a comment after all helper declarations and auxiliary code"
	  },

	  "externalHelpers": {
	    "type": "boolean",
	    "default": false,
	    "shorthand": "r",
	    "description": "uses a reference to `babelHelpers` instead of placing helpers at the top of your code."
	  },

	  "metadataUsedHelpers": {
	    "deprecated": "Not required anymore as this is enabled by default",
	    "type": "boolean",
	    "default": false,
	    "hidden": true
	  },

	  "sourceMap": {
	    "alias": "sourceMaps",
	    "hidden": true
	  },

	  "sourceMaps": {
	    "type": "booleanString",
	    "description": "[true|false|inline]",
	    "default": false,
	    "shorthand": "s"
	  },

	  "sourceMapName": {
	    "alias": "sourceMapTarget",
	    "description": "DEPRECATED - Please use sourceMapTarget"
	  },

	  "sourceMapTarget": {
	    "type": "string",
	    "description": "set `file` on returned source map"
	  },

	  "sourceFileName": {
	    "type": "string",
	    "description": "set `sources[0]` on returned source map"
	  },

	  "sourceRoot": {
	    "type": "filename",
	    "description": "the root from which all sources are relative"
	  },

	  "moduleRoot": {
	    "type": "filename",
	    "description": "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
	  },

	  "breakConfig": {
	    "type": "boolean",
	    "default": false,
	    "hidden": true,
	    "description": "stop trying to load .babelrc files"
	  },

	  "babelrc": {
	    "description": "Specify a custom list of babelrc files to use",
	    "type": "list"
	  },

	  "sourceType": {
	    "description": "",
	    "default": "module"
	  }
	}

	},{}],66:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.validateOption = validateOption;
	exports.normaliseOptions = normaliseOptions;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _parsers = require("./parsers");

	var parsers = _interopRequireWildcard(_parsers);

	var _config = require("./config");

	var _config2 = _interopRequireDefault(_config);

	exports.config = _config2["default"];

	/**
	 * Validate an option.
	 */

	function validateOption(key, val, pipeline) {
	  var opt = _config2["default"][key];
	  var parser = opt && parsers[opt.type];
	  if (parser && parser.validate) {
	    return parser.validate(key, val, pipeline);
	  } else {
	    return val;
	  }
	}

	/**
	 * Normalize all options.
	 */

	function normaliseOptions() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  for (var key in options) {
	    var val = options[key];
	    if (val == null) continue;

	    var opt = _config2["default"][key];
	    if (!opt) continue;

	    var parser = parsers[opt.type];
	    if (parser) val = parser(val);

	    options[key] = val;
	  }

	  return options;
	}
	},{"./config":65,"./parsers":68}],67:[function(require,module,exports){
	(function (process){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _index = require("./index");

	var _stripJsonComments = require("strip-json-comments");

	var _stripJsonComments2 = _interopRequireDefault(_stripJsonComments);

	var _pathIsAbsolute = require("path-is-absolute");

	var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

	var _pathExists = require("path-exists");

	var _pathExists2 = _interopRequireDefault(_pathExists);

	var _lodashLangClone = require("lodash/lang/clone");

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var _helpersMerge = require("../../../helpers/merge");

	var _helpersMerge2 = _interopRequireDefault(_helpersMerge);

	var _config = require("./config");

	var _config2 = _interopRequireDefault(_config);

	var _path = require("path");

	var _path2 = _interopRequireDefault(_path);

	var _fs = require("fs");

	var _fs2 = _interopRequireDefault(_fs);

	var existsCache = {};
	var jsonCache = {};

	var BABELIGNORE_FILENAME = ".babelignore";
	var BABELRC_FILENAME = ".babelrc";
	var PACKAGE_FILENAME = "package.json";

	function exists(filename) {
	  var cached = existsCache[filename];
	  if (cached != null) {
	    return cached;
	  } else {
	    return existsCache[filename] = _pathExists2["default"].sync(filename);
	  }
	}

	var OptionManager = (function () {
	  function OptionManager(log, pipeline) {
	    _classCallCheck(this, OptionManager);

	    this.resolvedConfigs = [];
	    this.options = OptionManager.createBareOptions();
	    this.pipeline = pipeline;
	    this.log = log;
	  }

	  /**
	   * [Please add a description.]
	   */

	  OptionManager.createBareOptions = function createBareOptions() {
	    var opts = {};

	    for (var key in _config2["default"]) {
	      var opt = _config2["default"][key];
	      opts[key] = _lodashLangClone2["default"](opt["default"]);
	    }

	    return opts;
	  };

	  /**
	   * [Please add a description.]
	   */

	  OptionManager.prototype.addConfig = function addConfig(loc, key) {
	    if (this.resolvedConfigs.indexOf(loc) >= 0) return;

	    var content = _fs2["default"].readFileSync(loc, "utf8");
	    var opts;

	    try {
	      opts = jsonCache[content] = jsonCache[content] || JSON.parse(_stripJsonComments2["default"](content));
	      if (key) opts = opts[key];
	    } catch (err) {
	      err.message = loc + ": " + err.message;
	      throw err;
	    }

	    this.mergeOptions(opts, loc);
	    this.resolvedConfigs.push(loc);
	  };

	  /**
	   * [Please add a description.]
	   */

	  OptionManager.prototype.mergeOptions = function mergeOptions(opts) {
	    var alias = arguments.length <= 1 || arguments[1] === undefined ? "foreign" : arguments[1];

	    if (!opts) return;

	    for (var key in opts) {
	      if (key[0] === "_") continue;

	      var option = _config2["default"][key];

	      // check for an unknown option
	      if (!option) this.log.error("Unknown option: " + alias + "." + key, ReferenceError);
	    }

	    // normalise options
	    _index.normaliseOptions(opts);

	    // merge them into this current files options
	    _helpersMerge2["default"](this.options, opts);
	  };

	  /**
	   * [Please add a description.]
	   */

	  OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
	    var file = _fs2["default"].readFileSync(loc, "utf8");
	    var lines = file.split("\n");

	    lines = lines.map(function (line) {
	      return line.replace(/#(.*?)$/, "").trim();
	    }).filter(function (line) {
	      return !!line;
	    });

	    this.mergeOptions({ ignore: lines }, loc);
	  };

	  /**
	   * Description
	   */

	  OptionManager.prototype.findConfigs = function findConfigs(loc) {
	    if (!loc) return;

	    if (!_pathIsAbsolute2["default"](loc)) {
	      loc = _path2["default"].join(process.cwd(), loc);
	    }

	    while (loc !== (loc = _path2["default"].dirname(loc))) {
	      if (this.options.breakConfig) return;

	      var configLoc = _path2["default"].join(loc, BABELRC_FILENAME);
	      if (exists(configLoc)) this.addConfig(configLoc);

	      var pkgLoc = _path2["default"].join(loc, PACKAGE_FILENAME);
	      if (exists(pkgLoc)) this.addConfig(pkgLoc, "babel");

	      var ignoreLoc = _path2["default"].join(loc, BABELIGNORE_FILENAME);
	      if (exists(ignoreLoc)) this.addIgnoreConfig(ignoreLoc);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  OptionManager.prototype.normaliseOptions = function normaliseOptions() {
	    var opts = this.options;

	    for (var key in _config2["default"]) {
	      var option = _config2["default"][key];
	      var val = opts[key];

	      // optional
	      if (!val && option.optional) continue;

	      // deprecated
	      if (this.log && val && option.deprecated) {
	        this.log.deprecate("Deprecated option " + key + ": " + option.deprecated);
	      }

	      // validate
	      if (this.pipeline && val) {
	        val = _index.validateOption(key, val, this.pipeline);
	      }

	      // aaliases
	      if (option.alias) {
	        opts[option.alias] = opts[option.alias] || val;
	      } else {
	        opts[key] = val;
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  OptionManager.prototype.init = function init(opts) {
	    this.mergeOptions(opts, "direct");

	    // babelrc option
	    if (opts.babelrc) {
	      var _arr = opts.babelrc;

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var loc = _arr[_i];this.addConfig(loc);
	      }
	    }

	    // resolve all .babelrc files
	    this.findConfigs(opts.filename);

	    // merge in env
	    var envKey = process.env.BABEL_ENV || process.env.NODE_ENV || "development";
	    if (this.options.env) {
	      this.mergeOptions(this.options.env[envKey], "direct.env." + envKey);
	    }

	    // normalise
	    this.normaliseOptions(opts);

	    return this.options;
	  };

	  return OptionManager;
	})();

	exports["default"] = OptionManager;
	module.exports = exports["default"];
	}).call(this,require('_process'))
	},{"../../../helpers/merge":56,"./config":65,"./index":66,"_process":14,"fs":4,"lodash/lang/clone":422,"path":12,"path-exists":454,"path-is-absolute":455,"strip-json-comments":530}],68:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.transformerList = transformerList;
	exports.number = number;
	exports.boolean = boolean;
	exports.booleanString = booleanString;
	exports.list = list;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _slash = require("slash");

	var _slash2 = _interopRequireDefault(_slash);

	var _util = require("../../../util");

	/**
	 * Get a transformer list from a value.
	 */

	var util = _interopRequireWildcard(_util);

	function transformerList(val) {
	  return util.arrayify(val);
	}

	/**
	 * Validate transformer list. Maps "all" to all transformer names.
	 */

	transformerList.validate = function (key, val, pipeline) {
	  if (val.indexOf("all") >= 0 || val.indexOf(true) >= 0) {
	    val = Object.keys(pipeline.transformers);
	  }

	  return pipeline._ensureTransformerNames(key, val);
	};

	/**
	 * Cast a value to a number.
	 */

	function number(val) {
	  return +val;
	}

	/**
	 * Cast a value to a boolean.
	 */

	var filename = _slash2["default"];

	/**
	 * [Please add a description.]
	 */

	exports.filename = filename;

	function boolean(val) {
	  return !!val;
	}

	/**
	 * Cast a boolean-like string to a boolean.
	 */

	function booleanString(val) {
	  return util.booleanify(val);
	}

	/**
	 * Cast a value to an array, splitting strings by ",".
	 */

	function list(val) {
	  return util.list(val);
	}
	},{"../../../util":196,"slash":517}],69:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _transformer = require("../transformer");

	var _transformer2 = _interopRequireDefault(_transformer);

	var _plugin = require("../plugin");

	var _plugin2 = _interopRequireDefault(_plugin);

	var _types = require("../../types");

	var types = _interopRequireWildcard(_types);

	var _messages = require("../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _tryResolve = require("try-resolve");

	var _tryResolve2 = _interopRequireDefault(_tryResolve);

	var _traversal = require("../../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _helpersParse = require("../../helpers/parse");

	/**
	 * [Please add a description.]
	 */

	var _helpersParse2 = _interopRequireDefault(_helpersParse);

	var context = {
	  messages: messages,
	  Transformer: _transformer2["default"],
	  Plugin: _plugin2["default"],
	  types: types,
	  parse: _helpersParse2["default"],
	  traverse: _traversal2["default"]
	};

	/**
	 * [Please add a description.]
	 */

	var PluginManager = (function () {

	  /**
	   * [Please add a description.]
	   */

	  PluginManager.memoisePluginContainer = function memoisePluginContainer(fn) {
	    for (var i = 0; i < PluginManager.memoisedPlugins.length; i++) {
	      var plugin = PluginManager.memoisedPlugins[i];
	      if (plugin.container === fn) return plugin.transformer;
	    }

	    var transformer = fn(context);
	    PluginManager.memoisedPlugins.push({
	      container: fn,
	      transformer: transformer
	    });
	    return transformer;
	  };

	  /**
	   * [Please add a description.]
	   */

	  _createClass(PluginManager, null, [{
	    key: "memoisedPlugins",

	    /**
	     * [Please add a description.]
	     */

	    value: [],
	    enumerable: true
	  }, {
	    key: "positions",
	    value: ["before", "after"],

	    /**
	     * [Please add a description.]
	     */

	    enumerable: true
	  }]);

	  function PluginManager() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? { transformers: {}, before: [], after: [] } : arguments[0];

	    var file = _ref.file;
	    var transformers = _ref.transformers;
	    var before = _ref.before;
	    var after = _ref.after;

	    _classCallCheck(this, PluginManager);

	    this.transformers = transformers;
	    this.file = file;
	    this.before = before;
	    this.after = after;
	  }

	  /**
	   * [Please add a description.]
	   */

	  PluginManager.prototype.subnormaliseString = function subnormaliseString(name, position) {
	    // this is a plugin in the form of "foobar" or "foobar:after"
	    // where the optional colon is the delimiter for plugin position in the transformer stack

	    var match = name.match(/^(.*?):(after|before)$/);
	    if (match) {
	      ;

	      name = match[1];
	      position = match[2];
	    }var loc = _tryResolve2["default"].relative("babel-plugin-" + name) || _tryResolve2["default"].relative(name);
	    if (loc) {
	      var plugin = require(loc);
	      return {
	        position: position,
	        plugin: plugin["default"] || plugin
	      };
	    } else {
	      throw new ReferenceError(messages.get("pluginUnknown", name));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  PluginManager.prototype.validate = function validate(name, plugin) {
	    // validate transformer key
	    var key = plugin.key;
	    if (this.transformers[key]) {
	      throw new ReferenceError(messages.get("pluginKeyCollision", key));
	    }

	    // validate Transformer instance
	    if (!plugin.buildPass || plugin.constructor.name !== "Plugin") {
	      throw new TypeError(messages.get("pluginNotTransformer", name));
	    }

	    // register as a plugin
	    plugin.metadata.plugin = true;
	  };

	  /**
	   * [Please add a description.]
	   */

	  PluginManager.prototype.add = function add(name) {
	    var position;
	    var plugin;

	    if (name) {
	      if (typeof name === "object" && name.transformer) {
	        plugin = name.transformer;
	        position = name.position;
	      } else if (typeof name !== "string") {
	        // not a string so we'll just assume that it's a direct Transformer instance, if not then
	        // the checks later on will complain
	        plugin = name;
	      }

	      if (typeof name === "string") {
	        var _subnormaliseString = this.subnormaliseString(name, position);

	        plugin = _subnormaliseString.plugin;
	        position = _subnormaliseString.position;
	      }
	    } else {
	      throw new TypeError(messages.get("pluginIllegalKind", typeof name, name));
	    }

	    // default position
	    position = position || "before";

	    // validate position
	    if (PluginManager.positions.indexOf(position) < 0) {
	      throw new TypeError(messages.get("pluginIllegalPosition", position, name));
	    }

	    // allow plugin containers to be specified so they don't have to manually require
	    if (typeof plugin === "function") {
	      plugin = PluginManager.memoisePluginContainer(plugin);
	    }

	    //
	    this.validate(name, plugin);

	    // build!
	    var pass = this.transformers[plugin.key] = plugin.buildPass(this.file);
	    if (pass.canTransform()) {
	      var stack = position === "before" ? this.before : this.after;
	      stack.push(pass);
	    }
	  };

	  return PluginManager;
	})();

	exports["default"] = PluginManager;
	module.exports = exports["default"];
	},{"../../helpers/parse":59,"../../messages":60,"../../traversal":162,"../../types":193,"../plugin":98,"../transformer":99,"try-resolve":533}],70:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _explodeAssignableExpression = require("./explode-assignable-expression");

	var _explodeAssignableExpression2 = _interopRequireDefault(_explodeAssignableExpression);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	exports["default"] = function (opts) {
	  var exports = {};

	  /**
	   * [Please add a description.]
	   */

	  var isAssignment = function isAssignment(node) {
	    return node.operator === opts.operator + "=";
	  };

	  /**
	   * [Please add a description.]
	   */

	  var buildAssignment = function buildAssignment(left, right) {
	    return t.assignmentExpression("=", left, right);
	  };

	  /**
	   * [Please add a description.]
	   */

	  exports.ExpressionStatement = function (node, parent, scope, file) {
	    // hit the `AssignmentExpression` one below
	    if (this.isCompletionRecord()) return;

	    var expr = node.expression;
	    if (!isAssignment(expr)) return;

	    var nodes = [];
	    var exploded = _explodeAssignableExpression2["default"](expr.left, nodes, file, scope, true);

	    nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));

	    return nodes;
	  };

	  /**
	   * [Please add a description.]
	   */

	  exports.AssignmentExpression = function (node, parent, scope, file) {
	    if (!isAssignment(node)) return;

	    var nodes = [];
	    var exploded = _explodeAssignableExpression2["default"](node.left, nodes, file, scope);
	    nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
	    return nodes;
	  };

	  /**
	   * [Please add a description.]
	   */

	  exports.BinaryExpression = function (node) {
	    if (node.operator !== opts.operator) return;
	    return opts.build(node.left, node.right);
	  };

	  return exports;
	};

	module.exports = exports["default"];
	},{"../../types":193,"./explode-assignable-expression":75}],71:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports["default"] = build;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function build(node, buildBody) {
	  var self = node.blocks.shift();
	  if (!self) return;

	  var child = build(node, buildBody);
	  if (!child) {
	    // last item
	    child = buildBody();

	    // add a filter as this is our final stop
	    if (node.filter) {
	      child = t.ifStatement(node.filter, t.blockStatement([child]));
	    }
	  }

	  return t.forOfStatement(t.variableDeclaration("let", [t.variableDeclarator(self.left)]), self.right, t.blockStatement([child]));
	}

	module.exports = exports["default"];
	},{"../../types":193}],72:[function(require,module,exports){
	// Based upon the excellent jsx-transpiler by Ingvar Stepanyan (RReverser)
	// https://github.com/RReverser/jsx-transpiler

	// jsx

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashLangIsString = require("lodash/lang/isString");

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _messages = require("../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _esutils = require("esutils");

	var _esutils2 = _interopRequireDefault(_esutils);

	var _react = require("./react");

	var react = _interopRequireWildcard(_react);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	exports["default"] = function (opts) {
	  var visitor = {};

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXIdentifier = function (node) {
	    if (node.name === "this" && this.isReferenced()) {
	      return t.thisExpression();
	    } else if (_esutils2["default"].keyword.isIdentifierNameES6(node.name)) {
	      node.type = "Identifier";
	    } else {
	      return t.literal(node.name);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXNamespacedName = function () {
	    throw this.errorWithNode(messages.get("JSXNamespacedTags"));
	  };

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXMemberExpression = {
	    exit: function exit(node) {
	      node.computed = t.isLiteral(node.property);
	      node.type = "MemberExpression";
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXExpressionContainer = function (node) {
	    return node.expression;
	  };

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXAttribute = {
	    enter: function enter(node) {
	      var value = node.value;
	      if (t.isLiteral(value) && _lodashLangIsString2["default"](value.value)) {
	        value.value = value.value.replace(/\n\s+/g, " ");
	      }
	    },

	    exit: function exit(node) {
	      var value = node.value || t.literal(true);
	      return t.inherits(t.property("init", node.name, value), node);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXOpeningElement = {
	    exit: function exit(node, parent, scope, file) {
	      parent.children = react.buildChildren(parent);

	      var tagExpr = node.name;
	      var args = [];

	      var tagName;
	      if (t.isIdentifier(tagExpr)) {
	        tagName = tagExpr.name;
	      } else if (t.isLiteral(tagExpr)) {
	        tagName = tagExpr.value;
	      }

	      var state = {
	        tagExpr: tagExpr,
	        tagName: tagName,
	        args: args
	      };

	      if (opts.pre) {
	        opts.pre(state, file);
	      }

	      var attribs = node.attributes;
	      if (attribs.length) {
	        attribs = buildJSXOpeningElementAttributes(attribs, file);
	      } else {
	        attribs = t.literal(null);
	      }

	      args.push(attribs);

	      if (opts.post) {
	        opts.post(state, file);
	      }

	      return state.call || t.callExpression(state.callee, args);
	    }
	  };

	  /**
	   * The logic for this is quite terse. It's because we need to
	   * support spread elements. We loop over all attributes,
	   * breaking on spreads, we then push a new object containg
	   * all prior attributes to an array for later processing.
	   */

	  var buildJSXOpeningElementAttributes = function buildJSXOpeningElementAttributes(attribs, file) {
	    var _props = [];
	    var objs = [];

	    var pushProps = function pushProps() {
	      if (!_props.length) return;

	      objs.push(t.objectExpression(_props));
	      _props = [];
	    };

	    while (attribs.length) {
	      var prop = attribs.shift();
	      if (t.isJSXSpreadAttribute(prop)) {
	        pushProps();
	        objs.push(prop.argument);
	      } else {
	        _props.push(prop);
	      }
	    }

	    pushProps();

	    if (objs.length === 1) {
	      // only one object
	      attribs = objs[0];
	    } else {
	      // looks like we have multiple objects
	      if (!t.isObjectExpression(objs[0])) {
	        objs.unshift(t.objectExpression([]));
	      }

	      // spread it
	      attribs = t.callExpression(file.addHelper("extends"), objs);
	    }

	    return attribs;
	  };

	  /**
	   * [Please add a description.]
	   */

	  visitor.JSXElement = {
	    exit: function exit(node) {
	      var callExpr = node.openingElement;

	      callExpr.arguments = callExpr.arguments.concat(node.children);

	      if (callExpr.arguments.length >= 3) {
	        callExpr._prettyCall = true;
	      }

	      return t.inherits(callExpr, node);
	    }
	  };

	  return visitor;
	};

	module.exports = exports["default"];
	},{"../../messages":60,"../../types":193,"./react":79,"esutils":319,"lodash/lang/isString":434}],73:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node, parent, scope, state) {
	    if (this.isThisExpression() || this.isReferencedIdentifier({ name: "arguments" })) {
	      state.found = true;
	      this.stop();
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    this.skip();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports["default"] = function (node, scope) {
	  var container = t.functionExpression(null, [], node.body, node.generator, node.async);

	  var callee = container;
	  var args = [];

	  var state = { found: false };
	  scope.traverse(node, visitor, state);
	  if (state.found) {
	    callee = t.memberExpression(container, t.identifier("apply"));
	    args = [t.thisExpression(), t.identifier("arguments")];
	  }

	  var call = t.callExpression(callee, args);
	  if (node.generator) call = t.yieldExpression(call, true);

	  return t.returnStatement(call);
	};

	module.exports = exports["default"];
	},{"../../types":193}],74:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.push = push;
	exports.hasComputed = hasComputed;
	exports.toComputedObjectFromClass = toComputedObjectFromClass;
	exports.toClassObject = toClassObject;
	exports.toDefineObject = toDefineObject;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashObjectHas = require("lodash/object/has");

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function push(mutatorMap, node, kind, file) {
	  var alias = t.toKeyAlias(node);

	  //

	  var map = {};
	  if (_lodashObjectHas2["default"](mutatorMap, alias)) map = mutatorMap[alias];
	  mutatorMap[alias] = map;

	  //

	  map._inherits = map._inherits || [];
	  map._inherits.push(node);

	  map._key = node.key;

	  if (node.computed) {
	    map._computed = true;
	  }

	  if (node.decorators) {
	    var decorators = map.decorators = map.decorators || t.arrayExpression([]);
	    decorators.elements = decorators.elements.concat(node.decorators.map(function (dec) {
	      return dec.expression;
	    }).reverse());
	  }

	  if (map.value || map.initializer) {
	    throw file.errorWithNode(node, "Key conflict with sibling node");
	  }

	  if (node.value) {
	    if (node.kind === "init") kind = "value";
	    if (node.kind === "get") kind = "get";
	    if (node.kind === "set") kind = "set";

	    t.inheritsComments(node.value, node);
	    map[kind] = node.value;
	  }

	  return map;
	}

	/**
	 * [Please add a description.]
	 */

	function hasComputed(mutatorMap) {
	  for (var key in mutatorMap) {
	    if (mutatorMap[key]._computed) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	function toComputedObjectFromClass(obj) {
	  var objExpr = t.arrayExpression([]);

	  for (var i = 0; i < obj.properties.length; i++) {
	    var prop = obj.properties[i];
	    var val = prop.value;
	    val.properties.unshift(t.property("init", t.identifier("key"), t.toComputedKey(prop)));
	    objExpr.elements.push(val);
	  }

	  return objExpr;
	}

	/**
	 * [Please add a description.]
	 */

	function toClassObject(mutatorMap) {
	  var objExpr = t.objectExpression([]);

	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    var mapNode = t.objectExpression([]);

	    var propNode = t.property("init", map._key, mapNode, map._computed);

	    _lodashCollectionEach2["default"](map, function (node, key) {
	      if (key[0] === "_") return;

	      var inheritNode = node;
	      if (t.isMethodDefinition(node) || t.isClassProperty(node)) node = node.value;

	      var prop = t.property("init", t.identifier(key), node);
	      t.inheritsComments(prop, inheritNode);
	      t.removeComments(inheritNode);

	      mapNode.properties.push(prop);
	    });

	    objExpr.properties.push(propNode);
	  });

	  return objExpr;
	}

	/**
	 * [Please add a description.]
	 */

	function toDefineObject(mutatorMap) {
	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    if (map.value) map.writable = t.literal(true);
	    map.configurable = t.literal(true);
	    map.enumerable = t.literal(true);
	  });

	  return toClassObject(mutatorMap);
	}
	},{"../../types":193,"lodash/collection/each":339,"lodash/object/has":440}],75:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var getObjRef = function getObjRef(node, nodes, file, scope) {
	  var ref;
	  if (t.isIdentifier(node)) {
	    if (scope.hasBinding(node.name)) {
	      // this variable is declared in scope so we can be 100% sure
	      // that evaluating it multiple times wont trigger a getter
	      // or something else
	      return node;
	    } else {
	      // could possibly trigger a getter so we need to only evaluate
	      // it once
	      ref = node;
	    }
	  } else if (t.isMemberExpression(node)) {
	    ref = node.object;

	    if (t.isIdentifier(ref) && scope.hasGlobal(ref.name)) {
	      // the object reference that we need to save is locally declared
	      // so as per the previous comment we can be 100% sure evaluating
	      // it multiple times will be safe
	      return ref;
	    }
	  } else {
	    throw new Error("We can't explode this node type " + node.type);
	  }

	  var temp = scope.generateUidIdentifierBasedOnNode(ref);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
	  return temp;
	};

	/**
	 * [Please add a description.]
	 */

	var getPropRef = function getPropRef(node, nodes, file, scope) {
	  var prop = node.property;
	  var key = t.toComputedKey(node, prop);
	  if (t.isLiteral(key)) return key;

	  var temp = scope.generateUidIdentifierBasedOnNode(prop);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
	  return temp;
	};

	/**
	 * [Please add a description.]
	 */

	exports["default"] = function (node, nodes, file, scope, allowedSingleIdent) {
	  var obj;
	  if (t.isIdentifier(node) && allowedSingleIdent) {
	    obj = node;
	  } else {
	    obj = getObjRef(node, nodes, file, scope);
	  }

	  var ref, uid;

	  if (t.isIdentifier(node)) {
	    ref = node;
	    uid = obj;
	  } else {
	    var prop = getPropRef(node, nodes, file, scope);
	    var computed = node.computed || t.isLiteral(prop);
	    uid = ref = t.memberExpression(obj, prop, computed);
	  }

	  return {
	    uid: uid,
	    ref: ref
	  };
	};

	module.exports = exports["default"];
	},{"../../types":193}],76:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	exports["default"] = function (node) {
	  var lastNonDefault = 0;
	  for (var i = 0; i < node.params.length; i++) {
	    var param = node.params[i];
	    if (!t.isAssignmentPattern(param) && !t.isRestElement(param)) {
	      lastNonDefault = i + 1;
	    }
	  }
	  return lastNonDefault;
	};

	module.exports = exports["default"];
	},{"../../types":193}],77:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	exports["default"] = function (decorators, scope) {
	  for (var i = 0; i < decorators.length; i++) {
	    var decorator = decorators[i];
	    var expression = decorator.expression;
	    if (!t.isMemberExpression(expression)) continue;

	    var temp = scope.maybeGenerateMemoised(expression.object);
	    var ref;

	    var nodes = [];

	    if (temp) {
	      ref = temp;
	      nodes.push(t.assignmentExpression("=", temp, expression.object));
	    } else {
	      ref = expression.object;
	    }

	    nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));

	    if (nodes.length === 1) {
	      decorator.expression = nodes[0];
	    } else {
	      decorator.expression = t.sequenceExpression(nodes);
	    }
	  }

	  return decorators;
	};

	module.exports = exports["default"];
	},{"../../types":193}],78:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.custom = custom;
	exports.property = property;
	exports.bare = bare;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _getFunctionArity = require("./get-function-arity");

	var _getFunctionArity2 = _interopRequireDefault(_getFunctionArity);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function visitIdentifier(context, node, scope, state) {
	  // check if this node matches our function id
	  if (node.name !== state.name) return;

	  // check that we don't have a local variable declared as that removes the need
	  // for the wrapper
	  var localDeclar = scope.getBindingIdentifier(state.name);
	  if (localDeclar !== state.outerDeclar) return;

	  state.selfReference = true;
	  context.stop();
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    visitIdentifier(this, node, scope, state);
	  },

	  /**
	   * [Please add a description.]
	   */

	  BindingIdentifier: function BindingIdentifier(node, parent, scope, state) {
	    visitIdentifier(this, node, scope, state);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var wrap = function wrap(state, method, id, scope) {
	  if (state.selfReference) {
	    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
	      // we can just munge the local binding
	      scope.rename(id.name);
	    } else {
	      // need to add a wrapper since we can't change the references
	      var templateName = "property-method-assignment-wrapper";
	      if (method.generator) templateName += "-generator";
	      var template = util.template(templateName, {
	        FUNCTION: method,
	        FUNCTION_ID: id,
	        FUNCTION_KEY: scope.generateUidIdentifier(id.name)
	      });
	      template.callee._skipModulesRemap = true;

	      // shim in dummy params to retain function arity, if you try to read the
	      // source then you'll get the original since it's proxied so it's all good
	      var params = template.callee.body.body[0].params;
	      for (var i = 0, len = _getFunctionArity2["default"](method); i < len; i++) {
	        params.push(scope.generateUidIdentifier("x"));
	      }

	      return template;
	    }
	  }

	  method.id = id;
	  scope.getProgramParent().references[id.name] = true;
	};

	/**
	 * [Please add a description.]
	 */

	var visit = function visit(node, name, scope) {
	  var state = {
	    selfAssignment: false,
	    selfReference: false,
	    outerDeclar: scope.getBindingIdentifier(name),
	    references: [],
	    name: name
	  };

	  // check to see if we have a local binding of the id we're setting inside of
	  // the function, this is important as there are caveats associated

	  var binding = scope.getOwnBinding(name);

	  if (binding) {
	    if (binding.kind === "param") {
	      // safari will blow up in strict mode with code like:
	      //
	      //   var t = function t(t) {};
	      //
	      // with the error:
	      //
	      //   Cannot declare a parameter named 't' as it shadows the name of a
	      //   strict mode function.
	      //
	      // this isn't to the spec and they've invented this behaviour which is
	      // **extremely** annoying so we avoid setting the name if it has a param
	      // with the same id
	      state.selfReference = true;
	    } else {
	      // otherwise it's defined somewhere in scope like:
	      //
	      //   var t = function () {
	      //     var t = 2;
	      //   };
	      //
	      // so we can safely just set the id and move along as it shadows the
	      // bound function id
	    }
	  } else if (state.outerDeclar || scope.hasGlobal(name)) {
	      scope.traverse(node, visitor, state);
	    }

	  return state;
	};

	/**
	 * [Please add a description.]
	 */

	function custom(node, id, scope) {
	  var state = visit(node, id.name, scope);
	  return wrap(state, node, id, scope);
	}

	/**
	 * [Please add a description.]
	 */

	function property(node, file, scope) {
	  var key = t.toComputedKey(node, node.key);
	  if (!t.isLiteral(key)) return; // we can't set a function id with this

	  var name = t.toBindingIdentifierName(key.value);
	  var id = t.identifier(name);

	  var method = node.value;
	  var state = visit(method, name, scope);
	  node.value = wrap(state, method, id, scope) || method;
	}

	/**
	 * [Please add a description.]
	 */

	function bare(node, parent, scope) {
	  // has an `id` so we don't need to infer one
	  if (node.id) return;

	  var id;
	  if (t.isProperty(parent) && parent.kind === "init" && (!parent.computed || t.isLiteral(parent.key))) {
	    // { foo() {} };
	    id = parent.key;
	  } else if (t.isVariableDeclarator(parent)) {
	    // var foo = function () {};
	    id = parent.id;

	    if (t.isIdentifier(id)) {
	      var binding = scope.parent.getBinding(id.name);
	      if (binding && binding.constant && scope.getBinding(id.name) === binding) {
	        // always going to reference this method
	        node.id = id;
	        return;
	      }
	    }
	  } else {
	    return;
	  }

	  var name;
	  if (t.isLiteral(id)) {
	    name = id.value;
	  } else if (t.isIdentifier(id)) {
	    name = id.name;
	  } else {
	    return;
	  }

	  name = t.toBindingIdentifierName(name);
	  id = t.identifier(name);

	  var state = visit(node, name, scope);
	  return wrap(state, node, id, scope);
	}
	},{"../../types":193,"../../util":196,"./get-function-arity":76}],79:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	var t = _interopRequireWildcard(_types);

	var isReactComponent = t.buildMatchMemberExpression("React.Component");

	/**
	 * [Please add a description.]
	 */

	exports.isReactComponent = isReactComponent;

	function isCompatTag(tagName) {
	  return tagName && /^[a-z]|\-/.test(tagName);
	}

	/**
	 * [Please add a description.]
	 */

	function cleanJSXElementLiteralChild(child, args) {
	  var lines = child.value.split(/\r\n|\n|\r/);

	  var lastNonEmptyLine = 0;

	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }

	  var str = "";

	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];

	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;

	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");

	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }

	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }

	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }

	      str += trimmedLine;
	    }
	  }

	  if (str) args.push(t.literal(str));
	}

	/**
	 * [Please add a description.]
	 */

	function buildChildren(node) {
	  var elems = [];

	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];

	    if (t.isLiteral(child) && typeof child.value === "string") {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }

	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;

	    elems.push(child);
	  }

	  return elems;
	}
	},{"../../types":193}],80:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.is = is;
	exports.pullFlag = pullFlag;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashArrayPull = require("lodash/array/pull");

	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function is(node, flag) {
	  return t.isLiteral(node) && node.regex && node.regex.flags.indexOf(flag) >= 0;
	}

	/**
	 * [Please add a description.]
	 */

	function pullFlag(node, flag) {
	  var flags = node.regex.flags.split("");
	  if (node.regex.flags.indexOf(flag) < 0) return;
	  _lodashArrayPull2["default"](flags, flag);
	  node.regex.flags = flags.join("");
	}
	},{"../../types":193,"lodash/array/pull":336}],81:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var awaitVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  AwaitExpression: function AwaitExpression(node) {
	    node.type = "YieldExpression";

	    if (node.all) {
	      // await* foo; -> yield Promise.all(foo);
	      node.all = false;
	      node.argument = t.callExpression(t.memberExpression(t.identifier("Promise"), t.identifier("all")), [node.argument]);
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var referenceVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    var name = state.id.name;
	    if (node.name === name && scope.bindingIdentifierEquals(name, state.id)) {
	      return state.ref = state.ref || scope.generateUidIdentifier(name);
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports["default"] = function (path, callId) {
	  var node = path.node;

	  node.async = false;
	  node.generator = true;

	  path.traverse(awaitVisitor, state);

	  var call = t.callExpression(callId, [node]);

	  var id = node.id;
	  node.id = null;

	  if (t.isFunctionDeclaration(node)) {
	    var declar = t.variableDeclaration("let", [t.variableDeclarator(id, call)]);
	    declar._blockHoist = true;
	    return declar;
	  } else {
	    if (id) {
	      var state = { id: id };
	      path.traverse(referenceVisitor, state);

	      if (state.ref) {
	        path.scope.parent.push({ id: state.ref });
	        return t.assignmentExpression("=", state.ref, call);
	      }
	    }

	    return call;
	  }
	};

	module.exports = exports["default"];
	},{"../../types":193}],82:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _messages = require("../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function isIllegalBareSuper(node, parent) {
	  if (!t.isSuper(node)) return false;
	  if (t.isMemberExpression(parent, { computed: false })) return false;
	  if (t.isCallExpression(parent, { callee: node })) return false;
	  return true;
	}

	/**
	 * [Please add a description.]
	 */

	function isMemberExpressionSuper(node) {
	  return t.isMemberExpression(node) && t.isSuper(node.object);
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node, parent, scope, state) {
	    var topLevel = state.topLevel;
	    var self = state.self;

	    if (t.isFunction(node) && !t.isArrowFunctionExpression(node)) {
	      // we need to call traverseLevel again so we're context aware
	      self.traverseLevel(this, false);
	      return this.skip();
	    }

	    if (t.isProperty(node, { method: true }) || t.isMethodDefinition(node)) {
	      // break on object methods
	      return this.skip();
	    }

	    var getThisReference = topLevel ?
	    // top level so `this` is the instance
	    t.thisExpression :
	    // not in the top level so we need to create a reference
	    self.getThisReference.bind(self);

	    var callback = self.specHandle;
	    if (self.isLoose) callback = self.looseHandle;
	    var result = callback.call(self, this, getThisReference);
	    if (result) this.hasSuper = true;
	    if (result === true) return;
	    return result;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var ReplaceSupers = (function () {
	  function ReplaceSupers(opts) {
	    var inClass = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	    _classCallCheck(this, ReplaceSupers);

	    this.topLevelThisReference = opts.topLevelThisReference;
	    this.methodPath = opts.methodPath;
	    this.methodNode = opts.methodNode;
	    this.superRef = opts.superRef;
	    this.isStatic = opts.isStatic;
	    this.hasSuper = false;
	    this.inClass = inClass;
	    this.isLoose = opts.isLoose;
	    this.scope = opts.scope;
	    this.file = opts.file;
	    this.opts = opts;
	  }

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
	    return this.opts.objectRef || this.opts.getObjectRef();
	  };

	  /**
	   * Sets a super class value of the named property.
	   *
	   * @example
	   *
	   *   _set(Object.getPrototypeOf(CLASS.prototype), "METHOD", "VALUE", this)
	   *
	   */

	  ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property, value, isComputed, thisExpression) {
	    return t.callExpression(this.file.addHelper("set"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.literal(property.name), value, thisExpression]);
	  };

	  /**
	   * Gets a node representing the super class value of the named property.
	   *
	   * @example
	   *
	   *   _get(Object.getPrototypeOf(CLASS.prototype), "METHOD", this)
	   *
	   */

	  ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property, isComputed, thisExpression) {
	    return t.callExpression(this.file.addHelper("get"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.literal(property.name), thisExpression]);
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.replace = function replace() {
	    this.traverseLevel(this.methodPath.get("value"), true);
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.traverseLevel = function traverseLevel(path, topLevel) {
	    var state = { self: this, topLevel: topLevel };
	    path.traverse(visitor, state);
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.getThisReference = function getThisReference() {
	    if (this.topLevelThisReference) {
	      return this.topLevelThisReference;
	    } else {
	      var ref = this.topLevelThisReference = this.scope.generateUidIdentifier("this");
	      this.methodNode.value.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(this.topLevelThisReference, t.thisExpression())]));
	      return ref;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id, parent) {
	    var methodNode = this.methodNode;
	    var methodName = methodNode.key;
	    var superRef = this.superRef || t.identifier("Function");

	    if (parent.property === id) {
	      return;
	    } else if (t.isCallExpression(parent, { callee: id })) {
	      // super(); -> objectRef.prototype.MethodName.call(this);
	      parent.arguments.unshift(t.thisExpression());

	      if (methodName.name === "constructor") {
	        // constructor() { super(); }
	        if (parent.arguments.length === 2 && t.isSpreadElement(parent.arguments[1]) && t.isIdentifier(parent.arguments[1].argument, { name: "arguments" })) {
	          // special case single arguments spread
	          parent.arguments[1] = parent.arguments[1].argument;
	          return t.memberExpression(superRef, t.identifier("apply"));
	        } else {
	          return t.memberExpression(superRef, t.identifier("call"));
	        }
	      } else {
	        id = superRef;

	        // foo() { super(); }
	        if (!methodNode["static"]) {
	          id = t.memberExpression(id, t.identifier("prototype"));
	        }

	        id = t.memberExpression(id, methodName, methodNode.computed);
	        return t.memberExpression(id, t.identifier("call"));
	      }
	    } else if (t.isMemberExpression(parent) && !methodNode["static"]) {
	      // super.test -> objectRef.prototype.test
	      return t.memberExpression(superRef, t.identifier("prototype"));
	    } else {
	      return superRef;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.looseHandle = function looseHandle(path, getThisReference) {
	    var node = path.node;
	    if (path.isSuper()) {
	      return this.getLooseSuperProperty(node, path.parent);
	    } else if (path.isCallExpression()) {
	      var callee = node.callee;
	      if (!t.isMemberExpression(callee)) return;
	      if (!t.isSuper(callee.object)) return;

	      // super.test(); -> objectRef.prototype.MethodName.call(this);
	      t.appendToMemberExpression(callee, t.identifier("call"));
	      node.arguments.unshift(getThisReference());
	      return true;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node, getThisReference) {
	    if (node.operator === "=") {
	      // super.name = "val"; -> _set(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      return this.setSuperProperty(node.left.property, node.right, node.left.computed, getThisReference());
	    } else {
	      // super.age += 2; -> var _ref = super.age; super.age = _ref + 2;
	      ref = ref || path.scope.generateUidIdentifier("ref");
	      return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  ReplaceSupers.prototype.specHandle = function specHandle(path, getThisReference) {
	    var methodNode = this.methodNode;
	    var property;
	    var computed;
	    var args;
	    var thisReference;

	    var parent = path.parent;
	    var node = path.node;

	    if (isIllegalBareSuper(node, parent)) {
	      throw path.errorWithNode(messages.get("classesIllegalBareSuper"));
	    }

	    if (t.isCallExpression(node)) {
	      var callee = node.callee;
	      if (t.isSuper(callee)) {
	        // super(); -> _get(Object.getPrototypeOf(objectRef), "MethodName", this).call(this);
	        property = methodNode.key;
	        computed = methodNode.computed;
	        args = node.arguments;

	        // bare `super` call is illegal inside non-constructors
	        //  - https://esdiscuss.org/topic/super-call-in-methods
	        //  - https://twitter.com/wycats/status/544553184396836864
	        if (methodNode.key.name !== "constructor" || !this.inClass) {
	          var methodName = methodNode.key.name || "METHOD_NAME";
	          throw this.file.errorWithNode(node, messages.get("classesIllegalSuperCall", methodName));
	        }
	      } else if (isMemberExpressionSuper(callee)) {
	        // super.test(); -> _get(Object.getPrototypeOf(objectRef.prototype), "test", this).call(this);
	        property = callee.property;
	        computed = callee.computed;
	        args = node.arguments;
	      }
	    } else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
	      // super.name; -> _get(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      property = node.property;
	      computed = node.computed;
	    } else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
	      var binary = t.binaryExpression(node.operator[0], node.argument, t.literal(1));
	      if (node.prefix) {
	        // ++super.foo; -> super.foo += 1;
	        return this.specHandleAssignmentExpression(null, path, binary, getThisReference);
	      } else {
	        // super.foo++; -> var _ref = super.foo; super.foo = _ref + 1;
	        var ref = path.scope.generateUidIdentifier("ref");
	        return this.specHandleAssignmentExpression(ref, path, binary, getThisReference).concat(t.expressionStatement(ref));
	      }
	    } else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
	      return this.specHandleAssignmentExpression(null, path, node, getThisReference);
	    }

	    if (!property) return;

	    thisReference = getThisReference();
	    var superProperty = this.getSuperProperty(property, computed, thisReference);
	    if (args) {
	      if (args.length === 1 && t.isSpreadElement(args[0])) {
	        // super(...arguments);
	        return t.callExpression(t.memberExpression(superProperty, t.identifier("apply")), [thisReference, args[0].argument]);
	      } else {
	        return t.callExpression(t.memberExpression(superProperty, t.identifier("call")), [thisReference].concat(args));
	      }
	    } else {
	      return superProperty;
	    }
	  };

	  return ReplaceSupers;
	})();

	exports["default"] = ReplaceSupers;
	module.exports = exports["default"];
	},{"../../messages":60,"../../types":193}],83:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _pipeline = require("./pipeline");

	/**
	 * [Please add a description.]
	 */

	var _pipeline2 = _interopRequireDefault(_pipeline);

	/**
	 * [Please add a description.]
	 */

	var _transformers = require("./transformers");

	var _transformers2 = _interopRequireDefault(_transformers);

	/**
	 * [Please add a description.]
	 */

	var _transformersDeprecated = require("./transformers/deprecated");

	var _transformersDeprecated2 = _interopRequireDefault(_transformersDeprecated);

	/**
	 * [Please add a description.]
	 */

	var _transformersAliases = require("./transformers/aliases");

	var _transformersAliases2 = _interopRequireDefault(_transformersAliases);

	/**
	 * [Please add a description.]
	 */

	var _transformersFilters = require("./transformers/filters");

	var filters = _interopRequireWildcard(_transformersFilters);

	var pipeline = new _pipeline2["default"]();

	for (var key in _transformers2["default"]) {
	  var transformer = _transformers2["default"][key];

	  if (typeof transformer === "object") {
	    var metadata = transformer.metadata = transformer.metadata || {};
	    metadata.group = metadata.group || "builtin-basic";
	  }
	}

	pipeline.addTransformers(_transformers2["default"]);
	pipeline.addDeprecated(_transformersDeprecated2["default"]);
	pipeline.addAliases(_transformersAliases2["default"]);
	pipeline.addFilter(filters.internal);
	pipeline.addFilter(filters.blacklist);
	pipeline.addFilter(filters.whitelist);
	pipeline.addFilter(filters.stage);
	pipeline.addFilter(filters.optional);

	/**
	 * [Please add a description.]
	 */

	var transform = pipeline.transform.bind(pipeline);
	transform.fromAst = pipeline.transformFromAst.bind(pipeline);
	transform.pipeline = pipeline;
	exports["default"] = transform;
	module.exports = exports["default"];
	},{"./pipeline":96,"./transformers":140,"./transformers/aliases":100,"./transformers/deprecated":101,"./transformers/filters":139}],84:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _messages = require("../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _libRemaps = require("./lib/remaps");

	var _libRemaps2 = _interopRequireDefault(_libRemaps);

	var _lodashObjectExtend = require("lodash/object/extend");

	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);

	var _helpersObject = require("../../helpers/object");

	var _helpersObject2 = _interopRequireDefault(_helpersObject);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var metadataVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ModuleDeclaration: {
	    enter: function enter(node, parent, scope, formatter) {
	      if (node.source) {
	        node.source.value = formatter.file.resolveModuleSource(node.source.value);
	        formatter.addScope(this);
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ImportDeclaration: {
	    exit: function exit(node, parent, scope, formatter) {
	      formatter.hasLocalImports = true;

	      var specifiers = [];
	      var imported = [];
	      formatter.metadata.imports.push({
	        source: node.source.value,
	        imported: imported,
	        specifiers: specifiers
	      });

	      var _arr = this.get("specifiers");

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var specifier = _arr[_i];
	        var ids = specifier.getBindingIdentifiers();
	        _lodashObjectExtend2["default"](formatter.localImports, ids);

	        var local = specifier.node.local.name;

	        if (specifier.isImportDefaultSpecifier()) {
	          imported.push("default");
	          specifiers.push({
	            kind: "named",
	            imported: "default",
	            local: local
	          });
	        }

	        if (specifier.isImportSpecifier()) {
	          var importedName = specifier.node.imported.name;
	          imported.push(importedName);
	          specifiers.push({
	            kind: "named",
	            imported: importedName,
	            local: local
	          });
	        }

	        if (specifier.isImportNamespaceSpecifier()) {
	          imported.push("*");
	          specifiers.push({
	            kind: "namespace",
	            local: local
	          });
	        }
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportDeclaration: function ExportDeclaration(node, parent, scope, formatter) {
	    formatter.hasLocalExports = true;

	    var source = node.source ? node.source.value : null;
	    var exports = formatter.metadata.exports;

	    // export function foo() {}
	    // export var foo = "bar";
	    var declar = this.get("declaration");
	    if (declar.isStatement()) {
	      var bindings = declar.getBindingIdentifiers();

	      for (var name in bindings) {
	        var binding = bindings[name];
	        formatter._addExport(name, binding);

	        exports.exported.push(name);
	        exports.specifiers.push({
	          kind: "local",
	          local: name,
	          exported: this.isExportDefaultDeclaration() ? "default" : name
	        });
	      }
	    }

	    if (this.isExportNamedDeclaration() && node.specifiers) {
	      var _arr2 = node.specifiers;

	      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	        var specifier = _arr2[_i2];
	        var exported = specifier.exported.name;
	        exports.exported.push(exported);

	        // export foo from "bar";
	        if (t.isExportDefaultSpecifier(specifier)) {
	          exports.specifiers.push({
	            kind: "external",
	            local: exported,
	            exported: exported,
	            source: source
	          });
	        }

	        // export * as foo from "bar";
	        if (t.isExportNamespaceSpecifier(specifier)) {
	          exports.specifiers.push({
	            kind: "external-namespace",
	            exported: exported,
	            source: source
	          });
	        }

	        var local = specifier.local;
	        if (!local) continue;

	        formatter._addExport(local.name, specifier.exported);

	        // export { foo } from "bar";
	        // export { foo as bar } from "bar";
	        if (source) {
	          exports.specifiers.push({
	            kind: "external",
	            local: local.name,
	            exported: exported,
	            source: source
	          });
	        }

	        // export { foo };
	        // export { foo as bar };
	        if (!source) {
	          exports.specifiers.push({
	            kind: "local",
	            local: local.name,
	            exported: exported
	          });
	        }
	      }
	    }

	    // export * from "bar";
	    if (this.isExportAllDeclaration()) {
	      exports.specifiers.push({
	        kind: "external-all",
	        source: source
	      });
	    }

	    if (!t.isExportDefaultDeclaration(node) && !declar.isTypeAlias()) {
	      var onlyDefault = node.specifiers && node.specifiers.length === 1 && t.isSpecifierDefault(node.specifiers[0]);
	      if (!onlyDefault) {
	        formatter.hasNonDefaultExports = true;
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Scope: function Scope(node, parent, scope, formatter) {
	    if (!formatter.isLoose()) {
	      this.skip();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var DefaultFormatter = (function () {
	  function DefaultFormatter(file) {
	    _classCallCheck(this, DefaultFormatter);

	    // object containg all module sources with the scope that they're contained in
	    this.sourceScopes = _helpersObject2["default"]();

	    // ids for use in module ids
	    this.defaultIds = _helpersObject2["default"]();
	    this.ids = _helpersObject2["default"]();

	    // contains reference aliases for live bindings
	    this.remaps = new _libRemaps2["default"](file, this);

	    this.scope = file.scope;
	    this.file = file;

	    this.hasNonDefaultExports = false;

	    this.hasLocalExports = false;
	    this.hasLocalImports = false;

	    this.localExports = _helpersObject2["default"]();
	    this.localImports = _helpersObject2["default"]();

	    this.metadata = file.metadata.modules;
	    this.getMetadata();
	  }

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.addScope = function addScope(path) {
	    var source = path.node.source && path.node.source.value;
	    if (!source) return;

	    var existingScope = this.sourceScopes[source];
	    if (existingScope && existingScope !== path.scope) {
	      throw path.errorWithNode(messages.get("modulesDuplicateDeclarations"));
	    }

	    this.sourceScopes[source] = path.scope;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.isModuleType = function isModuleType(node, type) {
	    var modules = this.file.dynamicImportTypes[type];
	    return modules && modules.indexOf(node) >= 0;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.transform = function transform() {
	    this.remapAssignments();
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.doDefaultExportInterop = function doDefaultExportInterop(node) {
	    return (t.isExportDefaultDeclaration(node) || t.isSpecifierDefault(node)) && !this.noInteropRequireExport && !this.hasNonDefaultExports;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.getMetadata = function getMetadata() {
	    var has = false;
	    var _arr3 = this.file.ast.program.body;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var node = _arr3[_i3];
	      if (t.isModuleDeclaration(node)) {
	        has = true;
	        break;
	      }
	    }
	    if (has || this.isLoose()) {
	      this.file.path.traverse(metadataVisitor, this);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.remapAssignments = function remapAssignments() {
	    if (this.hasLocalExports || this.hasLocalImports) {
	      this.remaps.run();
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.remapExportAssignment = function remapExportAssignment(node, exported) {
	    var assign = node;

	    for (var i = 0; i < exported.length; i++) {
	      assign = t.assignmentExpression("=", t.memberExpression(t.identifier("exports"), exported[i]), assign);
	    }

	    return assign;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype._addExport = function _addExport(name, exported) {
	    var info = this.localExports[name] = this.localExports[name] || {
	      binding: this.scope.getBindingIdentifier(name),
	      exported: []
	    };
	    info.exported.push(exported);
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.getExport = function getExport(node, scope) {
	    if (!t.isIdentifier(node)) return;

	    var local = this.localExports[node.name];
	    if (local && local.binding === scope.getBindingIdentifier(node.name)) {
	      return local.exported;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.getModuleName = function getModuleName() {
	    var opts = this.file.opts;
	    // moduleId is n/a if a `getModuleId()` is provided
	    if (opts.moduleId != null && !opts.getModuleId) {
	      return opts.moduleId;
	    }

	    var filenameRelative = opts.filenameRelative;
	    var moduleName = "";

	    if (opts.moduleRoot != null) {
	      moduleName = opts.moduleRoot + "/";
	    }

	    if (!opts.filenameRelative) {
	      return moduleName + opts.filename.replace(/^\//, "");
	    }

	    if (opts.sourceRoot != null) {
	      // remove sourceRoot from filename
	      var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
	      filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
	    }

	    if (!opts.keepModuleIdExtensions) {
	      // remove extension
	      filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");
	    }

	    moduleName += filenameRelative;

	    // normalize path separators
	    moduleName = moduleName.replace(/\\/g, "/");

	    if (opts.getModuleId) {
	      // If return is falsy, assume they want us to use our generated default name
	      return opts.getModuleId(moduleName) || moduleName;
	    } else {
	      return moduleName;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype._pushStatement = function _pushStatement(ref, nodes) {
	    if (t.isClass(ref) || t.isFunction(ref)) {
	      if (ref.id) {
	        nodes.push(t.toStatement(ref));
	        ref = ref.id;
	      }
	    }

	    return ref;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype._hoistExport = function _hoistExport(declar, assign, priority) {
	    if (t.isFunctionDeclaration(declar)) {
	      assign._blockHoist = priority || 2;
	    }

	    return assign;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.getExternalReference = function getExternalReference(node, nodes) {
	    var ids = this.ids;
	    var id = node.source.value;

	    if (ids[id]) {
	      return ids[id];
	    } else {
	      return this.ids[id] = this._getExternalReference(node, nodes);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.checkExportIdentifier = function checkExportIdentifier(node) {
	    if (t.isIdentifier(node, { name: "__esModule" })) {
	      throw this.file.errorWithNode(node, messages.get("modulesIllegalExportName", node.name));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.exportAllDeclaration = function exportAllDeclaration(node, nodes) {
	    var ref = this.getExternalReference(node, nodes);
	    nodes.push(this.buildExportsWildcard(ref, node));
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.isLoose = function isLoose() {
	    return this.file.isLoose("es6.modules");
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.exportSpecifier = function exportSpecifier(specifier, node, nodes) {
	    if (node.source) {
	      var ref = this.getExternalReference(node, nodes);

	      if (specifier.local.name === "default" && !this.noInteropRequireExport) {
	        // importing a default so we need to normalize it
	        ref = t.callExpression(this.file.addHelper("interop-require"), [ref]);
	      } else {
	        ref = t.memberExpression(ref, specifier.local);

	        if (!this.isLoose()) {
	          nodes.push(this.buildExportsFromAssignment(specifier.exported, ref, node));
	          return;
	        }
	      }

	      // export { foo } from "test";
	      nodes.push(this.buildExportsAssignment(specifier.exported, ref, node));
	    } else {
	      // export { foo };
	      nodes.push(this.buildExportsAssignment(specifier.exported, specifier.local, node));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.buildExportsWildcard = function buildExportsWildcard(objectIdentifier) {
	    return t.expressionStatement(t.callExpression(this.file.addHelper("defaults"), [t.identifier("exports"), t.callExpression(this.file.addHelper("interop-require-wildcard"), [objectIdentifier])]));
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.buildExportsFromAssignment = function buildExportsFromAssignment(id, init) {
	    this.checkExportIdentifier(id);
	    return util.template("exports-from-assign", {
	      INIT: init,
	      ID: t.literal(id.name)
	    }, true);
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.buildExportsAssignment = function buildExportsAssignment(id, init) {
	    this.checkExportIdentifier(id);
	    return util.template("exports-assign", {
	      VALUE: init,
	      KEY: id
	    }, true);
	  };

	  /**
	   * [Please add a description.]
	   */

	  DefaultFormatter.prototype.exportDeclaration = function exportDeclaration(node, nodes) {
	    var declar = node.declaration;

	    var id = declar.id;

	    if (t.isExportDefaultDeclaration(node)) {
	      id = t.identifier("default");
	    }

	    var assign;

	    if (t.isVariableDeclaration(declar)) {
	      for (var i = 0; i < declar.declarations.length; i++) {
	        var decl = declar.declarations[i];

	        decl.init = this.buildExportsAssignment(decl.id, decl.init, node).expression;

	        var newDeclar = t.variableDeclaration(declar.kind, [decl]);
	        if (i === 0) t.inherits(newDeclar, declar);
	        nodes.push(newDeclar);
	      }
	    } else {
	      var ref = declar;

	      if (t.isFunctionDeclaration(declar) || t.isClassDeclaration(declar)) {
	        ref = declar.id;
	        nodes.push(declar);
	      }

	      assign = this.buildExportsAssignment(id, ref, node);

	      nodes.push(assign);

	      this._hoistExport(declar, assign);
	    }
	  };

	  return DefaultFormatter;
	})();

	exports["default"] = DefaultFormatter;
	module.exports = exports["default"];
	},{"../../helpers/object":58,"../../messages":60,"../../types":193,"../../util":196,"./lib/remaps":92,"lodash/object/extend":439}],85:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _util = require("../../util");

	/**
	 * [Please add a description.]
	 */

	var util = _interopRequireWildcard(_util);

	exports["default"] = function (Parent) {
	  var Constructor = function Constructor() {
	    this.noInteropRequireImport = true;
	    this.noInteropRequireExport = true;
	    Parent.apply(this, arguments);
	  };

	  util.inherits(Constructor, Parent);

	  return Constructor;
	};

	module.exports = exports["default"];
	},{"../../util":196}],86:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _amd = require("./amd");

	var _amd2 = _interopRequireDefault(_amd);

	var _strict = require("./_strict");

	/**
	 * [Please add a description.]
	 */

	var _strict2 = _interopRequireDefault(_strict);

	exports["default"] = _strict2["default"](_amd2["default"]);
	module.exports = exports["default"];
	},{"./_strict":85,"./amd":87}],87:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _default = require("./_default");

	var _default2 = _interopRequireDefault(_default);

	var _common = require("./common");

	var _common2 = _interopRequireDefault(_common);

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _lodashObjectValues = require("lodash/object/values");

	var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var AMDFormatter = (function (_DefaultFormatter) {
	  _inherits(AMDFormatter, _DefaultFormatter);

	  function AMDFormatter() {
	    _classCallCheck(this, AMDFormatter);

	    _DefaultFormatter.apply(this, arguments);
	  }

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype.setup = function setup() {
	    _common2["default"].prototype._setup.call(this, this.hasNonDefaultExports);
	  };

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype.buildDependencyLiterals = function buildDependencyLiterals() {
	    var names = [];
	    for (var name in this.ids) {
	      names.push(t.literal(name));
	    }
	    return names;
	  };

	  /**
	   * Wrap the entire body in a `define` wrapper.
	   */

	  AMDFormatter.prototype.transform = function transform(program) {
	    _common2["default"].prototype.transform.apply(this, arguments);

	    var body = program.body;

	    // build an array of module names

	    var names = [t.literal("exports")];
	    if (this.passModuleArg) names.push(t.literal("module"));
	    names = names.concat(this.buildDependencyLiterals());
	    names = t.arrayExpression(names);

	    // build up define container

	    var params = _lodashObjectValues2["default"](this.ids);
	    if (this.passModuleArg) params.unshift(t.identifier("module"));
	    params.unshift(t.identifier("exports"));

	    var container = t.functionExpression(null, params, t.blockStatement(body));

	    var defineArgs = [names, container];
	    var moduleName = this.getModuleName();
	    if (moduleName) defineArgs.unshift(t.literal(moduleName));

	    var call = t.callExpression(t.identifier("define"), defineArgs);

	    program.body = [t.expressionStatement(call)];
	  };

	  /**
	   * Get the AMD module name that we'll prepend to the wrapper
	   * to define this module
	   */

	  AMDFormatter.prototype.getModuleName = function getModuleName() {
	    if (this.file.opts.moduleIds) {
	      return _default2["default"].prototype.getModuleName.apply(this, arguments);
	    } else {
	      return null;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype._getExternalReference = function _getExternalReference(node) {
	    return this.scope.generateUidIdentifier(node.source.value);
	  };

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype.importDeclaration = function importDeclaration(node) {
	    this.getExternalReference(node);
	  };

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype.importSpecifier = function importSpecifier(specifier, node, nodes, scope) {
	    var key = node.source.value;
	    var ref = this.getExternalReference(node);

	    if (t.isImportNamespaceSpecifier(specifier) || t.isImportDefaultSpecifier(specifier)) {
	      this.defaultIds[key] = specifier.local;
	    }

	    if (this.isModuleType(node, "absolute")) {
	      // absolute module reference
	    } else if (this.isModuleType(node, "absoluteDefault")) {
	        // prevent unnecessary renaming of dynamic imports
	        this.ids[node.source.value] = ref;
	        ref = t.memberExpression(ref, t.identifier("default"));
	      } else if (t.isImportNamespaceSpecifier(specifier)) {
	        // import * as bar from "foo";
	      } else if (!_lodashCollectionIncludes2["default"](this.file.dynamicImported, node) && t.isSpecifierDefault(specifier) && !this.noInteropRequireImport) {
	          // import foo from "foo";
	          var uid = scope.generateUidIdentifier(specifier.local.name);
	          nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, t.callExpression(this.file.addHelper("interop-require-default"), [ref]))]));
	          ref = t.memberExpression(uid, t.identifier("default"));
	        } else {
	          // import { foo } from "foo";
	          var imported = specifier.imported;
	          if (t.isSpecifierDefault(specifier)) imported = t.identifier("default");
	          ref = t.memberExpression(ref, imported);
	        }

	    this.remaps.add(scope, specifier.local.name, ref);
	  };

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype.exportSpecifier = function exportSpecifier(specifier, node, nodes) {
	    if (this.doDefaultExportInterop(specifier)) {
	      this.passModuleArg = true;

	      if (specifier.exported !== specifier.local && !node.source) {
	        nodes.push(util.template("exports-default-assign", {
	          VALUE: specifier.local
	        }, true));
	        return;
	      }
	    }

	    _common2["default"].prototype.exportSpecifier.apply(this, arguments);
	  };

	  /**
	   * [Please add a description.]
	   */

	  AMDFormatter.prototype.exportDeclaration = function exportDeclaration(node, nodes) {
	    if (this.doDefaultExportInterop(node)) {
	      this.passModuleArg = true;

	      var declar = node.declaration;
	      var assign = util.template("exports-default-assign", {
	        VALUE: this._pushStatement(declar, nodes)
	      }, true);

	      if (t.isFunctionDeclaration(declar)) {
	        // we can hoist this assignment to the top of the file
	        assign._blockHoist = 3;
	      }

	      nodes.push(assign);
	      return;
	    }

	    _default2["default"].prototype.exportDeclaration.apply(this, arguments);
	  };

	  return AMDFormatter;
	})(_default2["default"]);

	exports["default"] = AMDFormatter;
	module.exports = exports["default"];
	},{"../../types":193,"../../util":196,"./_default":84,"./common":89,"lodash/collection/includes":341,"lodash/object/values":445}],88:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _common = require("./common");

	var _common2 = _interopRequireDefault(_common);

	var _strict = require("./_strict");

	/**
	 * [Please add a description.]
	 */

	var _strict2 = _interopRequireDefault(_strict);

	exports["default"] = _strict2["default"](_common2["default"]);
	module.exports = exports["default"];
	},{"./_strict":85,"./common":89}],89:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _default = require("./_default");

	var _default2 = _interopRequireDefault(_default);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var CommonJSFormatter = (function (_DefaultFormatter) {
	  _inherits(CommonJSFormatter, _DefaultFormatter);

	  function CommonJSFormatter() {
	    _classCallCheck(this, CommonJSFormatter);

	    _DefaultFormatter.apply(this, arguments);
	  }

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype.setup = function setup() {
	    this._setup(this.hasLocalExports);
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype._setup = function _setup(conditional) {
	    var file = this.file;
	    var scope = file.scope;

	    scope.rename("module");
	    scope.rename("exports");

	    if (!this.noInteropRequireImport && conditional) {
	      var templateName = "exports-module-declaration";
	      if (this.file.isLoose("es6.modules")) templateName += "-loose";
	      var declar = util.template(templateName, true);
	      declar._blockHoist = 3;
	      file.path.unshiftContainer("body", [declar]);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype.transform = function transform(program) {
	    _default2["default"].prototype.transform.apply(this, arguments);

	    if (this.hasDefaultOnlyExport) {
	      program.body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.identifier("module"), t.identifier("exports")), t.memberExpression(t.identifier("exports"), t.identifier("default")))));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype.importSpecifier = function importSpecifier(specifier, node, nodes, scope) {
	    var variableName = specifier.local;

	    var ref = this.getExternalReference(node, nodes);

	    // import foo from "foo";
	    if (t.isSpecifierDefault(specifier)) {
	      if (this.isModuleType(node, "absolute")) {
	        // absolute module reference
	      } else if (this.isModuleType(node, "absoluteDefault")) {
	          this.remaps.add(scope, variableName.name, ref);
	        } else if (this.noInteropRequireImport) {
	          this.remaps.add(scope, variableName.name, t.memberExpression(ref, t.identifier("default")));
	        } else {
	          var uid = this.scope.generateUidIdentifierBasedOnNode(node, "import");

	          nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, t.callExpression(this.file.addHelper("interop-require-default"), [ref]))]));

	          this.remaps.add(scope, variableName.name, t.memberExpression(uid, t.identifier("default")));
	        }
	    } else {
	      if (t.isImportNamespaceSpecifier(specifier)) {
	        if (!this.noInteropRequireImport) {
	          ref = t.callExpression(this.file.addHelper("interop-require-wildcard"), [ref]);
	        }

	        // import * as bar from "foo";
	        nodes.push(t.variableDeclaration("var", [t.variableDeclarator(variableName, ref)]));
	      } else {
	        // import { foo } from "foo";
	        this.remaps.add(scope, variableName.name, t.memberExpression(ref, specifier.imported));
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype.importDeclaration = function importDeclaration(node, nodes) {
	    // import "foo";
	    nodes.push(util.template("require", {
	      MODULE_NAME: node.source
	    }, true));
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype.exportSpecifier = function exportSpecifier(specifier) {
	    if (this.doDefaultExportInterop(specifier)) {
	      this.hasDefaultOnlyExport = true;
	    }

	    _default2["default"].prototype.exportSpecifier.apply(this, arguments);
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype.exportDeclaration = function exportDeclaration(node) {
	    if (this.doDefaultExportInterop(node)) {
	      this.hasDefaultOnlyExport = true;
	    }

	    _default2["default"].prototype.exportDeclaration.apply(this, arguments);
	  };

	  /**
	   * [Please add a description.]
	   */

	  CommonJSFormatter.prototype._getExternalReference = function _getExternalReference(node, nodes) {
	    var call = t.callExpression(t.identifier("require"), [node.source]);
	    var uid;

	    if (this.isModuleType(node, "absolute")) {
	      // absolute module reference
	    } else if (this.isModuleType(node, "absoluteDefault")) {
	        call = t.memberExpression(call, t.identifier("default"));
	      } else {
	        uid = this.scope.generateUidIdentifierBasedOnNode(node, "import");
	      }

	    uid = uid || node.specifiers[0].local;

	    var declar = t.variableDeclaration("var", [t.variableDeclarator(uid, call)]);
	    nodes.push(declar);
	    return uid;
	  };

	  return CommonJSFormatter;
	})(_default2["default"]);

	exports["default"] = CommonJSFormatter;
	module.exports = exports["default"];
	},{"../../types":193,"../../util":196,"./_default":84}],90:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _default = require("./_default");

	var _default2 = _interopRequireDefault(_default);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var IgnoreFormatter = (function (_DefaultFormatter) {
	  _inherits(IgnoreFormatter, _DefaultFormatter);

	  function IgnoreFormatter() {
	    _classCallCheck(this, IgnoreFormatter);

	    _DefaultFormatter.apply(this, arguments);
	  }

	  /**
	   * [Please add a description.]
	   */

	  IgnoreFormatter.prototype.exportDeclaration = function exportDeclaration(node, nodes) {
	    var declar = t.toStatement(node.declaration, true);
	    if (declar) nodes.push(t.inherits(declar, node));
	  };

	  /**
	   * [Please add a description.]
	   */

	  IgnoreFormatter.prototype.exportAllDeclaration = function exportAllDeclaration() {};

	  IgnoreFormatter.prototype.importDeclaration = function importDeclaration() {};

	  IgnoreFormatter.prototype.importSpecifier = function importSpecifier() {};

	  IgnoreFormatter.prototype.exportSpecifier = function exportSpecifier() {};

	  IgnoreFormatter.prototype.transform = function transform() {};

	  return IgnoreFormatter;
	})(_default2["default"]);

	exports["default"] = IgnoreFormatter;
	module.exports = exports["default"];
	},{"../../types":193,"./_default":84}],91:[function(require,module,exports){
	/**
	 * [Please add a description.]
	 */

	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  commonStrict: require("./common-strict"),
	  amdStrict: require("./amd-strict"),
	  umdStrict: require("./umd-strict"),
	  common: require("./common"),
	  system: require("./system"),
	  ignore: require("./ignore"),
	  amd: require("./amd"),
	  umd: require("./umd")
	};
	module.exports = exports["default"];
	},{"./amd":87,"./amd-strict":86,"./common":89,"./common-strict":88,"./ignore":90,"./system":93,"./umd":95,"./umd-strict":94}],92:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var remapVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node) {
	    if (node._skipModulesRemap) {
	      return this.skip();
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, remaps) {
	    var formatter = remaps.formatter;

	    var remap = remaps.get(scope, node.name);
	    if (!remap || node === remap) return;

	    if (!scope.hasBinding(node.name) || scope.bindingIdentifierEquals(node.name, formatter.localImports[node.name])) {
	      if (!formatter.isLoose() && this.key === "callee" && this.parentPath.isCallExpression()) {
	        return t.sequenceExpression([t.literal(0), remap]);
	      } else {
	        return remap;
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  AssignmentExpression: {
	    exit: function exit(node, parent, scope, _ref) {
	      var formatter = _ref.formatter;

	      if (!node._ignoreModulesRemap) {
	        var exported = formatter.getExport(node.left, scope);
	        if (exported) {
	          return formatter.remapExportAssignment(node, exported);
	        }
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  UpdateExpression: function UpdateExpression(node, parent, scope, _ref2) {
	    var formatter = _ref2.formatter;

	    var exported = formatter.getExport(node.argument, scope);
	    if (!exported) return;

	    this.skip();

	    // expand to long file assignment expression
	    var assign = t.assignmentExpression(node.operator[0] + "=", node.argument, t.literal(1));

	    // remap this assignment expression
	    var remapped = formatter.remapExportAssignment(assign, exported);

	    // we don't need to change the result
	    if (t.isExpressionStatement(parent) || node.prefix) {
	      return remapped;
	    }

	    var nodes = [];
	    nodes.push(remapped);

	    var operator;
	    if (node.operator === "--") {
	      operator = "+";
	    } else {
	      // "++"
	      operator = "-";
	    }
	    nodes.push(t.binaryExpression(operator, node.argument, t.literal(1)));

	    return t.sequenceExpression(nodes);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var Remaps = (function () {
	  function Remaps(file, formatter) {
	    _classCallCheck(this, Remaps);

	    this.formatter = formatter;
	    this.file = file;
	  }

	  /**
	   * [Please add a description.]
	   */

	  Remaps.prototype.run = function run() {
	    this.file.path.traverse(remapVisitor, this);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Remaps.prototype._getKey = function _getKey(name) {
	    return name + ":moduleRemap";
	  };

	  /**
	   * [Please add a description.]
	   */

	  Remaps.prototype.get = function get(scope, name) {
	    return scope.getData(this._getKey(name));
	  };

	  /**
	   * [Please add a description.]
	   */

	  Remaps.prototype.add = function add(scope, name, val) {
	    if (this.all) {
	      this.all.push({
	        name: name,
	        scope: scope,
	        node: val
	      });
	    }

	    return scope.setData(this._getKey(name), val);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Remaps.prototype.remove = function remove(scope, name) {
	    return scope.removeData(this._getKey(name));
	  };

	  /**
	   * These methods are used by the system module formatter who needs access to all the remaps
	   * so it can process them into it's specific setter method. We don't do this by default since
	   * no other module formatters need access to this.
	   */

	  Remaps.prototype.getAll = function getAll() {
	    return this.all;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Remaps.prototype.clearAll = function clearAll() {
	    if (this.all) {
	      var _arr = this.all;

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var remap = _arr[_i];
	        remap.scope.removeData(this._getKey(remap.name));
	      }
	    }

	    this.all = [];
	  };

	  return Remaps;
	})();

	exports["default"] = Remaps;
	module.exports = exports["default"];
	},{"../../../types":193}],93:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _default = require("./_default");

	var _default2 = _interopRequireDefault(_default);

	var _amd = require("./amd");

	var _amd2 = _interopRequireDefault(_amd);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _lodashArrayLast = require("lodash/array/last");

	var _lodashArrayLast2 = _interopRequireDefault(_lodashArrayLast);

	var _lodashCollectionMap = require("lodash/collection/map");

	var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var hoistVariablesVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    // nothing inside is accessible
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  VariableDeclaration: function VariableDeclaration(node, parent, scope, state) {
	    if (node.kind !== "var" && !t.isProgram(parent)) {
	      // let, const
	      // can't be accessed
	      return;
	    }

	    // ignore block hoisted nodes as these can be left in
	    if (state.formatter._canHoist(node)) return;

	    var nodes = [];

	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      state.hoistDeclarators.push(t.variableDeclarator(declar.id));
	      if (declar.init) {
	        // no initializer so we can just hoist it as-is
	        var assign = t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init));
	        nodes.push(assign);
	      }
	    }

	    // for (var i in test)
	    if (t.isFor(parent) && parent.left === node) {
	      return node.declarations[0].id;
	    }

	    return nodes;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var hoistFunctionsVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node, parent, scope, state) {
	    if (t.isFunctionDeclaration(node) || state.formatter._canHoist(node)) {
	      state.handlerBody.push(node);
	      this.dangerouslyRemove();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var runnerSettersVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node, parent, scope, state) {
	    if (node._importSource === state.source) {
	      if (t.isVariableDeclaration(node)) {
	        var _arr = node.declarations;

	        for (var _i = 0; _i < _arr.length; _i++) {
	          var declar = _arr[_i];
	          state.hoistDeclarators.push(t.variableDeclarator(declar.id));
	          state.nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
	        }
	      } else {
	        state.nodes.push(node);
	      }

	      this.dangerouslyRemove();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var SystemFormatter = (function (_AMDFormatter) {
	  _inherits(SystemFormatter, _AMDFormatter);

	  function SystemFormatter(file) {
	    _classCallCheck(this, SystemFormatter);

	    _AMDFormatter.call(this, file);

	    this._setters = null;
	    this.exportIdentifier = file.scope.generateUidIdentifier("export");
	    this.noInteropRequireExport = true;
	    this.noInteropRequireImport = true;

	    this.remaps.clearAll();
	  }

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype._addImportSource = function _addImportSource(node, exportNode) {
	    if (node) node._importSource = exportNode.source && exportNode.source.value;
	    return node;
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype.buildExportsWildcard = function buildExportsWildcard(objectIdentifier, node) {
	    var leftIdentifier = this.scope.generateUidIdentifier("key");
	    var valIdentifier = t.memberExpression(objectIdentifier, leftIdentifier, true);

	    var left = t.variableDeclaration("var", [t.variableDeclarator(leftIdentifier)]);

	    var right = objectIdentifier;

	    var block = t.blockStatement([t.expressionStatement(this._buildExportCall(leftIdentifier, valIdentifier))]);

	    return this._addImportSource(t.forInStatement(left, right, block), node);
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype.buildExportsAssignment = function buildExportsAssignment(id, init, node) {
	    var call = this._buildExportCall(t.literal(id.name), init, true);
	    return this._addImportSource(call, node);
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype.buildExportsFromAssignment = function buildExportsFromAssignment() {
	    return this.buildExportsAssignment.apply(this, arguments);
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype.remapExportAssignment = function remapExportAssignment(node, exported) {
	    var assign = node;

	    for (var i = 0; i < exported.length; i++) {
	      assign = this._buildExportCall(t.literal(exported[i].name), assign);
	    }

	    return assign;
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype._buildExportCall = function _buildExportCall(id, init, isStatement) {
	    var call = t.callExpression(this.exportIdentifier, [id, init]);
	    if (isStatement) {
	      return t.expressionStatement(call);
	    } else {
	      return call;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype.importSpecifier = function importSpecifier(specifier, node, nodes) {
	    _amd2["default"].prototype.importSpecifier.apply(this, arguments);

	    var _arr2 = this.remaps.getAll();

	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var remap = _arr2[_i2];
	      nodes.push(t.variableDeclaration("var", [t.variableDeclarator(t.identifier(remap.name), remap.node)]));
	    }

	    this.remaps.clearAll();

	    this._addImportSource(_lodashArrayLast2["default"](nodes), node);
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype._buildRunnerSetters = function _buildRunnerSetters(block, hoistDeclarators) {
	    var scope = this.file.scope;

	    return t.arrayExpression(_lodashCollectionMap2["default"](this.ids, function (uid, source) {
	      var state = {
	        hoistDeclarators: hoistDeclarators,
	        source: source,
	        nodes: []
	      };

	      scope.traverse(block, runnerSettersVisitor, state);

	      return t.functionExpression(null, [uid], t.blockStatement(state.nodes));
	    }));
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype._canHoist = function _canHoist(node) {
	    return node._blockHoist && !this.file.dynamicImports.length;
	  };

	  /**
	   * [Please add a description.]
	   */

	  SystemFormatter.prototype.transform = function transform(program) {
	    _default2["default"].prototype.transform.apply(this, arguments);

	    var hoistDeclarators = [];
	    var moduleName = this.getModuleName();
	    var moduleNameLiteral = t.literal(moduleName);

	    var block = t.blockStatement(program.body);

	    var setterListNode = this._buildRunnerSetters(block, hoistDeclarators);
	    this._setters = setterListNode;

	    var runner = util.template("system", {
	      MODULE_DEPENDENCIES: t.arrayExpression(this.buildDependencyLiterals()),
	      EXPORT_IDENTIFIER: this.exportIdentifier,
	      MODULE_NAME: moduleNameLiteral,
	      SETTERS: setterListNode,
	      EXECUTE: t.functionExpression(null, [], block)
	    }, true);

	    var handlerBody = runner.expression.arguments[2].body.body;
	    if (!moduleName) runner.expression.arguments.shift();

	    var returnStatement = handlerBody.pop();

	    // hoist up all variable declarations
	    this.file.scope.traverse(block, hoistVariablesVisitor, {
	      formatter: this,
	      hoistDeclarators: hoistDeclarators
	    });

	    if (hoistDeclarators.length) {
	      var hoistDeclar = t.variableDeclaration("var", hoistDeclarators);
	      hoistDeclar._blockHoist = true;
	      handlerBody.unshift(hoistDeclar);
	    }

	    // hoist up function declarations for circular references
	    this.file.scope.traverse(block, hoistFunctionsVisitor, {
	      formatter: this,
	      handlerBody: handlerBody
	    });

	    handlerBody.push(returnStatement);

	    program.body = [runner];
	  };

	  return SystemFormatter;
	})(_amd2["default"]);

	exports["default"] = SystemFormatter;
	module.exports = exports["default"];
	},{"../../types":193,"../../util":196,"./_default":84,"./amd":87,"lodash/array/last":335,"lodash/collection/map":342}],94:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _umd = require("./umd");

	var _umd2 = _interopRequireDefault(_umd);

	var _strict = require("./_strict");

	/**
	 * [Please add a description.]
	 */

	var _strict2 = _interopRequireDefault(_strict);

	exports["default"] = _strict2["default"](_umd2["default"]);
	module.exports = exports["default"];
	},{"./_strict":85,"./umd":95}],95:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _default = require("./_default");

	var _default2 = _interopRequireDefault(_default);

	var _amd = require("./amd");

	var _amd2 = _interopRequireDefault(_amd);

	var _lodashObjectValues = require("lodash/object/values");

	var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);

	var _path = require("path");

	var _path2 = _interopRequireDefault(_path);

	var _util = require("../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var UMDFormatter = (function (_AMDFormatter) {
	  _inherits(UMDFormatter, _AMDFormatter);

	  function UMDFormatter() {
	    _classCallCheck(this, UMDFormatter);

	    _AMDFormatter.apply(this, arguments);
	  }

	  /**
	   * [Please add a description.]
	   */

	  UMDFormatter.prototype.transform = function transform(program) {
	    _default2["default"].prototype.transform.apply(this, arguments);

	    var body = program.body;

	    // build an array of module names

	    var names = [];
	    for (var _name in this.ids) {
	      names.push(t.literal(_name));
	    }

	    // factory

	    var ids = _lodashObjectValues2["default"](this.ids);
	    var args = [t.identifier("exports")];
	    if (this.passModuleArg) args.push(t.identifier("module"));
	    args = args.concat(ids);

	    var factory = t.functionExpression(null, args, t.blockStatement(body));

	    // amd

	    var defineArgs = [t.literal("exports")];
	    if (this.passModuleArg) defineArgs.push(t.literal("module"));
	    defineArgs = defineArgs.concat(names);
	    defineArgs = [t.arrayExpression(defineArgs)];

	    // common

	    var testExports = util.template("test-exports");
	    var testModule = util.template("test-module");
	    var commonTests = this.passModuleArg ? t.logicalExpression("&&", testExports, testModule) : testExports;

	    var commonArgs = [t.identifier("exports")];
	    if (this.passModuleArg) commonArgs.push(t.identifier("module"));
	    commonArgs = commonArgs.concat(names.map(function (name) {
	      return t.callExpression(t.identifier("require"), [name]);
	    }));

	    // globals

	    var browserArgs = [];
	    if (this.passModuleArg) browserArgs.push(t.identifier("mod"));

	    for (var _name2 in this.ids) {
	      var id = this.defaultIds[_name2] || t.identifier(t.toIdentifier(_path2["default"].basename(_name2, _path2["default"].extname(_name2))));
	      browserArgs.push(t.memberExpression(t.identifier("global"), id));
	    }

	    //

	    var moduleName = this.getModuleName();
	    if (moduleName) defineArgs.unshift(t.literal(moduleName));

	    //
	    var globalArg = this.file.opts.basename;
	    if (moduleName) globalArg = moduleName;
	    globalArg = t.identifier(t.toIdentifier(globalArg));

	    var runner = util.template("umd-runner-body", {
	      AMD_ARGUMENTS: defineArgs,
	      COMMON_TEST: commonTests,
	      COMMON_ARGUMENTS: commonArgs,
	      BROWSER_ARGUMENTS: browserArgs,
	      GLOBAL_ARG: globalArg
	    });

	    //

	    program.body = [t.expressionStatement(t.callExpression(runner, [t.thisExpression(), factory]))];
	  };

	  return UMDFormatter;
	})(_amd2["default"]);

	exports["default"] = UMDFormatter;
	module.exports = exports["default"];
	},{"../../types":193,"../../util":196,"./_default":84,"./amd":87,"lodash/object/values":445,"path":12}],96:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _filePluginManager = require("./file/plugin-manager");

	var _filePluginManager2 = _interopRequireDefault(_filePluginManager);

	var _helpersNormalizeAst = require("../helpers/normalize-ast");

	var _helpersNormalizeAst2 = _interopRequireDefault(_helpersNormalizeAst);

	var _plugin = require("./plugin");

	var _plugin2 = _interopRequireDefault(_plugin);

	var _lodashObjectAssign = require("lodash/object/assign");

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _helpersObject = require("../helpers/object");

	var _helpersObject2 = _interopRequireDefault(_helpersObject);

	var _file = require("./file");

	/**
	 * [Please add a description.]
	 */

	var _file2 = _interopRequireDefault(_file);

	var Pipeline = (function () {
	  function Pipeline() {
	    _classCallCheck(this, Pipeline);

	    this.transformers = _helpersObject2["default"]();
	    this.namespaces = _helpersObject2["default"]();
	    this.deprecated = _helpersObject2["default"]();
	    this.aliases = _helpersObject2["default"]();
	    this.filters = [];
	  }

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.addTransformers = function addTransformers(transformers) {
	    for (var key in transformers) {
	      this.addTransformer(key, transformers[key]);
	    }
	    return this;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.addTransformer = function addTransformer(key, plugin) {
	    if (this.transformers[key]) throw new Error(); // todo: error

	    var namespace = key.split(".")[0];
	    this.namespaces[namespace] = this.namespaces[namespace] || [];
	    this.namespaces[namespace].push(key);
	    this.namespaces[key] = namespace;

	    if (typeof plugin === "function") {
	      plugin = _filePluginManager2["default"].memoisePluginContainer(plugin);
	      plugin.key = key;
	      plugin.metadata.optional = true;

	      if (key === "react.displayName") {
	        plugin.metadata.optional = false;
	      }
	    } else {
	      plugin = new _plugin2["default"](key, plugin);
	    }

	    this.transformers[key] = plugin;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.addAliases = function addAliases(names) {
	    _lodashObjectAssign2["default"](this.aliases, names);
	    return this;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.addDeprecated = function addDeprecated(names) {
	    _lodashObjectAssign2["default"](this.deprecated, names);
	    return this;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.addFilter = function addFilter(filter) {
	    this.filters.push(filter);
	    return this;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.canTransform = function canTransform(plugin, fileOpts) {
	    if (plugin.metadata.plugin) {
	      return true;
	    }

	    var _arr = this.filters;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var filter = _arr[_i];
	      var result = filter(plugin, fileOpts);
	      if (result != null) return result;
	    }

	    return true;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.analyze = function analyze(code) {
	    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    opts.code = false;
	    return this.transform(code, opts);
	  };

	  /**
	   * Build dependency graph by recursing `metadata.modules`. WIP.
	   */

	  Pipeline.prototype.pretransform = function pretransform(code, opts) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file;
	    });
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.transform = function transform(code, opts) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file.transform();
	    });
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype.transformFromAst = function transformFromAst(ast, code, opts) {
	    ast = _helpersNormalizeAst2["default"](ast);

	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.addAst(ast);
	      return file.transform();
	    });
	  };

	  /**
	   * [Please add a description.]
	   */

	  Pipeline.prototype._ensureTransformerNames = function _ensureTransformerNames(type, rawKeys) {
	    // istanbul ignore next

	    var _this = this;

	    return rawKeys.reduce(function (prev, key, i, arr) {
	      var deprecatedKey = _this.deprecated[key];
	      var aliasKey = _this.aliases[key];
	      if (aliasKey) {
	        prev.push(aliasKey);
	      } else if (deprecatedKey) {
	        // deprecated key, remap it to the new one
	        console.error("[BABEL] The transformer " + key + " has been renamed to " + deprecatedKey);
	        arr.push(deprecatedKey);
	      } else if (_this.transformers[key]) {
	        // valid key
	        prev.push(key);
	      } else if (_this.namespaces[key]) {
	        // namespace, append all transformers within this namespace
	        prev = prev.concat(_this.namespaces[key]);
	      } else {
	        // invalid key
	        throw new ReferenceError("Unknown transformer " + key + " specified in " + type);
	      }

	      return prev;
	    }, []);
	  };

	  return Pipeline;
	})();

	exports["default"] = Pipeline;
	module.exports = exports["default"];
	},{"../helpers/normalize-ast":57,"../helpers/object":58,"./file":63,"./file/plugin-manager":69,"./plugin":98,"lodash/object/assign":437}],97:[function(require,module,exports){


	/**
	 * This class is responsible for traversing over the provided `File`s
	 * AST and running it's parent transformers handlers over it.
	 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _traversal = require("../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var PluginPass = (function () {
	  function PluginPass(file, plugin) {
	    _classCallCheck(this, PluginPass);

	    this.plugin = plugin;
	    this.file = file;
	    this.key = plugin.key;

	    if (this.canTransform() && plugin.metadata.experimental && !file.opts.experimental) {
	      file.log.warn("THE TRANSFORMER " + this.key + " HAS BEEN MARKED AS EXPERIMENTAL AND IS WIP. USE AT YOUR OWN RISK. " + "THIS WILL HIGHLY LIKELY BREAK YOUR CODE SO USE WITH **EXTREME** CAUTION. ENABLE THE " + "`experimental` OPTION TO IGNORE THIS WARNING.");
	    }
	  }

	  /**
	  * [Please add a description.]
	  */

	  PluginPass.prototype.canTransform = function canTransform() {
	    return this.file.transformerDependencies[this.key] || this.file.pipeline.canTransform(this.plugin, this.file.opts);
	  };

	  /**
	   * [Please add a description.]
	   */

	  PluginPass.prototype.transform = function transform() {
	    var file = this.file;
	    file.log.debug("Start transformer " + this.key);
	    _traversal2["default"](file.ast, this.plugin.visitor, file.scope, file);
	    file.log.debug("Finish transformer " + this.key);
	  };

	  return PluginPass;
	})();

	exports["default"] = PluginPass;
	module.exports = exports["default"];
	},{"../traversal":162}],98:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _pluginPass = require("./plugin-pass");

	var _pluginPass2 = _interopRequireDefault(_pluginPass);

	var _messages = require("../messages");

	var messages = _interopRequireWildcard(_messages);

	var _traversal = require("../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _lodashObjectAssign = require("lodash/object/assign");

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _lodashLangClone = require("lodash/lang/clone");

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var _file = require("./file");

	var _file2 = _interopRequireDefault(_file);

	var _types = require("../types");

	var t = _interopRequireWildcard(_types);

	var VALID_PLUGIN_PROPERTIES = ["visitor", "metadata", "manipulateOptions", "post", "pre"];

	var VALID_METADATA_PROPERTES = ["dependencies", "optional", "stage", "group", "experimental", "secondPass"];

	/**
	 * [Please add a description.]
	 */

	var Plugin = (function () {
	  function Plugin(key, plugin) {
	    _classCallCheck(this, Plugin);

	    Plugin.validate(key, plugin);

	    plugin = _lodashObjectAssign2["default"]({}, plugin);

	    var take = function take(key) {
	      var val = plugin[key];
	      delete plugin[key];
	      return val;
	    };

	    this.manipulateOptions = take("manipulateOptions");
	    this.metadata = take("metadata") || {};
	    this.dependencies = this.metadata.dependencies || [];
	    this.post = take("post");
	    this.pre = take("pre");

	    //

	    if (this.metadata.stage != null) {
	      this.metadata.optional = true;
	    }

	    //

	    this.visitor = this.normalize(_lodashLangClone2["default"](take("visitor")) || {});
	    this.key = key;
	  }

	  /**
	   * [Please add a description.]
	   */

	  Plugin.validate = function validate(name, plugin) {
	    for (var key in plugin) {
	      if (key[0] === "_") continue;
	      if (VALID_PLUGIN_PROPERTIES.indexOf(key) >= 0) continue;

	      var msgType = "pluginInvalidProperty";
	      if (t.TYPES.indexOf(key) >= 0) msgType = "pluginInvalidPropertyVisitor";
	      throw new Error(messages.get(msgType, name, key));
	    }

	    for (var key in plugin.metadata) {
	      if (VALID_METADATA_PROPERTES.indexOf(key) >= 0) continue;

	      throw new Error(messages.get("pluginInvalidProperty", name, "metadata." + key));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Plugin.prototype.normalize = function normalize(visitor) {
	    _traversal2["default"].explode(visitor);
	    return visitor;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Plugin.prototype.buildPass = function buildPass(file) {
	    // validate Transformer instance
	    if (!(file instanceof _file2["default"])) {
	      throw new TypeError(messages.get("pluginNotFile", this.key));
	    }

	    return new _pluginPass2["default"](file, this);
	  };

	  return Plugin;
	})();

	exports["default"] = Plugin;
	module.exports = exports["default"];
	},{"../messages":60,"../traversal":162,"../types":193,"./file":63,"./plugin-pass":97,"lodash/lang/clone":422,"lodash/object/assign":437}],99:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _plugin = require("./plugin");

	/**
	 * [Please add a description.]
	 */

	var _plugin2 = _interopRequireDefault(_plugin);

	var Transformer = function Transformer(key, obj) {
	  _classCallCheck(this, Transformer);

	  var plugin = {};

	  plugin.metadata = obj.metadata;
	  delete obj.metadata;

	  plugin.visitor = obj;

	  return new _plugin2["default"](key, plugin);
	};

	exports["default"] = Transformer;
	module.exports = exports["default"];
	},{"./plugin":98}],100:[function(require,module,exports){
	module.exports={
	  "useStrict": "strict",
	  "es5.runtime": "runtime",
	  "es6.runtime": "runtime",
	  "minification.inlineExpressions": "minification.constantFolding"
	}

	},{}],101:[function(require,module,exports){
	module.exports={
	  "selfContained": "runtime",
	  "unicode-regex": "regex.unicode",
	  "spec.typeofSymbol": "es6.spec.symbols",
	  "es6.symbols": "es6.spec.symbols",
	  "es6.blockScopingTDZ": "es6.spec.blockScoping",

	  "utility.inlineExpressions": "minification.constantFolding",
	  "utility.deadCodeElimination": "minification.deadCodeElimination",
	  "utility.removeConsoleCalls": "minification.removeConsole",
	  "utility.removeDebugger": "minification.removeDebugger",

	  "es6.parameters.rest": "es6.parameters",
	  "es6.parameters.default": "es6.parameters"
	}

	},{}],102:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-trailing"
	};

	/**
	 * Turn member expression reserved word properties into literals.
	 *
	 * @example
	 *
	 * **In**
	 *
	 * ```javascript
	 * foo.catch;
	 * ```
	 *
	 * **Out**
	 *
	 * ```javascript
	 * foo["catch"];
	 * ```
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * Look for non-computed properties with names that are not valid identifiers.
	   * Turn them into computed properties with literal names.
	   */

	  MemberExpression: {
	    exit: function exit(node) {
	      var prop = node.property;
	      if (!node.computed && t.isIdentifier(prop) && !t.isValidIdentifier(prop.name)) {
	        // foo.default -> foo["default"]
	        node.property = t.literal(prop.name);
	        node.computed = true;
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],103:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-trailing"
	};

	/**
	 * Turn reserved word properties into literals.
	 *
	 * **In**
	 *
	 * ```javascript
	 * var foo = {
	 *   catch: function () {}
	 * };
	 * ```
	 *
	 * **Out**
	 *
	 * ```javascript
	 * var foo = {
	 *   "catch": function () {}
	 * };
	 * ```
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * Look for non-computed keys with names that are not valid identifiers.
	   * Turn them into literals.
	   */

	  Property: {
	    exit: function exit(node) {
	      var key = node.key;
	      if (!node.computed && t.isIdentifier(key) && !t.isValidIdentifier(key.name)) {
	        // default: "bar" -> "default": "bar"
	        node.key = t.literal(key.name);
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],104:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _helpersDefineMap = require("../../helpers/define-map");

	var defineMap = _interopRequireWildcard(_helpersDefineMap);

	var _types = require("../../../types");

	/**
	 * Turn [object initializer mutators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Method_definitions)
	 * into `Object.defineProperties`.
	 *
	 * **In**
	 *
	 * ```javascript
	 * var foo = {
	 *   get bar() {
	 *     return "bar";
	 *   }
	 * };
	 * ```
	 *
	 * **Out**
	 *
	 * ```javascript
	 * var foo = Object.defineProperties({}, {
	 *   bar: {
	 *     get: function () {
	 *       return "bar";
	 *     },
	 *     enumerable: true,
	 *     configurable: true
	 *   }
	 * });
	 * ```
	 */

	var t = _interopRequireWildcard(_types);

	var visitor = {

	  /**
	   * Look for getters and setters on an object.
	   * Filter them out and wrap the object with an `Object.defineProperties` that
	   * defines the getters and setters.
	   */

	  ObjectExpression: function ObjectExpression(node, parent, scope, file) {
	    var hasAny = false;
	    var _arr = node.properties;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var prop = _arr[_i];
	      if (prop.kind === "get" || prop.kind === "set") {
	        hasAny = true;
	        break;
	      }
	    }
	    if (!hasAny) return;

	    var mutatorMap = {};

	    node.properties = node.properties.filter(function (prop) {
	      if (prop.kind === "get" || prop.kind === "set") {
	        defineMap.push(mutatorMap, prop, prop.kind, file);
	        return false;
	      } else {
	        return true;
	      }
	    });

	    return t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("defineProperties")), [node, defineMap.toDefineObject(mutatorMap)]);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/define-map":74}],105:[function(require,module,exports){
	/**
	 * Turn arrow functions into normal functions.
	 *
	 * @example
	 *
	 * **In**
	 *
	 * ```javascript
	 * arr.map(x => x * x);
	 * ```
	 *
	 * **Out**
	 *
	 * ```javascript
	 * arr.map(function (x) {
	 *   return x * x;
	 * });
	 */

	"use strict";

	exports.__esModule = true;
	var visitor = {

	  /**
	   * Look for arrow functions and mark them as "shadow functions".
	   * @see /transformation/transformers/internal/shadow-functions.js
	   */

	  ArrowFunctionExpression: function ArrowFunctionExpression(node) {
	    this.ensureBlock();
	    node.expression = false;
	    node.type = "FunctionExpression";
	    node.shadow = true;
	  }
	};
	exports.visitor = visitor;
	},{}],106:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _traversal = require("../../../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _helpersObject = require("../../../helpers/object");

	var _helpersObject2 = _interopRequireDefault(_helpersObject);

	var _util = require("../../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var _lodashObjectValues = require("lodash/object/values");

	var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);

	var _lodashObjectExtend = require("lodash/object/extend");

	/**
	 * [Please add a description.]
	 */

	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);

	function isLet(node, parent) {
	  if (!t.isVariableDeclaration(node)) return false;
	  if (node._let) return true;
	  if (node.kind !== "let") return false;

	  // https://github.com/babel/babel/issues/255
	  if (isLetInitable(node, parent)) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      declar.init = declar.init || t.identifier("undefined");
	    }
	  }

	  node._let = true;
	  node.kind = "var";
	  return true;
	}

	/**
	 * [Please add a description.]
	 */

	function isLetInitable(node, parent) {
	  return !t.isFor(parent) || !t.isFor(parent, { left: node });
	}

	/**
	 * [Please add a description.]
	 */

	function isVar(node, parent) {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !isLet(node, parent);
	}

	/**
	 * [Please add a description.]
	 */

	function standardizeLets(declars) {
	  var _arr = declars;

	  for (var _i = 0; _i < _arr.length; _i++) {
	    var declar = _arr[_i];
	    delete declar._let;
	  }
	}

	var metadata = {
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  VariableDeclaration: function VariableDeclaration(node, parent, scope, file) {
	    if (!isLet(node, parent)) return;

	    if (isLetInitable(node) && file.transformers["es6.spec.blockScoping"].canTransform()) {
	      var nodes = [node];

	      for (var i = 0; i < node.declarations.length; i++) {
	        var decl = node.declarations[i];
	        if (decl.init) {
	          var assign = t.assignmentExpression("=", decl.id, decl.init);
	          assign._ignoreBlockScopingTDZ = true;
	          nodes.push(t.expressionStatement(assign));
	        }
	        decl.init = file.addHelper("temporal-undefined");
	      }

	      node._blockHoist = 2;

	      return nodes;
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Loop: function Loop(node, parent, scope, file) {
	    var init = node.left || node.init;
	    if (isLet(init, node)) {
	      t.ensureBlock(node);
	      node.body._letDeclarators = [init];
	    }

	    var blockScoping = new BlockScoping(this, this.get("body"), parent, scope, file);
	    return blockScoping.run();
	  },

	  /**
	   * [Please add a description.]
	   */

	  "BlockStatement|Program": function BlockStatementProgram(block, parent, scope, file) {
	    if (!t.isLoop(parent)) {
	      var blockScoping = new BlockScoping(null, this, parent, scope, file);
	      blockScoping.run();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.visitor = visitor;
	function replace(node, parent, scope, remaps) {
	  var remap = remaps[node.name];
	  if (!remap) return;

	  var ownBinding = scope.getBindingIdentifier(node.name);
	  if (ownBinding === remap.binding) {
	    node.name = remap.uid;
	  } else {
	    // scope already has it's own binding that doesn't
	    // match the one we have a stored replacement for
	    if (this) this.skip();
	  }
	}

	/**
	 * [Please add a description.]
	 */

	var replaceVisitor = {
	  ReferencedIdentifier: replace,

	  /**
	   * [Please add a description.]
	   */

	  AssignmentExpression: function AssignmentExpression(node, parent, scope, remaps) {
	    var ids = this.getBindingIdentifiers();
	    for (var name in ids) {
	      replace(ids[name], node, scope, remaps);
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	function traverseReplace(node, parent, scope, remaps) {
	  if (t.isIdentifier(node)) {
	    replace(node, parent, scope, remaps);
	  }

	  if (t.isAssignmentExpression(node)) {
	    var ids = t.getBindingIdentifiers(node);
	    for (var name in ids) {
	      replace(ids[name], parent, scope, remaps);
	    }
	  }

	  scope.traverse(node, replaceVisitor, remaps);
	}

	/**
	 * [Please add a description.]
	 */

	var letReferenceBlockVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, state) {
	    this.traverse(letReferenceFunctionVisitor, state);
	    return this.skip();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var letReferenceFunctionVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    var ref = state.letReferences[node.name];

	    // not a part of our scope
	    if (!ref) return;

	    // this scope has a variable with the same name so it couldn't belong
	    // to our let scope
	    if (scope.getBindingIdentifier(node.name) !== ref) return;

	    state.closurify = true;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var hoistVarDeclarationsVisitor = {
	  enter: function enter(node, parent, scope, self) {
	    if (this.isForStatement()) {
	      if (isVar(node.init, node)) {
	        var nodes = self.pushDeclar(node.init);
	        if (nodes.length === 1) {
	          node.init = nodes[0];
	        } else {
	          node.init = t.sequenceExpression(nodes);
	        }
	      }
	    } else if (this.isFor()) {
	      if (isVar(node.left, node)) {
	        node.left = node.left.declarations[0].id;
	        self.pushDeclar(node.left);
	      }
	    } else if (isVar(node, parent)) {
	      return self.pushDeclar(node).map(t.expressionStatement);
	    } else if (this.isFunction()) {
	      return this.skip();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var loopLabelVisitor = {
	  LabeledStatement: function LabeledStatement(node, parent, scope, state) {
	    state.innerLabels.push(node.label.name);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var continuationVisitor = {
	  enter: function enter(node, parent, scope, state) {
	    if (this.isAssignmentExpression() || this.isUpdateExpression()) {
	      var bindings = this.getBindingIdentifiers();
	      for (var name in bindings) {
	        if (state.outsideReferences[name] !== scope.getBindingIdentifier(name)) continue;
	        state.reassignments[name] = true;
	      }
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var loopNodeTo = function loopNodeTo(node) {
	  if (t.isBreakStatement(node)) {
	    return "break";
	  } else if (t.isContinueStatement(node)) {
	    return "continue";
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var loopVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Loop: function Loop(node, parent, scope, state) {
	    var oldIgnoreLabeless = state.ignoreLabeless;
	    state.ignoreLabeless = true;
	    this.traverse(loopVisitor, state);
	    state.ignoreLabeless = oldIgnoreLabeless;
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  SwitchCase: function SwitchCase(node, parent, scope, state) {
	    var oldInSwitchCase = state.inSwitchCase;
	    state.inSwitchCase = true;
	    this.traverse(loopVisitor, state);
	    state.inSwitchCase = oldInSwitchCase;
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node, parent, scope, state) {
	    var replace;
	    var loopText = loopNodeTo(node);

	    if (loopText) {
	      if (node.label) {
	        // we shouldn't be transforming this because it exists somewhere inside
	        if (state.innerLabels.indexOf(node.label.name) >= 0) {
	          return;
	        }

	        loopText = loopText + "|" + node.label.name;
	      } else {
	        // we shouldn't be transforming these statements because
	        // they don't refer to the actual loop we're scopifying
	        if (state.ignoreLabeless) return;

	        //
	        if (state.inSwitchCase) return;

	        // break statements mean something different in this context
	        if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;
	      }

	      state.hasBreakContinue = true;
	      state.map[loopText] = node;
	      replace = t.literal(loopText);
	    }

	    if (this.isReturnStatement()) {
	      state.hasReturn = true;
	      replace = t.objectExpression([t.property("init", t.identifier("v"), node.argument || t.identifier("undefined"))]);
	    }

	    if (replace) {
	      replace = t.returnStatement(replace);
	      this.skip();
	      return t.inherits(replace, node);
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var BlockScoping = (function () {
	  function BlockScoping(loopPath, blockPath, parent, scope, file) {
	    _classCallCheck(this, BlockScoping);

	    this.parent = parent;
	    this.scope = scope;
	    this.file = file;

	    this.blockPath = blockPath;
	    this.block = blockPath.node;

	    this.outsideLetReferences = _helpersObject2["default"]();
	    this.hasLetReferences = false;
	    this.letReferences = this.block._letReferences = _helpersObject2["default"]();
	    this.body = [];

	    if (loopPath) {
	      this.loopParent = loopPath.parent;
	      this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
	      this.loopPath = loopPath;
	      this.loop = loopPath.node;
	    }
	  }

	  /**
	   * Start the ball rolling.
	   */

	  BlockScoping.prototype.run = function run() {
	    var block = this.block;
	    if (block._letDone) return;
	    block._letDone = true;

	    var needsClosure = this.getLetReferences();

	    // this is a block within a `Function/Program` so we can safely leave it be
	    if (t.isFunction(this.parent) || t.isProgram(this.block)) return;

	    // we can skip everything
	    if (!this.hasLetReferences) return;

	    if (needsClosure) {
	      this.wrapClosure();
	    } else {
	      this.remap();
	    }

	    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
	      return t.labeledStatement(this.loopLabel, this.loop);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  BlockScoping.prototype.remap = function remap() {
	    var hasRemaps = false;
	    var letRefs = this.letReferences;
	    var scope = this.scope;

	    // alright, so since we aren't wrapping this block in a closure
	    // we have to check if any of our let variables collide with
	    // those in upper scopes and then if they do, generate a uid
	    // for them and replace all references with it
	    var remaps = _helpersObject2["default"]();

	    for (var key in letRefs) {
	      // just an Identifier node we collected in `getLetReferences`
	      // this is the defining identifier of a declaration
	      var ref = letRefs[key];

	      // todo: could skip this if the colliding binding is in another function
	      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
	        var uid = scope.generateUidIdentifier(ref.name).name;
	        ref.name = uid;

	        hasRemaps = true;
	        remaps[key] = remaps[uid] = {
	          binding: ref,
	          uid: uid
	        };
	      }
	    }

	    if (!hasRemaps) return;

	    //

	    var loop = this.loop;
	    if (loop) {
	      traverseReplace(loop.right, loop, scope, remaps);
	      traverseReplace(loop.test, loop, scope, remaps);
	      traverseReplace(loop.update, loop, scope, remaps);
	    }

	    this.blockPath.traverse(replaceVisitor, remaps);
	  };

	  /**
	   * [Please add a description.]
	   */

	  BlockScoping.prototype.wrapClosure = function wrapClosure() {
	    var block = this.block;

	    var outsideRefs = this.outsideLetReferences;

	    // remap loop heads with colliding variables
	    if (this.loop) {
	      for (var name in outsideRefs) {
	        var id = outsideRefs[name];

	        if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
	          delete outsideRefs[id.name];
	          delete this.letReferences[id.name];

	          this.scope.rename(id.name);

	          this.letReferences[id.name] = id;
	          outsideRefs[id.name] = id;
	        }
	      }
	    }

	    // if we're inside of a for loop then we search to see if there are any
	    // `break`s, `continue`s, `return`s etc
	    this.has = this.checkLoop();

	    // hoist var references to retain scope
	    this.hoistVarDeclarations();

	    // turn outsideLetReferences into an array
	    var params = _lodashObjectValues2["default"](outsideRefs);
	    var args = _lodashObjectValues2["default"](outsideRefs);

	    // build the closure that we're going to wrap the block with
	    var fn = t.functionExpression(null, params, t.blockStatement(block.body));
	    fn.shadow = true;

	    // continuation
	    this.addContinuations(fn);

	    // replace the current block body with the one we're going to build
	    block.body = this.body;

	    var ref = fn;

	    if (this.loop) {
	      ref = this.scope.generateUidIdentifier("loop");
	      this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
	    }

	    // build a call and a unique id that we can assign the return value to
	    var call = t.callExpression(ref, args);
	    var ret = this.scope.generateUidIdentifier("ret");

	    // handle generators
	    var hasYield = _traversal2["default"].hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
	    if (hasYield) {
	      fn.generator = true;
	      call = t.yieldExpression(call, true);
	    }

	    // handlers async functions
	    var hasAsync = _traversal2["default"].hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
	    if (hasAsync) {
	      fn.async = true;
	      call = t.awaitExpression(call);
	    }

	    this.buildClosure(ret, call);
	  };

	  /**
	   * Push the closure to the body.
	   */

	  BlockScoping.prototype.buildClosure = function buildClosure(ret, call) {
	    var has = this.has;
	    if (has.hasReturn || has.hasBreakContinue) {
	      this.buildHas(ret, call);
	    } else {
	      this.body.push(t.expressionStatement(call));
	    }
	  };

	  /**
	   * If any of the outer let variables are reassigned then we need to rename them in
	   * the closure so we can get direct access to the outer variable to continue the
	   * iteration with bindings based on each iteration.
	   *
	   * Reference: https://github.com/babel/babel/issues/1078
	   */

	  BlockScoping.prototype.addContinuations = function addContinuations(fn) {
	    var state = {
	      reassignments: {},
	      outsideReferences: this.outsideLetReferences
	    };

	    this.scope.traverse(fn, continuationVisitor, state);

	    for (var i = 0; i < fn.params.length; i++) {
	      var param = fn.params[i];
	      if (!state.reassignments[param.name]) continue;

	      var newParam = this.scope.generateUidIdentifier(param.name);
	      fn.params[i] = newParam;

	      this.scope.rename(param.name, newParam.name, fn);

	      // assign outer reference as it's been modified internally and needs to be retained
	      fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  BlockScoping.prototype.getLetReferences = function getLetReferences() {
	    var block = this.block;

	    var declarators = block._letDeclarators || [];

	    //
	    for (var i = 0; i < declarators.length; i++) {
	      var declar = declarators[i];
	      _lodashObjectExtend2["default"](this.outsideLetReferences, t.getBindingIdentifiers(declar));
	    }

	    //
	    if (block.body) {
	      for (var i = 0; i < block.body.length; i++) {
	        var declar = block.body[i];
	        if (isLet(declar, block)) {
	          declarators = declarators.concat(declar.declarations);
	        }
	      }
	    }

	    //
	    for (var i = 0; i < declarators.length; i++) {
	      var declar = declarators[i];
	      var keys = t.getBindingIdentifiers(declar);
	      _lodashObjectExtend2["default"](this.letReferences, keys);
	      this.hasLetReferences = true;
	    }

	    // no let references so we can just quit
	    if (!this.hasLetReferences) return;

	    // set let references to plain var references
	    standardizeLets(declarators);

	    var state = {
	      letReferences: this.letReferences,
	      closurify: false
	    };

	    // traverse through this block, stopping on functions and checking if they
	    // contain any local let references
	    this.blockPath.traverse(letReferenceBlockVisitor, state);

	    return state.closurify;
	  };

	  /**
	   * If we're inside of a loop then traverse it and check if it has one of
	   * the following node types `ReturnStatement`, `BreakStatement`,
	   * `ContinueStatement` and replace it with a return value that we can track
	   * later on.
	   *
	   * @returns {Object}
	   */

	  BlockScoping.prototype.checkLoop = function checkLoop() {
	    var state = {
	      hasBreakContinue: false,
	      ignoreLabeless: false,
	      inSwitchCase: false,
	      innerLabels: [],
	      hasReturn: false,
	      isLoop: !!this.loop,
	      map: {}
	    };

	    this.blockPath.traverse(loopLabelVisitor, state);
	    this.blockPath.traverse(loopVisitor, state);

	    return state;
	  };

	  /**
	   * Hoist all var declarations in this block to before it so they retain scope
	   * once we wrap everything in a closure.
	   */

	  BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
	    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
	  };

	  /**
	   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with
	   * their declarations hoisted to before the closure wrapper.
	   */

	  BlockScoping.prototype.pushDeclar = function pushDeclar(node) {
	    var declars = [];
	    var names = t.getBindingIdentifiers(node);
	    for (var name in names) {
	      declars.push(t.variableDeclarator(names[name]));
	    }

	    this.body.push(t.variableDeclaration(node.kind, declars));

	    var replace = [];

	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      if (!declar.init) continue;

	      var expr = t.assignmentExpression("=", declar.id, declar.init);
	      replace.push(t.inherits(expr, declar));
	    }

	    return replace;
	  };

	  /**
	   * [Please add a description.]
	   */

	  BlockScoping.prototype.buildHas = function buildHas(ret, call) {
	    var body = this.body;

	    body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));

	    var retCheck;
	    var has = this.has;
	    var cases = [];

	    if (has.hasReturn) {
	      // typeof ret === "object"
	      retCheck = util.template("let-scoping-return", {
	        RETURN: ret
	      });
	    }

	    if (has.hasBreakContinue) {
	      for (var key in has.map) {
	        cases.push(t.switchCase(t.literal(key), [has.map[key]]));
	      }

	      if (has.hasReturn) {
	        cases.push(t.switchCase(null, [retCheck]));
	      }

	      if (cases.length === 1) {
	        var single = cases[0];
	        body.push(this.file.attachAuxiliaryComment(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0])));
	      } else {
	        // https://github.com/babel/babel/issues/998
	        for (var i = 0; i < cases.length; i++) {
	          var caseConsequent = cases[i].consequent[0];
	          if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
	            caseConsequent.label = this.loopLabel = this.loopLabel || this.file.scope.generateUidIdentifier("loop");
	          }
	        }

	        body.push(this.file.attachAuxiliaryComment(t.switchStatement(ret, cases)));
	      }
	    } else {
	      if (has.hasReturn) {
	        body.push(this.file.attachAuxiliaryComment(retCheck));
	      }
	    }
	  };

	  return BlockScoping;
	})();
	},{"../../../helpers/object":58,"../../../traversal":162,"../../../types":193,"../../../util":196,"lodash/object/extend":439,"lodash/object/values":445}],107:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _loose = require("./loose");

	var _loose2 = _interopRequireDefault(_loose);

	var _vanilla = require("./vanilla");

	var _vanilla2 = _interopRequireDefault(_vanilla);

	var _types = require("../../../../types");

	var t = _interopRequireWildcard(_types);

	var _helpersNameMethod = require("../../../helpers/name-method");

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ClassDeclaration: function ClassDeclaration(node) {
	    return t.variableDeclaration("let", [t.variableDeclarator(node.id, t.toExpression(node))]);
	  },

	  /**
	   * [Please add a description.]
	   */

	  ClassExpression: function ClassExpression(node, parent, scope, file) {
	    var inferred = _helpersNameMethod.bare(node, parent, scope);
	    if (inferred) return inferred;

	    if (file.isLoose("es6.classes")) {
	      return new _loose2["default"](this, file).run();
	    } else {
	      return new _vanilla2["default"](this, file).run();
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../../types":193,"../../../helpers/name-method":78,"./loose":108,"./vanilla":109}],108:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _vanilla = require("./vanilla");

	var _vanilla2 = _interopRequireDefault(_vanilla);

	var _types = require("../../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var LooseClassTransformer = (function (_VanillaTransformer) {
	  _inherits(LooseClassTransformer, _VanillaTransformer);

	  function LooseClassTransformer() {
	    _classCallCheck(this, LooseClassTransformer);

	    _VanillaTransformer.apply(this, arguments);
	    this.isLoose = true;
	  }

	  /**
	   * [Please add a description.]
	   */

	  LooseClassTransformer.prototype._processMethod = function _processMethod(node) {
	    if (!node.decorators) {
	      // use assignments instead of define properties for loose classes

	      var classRef = this.classRef;
	      if (!node["static"]) classRef = t.memberExpression(classRef, t.identifier("prototype"));
	      var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));

	      var expr = t.expressionStatement(t.assignmentExpression("=", methodName, node.value));
	      t.inheritsComments(expr, node);
	      this.body.push(expr);
	      return true;
	    }
	  };

	  return LooseClassTransformer;
	})(_vanilla2["default"]);

	exports["default"] = LooseClassTransformer;
	module.exports = exports["default"];
	},{"../../../../types":193,"./vanilla":109}],109:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _helpersMemoiseDecorators = require("../../../helpers/memoise-decorators");

	var _helpersMemoiseDecorators2 = _interopRequireDefault(_helpersMemoiseDecorators);

	var _helpersReplaceSupers = require("../../../helpers/replace-supers");

	var _helpersReplaceSupers2 = _interopRequireDefault(_helpersReplaceSupers);

	var _helpersNameMethod = require("../../../helpers/name-method");

	var nameMethod = _interopRequireWildcard(_helpersNameMethod);

	var _helpersDefineMap = require("../../../helpers/define-map");

	var defineMap = _interopRequireWildcard(_helpersDefineMap);

	var _messages = require("../../../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _util = require("../../../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../../../types");

	var t = _interopRequireWildcard(_types);

	var PROPERTY_COLLISION_METHOD_NAME = "__initializeProperties";

	/**
	 * [Please add a description.]
	 */

	var collectPropertyReferencesVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Identifier: {
	    enter: function enter(node, parent, scope, state) {
	      if (this.parentPath.isClassProperty({ key: node })) {
	        return;
	      }

	      if (this.isReferenced() && scope.getBinding(node.name) === state.scope.getBinding(node.name)) {
	        state.references[node.name] = true;
	      }
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var verifyConstructorVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  MethodDefinition: function MethodDefinition() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  Property: function Property(node) {
	    if (node.method) this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  CallExpression: {
	    exit: function exit(node, parent, scope, state) {
	      if (this.get("callee").isSuper()) {
	        state.hasBareSuper = true;
	        state.bareSuper = this;

	        if (!state.isDerived) {
	          throw this.errorWithNode("super call is only allowed in derived constructor");
	        }
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  "FunctionDeclaration|FunctionExpression": function FunctionDeclarationFunctionExpression() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  ThisExpression: function ThisExpression(node, parent, scope, state) {
	    if (state.isDerived && !state.hasBareSuper) {
	      if (this.inShadow()) {
	        // https://github.com/babel/babel/issues/1920
	        var thisAlias = state.constructorPath.getData("this");

	        if (!thisAlias) {
	          thisAlias = state.constructorPath.setData("this", state.constructorPath.scope.generateUidIdentifier("this"));
	        }

	        return thisAlias;
	      } else {
	        throw this.errorWithNode("'this' is not allowed before super()");
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Super: function Super(node, parent, scope, state) {
	    if (state.isDerived && !state.hasBareSuper && !this.parentPath.isCallExpression({ callee: node })) {
	      throw this.errorWithNode("'super.*' is not allowed before super()");
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var ClassTransformer = (function () {
	  function ClassTransformer(path, file) {
	    _classCallCheck(this, ClassTransformer);

	    this.parent = path.parent;
	    this.scope = path.scope;
	    this.node = path.node;
	    this.path = path;
	    this.file = file;

	    this.clearDescriptors();

	    this.instancePropBody = [];
	    this.instancePropRefs = {};
	    this.staticPropBody = [];
	    this.body = [];

	    this.pushedConstructor = false;
	    this.pushedInherits = false;
	    this.hasDecorators = false;
	    this.isLoose = false;

	    // class id
	    this.classId = this.node.id;

	    // this is the name of the binding that will **always** reference the class we've constructed
	    this.classRef = this.node.id || this.scope.generateUidIdentifier("class");

	    // this is a direct reference to the class we're building, class decorators can shadow the classRef
	    this.directRef = null;

	    this.superName = this.node.superClass || t.identifier("Function");
	    this.isDerived = !!this.node.superClass;
	  }

	  /**
	   * [Please add a description.]
	   * @returns {Array}
	   */

	  ClassTransformer.prototype.run = function run() {
	    var superName = this.superName;
	    var file = this.file;

	    //

	    var body = this.body;

	    //

	    var constructorBody = this.constructorBody = t.blockStatement([]);
	    this.constructor = this.buildConstructor();

	    //

	    var closureParams = [];
	    var closureArgs = [];

	    //
	    if (this.isDerived) {
	      closureArgs.push(superName);

	      superName = this.scope.generateUidIdentifierBasedOnNode(superName);
	      closureParams.push(superName);

	      this.superName = superName;
	    }

	    //
	    var decorators = this.node.decorators;
	    if (decorators) {
	      // this is so super calls and the decorators have access to the raw function
	      this.directRef = this.scope.generateUidIdentifier(this.classRef);
	    } else {
	      this.directRef = this.classRef;
	    }

	    //
	    this.buildBody();

	    // make sure this class isn't directly called
	    constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("class-call-check"), [t.thisExpression(), this.directRef])));

	    //
	    this.pushDecorators();

	    body = body.concat(this.staticPropBody);

	    if (this.classId) {
	      // named class with only a constructor
	      if (body.length === 1) return t.toExpression(body[0]);
	    }

	    //
	    body.push(t.returnStatement(this.classRef));

	    var container = t.functionExpression(null, closureParams, t.blockStatement(body));
	    container.shadow = true;
	    return t.callExpression(container, closureArgs);
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.buildConstructor = function buildConstructor() {
	    var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
	    t.inherits(func, this.node);
	    return func;
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable) {
	    var kind = arguments.length <= 2 || arguments[2] === undefined ? "value" : arguments[2];

	    var mutatorMap;
	    if (node["static"]) {
	      this.hasStaticDescriptors = true;
	      mutatorMap = this.staticMutatorMap;
	    } else {
	      this.hasInstanceDescriptors = true;
	      mutatorMap = this.instanceMutatorMap;
	    }

	    var map = defineMap.push(mutatorMap, node, kind, this.file);

	    if (enumerable) {
	      map.enumerable = t.literal(true);
	    }

	    if (map.decorators) {
	      this.hasDecorators = true;
	    }
	  };

	  /**
	   * [Please add a description.]
	   * https://www.youtube.com/watch?v=fWNaR-rxAic
	   */

	  ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
	    var hasConstructor = false;
	    var paths = this.path.get("body.body");
	    var _arr = paths;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var path = _arr[_i];
	      hasConstructor = path.equals("kind", "constructor");
	      if (hasConstructor) break;
	    }
	    if (hasConstructor) return;

	    var constructor;
	    if (this.isDerived) {
	      constructor = util.template("class-derived-default-constructor");
	    } else {
	      constructor = t.functionExpression(null, [], t.blockStatement([]));
	    }

	    this.path.get("body").unshiftContainer("body", t.methodDefinition(t.identifier("constructor"), constructor, "constructor"));
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.buildBody = function buildBody() {
	    this.constructorMeMaybe();
	    this.pushBody();
	    this.placePropertyInitializers();

	    if (this.userConstructor) {
	      var constructorBody = this.constructorBody;
	      constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
	      t.inherits(this.constructor, this.userConstructor);
	      t.inherits(constructorBody, this.userConstructor.body);
	    }

	    this.pushDescriptors();
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.pushBody = function pushBody() {
	    var classBodyPaths = this.path.get("body.body");

	    var _arr2 = classBodyPaths;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var path = _arr2[_i2];
	      var node = path.node;

	      if (node.decorators) {
	        _helpersMemoiseDecorators2["default"](node.decorators, this.scope);
	      }

	      if (t.isMethodDefinition(node)) {
	        var isConstructor = node.kind === "constructor";
	        if (isConstructor) this.verifyConstructor(path);

	        var replaceSupers = new _helpersReplaceSupers2["default"]({
	          methodPath: path,
	          methodNode: node,
	          objectRef: this.directRef,
	          superRef: this.superName,
	          isStatic: node["static"],
	          isLoose: this.isLoose,
	          scope: this.scope,
	          file: this.file
	        }, true);

	        replaceSupers.replace();

	        if (isConstructor) {
	          this.pushConstructor(node, path);
	        } else {
	          this.pushMethod(node, path);
	        }
	      } else if (t.isClassProperty(node)) {
	        this.pushProperty(node, path);
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
	    this.hasInstanceDescriptors = false;
	    this.hasStaticDescriptors = false;

	    this.instanceMutatorMap = {};
	    this.staticMutatorMap = {};
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
	    this.pushInherits();

	    var body = this.body;

	    var instanceProps;
	    var staticProps;
	    var classHelper = "create-class";
	    if (this.hasDecorators) classHelper = "create-decorated-class";

	    if (this.hasInstanceDescriptors) {
	      instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
	    }

	    if (this.hasStaticDescriptors) {
	      staticProps = defineMap.toClassObject(this.staticMutatorMap);
	    }

	    if (instanceProps || staticProps) {
	      if (instanceProps) instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
	      if (staticProps) staticProps = defineMap.toComputedObjectFromClass(staticProps);

	      var nullNode = t.literal(null);

	      // (Constructor, instanceDescriptors, staticDescriptors, instanceInitializers, staticInitializers)
	      var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];

	      if (instanceProps) args[1] = instanceProps;
	      if (staticProps) args[2] = staticProps;

	      if (this.instanceInitializersId) {
	        args[3] = this.instanceInitializersId;
	        body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
	      }

	      if (this.staticInitializersId) {
	        args[4] = this.staticInitializersId;
	        body.unshift(this.buildObjectAssignment(this.staticInitializersId));
	      }

	      var lastNonNullIndex = 0;
	      for (var i = 0; i < args.length; i++) {
	        if (args[i] !== nullNode) lastNonNullIndex = i;
	      }
	      args = args.slice(0, lastNonNullIndex + 1);

	      body.push(t.expressionStatement(t.callExpression(this.file.addHelper(classHelper), args)));
	    }

	    this.clearDescriptors();
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
	    return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.placePropertyInitializers = function placePropertyInitializers() {
	    var body = this.instancePropBody;
	    if (!body.length) return;

	    if (this.hasPropertyCollision()) {
	      var call = t.expressionStatement(t.callExpression(t.memberExpression(t.thisExpression(), t.identifier(PROPERTY_COLLISION_METHOD_NAME)), []));

	      this.pushMethod(t.methodDefinition(t.identifier(PROPERTY_COLLISION_METHOD_NAME), t.functionExpression(null, [], t.blockStatement(body))), null, true);

	      if (this.isDerived) {
	        this.bareSuper.insertAfter(call);
	      } else {
	        this.constructorBody.body.unshift(call);
	      }
	    } else {
	      if (this.isDerived) {
	        this.bareSuper.insertAfter(body);
	      } else {
	        this.constructorBody.body = body.concat(this.constructorBody.body);
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.hasPropertyCollision = function hasPropertyCollision() {
	    if (this.userConstructorPath) {
	      for (var name in this.instancePropRefs) {
	        if (this.userConstructorPath.scope.hasOwnBinding(name)) {
	          return true;
	        }
	      }
	    }

	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.verifyConstructor = function verifyConstructor(path) {
	    var state = {
	      constructorPath: path.get("value"),
	      hasBareSuper: false,
	      bareSuper: null,
	      isDerived: this.isDerived,
	      file: this.file
	    };

	    state.constructorPath.traverse(verifyConstructorVisitor, state);

	    var thisAlias = state.constructorPath.getData("this");
	    if (thisAlias && state.bareSuper) {
	      state.bareSuper.insertAfter(t.variableDeclaration("var", [t.variableDeclarator(thisAlias, t.thisExpression())]));
	    }

	    this.bareSuper = state.bareSuper;

	    if (!state.hasBareSuper && this.isDerived) {
	      throw path.errorWithNode("Derived constructor must call super()");
	    }
	  };

	  /**
	   * Push a method to its respective mutatorMap.
	   */

	  ClassTransformer.prototype.pushMethod = function pushMethod(node, path, allowedIllegal) {
	    if (!allowedIllegal && t.isLiteral(t.toComputedKey(node), { value: PROPERTY_COLLISION_METHOD_NAME })) {
	      throw this.file.errorWithNode(node, messages.get("illegalMethodName", PROPERTY_COLLISION_METHOD_NAME));
	    }

	    if (node.kind === "method") {
	      nameMethod.property(node, this.file, path ? path.get("value").scope : this.scope);
	      if (this._processMethod(node)) return;
	    }

	    this.pushToMap(node);
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype._processMethod = function _processMethod() {
	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype.pushProperty = function pushProperty(node, path) {
	    path.traverse(collectPropertyReferencesVisitor, {
	      references: this.instancePropRefs,
	      scope: this.scope
	    });

	    if (node.decorators) {
	      var body = [];
	      if (node.value) {
	        body.push(t.returnStatement(node.value));
	        node.value = t.functionExpression(null, [], t.blockStatement(body));
	      } else {
	        node.value = t.literal(null);
	      }
	      this.pushToMap(node, true, "initializer");

	      var initializers;
	      var target;
	      if (node["static"]) {
	        initializers = this.staticInitializersId = this.staticInitializersId || this.scope.generateUidIdentifier("staticInitializers");
	        body = this.staticPropBody;
	        target = this.classRef;
	      } else {
	        initializers = this.instanceInitializersId = this.instanceInitializersId || this.scope.generateUidIdentifier("instanceInitializers");
	        body = this.instancePropBody;
	        target = t.thisExpression();
	      }

	      body.push(t.expressionStatement(t.callExpression(this.file.addHelper("define-decorated-property-descriptor"), [target, t.literal(node.key.name), initializers])));
	    } else {
	      if (!node.value && !node.decorators) return;

	      if (node["static"]) {
	        // can just be added to the static map
	        this.pushToMap(node, true);
	      } else if (node.value) {
	        // add this to the instancePropBody which will be added after the super call in a derived constructor
	        // or at the start of a constructor for a non-derived constructor
	        this.instancePropBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), node.key), node.value)));
	      }
	    }
	  };

	  /**
	   * Replace the constructor body of our class.
	   */

	  ClassTransformer.prototype.pushConstructor = function pushConstructor(method, path) {
	    // https://github.com/babel/babel/issues/1077
	    var fnPath = path.get("value");
	    if (fnPath.scope.hasOwnBinding(this.classRef.name)) {
	      fnPath.scope.rename(this.classRef.name);
	    }

	    var construct = this.constructor;
	    var fn = method.value;

	    this.userConstructorPath = fnPath;
	    this.userConstructor = fn;
	    this.hasConstructor = true;

	    t.inheritsComments(construct, method);

	    construct._ignoreUserWhitespace = true;
	    construct.params = fn.params;

	    t.inherits(construct.body, fn.body);

	    // push constructor to body
	    this._pushConstructor();
	  };

	  /**
	   * [Please add a description.]
	   */

	  ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
	    if (this.pushedConstructor) return;
	    this.pushedConstructor = true;

	    // we haven't pushed any descriptors yet
	    if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
	      this.pushDescriptors();
	    }

	    this.body.push(this.constructor);

	    this.pushInherits();
	  };

	  /**
	   * Push inherits helper to body.
	   */

	  ClassTransformer.prototype.pushInherits = function pushInherits() {
	    if (!this.isDerived || this.pushedInherits) return;

	    // Unshift to ensure that the constructor inheritance is set up before
	    // any properties can be assigned to the prototype.
	    this.pushedInherits = true;
	    this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
	  };

	  /**
	   * Push decorators to body.
	   */

	  ClassTransformer.prototype.pushDecorators = function pushDecorators() {
	    var decorators = this.node.decorators;
	    if (!decorators) return;

	    this.body.push(t.variableDeclaration("var", [t.variableDeclarator(this.directRef, this.classRef)]));

	    // reverse the decorators so we execute them in the right order
	    decorators = decorators.reverse();

	    var _arr3 = decorators;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var decorator = _arr3[_i3];
	      var decoratorNode = util.template("class-decorator", {
	        DECORATOR: decorator.expression,
	        CLASS_REF: this.classRef
	      }, true);
	      decoratorNode.expression._ignoreModulesRemap = true;
	      this.body.push(decoratorNode);
	    }
	  };

	  return ClassTransformer;
	})();

	exports["default"] = ClassTransformer;
	module.exports = exports["default"];
	},{"../../../../messages":60,"../../../../types":193,"../../../../util":196,"../../../helpers/define-map":74,"../../../helpers/memoise-decorators":77,"../../../helpers/name-method":78,"../../../helpers/replace-supers":82}],110:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _messages = require("../../../messages");

	/**
	 * Turn constants into variables.
	 * Ensure there are no constant violations in any scope.
	 *
	 * @example
	 *
	 * **In**
	 *
	 * ```javascript
	 * const MULTIPLIER = 5;
	 * ```
	 *
	 * **Out**
	 *
	 * ```javascript
	 * var MULTIPLIER = 5;
	 * ```
	 */

	var messages = _interopRequireWildcard(_messages);

	var visitor = {

	  /**
	   * Look for any constants (or modules) in scope.
	   * If they have any `constantViolations` throw an error.
	   */

	  Scope: function Scope(node, parent, scope) {
	    for (var name in scope.bindings) {
	      var binding = scope.bindings[name];

	      // not a constant
	      if (binding.kind !== "const" && binding.kind !== "module") continue;

	      var _arr = binding.constantViolations;
	      for (var _i = 0; _i < _arr.length; _i++) {
	        var violation = _arr[_i];
	        throw violation.errorWithNode(messages.get("readOnly", name));
	      }
	    }
	  },

	  /**
	   * Look for constants.
	   * Turn them into `let` variables.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    if (node.kind === "const") node.kind = "let";
	  }
	};
	exports.visitor = visitor;
	},{"../../../messages":60}],111:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _messages = require("../../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ForXStatement: function ForXStatement(node, parent, scope, file) {
	    var left = node.left;

	    if (t.isPattern(left)) {
	      // for ({ length: k } in { abc: 3 });

	      var temp = scope.generateUidIdentifier("ref");

	      node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);

	      this.ensureBlock();

	      node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));

	      return;
	    }

	    if (!t.isVariableDeclaration(left)) return;

	    var pattern = left.declarations[0].id;
	    if (!t.isPattern(pattern)) return;

	    var key = scope.generateUidIdentifier("ref");
	    node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);

	    var nodes = [];

	    var destructuring = new DestructuringTransformer({
	      kind: left.kind,
	      file: file,
	      scope: scope,
	      nodes: nodes
	    });

	    destructuring.init(pattern, key);

	    this.ensureBlock();

	    var block = node.body;
	    block.body = nodes.concat(block.body);
	  },

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, file) {
	    var hasDestructuring = false;
	    var _arr = node.params;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var pattern = _arr[_i];
	      if (t.isPattern(pattern)) {
	        hasDestructuring = true;
	        break;
	      }
	    }
	    if (!hasDestructuring) return;

	    var nodes = [];

	    for (var i = 0; i < node.params.length; i++) {
	      var pattern = node.params[i];
	      if (!t.isPattern(pattern)) continue;

	      var ref = scope.generateUidIdentifier("ref");
	      if (t.isAssignmentPattern(pattern)) {
	        var _pattern = pattern;
	        pattern = pattern.left;
	        _pattern.left = ref;
	      } else {
	        node.params[i] = ref;
	      }

	      t.inherits(ref, pattern);

	      var destructuring = new DestructuringTransformer({
	        blockHoist: node.params.length - i,
	        nodes: nodes,
	        scope: scope,
	        file: file,
	        kind: "let"
	      });

	      destructuring.init(pattern, ref);
	    }

	    this.ensureBlock();

	    var block = node.body;
	    block.body = nodes.concat(block.body);
	  },

	  /**
	   * [Please add a description.]
	   */

	  CatchClause: function CatchClause(node, parent, scope, file) {
	    var pattern = node.param;
	    if (!t.isPattern(pattern)) return;

	    var ref = scope.generateUidIdentifier("ref");
	    node.param = ref;

	    var nodes = [];

	    var destructuring = new DestructuringTransformer({
	      kind: "let",
	      file: file,
	      scope: scope,
	      nodes: nodes
	    });
	    destructuring.init(pattern, ref);

	    node.body.body = nodes.concat(node.body.body);
	  },

	  /**
	   * [Please add a description.]
	   */

	  AssignmentExpression: function AssignmentExpression(node, parent, scope, file) {
	    if (!t.isPattern(node.left)) return;

	    var nodes = [];

	    var destructuring = new DestructuringTransformer({
	      operator: node.operator,
	      file: file,
	      scope: scope,
	      nodes: nodes
	    });

	    var ref;
	    if (this.isCompletionRecord() || !this.parentPath.isExpressionStatement()) {
	      ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");

	      nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));

	      if (t.isArrayExpression(node.right)) {
	        destructuring.arrays[ref.name] = true;
	      }
	    }

	    destructuring.init(node.left, ref || node.right);

	    if (ref) {
	      nodes.push(t.expressionStatement(ref));
	    }

	    return nodes;
	  },

	  /**
	   * [Please add a description.]
	   */

	  VariableDeclaration: function VariableDeclaration(node, parent, scope, file) {
	    if (t.isForXStatement(parent)) return;
	    if (!variableDeclarationHasPattern(node)) return;

	    var nodes = [];
	    var declar;

	    for (var i = 0; i < node.declarations.length; i++) {
	      declar = node.declarations[i];

	      var patternId = declar.init;
	      var pattern = declar.id;

	      var destructuring = new DestructuringTransformer({
	        nodes: nodes,
	        scope: scope,
	        kind: node.kind,
	        file: file
	      });

	      if (t.isPattern(pattern)) {
	        destructuring.init(pattern, patternId);

	        if (+i !== node.declarations.length - 1) {
	          // we aren't the last declarator so let's just make the
	          // last transformed node inherit from us
	          t.inherits(nodes[nodes.length - 1], declar);
	        }
	      } else {
	        nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
	      }
	    }

	    if (!t.isProgram(parent) && !t.isBlockStatement(parent)) {
	      // https://github.com/babel/babel/issues/113
	      // for (let [x] = [0]; false;) {}

	      declar = null;

	      for (i = 0; i < nodes.length; i++) {
	        node = nodes[i];
	        declar = declar || t.variableDeclaration(node.kind, []);

	        if (!t.isVariableDeclaration(node) && declar.kind !== node.kind) {
	          throw file.errorWithNode(node, messages.get("invalidParentForThisNode"));
	        }

	        declar.declarations = declar.declarations.concat(node.declarations);
	      }

	      return declar;
	    }

	    return nodes;
	  }
	};

	/**
	 * Test if a VariableDeclaration's declarations contains any Patterns.
	 */

	exports.visitor = visitor;
	function variableDeclarationHasPattern(node) {
	  for (var i = 0; i < node.declarations.length; i++) {
	    if (t.isPattern(node.declarations[i].id)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Test if an ArrayPattern's elements contain any RestElements.
	 */

	function hasRest(pattern) {
	  for (var i = 0; i < pattern.elements.length; i++) {
	    if (t.isRestElement(pattern.elements[i])) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	var arrayUnpackVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    if (state.bindings[node.name]) {
	      state.deopt = true;
	      this.stop();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var DestructuringTransformer = (function () {
	  function DestructuringTransformer(opts) {
	    _classCallCheck(this, DestructuringTransformer);

	    this.blockHoist = opts.blockHoist;
	    this.operator = opts.operator;
	    this.arrays = {};
	    this.nodes = opts.nodes || [];
	    this.scope = opts.scope;
	    this.file = opts.file;
	    this.kind = opts.kind;
	  }

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
	    var op = this.operator;
	    if (t.isMemberExpression(id)) op = "=";

	    var node;

	    if (op) {
	      node = t.expressionStatement(t.assignmentExpression(op, id, init));
	    } else {
	      node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
	    }

	    node._blockHoist = this.blockHoist;

	    return node;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
	    var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
	    declar._blockHoist = this.blockHoist;
	    return declar;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.push = function push(id, init) {
	    if (t.isObjectPattern(id)) {
	      this.pushObjectPattern(id, init);
	    } else if (t.isArrayPattern(id)) {
	      this.pushArrayPattern(id, init);
	    } else if (t.isAssignmentPattern(id)) {
	      this.pushAssignmentPattern(id, init);
	    } else {
	      this.nodes.push(this.buildVariableAssignment(id, init));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.toArray = function toArray(node, count) {
	    if (this.file.isLoose("es6.destructuring") || t.isIdentifier(node) && this.arrays[node.name]) {
	      return node;
	    } else {
	      return this.scope.toArray(node, count);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {
	    // we need to assign the current value of the assignment to avoid evaluating
	    // it more than once

	    var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);

	    var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
	    declar._blockHoist = this.blockHoist;
	    this.nodes.push(declar);

	    //

	    var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);

	    var left = pattern.left;
	    if (t.isPattern(left)) {
	      var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
	      tempValueDefault._blockHoist = this.blockHoist;

	      this.nodes.push(tempValueDefault);
	      this.push(left, tempValueRef);
	    } else {
	      this.nodes.push(this.buildVariableAssignment(left, tempConditional));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.pushObjectSpread = function pushObjectSpread(pattern, objRef, spreadProp, spreadPropIndex) {
	    // get all the keys that appear in this object before the current spread

	    var keys = [];

	    for (var i = 0; i < pattern.properties.length; i++) {
	      var prop = pattern.properties[i];

	      // we've exceeded the index of the spread property to all properties to the
	      // right need to be ignored
	      if (i >= spreadPropIndex) break;

	      // ignore other spread properties
	      if (t.isSpreadProperty(prop)) continue;

	      var key = prop.key;
	      if (t.isIdentifier(key) && !prop.computed) key = t.literal(prop.key.name);
	      keys.push(key);
	    }

	    keys = t.arrayExpression(keys);

	    //

	    var value = t.callExpression(this.file.addHelper("object-without-properties"), [objRef, keys]);
	    this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
	    if (t.isLiteral(prop.key)) prop.computed = true;

	    var pattern = prop.value;
	    var objRef = t.memberExpression(propRef, prop.key, prop.computed);

	    if (t.isPattern(pattern)) {
	      this.push(pattern, objRef);
	    } else {
	      this.nodes.push(this.buildVariableAssignment(pattern, objRef));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {
	    // https://github.com/babel/babel/issues/681

	    if (!pattern.properties.length) {
	      this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("object-destructuring-empty"), [objRef])));
	    }

	    // if we have more than one properties in this pattern and the objectRef is a
	    // member expression then we need to assign it to a temporary variable so it's
	    // only evaluated once

	    if (pattern.properties.length > 1 && t.isMemberExpression(objRef)) {
	      var temp = this.scope.generateUidIdentifierBasedOnNode(objRef, this.file);
	      this.nodes.push(this.buildVariableDeclaration(temp, objRef));
	      objRef = temp;
	    }

	    //

	    for (var i = 0; i < pattern.properties.length; i++) {
	      var prop = pattern.properties[i];
	      if (t.isSpreadProperty(prop)) {
	        this.pushObjectSpread(pattern, objRef, prop, i);
	      } else {
	        this.pushObjectProperty(prop, objRef);
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
	    // not an array so there's no way we can deal with this
	    if (!t.isArrayExpression(arr)) return false;

	    // pattern has less elements than the array and doesn't have a rest so some
	    // elements wont be evaluated
	    if (pattern.elements.length > arr.elements.length) return;
	    if (pattern.elements.length < arr.elements.length && !hasRest(pattern)) return false;

	    var _arr2 = pattern.elements;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var elem = _arr2[_i2];
	      // deopt on holes
	      if (!elem) return false;

	      // deopt on member expressions as they may be included in the RHS
	      if (t.isMemberExpression(elem)) return false;
	    }

	    var _arr3 = arr.elements;

	    // deopt on reference to left side identifiers
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var elem = _arr3[_i3];
	      // deopt on spread elements
	      if (t.isSpreadElement(elem)) return false;
	    }var bindings = t.getBindingIdentifiers(pattern);
	    var state = { deopt: false, bindings: bindings };
	    this.scope.traverse(arr, arrayUnpackVisitor, state);
	    return !state.deopt;
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
	    for (var i = 0; i < pattern.elements.length; i++) {
	      var elem = pattern.elements[i];
	      if (t.isRestElement(elem)) {
	        this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
	      } else {
	        this.push(elem, arr.elements[i]);
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
	    if (!pattern.elements) return;

	    // optimise basic array destructuring of an array expression
	    //
	    // we can't do this to a pattern of unequal size to it's right hand
	    // array expression as then there will be values that wont be evaluated
	    //
	    // eg: var [a, b] = [1, 2];

	    if (this.canUnpackArrayPattern(pattern, arrayRef)) {
	      return this.pushUnpackedArrayPattern(pattern, arrayRef);
	    }

	    // if we have a rest then we need all the elements so don't tell
	    // `scope.toArray` to only get a certain amount

	    var count = !hasRest(pattern) && pattern.elements.length;

	    // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will
	    // return a locally bound identifier if it's been inferred to be an array,
	    // otherwise it'll be a call to a helper that will ensure it's one

	    var toArray = this.toArray(arrayRef, count);

	    if (t.isIdentifier(toArray)) {
	      // we've been given an identifier so it must have been inferred to be an
	      // array
	      arrayRef = toArray;
	    } else {
	      arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
	      this.arrays[arrayRef.name] = true;
	      this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
	    }

	    //

	    for (var i = 0; i < pattern.elements.length; i++) {
	      var elem = pattern.elements[i];

	      // hole
	      if (!elem) continue;

	      var elemRef;

	      if (t.isRestElement(elem)) {
	        elemRef = this.toArray(arrayRef);

	        if (i > 0) {
	          elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.literal(i)]);
	        }

	        // set the element to the rest element argument since we've dealt with it
	        // being a rest already
	        elem = elem.argument;
	      } else {
	        elemRef = t.memberExpression(arrayRef, t.literal(i), true);
	      }

	      this.push(elem, elemRef);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  DestructuringTransformer.prototype.init = function init(pattern, ref) {
	    // trying to destructure a value that we can't evaluate more than once so we
	    // need to save it to a variable

	    if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
	      var memo = this.scope.maybeGenerateMemoised(ref, true);
	      if (memo) {
	        this.nodes.push(this.buildVariableDeclaration(memo, ref));
	        ref = memo;
	      }
	    }

	    //

	    this.push(pattern, ref);

	    return this.nodes;
	  };

	  return DestructuringTransformer;
	})();
	},{"../../../messages":60,"../../../types":193}],112:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports._ForOfStatementArray = _ForOfStatementArray;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _messages = require("../../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _util = require("../../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ForOfStatement: function ForOfStatement(node, parent, scope, file) {
	    if (this.get("right").isArrayExpression()) {
	      return _ForOfStatementArray.call(this, node, scope, file);
	    }

	    var callback = spec;
	    if (file.isLoose("es6.forOf")) callback = loose;

	    var build = callback(node, parent, scope, file);
	    var declar = build.declar;
	    var loop = build.loop;
	    var block = loop.body;

	    // ensure that it's a block so we can take all its statements
	    this.ensureBlock();

	    // add the value declaration to the new loop body
	    if (declar) {
	      block.body.push(declar);
	    }

	    // push the rest of the original loop body onto our new body
	    block.body = block.body.concat(node.body.body);

	    t.inherits(loop, node);
	    t.inherits(loop.body, node.body);

	    if (build.replaceParent) {
	      this.parentPath.replaceWithMultiple(build.node);
	      this.dangerouslyRemove();
	    } else {
	      return build.node;
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.visitor = visitor;

	function _ForOfStatementArray(node, scope, file) {
	  var nodes = [];
	  var right = node.right;

	  if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
	    var uid = scope.generateUidIdentifier("arr");
	    nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
	    right = uid;
	  }

	  var iterationKey = scope.generateUidIdentifier("i");

	  var loop = util.template("for-of-array", {
	    BODY: node.body,
	    KEY: iterationKey,
	    ARR: right
	  });

	  t.inherits(loop, node);
	  t.ensureBlock(loop);

	  var iterationValue = t.memberExpression(right, iterationKey, true);

	  var left = node.left;
	  if (t.isVariableDeclaration(left)) {
	    left.declarations[0].init = iterationValue;
	    loop.body.body.unshift(left);
	  } else {
	    loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
	  }

	  if (this.parentPath.isLabeledStatement()) {
	    loop = t.labeledStatement(this.parentPath.node.label, loop);
	  }

	  nodes.push(loop);

	  return nodes;
	}

	/**
	 * [Please add a description.]
	 */

	var loose = function loose(node, parent, scope, file) {
	  var left = node.left;
	  var declar, id;

	  if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	    // for (i of test), for ({ i } of test)
	    id = left;
	  } else if (t.isVariableDeclaration(left)) {
	    // for (var i of test)
	    id = scope.generateUidIdentifier("ref");
	    declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
	  } else {
	    throw file.errorWithNode(left, messages.get("unknownForHead", left.type));
	  }

	  var iteratorKey = scope.generateUidIdentifier("iterator");
	  var isArrayKey = scope.generateUidIdentifier("isArray");

	  var loop = util.template("for-of-loose", {
	    LOOP_OBJECT: iteratorKey,
	    IS_ARRAY: isArrayKey,
	    OBJECT: node.right,
	    INDEX: scope.generateUidIdentifier("i"),
	    ID: id
	  });

	  if (!declar) {
	    // no declaration so we need to remove the variable declaration at the top of
	    // the for-of-loose template
	    loop.body.body.shift();
	  }

	  //

	  return {
	    declar: declar,
	    node: loop,
	    loop: loop
	  };
	};

	/**
	 * [Please add a description.]
	 */

	var spec = function spec(node, parent, scope, file) {
	  var left = node.left;
	  var declar;

	  var stepKey = scope.generateUidIdentifier("step");
	  var stepValue = t.memberExpression(stepKey, t.identifier("value"));

	  if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	    // for (i of test), for ({ i } of test)
	    declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
	  } else if (t.isVariableDeclaration(left)) {
	    // for (var i of test)
	    declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
	  } else {
	    throw file.errorWithNode(left, messages.get("unknownForHead", left.type));
	  }

	  //

	  var iteratorKey = scope.generateUidIdentifier("iterator");

	  var template = util.template("for-of", {
	    ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
	    ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
	    ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
	    ITERATOR_KEY: iteratorKey,
	    STEP_KEY: stepKey,
	    OBJECT: node.right,
	    BODY: null
	  });

	  var isLabeledParent = t.isLabeledStatement(parent);

	  var tryBody = template[3].block.body;
	  var loop = tryBody[0];

	  if (isLabeledParent) {
	    tryBody[0] = t.labeledStatement(parent.label, loop);
	  }

	  //

	  return {
	    replaceParent: isLabeledParent,
	    declar: declar,
	    loop: loop,
	    node: template
	  };
	};
	},{"../../../messages":60,"../../../types":193,"../../../util":196}],113:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	var metadata = {
	  group: "builtin-pre"
	};

	exports.metadata = metadata;
	var visitor = {
	  Literal: function Literal(node) {
	    // number octal like 0b10 or 0o70
	    if (typeof node.value === "number" && /^0[ob]/i.test(node.raw)) {
	      node.raw = undefined;
	    }

	    // unicode escape
	    if (typeof node.value === "string" && /\\[u]/gi.test(node.raw)) {
	      node.raw = undefined;
	    }
	  }
	};
	exports.visitor = visitor;
	},{}],114:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	function keepBlockHoist(node, nodes) {
	  if (node._blockHoist) {
	    for (var i = 0; i < nodes.length; i++) {
	      nodes[i]._blockHoist = node._blockHoist;
	    }
	  }
	}

	var metadata = {
	  group: "builtin-modules"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ImportDeclaration: function ImportDeclaration(node, parent, scope, file) {
	    // flow type
	    if (node.importKind === "type" || node.importKind === "typeof") return;

	    var nodes = [];

	    if (node.specifiers.length) {
	      var _arr = node.specifiers;

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var specifier = _arr[_i];
	        file.moduleFormatter.importSpecifier(specifier, node, nodes, scope);
	      }
	    } else {
	      file.moduleFormatter.importDeclaration(node, nodes, scope);
	    }

	    if (nodes.length === 1) {
	      // inherit `_blockHoist` - this is for `_blockHoist` in File.prototype.addImport
	      nodes[0]._blockHoist = node._blockHoist;
	    }

	    return nodes;
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportAllDeclaration: function ExportAllDeclaration(node, parent, scope, file) {
	    var nodes = [];
	    file.moduleFormatter.exportAllDeclaration(node, nodes, scope);
	    keepBlockHoist(node, nodes);
	    return nodes;
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope, file) {
	    var nodes = [];
	    file.moduleFormatter.exportDeclaration(node, nodes, scope);
	    keepBlockHoist(node, nodes);
	    return nodes;
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportNamedDeclaration: function ExportNamedDeclaration(node, parent, scope, file) {
	    // flow type
	    if (this.get("declaration").isTypeAlias()) return;

	    var nodes = [];

	    if (node.declaration) {
	      // make sure variable exports have an initializer
	      // this is done here to avoid duplicating it in the module formatters
	      if (t.isVariableDeclaration(node.declaration)) {
	        var declar = node.declaration.declarations[0];
	        declar.init = declar.init || t.identifier("undefined");
	      }

	      file.moduleFormatter.exportDeclaration(node, nodes, scope);
	    } else if (node.specifiers) {
	      for (var i = 0; i < node.specifiers.length; i++) {
	        file.moduleFormatter.exportSpecifier(node.specifiers[i], node, nodes, scope);
	      }
	    }

	    keepBlockHoist(node, nodes);

	    return nodes;
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],115:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersReplaceSupers = require("../../helpers/replace-supers");

	var _helpersReplaceSupers2 = _interopRequireDefault(_helpersReplaceSupers);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function Property(path, node, scope, getObjectRef, file) {
	  if (!node.method && node.kind === "init") return;
	  if (!t.isFunction(node.value)) return;

	  var replaceSupers = new _helpersReplaceSupers2["default"]({
	    getObjectRef: getObjectRef,
	    methodNode: node,
	    methodPath: path,
	    isStatic: true,
	    scope: scope,
	    file: file
	  });

	  replaceSupers.replace();
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ObjectExpression: function ObjectExpression(node, parent, scope, file) {
	    var objectRef;
	    var getObjectRef = function getObjectRef() {
	      return objectRef = objectRef || scope.generateUidIdentifier("obj");
	    };

	    var propPaths = this.get("properties");
	    for (var i = 0; i < node.properties.length; i++) {
	      Property(propPaths[i], node.properties[i], scope, getObjectRef, file);
	    }

	    if (objectRef) {
	      scope.push({ id: objectRef });
	      return t.assignmentExpression("=", objectRef, node);
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/replace-supers":82}],116:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersCallDelegate = require("../../../helpers/call-delegate");

	var _helpersCallDelegate2 = _interopRequireDefault(_helpersCallDelegate);

	var _helpersGetFunctionArity = require("../../../helpers/get-function-arity");

	var _helpersGetFunctionArity2 = _interopRequireDefault(_helpersGetFunctionArity);

	var _util = require("../../../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var hasDefaults = function hasDefaults(node) {
	  for (var i = 0; i < node.params.length; i++) {
	    if (!t.isIdentifier(node.params[i])) return true;
	  }
	  return false;
	};

	/**
	 * [Please add a description.]
	 */

	var iifeVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    if (node.name !== "eval") {
	      if (!state.scope.hasOwnBinding(node.name)) return;
	      if (state.scope.bindingIdentifierEquals(node.name, node)) return;
	    }

	    state.iife = true;
	    this.stop();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, file) {
	    if (!hasDefaults(node)) return;

	    // ensure it's a block, useful for arrow functions
	    this.ensureBlock();

	    var state = {
	      iife: false,
	      scope: scope
	    };

	    var body = [];

	    //
	    var argsIdentifier = t.identifier("arguments");
	    argsIdentifier._shadowedFunctionLiteral = this;

	    // push a default parameter definition
	    function pushDefNode(left, right, i) {
	      var defNode;
	      if (exceedsLastNonDefault(i) || t.isPattern(left) || file.transformers["es6.spec.blockScoping"].canTransform()) {
	        defNode = util.template("default-parameter", {
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right,
	          ARGUMENT_KEY: t.literal(i),
	          ARGUMENTS: argsIdentifier
	        }, true);
	      } else {
	        defNode = util.template("default-parameter-assign", {
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right
	        }, true);
	      }
	      defNode._blockHoist = node.params.length - i;
	      body.push(defNode);
	    }

	    // check if an index exceeds the functions arity
	    function exceedsLastNonDefault(i) {
	      return i + 1 > lastNonDefaultParam;
	    }

	    //
	    var lastNonDefaultParam = _helpersGetFunctionArity2["default"](node);

	    //
	    var params = this.get("params");
	    for (var i = 0; i < params.length; i++) {
	      var param = params[i];

	      if (!param.isAssignmentPattern()) {
	        if (!param.isIdentifier()) {
	          param.traverse(iifeVisitor, state);
	        }

	        if (file.transformers["es6.spec.blockScoping"].canTransform() && param.isIdentifier()) {
	          pushDefNode(param.node, t.identifier("undefined"), i);
	        }

	        continue;
	      }

	      var left = param.get("left");
	      var right = param.get("right");

	      if (exceedsLastNonDefault(i) || left.isPattern()) {
	        var placeholder = scope.generateUidIdentifier("x");
	        placeholder._isDefaultPlaceholder = true;
	        node.params[i] = placeholder;
	      } else {
	        node.params[i] = left.node;
	      }

	      if (!state.iife) {
	        if (right.isIdentifier() && scope.hasOwnBinding(right.node.name)) {
	          state.iife = true;
	        } else {
	          right.traverse(iifeVisitor, state);
	        }
	      }

	      pushDefNode(left.node, right.node, i);
	    }

	    // we need to cut off all trailing default parameters
	    node.params = node.params.slice(0, lastNonDefaultParam);

	    if (state.iife) {
	      body.push(_helpersCallDelegate2["default"](node, scope));
	      node.body = t.blockStatement(body);
	    } else {
	      node.body.body = body.concat(node.body.body);
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../../types":193,"../../../../util":196,"../../../helpers/call-delegate":73,"../../../helpers/get-function-arity":76}],117:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _traversalVisitors = require("../../../../traversal/visitors");

	var visitors = _interopRequireWildcard(_traversalVisitors);

	var _default = require("./default");

	var def = _interopRequireWildcard(_default);

	var _rest = require("./rest");

	var rest = _interopRequireWildcard(_rest);

	var metadata = {
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = visitors.merge([rest.visitor, def.visitor]);
	exports.visitor = visitor;
	},{"../../../../traversal/visitors":182,"./default":116,"./rest":118}],118:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _util = require("../../../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var memberExpressionOptimisationVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Scope: function Scope(node, parent, scope, state) {
	    // check if this scope has a local binding that will shadow the rest parameter
	    if (!scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
	      this.skip();
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Flow: function Flow() {
	    // don't touch reference in type annotations
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, state) {
	    // skip over functions as whatever `arguments` we reference inside will refer
	    // to the wrong function
	    var oldNoOptimise = state.noOptimise;
	    state.noOptimise = true;
	    this.traverse(memberExpressionOptimisationVisitor, state);
	    state.noOptimise = oldNoOptimise;
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    // we can't guarantee the purity of arguments
	    if (node.name === "arguments") {
	      state.deopted = true;
	    }

	    // is this a referenced identifier and is it referencing the rest parameter?
	    if (node.name !== state.name) return;

	    if (state.noOptimise) {
	      state.deopted = true;
	    } else {
	      if (this.parentPath.isMemberExpression({ computed: true, object: node })) {
	        // if we know that this member expression is referencing a number then we can safely
	        // optimise it
	        var prop = this.parentPath.get("property");
	        if (prop.isBaseType("number")) {
	          state.candidates.push(this);
	          return;
	        }
	      }

	      // optimise single spread args in calls
	      if (this.parentPath.isSpreadElement() && state.offset === 0) {
	        var call = this.parentPath.parentPath;
	        if (call.isCallExpression() && call.node.arguments.length === 1) {
	          state.candidates.push(this);
	          return;
	        }
	      }

	      state.references.push(this);
	    }
	  },

	  /**
	   * Deopt on use of a binding identifier with the same name as our rest param.
	   *
	   * See https://github.com/babel/babel/issues/2091
	   */

	  BindingIdentifier: function BindingIdentifier(node, parent, scope, state) {
	    if (node.name === state.name) {
	      state.deopted = true;
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	function optimiseMemberExpression(parent, offset) {
	  if (offset === 0) return;

	  var newExpr;
	  var prop = parent.property;

	  if (t.isLiteral(prop)) {
	    prop.value += offset;
	    prop.raw = String(prop.value);
	  } else {
	    // // UnaryExpression, BinaryExpression
	    newExpr = t.binaryExpression("+", prop, t.literal(offset));
	    parent.property = newExpr;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function hasRest(node) {
	  return t.isRestElement(node.params[node.params.length - 1]);
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope) {
	    if (!hasRest(node)) return;

	    var restParam = node.params.pop();
	    var rest = restParam.argument;

	    var argsId = t.identifier("arguments");

	    // otherwise `arguments` will be remapped in arrow functions
	    argsId._shadowedFunctionLiteral = this;

	    // support patterns
	    if (t.isPattern(rest)) {
	      var pattern = rest;
	      rest = scope.generateUidIdentifier("ref");

	      var declar = t.variableDeclaration("let", pattern.elements.map(function (elem, index) {
	        var accessExpr = t.memberExpression(rest, t.literal(index), true);
	        return t.variableDeclarator(elem, accessExpr);
	      }));
	      node.body.body.unshift(declar);
	    }

	    // check and optimise for extremely common cases
	    var state = {
	      references: [],
	      offset: node.params.length,

	      argumentsNode: argsId,
	      outerBinding: scope.getBindingIdentifier(rest.name),

	      // candidate member expressions we could optimise if there are no other references
	      candidates: [],

	      // local rest binding name
	      name: rest.name,

	      // whether any references to the rest parameter were made in a function
	      deopted: false
	    };

	    this.traverse(memberExpressionOptimisationVisitor, state);

	    if (!state.deopted && !state.references.length) {
	      // we only have shorthands and there are no other references
	      if (state.candidates.length) {
	        var _arr = state.candidates;

	        for (var _i = 0; _i < _arr.length; _i++) {
	          var candidate = _arr[_i];
	          candidate.replaceWith(argsId);
	          if (candidate.parentPath.isMemberExpression()) {
	            optimiseMemberExpression(candidate.parent, state.offset);
	          }
	        }
	      }
	      return;
	    } else {
	      state.references = state.references.concat(state.candidates);
	    }

	    // deopt shadowed functions as transforms like regenerator may try touch the allocation loop
	    state.deopted = state.deopted || !!node.shadow;

	    //

	    var start = t.literal(node.params.length);
	    var key = scope.generateUidIdentifier("key");
	    var len = scope.generateUidIdentifier("len");

	    var arrKey = key;
	    var arrLen = len;
	    if (node.params.length) {
	      // this method has additional params, so we need to subtract
	      // the index of the current argument position from the
	      // position in the array that we want to populate
	      arrKey = t.binaryExpression("-", key, start);

	      // we need to work out the size of the array that we're
	      // going to store all the rest parameters
	      //
	      // we need to add a check to avoid constructing the array
	      // with <0 if there are less arguments than params as it'll
	      // cause an error
	      arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.literal(0));
	    }

	    var loop = util.template("rest", {
	      ARRAY_TYPE: restParam.typeAnnotation,
	      ARGUMENTS: argsId,
	      ARRAY_KEY: arrKey,
	      ARRAY_LEN: arrLen,
	      START: start,
	      ARRAY: rest,
	      KEY: key,
	      LEN: len
	    });

	    if (state.deopted) {
	      loop._blockHoist = node.params.length + 1;
	      node.body.body.unshift(loop);
	    } else {
	      // perform allocation at the lowest common denominator of all references
	      loop._blockHoist = 1;

	      var target = this.getEarliestCommonAncestorFrom(state.references).getStatementParent();

	      // don't perform the allocation inside a loop
	      var highestLoop;
	      target.findParent(function (path) {
	        if (path.isLoop()) {
	          highestLoop = path;
	        } else if (path.isFunction()) {
	          // stop crawling up for functions
	          return true;
	        }
	      });
	      if (highestLoop) target = highestLoop;

	      target.insertBefore(loop);
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../../types":193,"../../../../util":196}],119:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function loose(node, body, objId) {
	  var _arr = node.properties;

	  for (var _i = 0; _i < _arr.length; _i++) {
	    var prop = _arr[_i];
	    body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), prop.value)));
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function spec(node, body, objId, initProps, file) {
	  // add a simple assignment for all Symbol member expressions due to symbol polyfill limitations
	  // otherwise use Object.defineProperty

	  var _arr2 = node.properties;

	  // only one node and it's a Object.defineProperty that returns the object

	  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	    var prop = _arr2[_i2];
	    // this wont work with Object.defineProperty
	    if (t.isLiteral(t.toComputedKey(prop), { value: "__proto__" })) {
	      initProps.push(prop);
	      continue;
	    }

	    var key = prop.key;
	    if (t.isIdentifier(key) && !prop.computed) {
	      key = t.literal(key.name);
	    }

	    var bodyNode = t.callExpression(file.addHelper("define-property"), [objId, key, prop.value]);

	    body.push(t.expressionStatement(bodyNode));
	  }if (body.length === 1) {
	    var first = body[0].expression;

	    if (t.isCallExpression(first)) {
	      first.arguments[0] = t.objectExpression(initProps);
	      return first;
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ObjectExpression: {
	    exit: function exit(node, parent, scope, file) {
	      var hasComputed = false;

	      var _arr3 = node.properties;
	      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	        var prop = _arr3[_i3];
	        hasComputed = t.isProperty(prop, { computed: true, kind: "init" });
	        if (hasComputed) break;
	      }

	      if (!hasComputed) return;

	      // put all getters/setters into the first object expression as well as all initialisers up
	      // to the first computed property

	      var initProps = [];
	      var stopInits = false;

	      node.properties = node.properties.filter(function (prop) {
	        if (prop.computed) {
	          stopInits = true;
	        }

	        if (prop.kind !== "init" || !stopInits) {
	          initProps.push(prop);
	          return false;
	        } else {
	          return true;
	        }
	      });

	      //

	      var objId = scope.generateUidIdentifierBasedOnNode(parent);

	      //

	      var body = [];

	      //

	      var callback = spec;
	      if (file.isLoose("es6.properties.computed")) callback = loose;

	      var result = callback(node, body, objId, initProps, file);
	      if (result) return result;

	      //

	      body.unshift(t.variableDeclaration("var", [t.variableDeclarator(objId, t.objectExpression(initProps))]));

	      body.push(t.expressionStatement(objId));

	      return body;
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],120:[function(require,module,exports){
	/**
	 * [Please add a description.]
	 */

	"use strict";

	exports.__esModule = true;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Property: function Property(node) {
	    if (node.method) {
	      node.method = false;
	    }

	    if (node.shorthand) {
	      node.shorthand = false;
	    }
	  }
	};
	exports.visitor = visitor;
	},{}],121:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _helpersRegex = require("../../helpers/regex");

	var regex = _interopRequireWildcard(_helpersRegex);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Literal: function Literal(node) {
	    if (!regex.is(node, "y")) return;
	    return t.newExpression(t.identifier("RegExp"), [t.literal(node.regex.pattern), t.literal(node.regex.flags)]);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/regex":80}],122:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _regexpuRewritePattern = require("regexpu/rewrite-pattern");

	var _regexpuRewritePattern2 = _interopRequireDefault(_regexpuRewritePattern);

	var _helpersRegex = require("../../helpers/regex");

	/**
	 * [Please add a description.]
	 */

	var regex = _interopRequireWildcard(_helpersRegex);

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Literal: function Literal(node) {
	    if (!regex.is(node, "u")) return;
	    node.regex.pattern = _regexpuRewritePattern2["default"](node.regex.pattern, node.regex.flags);
	    regex.pullFlag(node, "u");
	  }
	};
	exports.visitor = visitor;
	},{"../../helpers/regex":80,"regexpu/rewrite-pattern":512}],123:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function buildAssert(node, file) {
	  return t.callExpression(file.addHelper("temporal-assert-defined"), [node, t.literal(node.name), file.addHelper("temporal-undefined")]);
	}

	/**
	 * [Please add a description.]
	 */

	function references(node, scope, state) {
	  var declared = state.letRefs[node.name];
	  if (!declared) return false;

	  // declared node is different in this scope
	  return scope.getBindingIdentifier(node.name) === declared;
	}

	/**
	 * [Please add a description.]
	 */

	var refVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    if (t.isFor(parent) && parent.left === node) return;

	    if (!references(node, scope, state)) return;

	    var assert = buildAssert(node, state.file);

	    this.skip();

	    if (t.isUpdateExpression(parent)) {
	      if (parent._ignoreBlockScopingTDZ) return;
	      this.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
	    } else {
	      return t.logicalExpression("&&", assert, node);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  AssignmentExpression: {
	    exit: function exit(node, parent, scope, state) {
	      if (node._ignoreBlockScopingTDZ) return;

	      var nodes = [];
	      var ids = this.getBindingIdentifiers();

	      for (var name in ids) {
	        var id = ids[name];

	        if (references(id, scope, state)) {
	          nodes.push(buildAssert(id, state.file));
	        }
	      }

	      if (nodes.length) {
	        node._ignoreBlockScopingTDZ = true;
	        nodes.push(node);
	        return nodes.map(t.expressionStatement);
	      }
	    }
	  }
	};

	var metadata = {
	  optional: true,
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  "Program|Loop|BlockStatement": {
	    exit: function exit(node, parent, scope, file) {
	      var letRefs = node._letReferences;
	      if (!letRefs) return;

	      this.traverse(refVisitor, {
	        letRefs: letRefs,
	        file: file
	      });
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],124:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  optional: true
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  UnaryExpression: function UnaryExpression(node, parent, scope, file) {
	    if (node._ignoreSpecSymbols) return;

	    if (node.operator === "typeof") {
	      var call = t.callExpression(file.addHelper("typeof"), [node.argument]);
	      if (this.get("argument").isIdentifier()) {
	        var undefLiteral = t.literal("undefined");
	        var unary = t.unaryExpression("typeof", node.argument);
	        unary._ignoreSpecSymbols = true;
	        return t.conditionalExpression(t.binaryExpression("===", unary, undefLiteral), undefLiteral, call);
	      } else {
	        return call;
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  BinaryExpression: function BinaryExpression(node, parent, scope, file) {
	    if (node.operator === "instanceof") {
	      return t.callExpression(file.addHelper("instanceof"), [node.left, node.right]);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  "VariableDeclaration|FunctionDeclaration": function VariableDeclarationFunctionDeclaration(node) {
	    if (node._generated) this.skip();
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],125:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  optional: true,
	  group: "builtin-pre"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  TemplateLiteral: function TemplateLiteral(node, parent) {
	    if (t.isTaggedTemplateExpression(parent)) return;

	    for (var i = 0; i < node.expressions.length; i++) {
	      node.expressions[i] = t.callExpression(t.identifier("String"), [node.expressions[i]]);
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],126:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function getSpreadLiteral(spread, scope) {
	  if (scope.hub.file.isLoose("es6.spread") && !t.isIdentifier(spread.argument, { name: "arguments" })) {
	    return spread.argument;
	  } else {
	    return scope.toArray(spread.argument, true);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function hasSpread(nodes) {
	  for (var i = 0; i < nodes.length; i++) {
	    if (t.isSpreadElement(nodes[i])) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	function build(props, scope) {
	  var nodes = [];

	  var _props = [];

	  var push = function push() {
	    if (!_props.length) return;
	    nodes.push(t.arrayExpression(_props));
	    _props = [];
	  };

	  for (var i = 0; i < props.length; i++) {
	    var prop = props[i];
	    if (t.isSpreadElement(prop)) {
	      push();
	      nodes.push(getSpreadLiteral(prop, scope));
	    } else {
	      _props.push(prop);
	    }
	  }

	  push();

	  return nodes;
	}

	var metadata = {
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ArrayExpression: function ArrayExpression(node, parent, scope) {
	    var elements = node.elements;
	    if (!hasSpread(elements)) return;

	    var nodes = build(elements, scope);
	    var first = nodes.shift();

	    if (!t.isArrayExpression(first)) {
	      nodes.unshift(first);
	      first = t.arrayExpression([]);
	    }

	    return t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes);
	  },

	  /**
	   * [Please add a description.]
	   */

	  CallExpression: function CallExpression(node, parent, scope) {
	    var args = node.arguments;
	    if (!hasSpread(args)) return;

	    var contextLiteral = t.identifier("undefined");

	    node.arguments = [];

	    var nodes;
	    if (args.length === 1 && args[0].argument.name === "arguments") {
	      nodes = [args[0].argument];
	    } else {
	      nodes = build(args, scope);
	    }

	    var first = nodes.shift();
	    if (nodes.length) {
	      node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	    } else {
	      node.arguments.push(first);
	    }

	    var callee = node.callee;

	    if (this.get("callee").isMemberExpression()) {
	      var temp = scope.maybeGenerateMemoised(callee.object);
	      if (temp) {
	        callee.object = t.assignmentExpression("=", temp, callee.object);
	        contextLiteral = temp;
	      } else {
	        contextLiteral = callee.object;
	      }
	      t.appendToMemberExpression(callee, t.identifier("apply"));
	    } else {
	      node.callee = t.memberExpression(node.callee, t.identifier("apply"));
	    }

	    node.arguments.unshift(contextLiteral);
	  },

	  /**
	   * [Please add a description.]
	   */

	  NewExpression: function NewExpression(node, parent, scope, file) {
	    var args = node.arguments;
	    if (!hasSpread(args)) return;

	    var nodes = build(args, scope);

	    var context = t.arrayExpression([t.literal(null)]);

	    args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);

	    return t.newExpression(t.callExpression(t.memberExpression(file.addHelper("bind"), t.identifier("apply")), [node.callee, args]), []);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],127:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _lodashCollectionReduceRight = require("lodash/collection/reduceRight");

	var _lodashCollectionReduceRight2 = _interopRequireDefault(_lodashCollectionReduceRight);

	var _messages = require("../../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _lodashArrayFlatten = require("lodash/array/flatten");

	var _lodashArrayFlatten2 = _interopRequireDefault(_lodashArrayFlatten);

	var _util = require("../../../util");

	var util = _interopRequireWildcard(_util);

	var _lodashCollectionMap = require("lodash/collection/map");

	var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-trailing"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, file) {
	    if (node.generator || node.async) return;
	    var tailCall = new TailCallTransformer(this, scope, file);
	    tailCall.run();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.visitor = visitor;
	function returnBlock(expr) {
	  return t.blockStatement([t.returnStatement(expr)]);
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  enter: function enter(node, parent) {
	    if (t.isTryStatement(parent)) {
	      if (node === parent.block) {
	        this.skip();
	      } else if (parent.finalizer && node !== parent.finalizer) {
	        this.skip();
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ReturnStatement: function ReturnStatement(node, parent, scope, state) {
	    return state.subTransform(node.argument);
	  },

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  VariableDeclaration: function VariableDeclaration(node, parent, scope, state) {
	    state.vars.push(node);
	  },

	  /**
	   * [Please add a description.]
	   */

	  ThisExpression: function ThisExpression(node, parent, scope, state) {
	    if (!state.isShadowed) {
	      state.needsThis = true;
	      state.thisPaths.push(this);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    if (node.name === "arguments" && (!state.isShadowed || node._shadowedFunctionLiteral)) {
	      state.needsArguments = true;
	      state.argumentsPaths.push(this);
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var TailCallTransformer = (function () {
	  function TailCallTransformer(path, scope, file) {
	    _classCallCheck(this, TailCallTransformer);

	    this.hasTailRecursion = false;

	    this.needsArguments = false;
	    this.argumentsPaths = [];
	    this.setsArguments = false;

	    this.needsThis = false;
	    this.thisPaths = [];

	    this.isShadowed = path.isArrowFunctionExpression() || path.is("shadow");
	    this.ownerId = path.node.id;
	    this.vars = [];

	    this.scope = scope;
	    this.path = path;
	    this.file = file;
	    this.node = path.node;
	  }

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.getArgumentsId = function getArgumentsId() {
	    return this.argumentsId = this.argumentsId || this.scope.generateUidIdentifier("arguments");
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.getThisId = function getThisId() {
	    return this.thisId = this.thisId || this.scope.generateUidIdentifier("this");
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.getLeftId = function getLeftId() {
	    return this.leftId = this.leftId || this.scope.generateUidIdentifier("left");
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.getFunctionId = function getFunctionId() {
	    return this.functionId = this.functionId || this.scope.generateUidIdentifier("function");
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.getAgainId = function getAgainId() {
	    return this.againId = this.againId || this.scope.generateUidIdentifier("again");
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.getParams = function getParams() {
	    var params = this.params;

	    if (!params) {
	      params = this.node.params;
	      this.paramDecls = [];

	      for (var i = 0; i < params.length; i++) {
	        var param = params[i];
	        if (!param._isDefaultPlaceholder) {
	          this.paramDecls.push(t.variableDeclarator(param, params[i] = this.scope.generateUidIdentifier("x")));
	        }
	      }
	    }

	    return this.params = params;
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.hasDeopt = function hasDeopt() {
	    // check if the ownerId has been reassigned, if it has then it's not safe to
	    // perform optimisations
	    var ownerIdInfo = this.scope.getBinding(this.ownerId.name);
	    return ownerIdInfo && !ownerIdInfo.constant;
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.run = function run() {
	    var node = this.node;

	    // only tail recursion can be optimized as for now, so we can skip anonymous
	    // functions entirely
	    var ownerId = this.ownerId;
	    if (!ownerId) return;

	    // traverse the function and look for tail recursion
	    this.path.traverse(visitor, this);

	    // has no tail call recursion
	    if (!this.hasTailRecursion) return;

	    // the function binding isn't constant so we can't be sure that it's the same function :(
	    if (this.hasDeopt()) {
	      this.file.log.deopt(node, messages.get("tailCallReassignmentDeopt"));
	      return;
	    }

	    //

	    var body = this.path.ensureBlock().body;

	    for (var i = 0; i < body.length; i++) {
	      var bodyNode = body[i];
	      if (!t.isFunctionDeclaration(bodyNode)) continue;

	      bodyNode = body[i] = t.variableDeclaration("var", [t.variableDeclarator(bodyNode.id, t.toExpression(bodyNode))]);
	      bodyNode._blockHoist = 2;
	    }

	    if (this.vars.length > 0) {
	      var declarations = _lodashArrayFlatten2["default"](_lodashCollectionMap2["default"](this.vars, function (decl) {
	        return decl.declarations;
	      }));

	      var assignment = _lodashCollectionReduceRight2["default"](declarations, function (expr, decl) {
	        return t.assignmentExpression("=", decl.id, expr);
	      }, t.identifier("undefined"));

	      var statement = t.expressionStatement(assignment);
	      statement._blockHoist = Infinity;
	      body.unshift(statement);
	    }

	    var paramDecls = this.paramDecls;
	    if (paramDecls.length > 0) {
	      var paramDecl = t.variableDeclaration("var", paramDecls);
	      paramDecl._blockHoist = Infinity;
	      body.unshift(paramDecl);
	    }

	    body.unshift(t.expressionStatement(t.assignmentExpression("=", this.getAgainId(), t.literal(false))));

	    node.body = util.template("tail-call-body", {
	      FUNCTION_ID: this.getFunctionId(),
	      AGAIN_ID: this.getAgainId(),
	      BLOCK: node.body
	    });

	    var topVars = [];

	    if (this.needsThis) {
	      var _arr = this.thisPaths;

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var path = _arr[_i];
	        path.replaceWith(this.getThisId());
	      }

	      topVars.push(t.variableDeclarator(this.getThisId(), t.thisExpression()));
	    }

	    if (this.needsArguments || this.setsArguments) {
	      var _arr2 = this.argumentsPaths;

	      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	        var _path = _arr2[_i2];
	        _path.replaceWith(this.argumentsId);
	      }

	      var decl = t.variableDeclarator(this.argumentsId);
	      if (this.argumentsId) {
	        decl.init = t.identifier("arguments");
	        decl.init._shadowedFunctionLiteral = this.path;
	      }
	      topVars.push(decl);
	    }

	    var leftId = this.leftId;
	    if (leftId) {
	      topVars.push(t.variableDeclarator(leftId));
	    }

	    if (topVars.length > 0) {
	      node.body.body.unshift(t.variableDeclaration("var", topVars));
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.subTransform = function subTransform(node) {
	    if (!node) return;

	    var handler = this["subTransform" + node.type];
	    if (handler) return handler.call(this, node);
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.subTransformConditionalExpression = function subTransformConditionalExpression(node) {
	    var callConsequent = this.subTransform(node.consequent);
	    var callAlternate = this.subTransform(node.alternate);
	    if (!callConsequent && !callAlternate) {
	      return;
	    }

	    // if ternary operator had tail recursion in value, convert to optimized if-statement
	    node.type = "IfStatement";
	    node.consequent = callConsequent ? t.toBlock(callConsequent) : returnBlock(node.consequent);

	    if (callAlternate) {
	      node.alternate = t.isIfStatement(callAlternate) ? callAlternate : t.toBlock(callAlternate);
	    } else {
	      node.alternate = returnBlock(node.alternate);
	    }

	    return [node];
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.subTransformLogicalExpression = function subTransformLogicalExpression(node) {
	    // only call in right-value of can be optimized
	    var callRight = this.subTransform(node.right);
	    if (!callRight) return;

	    // cache left value as it might have side-effects
	    var leftId = this.getLeftId();
	    var testExpr = t.assignmentExpression("=", leftId, node.left);

	    if (node.operator === "&&") {
	      testExpr = t.unaryExpression("!", testExpr);
	    }

	    return [t.ifStatement(testExpr, returnBlock(leftId))].concat(callRight);
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.subTransformSequenceExpression = function subTransformSequenceExpression(node) {
	    var seq = node.expressions;

	    // only last element can be optimized
	    var lastCall = this.subTransform(seq[seq.length - 1]);
	    if (!lastCall) {
	      return;
	    }

	    // remove converted expression from sequence
	    // and convert to regular expression if needed
	    if (--seq.length === 1) {
	      node = seq[0];
	    }

	    return [t.expressionStatement(node)].concat(lastCall);
	  };

	  /**
	   * [Please add a description.]
	   */

	  TailCallTransformer.prototype.subTransformCallExpression = function subTransformCallExpression(node) {
	    var callee = node.callee;
	    var thisBinding, args;

	    if (t.isMemberExpression(callee, { computed: false }) && t.isIdentifier(callee.property)) {
	      switch (callee.property.name) {
	        case "call":
	          args = t.arrayExpression(node.arguments.slice(1));
	          break;

	        case "apply":
	          args = node.arguments[1] || t.identifier("undefined");
	          this.needsArguments = true;
	          break;

	        default:
	          return;
	      }

	      thisBinding = node.arguments[0];
	      callee = callee.object;
	    }

	    // only tail recursion can be optimized as for now
	    if (!t.isIdentifier(callee) || !this.scope.bindingIdentifierEquals(callee.name, this.ownerId)) {
	      return;
	    }

	    this.hasTailRecursion = true;

	    if (this.hasDeopt()) return;

	    var body = [];

	    if (this.needsThis && !t.isThisExpression(thisBinding)) {
	      body.push(t.expressionStatement(t.assignmentExpression("=", this.getThisId(), thisBinding || t.identifier("undefined"))));
	    }

	    if (!args) {
	      args = t.arrayExpression(node.arguments);
	    }

	    var argumentsId = this.getArgumentsId();
	    var params = this.getParams();

	    if (this.needsArguments) {
	      body.push(t.expressionStatement(t.assignmentExpression("=", argumentsId, args)));
	    }

	    if (t.isArrayExpression(args)) {
	      var elems = args.elements;

	      // pad out the args so all the function args are reset - https://github.com/babel/babel/issues/1938
	      while (elems.length < params.length) {
	        elems.push(t.identifier("undefined"));
	      }

	      for (var i = 0; i < elems.length; i++) {
	        var param = params[i];
	        var elem = elems[i];

	        if (param && !param._isDefaultPlaceholder) {
	          elems[i] = t.assignmentExpression("=", param, elem);
	        } else {
	          // exceeds parameters but push it anyway to ensure correct execution
	        }
	      }

	      if (!this.needsArguments) {
	        var _arr3 = elems;

	        for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	          var elem = _arr3[_i3];
	          // only push expressions that we really need, this will skip pure arguments that exceed the
	          // parameter length of the current function
	          if (!this.scope.isPure(elem)) {
	            body.push(t.expressionStatement(elem));
	          }
	        }
	      }
	    } else {
	      this.setsArguments = true;
	      for (var i = 0; i < params.length; i++) {
	        var param = params[i];
	        if (!param._isDefaultPlaceholder) {
	          body.push(t.expressionStatement(t.assignmentExpression("=", param, t.memberExpression(argumentsId, t.literal(i), true))));
	        }
	      }
	    }

	    body.push(t.expressionStatement(t.assignmentExpression("=", this.getAgainId(), t.literal(true))));

	    body.push(t.continueStatement(this.getFunctionId()));

	    return body;
	  };

	  return TailCallTransformer;
	})();
	},{"../../../messages":60,"../../../types":193,"../../../util":196,"lodash/array/flatten":334,"lodash/collection/map":342,"lodash/collection/reduceRight":343}],128:[function(require,module,exports){
	/* eslint no-unused-vars: 0 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-pre"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	function isString(node) {
	  return t.isLiteral(node) && typeof node.value === "string";
	}

	/**
	 * [Please add a description.]
	 */

	function buildBinaryExpression(left, right) {
	  var node = t.binaryExpression("+", left, right);
	  node._templateLiteralProduced = true;
	  return node;
	}

	/**
	 * [Please add a description.]
	 */

	function crawl(path) {
	  if (path.is("_templateLiteralProduced")) {
	    crawl(path.get("left"));
	    crawl(path.get("right"));
	  } else if (!path.isBaseType("string") && !path.isBaseType("number")) {
	    path.replaceWith(t.callExpression(t.identifier("String"), [path.node]));
	  }
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  TaggedTemplateExpression: function TaggedTemplateExpression(node, parent, scope, file) {
	    var quasi = node.quasi;
	    var args = [];

	    var strings = [];
	    var raw = [];

	    var _arr = quasi.quasis;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var elem = _arr[_i];
	      strings.push(t.literal(elem.value.cooked));
	      raw.push(t.literal(elem.value.raw));
	    }

	    strings = t.arrayExpression(strings);
	    raw = t.arrayExpression(raw);

	    var templateName = "tagged-template-literal";
	    if (file.isLoose("es6.templateLiterals")) templateName += "-loose";

	    var templateObject = file.addTemplateObject(templateName, strings, raw);
	    args.push(templateObject);

	    args = args.concat(quasi.expressions);

	    return t.callExpression(node.tag, args);
	  },

	  /**
	   * [Please add a description.]
	   */

	  TemplateLiteral: function TemplateLiteral(node, parent, scope, file) {
	    var nodes = [];

	    var _arr2 = node.quasis;

	    // filter out empty string literals
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var elem = _arr2[_i2];
	      nodes.push(t.literal(elem.value.cooked));

	      var expr = node.expressions.shift();
	      if (expr) nodes.push(expr);
	    }nodes = nodes.filter(function (n) {
	      return !t.isLiteral(n, { value: "" });
	    });

	    // since `+` is left-to-right associative
	    // ensure the first node is a string if first/second isn't
	    if (!isString(nodes[0]) && !isString(nodes[1])) {
	      nodes.unshift(t.literal(""));
	    }

	    if (nodes.length > 1) {
	      var root = buildBinaryExpression(nodes.shift(), nodes.shift());

	      var _arr3 = nodes;
	      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	        var _node = _arr3[_i3];
	        root = buildBinaryExpression(root, _node);
	      }

	      this.replaceWith(root);
	      //crawl(this);
	    } else {
	        return nodes[0];
	      }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],129:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	var metadata = {
	  stage: 1
	};
	exports.metadata = metadata;
	},{}],130:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	var metadata = {
	  stage: 0,
	  dependencies: ["es6.classes"]
	};
	exports.metadata = metadata;
	},{}],131:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersBuildComprehension = require("../../helpers/build-comprehension");

	var _helpersBuildComprehension2 = _interopRequireDefault(_helpersBuildComprehension);

	var _traversal = require("../../../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _util = require("../../../util");

	var util = _interopRequireWildcard(_util);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  stage: 0
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ComprehensionExpression: function ComprehensionExpression(node, parent, scope) {
	    var callback = array;
	    if (node.generator) callback = generator;
	    return callback(node, parent, scope);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.visitor = visitor;
	function generator(node) {
	  var body = [];
	  var container = t.functionExpression(null, [], t.blockStatement(body), true);
	  container.shadow = true;

	  body.push(_helpersBuildComprehension2["default"](node, function () {
	    return t.expressionStatement(t.yieldExpression(node.body));
	  }));

	  return t.callExpression(container, []);
	}

	/**
	 * [Please add a description.]
	 */

	function array(node, parent, scope) {
	  var uid = scope.generateUidIdentifierBasedOnNode(parent);

	  var container = util.template("array-comprehension-container", {
	    KEY: uid
	  });
	  container.callee.shadow = true;

	  var block = container.callee.body;
	  var body = block.body;

	  if (_traversal2["default"].hasType(node, scope, "YieldExpression", t.FUNCTION_TYPES)) {
	    container.callee.generator = true;
	    container = t.yieldExpression(container, true);
	  }

	  var returnStatement = body.pop();

	  body.push(_helpersBuildComprehension2["default"](node, function () {
	    return util.template("array-push", {
	      STATEMENT: node.body,
	      KEY: uid
	    }, true);
	  }));
	  body.push(returnStatement);

	  return container;
	}
	},{"../../../traversal":162,"../../../types":193,"../../../util":196,"../../helpers/build-comprehension":71}],132:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersMemoiseDecorators = require("../../helpers/memoise-decorators");

	var _helpersMemoiseDecorators2 = _interopRequireDefault(_helpersMemoiseDecorators);

	var _helpersDefineMap = require("../../helpers/define-map");

	var defineMap = _interopRequireWildcard(_helpersDefineMap);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  dependencies: ["es6.classes"],
	  optional: true,
	  stage: 1
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ObjectExpression: function ObjectExpression(node, parent, scope, file) {
	    var hasDecorators = false;
	    for (var i = 0; i < node.properties.length; i++) {
	      var prop = node.properties[i];
	      if (prop.decorators) {
	        hasDecorators = true;
	        break;
	      }
	    }
	    if (!hasDecorators) return;

	    var mutatorMap = {};

	    for (var i = 0; i < node.properties.length; i++) {
	      var prop = node.properties[i];
	      if (prop.decorators) _helpersMemoiseDecorators2["default"](prop.decorators, scope);

	      if (prop.kind === "init" && !prop.method) {
	        prop.kind = "";
	        prop.value = t.functionExpression(null, [], t.blockStatement([t.returnStatement(prop.value)]));
	      }

	      defineMap.push(mutatorMap, prop, "initializer", file);
	    }

	    var obj = defineMap.toClassObject(mutatorMap);
	    obj = defineMap.toComputedObjectFromClass(obj);
	    return t.callExpression(file.addHelper("create-decorated-object"), [obj]);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/define-map":74,"../../helpers/memoise-decorators":77}],133:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  optional: true,
	  stage: 0
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  DoExpression: function DoExpression(node) {
	    var body = node.body.body;
	    if (body.length) {
	      return body;
	    } else {
	      return t.identifier("undefined");
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],134:[function(require,module,exports){
	// https://github.com/rwaldron/exponentiation-operator

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersBuildBinaryAssignmentOperatorTransformer = require("../../helpers/build-binary-assignment-operator-transformer");

	var _helpersBuildBinaryAssignmentOperatorTransformer2 = _interopRequireDefault(_helpersBuildBinaryAssignmentOperatorTransformer);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  stage: 2
	};

	exports.metadata = metadata;
	var MATH_POW = t.memberExpression(t.identifier("Math"), t.identifier("pow"));

	/**
	 * [Please add a description.]
	 */

	var visitor = _helpersBuildBinaryAssignmentOperatorTransformer2["default"]({
	  operator: "**",

	  /**
	   * [Please add a description.]
	   */

	  build: function build(left, right) {
	    return t.callExpression(MATH_POW, [left, right]);
	  }
	});
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/build-binary-assignment-operator-transformer":70}],135:[function(require,module,exports){
	// https://github.com/leebyron/ecmascript-more-export-from

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  stage: 1
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	function build(node, nodes, scope) {
	  var first = node.specifiers[0];
	  if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first)) return;

	  var specifier = node.specifiers.shift();
	  var uid = scope.generateUidIdentifier(specifier.exported.name);

	  var newSpecifier;
	  if (t.isExportNamespaceSpecifier(specifier)) {
	    newSpecifier = t.importNamespaceSpecifier(uid);
	  } else {
	    newSpecifier = t.importDefaultSpecifier(uid);
	  }

	  nodes.push(t.importDeclaration([newSpecifier], node.source));
	  nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));

	  build(node, nodes, scope);
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ExportNamedDeclaration: function ExportNamedDeclaration(node, parent, scope) {
	    var nodes = [];
	    build(node, nodes, scope);
	    if (!nodes.length) return;

	    if (node.specifiers.length >= 1) {
	      nodes.push(node);
	    }

	    return nodes;
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],136:[function(require,module,exports){
	// https://github.com/zenparsing/es-function-bind

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  optional: true,
	  stage: 0
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	function getTempId(scope) {
	  var id = scope.path.getData("functionBind");
	  if (id) return id;

	  id = scope.generateDeclaredUidIdentifier("context");
	  return scope.path.setData("functionBind", id);
	}

	/**
	 * [Please add a description.]
	 */

	function getStaticContext(bind, scope) {
	  var object = bind.object || bind.callee.object;
	  return scope.isStatic(object) && object;
	}

	/**
	 * [Please add a description.]
	 */

	function inferBindContext(bind, scope) {
	  var staticContext = getStaticContext(bind, scope);
	  if (staticContext) return staticContext;

	  var tempId = getTempId(scope);
	  if (bind.object) {
	    bind.callee = t.sequenceExpression([t.assignmentExpression("=", tempId, bind.object), bind.callee]);
	  } else {
	    bind.callee.object = t.assignmentExpression("=", tempId, bind.callee.object);
	  }
	  return tempId;
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  CallExpression: function CallExpression(node, parent, scope) {
	    var bind = node.callee;
	    if (!t.isBindExpression(bind)) return;

	    var context = inferBindContext(bind, scope);
	    node.callee = t.memberExpression(bind.callee, t.identifier("call"));
	    node.arguments.unshift(context);
	  },

	  /**
	   * [Please add a description.]
	   */

	  BindExpression: function BindExpression(node, parent, scope) {
	    var context = inferBindContext(node, scope);
	    return t.callExpression(t.memberExpression(node.callee, t.identifier("bind")), [context]);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],137:[function(require,module,exports){
	// https://github.com/sebmarkbage/ecmascript-rest-spread

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  stage: 1,
	  dependencies: ["es6.destructuring"]
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var hasSpread = function hasSpread(node) {
	  for (var i = 0; i < node.properties.length; i++) {
	    if (t.isSpreadProperty(node.properties[i])) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ObjectExpression: function ObjectExpression(node, parent, scope, file) {
	    if (!hasSpread(node)) return;

	    var args = [];
	    var props = [];

	    var push = function push() {
	      if (!props.length) return;
	      args.push(t.objectExpression(props));
	      props = [];
	    };

	    for (var i = 0; i < node.properties.length; i++) {
	      var prop = node.properties[i];
	      if (t.isSpreadProperty(prop)) {
	        push();
	        args.push(prop.argument);
	      } else {
	        props.push(prop);
	      }
	    }

	    push();

	    if (!t.isObjectExpression(args[0])) {
	      args.unshift(t.objectExpression([]));
	    }

	    return t.callExpression(file.addHelper("extends"), args);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],138:[function(require,module,exports){
	arguments[4][129][0].apply(exports,arguments)
	},{"dup":129}],139:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.internal = internal;
	exports.blacklist = blacklist;
	exports.whitelist = whitelist;
	exports.stage = stage;
	exports.optional = optional;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	/**
	 * [Please add a description.]
	 */

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	function internal(transformer, opts) {
	  if (transformer.key[0] === "_") return true;
	}

	/**
	 * [Please add a description.]
	 */

	function blacklist(transformer, opts) {
	  var blacklist = opts.blacklist;
	  if (blacklist.length && _lodashCollectionIncludes2["default"](blacklist, transformer.key)) return false;
	}

	/**
	 * [Please add a description.]
	 */

	function whitelist(transformer, opts) {
	  var whitelist = opts.whitelist;
	  if (whitelist) return _lodashCollectionIncludes2["default"](whitelist, transformer.key);
	}

	/**
	 * [Please add a description.]
	 */

	function stage(transformer, opts) {
	  var stage = transformer.metadata.stage;
	  if (stage != null && stage >= opts.stage) return true;
	}

	/**
	 * [Please add a description.]
	 */

	function optional(transformer, opts) {
	  if (transformer.metadata.optional && !_lodashCollectionIncludes2["default"](opts.optional, transformer.key)) return false;
	}
	},{"lodash/collection/includes":341}],140:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  //- builtin-prepass
	  "minification.constantFolding": require("babel-plugin-constant-folding"),

	  //- builtin-pre
	  strict: require("./other/strict"),
	  eval: require("babel-plugin-eval"),
	  _validation: require("./internal/validation"),
	  _hoistDirectives: require("./internal/hoist-directives"),
	  "minification.removeDebugger": require("babel-plugin-remove-debugger"),
	  "minification.removeConsole": require("babel-plugin-remove-console"),
	  "utility.inlineEnvironmentVariables": require("babel-plugin-inline-environment-variables"),
	  "minification.deadCodeElimination": require("babel-plugin-dead-code-elimination"),
	  _modules: require("./internal/modules"),
	  "react.displayName": require("babel-plugin-react-display-name"),
	  "es6.spec.templateLiterals": require("./es6/spec.template-literals"),
	  "es6.templateLiterals": require("./es6/template-literals"),
	  "es6.literals": require("./es6/literals"),
	  "validation.undeclaredVariableCheck": require("babel-plugin-undeclared-variables-check"),

	  //- builtin-basic
	  // this is where the bulk of the ES6 transformations take place, none of them require traversal state
	  // so they can all be concatenated together for performance
	  "spec.functionName": require("./spec/function-name"),
	  "es7.classProperties": require("./es7/class-properties"),
	  "es7.trailingFunctionCommas": require("./es7/trailing-function-commas"),
	  "es7.asyncFunctions": require("./es7/async-functions"),
	  "es7.decorators": require("./es7/decorators"),
	  "validation.react": require("./validation/react"),
	  "es6.arrowFunctions": require("./es6/arrow-functions"),
	  "spec.blockScopedFunctions": require("./spec/block-scoped-functions"),
	  "optimisation.react.constantElements": require("babel-plugin-react-constant-elements"),
	  "optimisation.react.inlineElements": require("./optimisation/react.inline-elements"),
	  "es7.comprehensions": require("./es7/comprehensions"),
	  "es6.classes": require("./es6/classes"),
	  asyncToGenerator: require("./other/async-to-generator"),
	  bluebirdCoroutines: require("./other/bluebird-coroutines"),
	  "es6.objectSuper": require("./es6/object-super"),
	  "es7.objectRestSpread": require("./es7/object-rest-spread"),
	  "es7.exponentiationOperator": require("./es7/exponentiation-operator"),
	  "es5.properties.mutators": require("./es5/properties.mutators"),
	  "es6.properties.shorthand": require("./es6/properties.shorthand"),
	  "es6.properties.computed": require("./es6/properties.computed"),
	  "optimisation.flow.forOf": require("./optimisation/flow.for-of"),
	  "es6.forOf": require("./es6/for-of"),
	  "es6.regex.sticky": require("./es6/regex.sticky"),
	  "es6.regex.unicode": require("./es6/regex.unicode"),
	  "es6.constants": require("./es6/constants"),
	  "es7.exportExtensions": require("./es7/export-extensions"),
	  "spec.protoToAssign": require("babel-plugin-proto-to-assign"),
	  "es7.doExpressions": require("./es7/do-expressions"),
	  "es6.spec.symbols": require("./es6/spec.symbols"),
	  "es7.functionBind": require("./es7/function-bind"),
	  "spec.undefinedToVoid": require("babel-plugin-undefined-to-void"),

	  //- builtin-advanced
	  "es6.spread": require("./es6/spread"),
	  "es6.parameters": require("./es6/parameters"),
	  "es6.destructuring": require("./es6/destructuring"),
	  "es6.blockScoping": require("./es6/block-scoping"),
	  "es6.spec.blockScoping": require("./es6/spec.block-scoping"),
	  reactCompat: require("./other/react-compat"),
	  react: require("./other/react"),
	  regenerator: require("./other/regenerator"),

	  // es6 syntax transformation is **forbidden** past this point since regenerator will chuck a massive
	  // hissy fit

	  //- builtin-modules
	  runtime: require("babel-plugin-runtime"),
	  "es6.modules": require("./es6/modules"),
	  _moduleFormatter: require("./internal/module-formatter"),

	  //- builtin-trailing
	  // these clean up the output and do finishing up transformations, it's important to note that by this
	  // stage you can't import any new modules or insert new ES6 as all those transformers have already
	  // been ran
	  "es6.tailCall": require("./es6/tail-call"),
	  _shadowFunctions: require("./internal/shadow-functions"),
	  "es3.propertyLiterals": require("./es3/property-literals"),
	  "es3.memberExpressionLiterals": require("./es3/member-expression-literals"),
	  "minification.memberExpressionLiterals": require("babel-plugin-member-expression-literals"),
	  "minification.propertyLiterals": require("babel-plugin-property-literals"),
	  _blockHoist: require("./internal/block-hoist"),
	  jscript: require("babel-plugin-jscript"),
	  flow: require("./other/flow"),
	  "optimisation.modules.system": require("./optimisation/modules.system")
	};
	module.exports = exports["default"];
	},{"./es3/member-expression-literals":102,"./es3/property-literals":103,"./es5/properties.mutators":104,"./es6/arrow-functions":105,"./es6/block-scoping":106,"./es6/classes":107,"./es6/constants":110,"./es6/destructuring":111,"./es6/for-of":112,"./es6/literals":113,"./es6/modules":114,"./es6/object-super":115,"./es6/parameters":117,"./es6/properties.computed":119,"./es6/properties.shorthand":120,"./es6/regex.sticky":121,"./es6/regex.unicode":122,"./es6/spec.block-scoping":123,"./es6/spec.symbols":124,"./es6/spec.template-literals":125,"./es6/spread":126,"./es6/tail-call":127,"./es6/template-literals":128,"./es7/async-functions":129,"./es7/class-properties":130,"./es7/comprehensions":131,"./es7/decorators":132,"./es7/do-expressions":133,"./es7/exponentiation-operator":134,"./es7/export-extensions":135,"./es7/function-bind":136,"./es7/object-rest-spread":137,"./es7/trailing-function-commas":138,"./internal/block-hoist":141,"./internal/hoist-directives":142,"./internal/module-formatter":143,"./internal/modules":144,"./internal/shadow-functions":145,"./internal/validation":146,"./optimisation/flow.for-of":147,"./optimisation/modules.system":148,"./optimisation/react.inline-elements":149,"./other/async-to-generator":150,"./other/bluebird-coroutines":151,"./other/flow":152,"./other/react":154,"./other/react-compat":153,"./other/regenerator":155,"./other/strict":156,"./spec/block-scoped-functions":157,"./spec/function-name":158,"./validation/react":159,"babel-plugin-constant-folding":197,"babel-plugin-dead-code-elimination":198,"babel-plugin-eval":199,"babel-plugin-inline-environment-variables":200,"babel-plugin-jscript":201,"babel-plugin-member-expression-literals":202,"babel-plugin-property-literals":203,"babel-plugin-proto-to-assign":204,"babel-plugin-react-constant-elements":205,"babel-plugin-react-display-name":206,"babel-plugin-remove-console":207,"babel-plugin-remove-debugger":208,"babel-plugin-runtime":210,"babel-plugin-undeclared-variables-check":211,"babel-plugin-undefined-to-void":213}],141:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashCollectionSortBy = require("lodash/collection/sortBy");

	var _lodashCollectionSortBy2 = _interopRequireDefault(_lodashCollectionSortBy);

	var metadata = {
	  group: "builtin-trailing"
	};

	/**
	 * [Please add a description.]
	 *
	 * Priority:
	 *
	 *  - 0 We want this to be at the **very** bottom
	 *  - 1 Default node position
	 *  - 2 Priority over normal nodes
	 *  - 3 We want this to be at the **very** top
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Block: {
	    exit: function exit(node) {
	      var hasChange = false;
	      for (var i = 0; i < node.body.length; i++) {
	        var bodyNode = node.body[i];
	        if (bodyNode && bodyNode._blockHoist != null) hasChange = true;
	      }
	      if (!hasChange) return;

	      node.body = _lodashCollectionSortBy2["default"](node.body, function (bodyNode) {
	        var priority = bodyNode && bodyNode._blockHoist;
	        if (priority == null) priority = 1;
	        if (priority === true) priority = 2;

	        // Higher priorities should move toward the top.
	        return -1 * priority;
	      });
	    }
	  }
	};
	exports.visitor = visitor;
	},{"lodash/collection/sortBy":345}],142:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-pre"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Block: {
	    exit: function exit(node) {
	      for (var i = 0; i < node.body.length; i++) {
	        var bodyNode = node.body[i];
	        if (t.isExpressionStatement(bodyNode) && t.isLiteral(bodyNode.expression)) {
	          bodyNode._blockHoist = Infinity;
	        } else {
	          return;
	        }
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],143:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	var metadata = {
	  group: "builtin-modules"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Program: {
	    exit: function exit(program, parent, scope, file) {
	      // ensure that these are at the top, just like normal imports
	      var _arr = file.dynamicImports;
	      for (var _i = 0; _i < _arr.length; _i++) {
	        var node = _arr[_i];
	        node._blockHoist = 3;
	      }

	      program.body = file.dynamicImports.concat(program.body);

	      if (!file.transformers["es6.modules"].canTransform()) return;

	      if (file.moduleFormatter.transform) {
	        file.moduleFormatter.transform(program);
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{}],144:[function(require,module,exports){
	// in this transformer we have to split up classes and function declarations
	// from their exports. why? because sometimes we need to replace classes with
	// nodes that aren't allowed in the same contexts. also, if you're exporting
	// a generator function as a default then regenerator will destroy the export
	// declaration and leave a variable declaration in it's place... yeah, handy.

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function getDeclar(node) {
	  var declar = node.declaration;
	  t.inheritsComments(declar, node);
	  t.removeComments(node);
	  declar._ignoreUserWhitespace = true;
	  return declar;
	}

	/**
	 * [Please add a description.]
	 */

	function buildExportSpecifier(id) {
	  return t.exportSpecifier(cloneIdentifier(id), cloneIdentifier(id));
	}

	function cloneIdentifier(_ref) {
	  var name = _ref.name;
	  var loc = _ref.loc;

	  var id = t.identifier(name);
	  id._loc = loc;
	  return id;
	}

	var metadata = {
	  group: "builtin-pre"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope) {
	    var declar = node.declaration;

	    if (t.isClassDeclaration(declar)) {
	      // export default class Foo {};
	      var nodes = [getDeclar(node), node];
	      node.declaration = declar.id;
	      return nodes;
	    } else if (t.isClassExpression(declar)) {
	      // export default class {};
	      var temp = scope.generateUidIdentifier("default");
	      node.declaration = t.variableDeclaration("var", [t.variableDeclarator(temp, declar)]);

	      var nodes = [getDeclar(node), node];
	      node.declaration = temp;
	      return nodes;
	    } else if (t.isFunctionDeclaration(declar)) {
	      // export default function Foo() {}
	      node._blockHoist = 2;

	      var nodes = [getDeclar(node), node];
	      node.declaration = declar.id;
	      return nodes;
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportNamedDeclaration: function ExportNamedDeclaration(node) {
	    var declar = node.declaration;

	    if (t.isClassDeclaration(declar)) {
	      // export class Foo {}
	      node.specifiers = [buildExportSpecifier(declar.id)];

	      var nodes = [getDeclar(node), node];
	      node.declaration = null;
	      return nodes;
	    } else if (t.isFunctionDeclaration(declar)) {
	      // export function Foo() {}
	      var newExport = t.exportNamedDeclaration(null, [buildExportSpecifier(declar.id)]);
	      newExport._blockHoist = 2;
	      return [getDeclar(node), newExport];
	    } else if (t.isVariableDeclaration(declar)) {
	      // export var foo = "bar";
	      var specifiers = [];
	      var bindings = this.get("declaration").getBindingIdentifiers();
	      for (var key in bindings) {
	        specifiers.push(buildExportSpecifier(bindings[key]));
	      }
	      return [declar, t.exportNamedDeclaration(null, specifiers)];
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Program: {
	    enter: function enter(node) {
	      var imports = [];
	      var rest = [];

	      for (var i = 0; i < node.body.length; i++) {
	        var bodyNode = node.body[i];
	        if (t.isImportDeclaration(bodyNode)) {
	          imports.push(bodyNode);
	        } else {
	          rest.push(bodyNode);
	        }
	      }

	      node.body = imports.concat(rest);
	    },

	    exit: function exit(node, parent, scope, file) {
	      if (!file.transformers["es6.modules"].canTransform()) return;

	      if (file.moduleFormatter.setup) {
	        file.moduleFormatter.setup();
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],145:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-trailing"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	function remap(path, key, create) {
	  // ensure that we're shadowed
	  var shadowPath = path.inShadow();
	  if (!shadowPath || shadowPath.isArrowFunctionExpression()) return;

	  var shadowFunction = path.node._shadowedFunctionLiteral;
	  var currentFunction;

	  var fnPath = path.findParent(function (path) {
	    if (path.isProgram() || path.isFunction()) {
	      // catch current function in case this is the shadowed one and we can ignore it
	      currentFunction = currentFunction || path;
	    }

	    if (path.isProgram()) {
	      return true;
	    } else if (path.isFunction()) {
	      if (shadowFunction) {
	        return path === shadowFunction || path.node === shadowFunction.node;
	      } else {
	        return !path.is("shadow");
	      }
	    }

	    return false;
	  });

	  // no point in realiasing if we're in this function
	  if (fnPath === currentFunction) return;

	  var cached = fnPath.getData(key);
	  if (cached) return cached;

	  var init = create();
	  var id = path.scope.generateUidIdentifier(key);

	  fnPath.setData(key, id);
	  fnPath.scope.push({ id: id, init: init });

	  return id;
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ThisExpression: function ThisExpression() {
	    return remap(this, "this", function () {
	      return t.thisExpression();
	    });
	  },

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node) {
	    if (node.name === "arguments") {
	      return remap(this, "arguments", function () {
	        return t.identifier("arguments");
	      });
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],146:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _messages = require("../../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-pre"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ForXStatement: function ForXStatement(node, parent, scope, file) {
	    var left = node.left;
	    if (t.isVariableDeclaration(left)) {
	      var declar = left.declarations[0];
	      if (declar.init) throw file.errorWithNode(declar, messages.get("noAssignmentsInForHead"));
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Property: function Property(node, parent, scope, file) {
	    if (node.kind === "set") {
	      var first = node.value.params[0];
	      if (t.isRestElement(first)) {
	        throw file.errorWithNode(first, messages.get("settersNoRest"));
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../messages":60,"../../../types":193}],147:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;

	var _es6ForOf = require("../es6/for-of");

	var metadata = {
	  optional: true
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  ForOfStatement: function ForOfStatement(node, parent, scope, file) {
	    if (this.get("right").isGenericType("Array")) {
	      return _es6ForOf._ForOfStatementArray.call(this, node, scope, file);
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../es6/for-of":112}],148:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  optional: true,
	  group: "builtin-trailing"
	};

	exports.metadata = metadata;
	var visitor = {
	  Program: function Program(node, parent, scope, file) {
	    if (file.moduleFormatter._setters) {
	      scope.traverse(file.moduleFormatter._setters, optimizeSettersVisitor, {
	        exportFunctionIdentifier: file.moduleFormatter.exportIdentifier
	      });
	    }
	  }
	};

	/**
	 * Setters are optimized to avoid slow export behavior in modules that rely on deep hierarchies
	 * of export-from declarations.
	 * More info in https://github.com/babel/babel/pull/1722 and
	 * https://github.com/ModuleLoader/es6-module-loader/issues/386.
	 *
	 * TODO: Ideally this would be optimized during construction of the setters, but the current
	 * architecture of the module formatters make that difficult.
	 */
	exports.visitor = visitor;
	var optimizeSettersVisitor = {
	  FunctionExpression: {
	    enter: function enter(node, parent, scope, state) {
	      state.hasExports = false;
	      state.exportObjectIdentifier = scope.generateUidIdentifier("exportObj");
	    },
	    exit: function exit(node, parent, scope, state) {
	      if (!state.hasExports) return;

	      node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(t.cloneDeep(state.exportObjectIdentifier), t.objectExpression([]))]));
	      node.body.body.push(t.expressionStatement(t.callExpression(t.cloneDeep(state.exportFunctionIdentifier), [t.cloneDeep(state.exportObjectIdentifier)])));
	    }
	  },
	  CallExpression: function CallExpression(node, parent, scope, state) {
	    if (!t.isIdentifier(node.callee, { name: state.exportFunctionIdentifier.name })) return;

	    state.hasExports = true;
	    var memberNode = t.memberExpression(t.cloneDeep(state.exportObjectIdentifier), node.arguments[0], true);
	    return t.assignmentExpression("=", memberNode, node.arguments[1]);
	  }
	};
	},{"../../../types":193}],149:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _helpersReact = require("../../helpers/react");

	var react = _interopRequireWildcard(_helpersReact);

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  optional: true
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	function hasRefOrSpread(attrs) {
	  for (var i = 0; i < attrs.length; i++) {
	    var attr = attrs[i];
	    if (t.isJSXSpreadAttribute(attr)) return true;
	    if (isJSXAttributeOfName(attr, "ref")) return true;
	  }
	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	function isJSXAttributeOfName(attr, name) {
	  return t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, { name: name });
	}

	/**
	 * [Please add a description.]
	 */
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  JSXElement: function JSXElement(node, parent, scope, file) {
	    // filter
	    var open = node.openingElement;
	    if (hasRefOrSpread(open.attributes)) return;

	    // init
	    var isComponent = true;
	    var props = t.objectExpression([]);
	    var obj = t.objectExpression([]);
	    var key = t.literal(null);
	    var type = open.name;

	    if (t.isJSXIdentifier(type) && react.isCompatTag(type.name)) {
	      type = t.literal(type.name);
	      isComponent = false;
	    }

	    function pushElemProp(key, value) {
	      pushProp(obj.properties, t.identifier(key), value);
	    }

	    function pushProp(objProps, key, value) {
	      objProps.push(t.property("init", key, value));
	    }

	    // metadata
	    pushElemProp("type", type);
	    pushElemProp("ref", t.literal(null));

	    if (node.children.length) {
	      var children = react.buildChildren(node);
	      children = children.length === 1 ? children[0] : t.arrayExpression(children);
	      pushProp(props.properties, t.identifier("children"), children);
	    }

	    // props
	    for (var i = 0; i < open.attributes.length; i++) {
	      var attr = open.attributes[i];
	      if (isJSXAttributeOfName(attr, "key")) {
	        key = attr.value;
	      } else {
	        pushProp(props.properties, attr.name, attr.value || t.identifier("true"));
	      }
	    }

	    if (isComponent) {
	      props = t.callExpression(file.addHelper("default-props"), [t.memberExpression(type, t.identifier("defaultProps")), props]);
	    }

	    pushElemProp("props", props);

	    // key
	    pushElemProp("key", key);

	    return obj;
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/react":79}],150:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersRemapAsyncToGenerator = require("../../helpers/remap-async-to-generator");

	var _helpersRemapAsyncToGenerator2 = _interopRequireDefault(_helpersRemapAsyncToGenerator);

	var _bluebirdCoroutines = require("./bluebird-coroutines");

	exports.manipulateOptions = _bluebirdCoroutines.manipulateOptions;
	var metadata = {
	  optional: true,
	  dependencies: ["es7.asyncFunctions", "es6.classes"]
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, file) {
	    if (!node.async || node.generator) return;

	    return _helpersRemapAsyncToGenerator2["default"](this, file.addHelper("async-to-generator"));
	  }
	};
	exports.visitor = visitor;
	},{"../../helpers/remap-async-to-generator":81,"./bluebird-coroutines":151}],151:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.manipulateOptions = manipulateOptions;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersRemapAsyncToGenerator = require("../../helpers/remap-async-to-generator");

	var _helpersRemapAsyncToGenerator2 = _interopRequireDefault(_helpersRemapAsyncToGenerator);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function manipulateOptions(opts) {
	  opts.blacklist.push("regenerator");
	}

	var metadata = {
	  optional: true,
	  dependencies: ["es7.asyncFunctions", "es6.classes"]
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node, parent, scope, file) {
	    if (!node.async || node.generator) return;

	    return _helpersRemapAsyncToGenerator2["default"](this, t.memberExpression(file.addImport("bluebird", null, "absolute"), t.identifier("coroutine")));
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/remap-async-to-generator":81}],152:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-trailing"
	};

	exports.metadata = metadata;
	var FLOW_DIRECTIVE = "@flow";

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Program: function Program(node, parent, scope, file) {
	    var _arr = file.ast.comments;

	    for (var _i = 0; _i < _arr.length; _i++) {
	      var comment = _arr[_i];
	      if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
	        // remove flow directive
	        comment.value = comment.value.replace(FLOW_DIRECTIVE, "");

	        // remove the comment completely if it only consists of whitespace and/or stars
	        if (!comment.value.replace(/\*/g, "").trim()) comment._displayed = true;
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Flow: function Flow() {
	    this.dangerouslyRemove();
	  },

	  /**
	   * [Please add a description.]
	   */

	  ClassProperty: function ClassProperty(node) {
	    node.typeAnnotation = null;
	    if (!node.value) this.dangerouslyRemove();
	  },

	  /**
	   * [Please add a description.]
	   */

	  Class: function Class(node) {
	    node["implements"] = null;
	  },

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function(node) {
	    for (var i = 0; i < node.params.length; i++) {
	      var param = node.params[i];
	      param.optional = false;
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  TypeCastExpression: function TypeCastExpression(node) {
	    do {
	      node = node.expression;
	    } while (t.isTypeCastExpression(node));
	    return node;
	  },

	  /**
	   * [Please add a description.]
	   */

	  ImportDeclaration: function ImportDeclaration(node) {
	    if (node.importKind === "type" || node.importKind === "typeof") this.dangerouslyRemove();
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportDeclaration: function ExportDeclaration() {
	    if (this.get("declaration").isTypeAlias()) this.dangerouslyRemove();
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],153:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.manipulateOptions = manipulateOptions;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _helpersReact = require("../../helpers/react");

	var react = _interopRequireWildcard(_helpersReact);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function manipulateOptions(opts) {
	  opts.blacklist.push("react");
	}

	var metadata = {
	  optional: true,
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = require("../../helpers/build-react-transformer")({

	  /**
	   * [Please add a description.]
	   */

	  pre: function pre(state) {
	    state.callee = state.tagExpr;
	  },

	  /**
	   * [Please add a description.]
	   */

	  post: function post(state) {
	    if (react.isCompatTag(state.tagName)) {
	      state.call = t.callExpression(t.memberExpression(t.memberExpression(t.identifier("React"), t.identifier("DOM")), state.tagExpr, t.isLiteral(state.tagExpr)), state.args);
	    }
	  }
	});
	exports.visitor = visitor;
	},{"../../../types":193,"../../helpers/build-react-transformer":72,"../../helpers/react":79}],154:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _helpersReact = require("../../helpers/react");

	var react = _interopRequireWildcard(_helpersReact);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var JSX_ANNOTATION_REGEX = /^\*\s*@jsx\s+([^\s]+)/;

	var metadata = {
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = require("../../helpers/build-react-transformer")({

	  /**
	   * [Please add a description.]
	   */

	  pre: function pre(state) {
	    var tagName = state.tagName;
	    var args = state.args;
	    if (react.isCompatTag(tagName)) {
	      args.push(t.literal(tagName));
	    } else {
	      args.push(state.tagExpr);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  post: function post(state, file) {
	    state.callee = file.get("jsxIdentifier");
	  }
	});

	/**
	 * [Please add a description.]
	 */

	exports.visitor = visitor;
	visitor.Program = function (node, parent, scope, file) {
	  var id = file.opts.jsxPragma;

	  for (var i = 0; i < file.ast.comments.length; i++) {
	    var comment = file.ast.comments[i];
	    var matches = JSX_ANNOTATION_REGEX.exec(comment.value);
	    if (matches) {
	      id = matches[1];
	      if (id === "React.DOM") {
	        throw file.errorWithNode(comment, "The @jsx React.DOM pragma has been deprecated as of React 0.12");
	      } else {
	        break;
	      }
	    }
	  }

	  file.set("jsxIdentifier", id.split(".").map(t.identifier).reduce(function (object, property) {
	    return t.memberExpression(object, property);
	  }));
	};
	},{"../../../types":193,"../../helpers/build-react-transformer":72,"../../helpers/react":79}],155:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _regenerator = require("regenerator");

	var _regenerator2 = _interopRequireDefault(_regenerator);

	var _types = require("../../../types");

	// It's important to use the exact same NodePath constructor that
	// Regenerator uses, rather than require("ast-types").NodePath, because
	// the version of ast-types that Babel knows about might be different from
	// the version that Regenerator depends on. See for example #1958.

	var t = _interopRequireWildcard(_types);

	var NodePath = _regenerator2["default"].types.NodePath;

	var metadata = {
	  group: "builtin-advanced"
	};

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: {
	    exit: function exit(node) {
	      if (node.async || node.generator) {
	        // Although this code transforms only the subtree rooted at the given
	        // Function node, that node might contain other generator functions
	        // that will also be transformed. It might help performance to ignore
	        // nested functions, and rely on the traversal to visit them later,
	        // but that's a small optimization. Starting here instead of at the
	        // root of the AST is the key optimization, since huge async/generator
	        // functions are relatively rare.
	        _regenerator2["default"].transform(convertNodePath(this));
	      }
	    }
	  }
	};

	// Given a Babel NodePath, return an ast-types NodePath that includes full
	// ancestry information (up to and including the Program node). This is
	// complicated by having to include intermediate objects like blockStatement.body
	// arrays, in addition to Node objects.
	exports.visitor = visitor;
	function convertNodePath(path) {
	  var programNode;
	  var keysAlongPath = [];

	  while (path) {
	    var pp = path.parentPath;
	    var parentNode = pp && pp.node;
	    if (parentNode) {
	      keysAlongPath.push(path.key);

	      if (parentNode !== path.container) {
	        var found = Object.keys(parentNode).some(function (listKey) {
	          if (parentNode[listKey] === path.container) {
	            keysAlongPath.push(listKey);
	            return true;
	          }
	        });

	        if (!found) {
	          throw new Error("Failed to find container object in parent node");
	        }
	      }

	      if (t.isProgram(parentNode)) {
	        programNode = parentNode;
	        break;
	      }
	    }

	    path = pp;
	  }

	  if (!programNode) {
	    throw new Error("Failed to find root Program node");
	  }

	  var nodePath = new NodePath(programNode);

	  while (keysAlongPath.length > 0) {
	    nodePath = nodePath.get(keysAlongPath.pop());
	  }

	  return nodePath;
	}
	},{"../../../types":193,"regenerator":463}],156:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var metadata = {
	  group: "builtin-pre"
	};

	exports.metadata = metadata;
	var THIS_BREAK_KEYS = ["FunctionExpression", "FunctionDeclaration", "ClassProperty"];

	function isUseStrict(node) {
	  if (!t.isLiteral(node)) return false;

	  if (node.raw && node.rawValue === node.value) {
	    return node.rawValue === "use strict";
	  } else {
	    return node.value === "use strict";
	  }
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  Program: {
	    enter: function enter(program) {
	      var first = program.body[0];

	      var directive;
	      if (t.isExpressionStatement(first) && isUseStrict(first.expression)) {
	        directive = first;
	      } else {
	        directive = t.expressionStatement(t.literal("use strict"));
	        this.unshiftContainer("body", directive);
	        if (first) {
	          directive.leadingComments = first.leadingComments;
	          first.leadingComments = [];
	        }
	      }
	      directive._blockHoist = Infinity;
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ThisExpression: function ThisExpression() {
	    if (!this.findParent(function (path) {
	      return !path.is("shadow") && THIS_BREAK_KEYS.indexOf(path.type) >= 0;
	    })) {
	      return t.identifier("undefined");
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],157:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function statementList(key, path) {
	  var paths = path.get(key);

	  for (var i = 0; i < paths.length; i++) {
	    var _path = paths[i];

	    var func = _path.node;
	    if (!t.isFunctionDeclaration(func)) continue;

	    var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);

	    // hoist it up above everything else
	    declar._blockHoist = 2;

	    // todo: name this
	    func.id = null;

	    _path.replaceWith(declar);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  BlockStatement: function BlockStatement(node, parent) {
	    if (t.isFunction(parent) && parent.body === node || t.isExportDeclaration(parent)) {
	      return;
	    }

	    statementList("body", this);
	  },

	  /**
	   * [Please add a description.]
	   */

	  SwitchCase: function SwitchCase() {
	    statementList("consequent", this);
	  }
	};
	exports.visitor = visitor;
	},{"../../../types":193}],158:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;

	var _helpersNameMethod = require("../../helpers/name-method");

	var metadata = {
	  group: "builtin-basic"
	};

	// visit Property functions first - https://github.com/babel/babel/issues/1860

	/**
	 * [Please add a description.]
	 */

	exports.metadata = metadata;
	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  "ArrowFunctionExpression|FunctionExpression": {
	    exit: function exit() {
	      if (!this.parentPath.isProperty()) {
	        return _helpersNameMethod.bare.apply(this, arguments);
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ObjectExpression: function ObjectExpression() {
	    var props = this.get("properties");
	    var _arr = props;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var prop = _arr[_i];
	      var value = prop.get("value");
	      if (value.isFunction()) {
	        var newNode = _helpersNameMethod.bare(value.node, prop.node, value.scope);
	        if (newNode) value.replaceWith(newNode);
	      }
	    }
	  }
	};
	exports.visitor = visitor;
	},{"../../helpers/name-method":78}],159:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _messages = require("../../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _types = require("../../../types");

	// check if the input Literal `source` is an alternate casing of "react"

	var t = _interopRequireWildcard(_types);

	function check(source, file) {
	  if (t.isLiteral(source)) {
	    var name = source.value;
	    var lower = name.toLowerCase();

	    if (lower === "react" && name !== lower) {
	      throw file.errorWithNode(source, messages.get("didYouMean", "react"));
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	var visitor = {

	  /**
	   * [Please add a description.]
	   */

	  CallExpression: function CallExpression(node, parent, scope, file) {
	    if (this.get("callee").isIdentifier({ name: "require" }) && node.arguments.length === 1) {
	      check(node.arguments[0], file);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ModuleDeclaration: function ModuleDeclaration(node, parent, scope, file) {
	    check(node.source, file);
	  }
	};
	exports.visitor = visitor;
	},{"../../../messages":60,"../../../types":193}],160:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _path = require("./path");

	var _path2 = _interopRequireDefault(_path);

	var _types = require("../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var TraversalContext = (function () {
	  function TraversalContext(scope, opts, state, parentPath) {
	    _classCallCheck(this, TraversalContext);

	    this.parentPath = parentPath;
	    this.scope = scope;
	    this.state = state;
	    this.opts = opts;
	    this.queue = null;
	  }

	  /**
	   * [Please add a description.]
	   */

	  TraversalContext.prototype.shouldVisit = function shouldVisit(node) {
	    var opts = this.opts;
	    if (opts.enter || opts.exit) return true;

	    if (opts[node.type]) return true;

	    var keys = t.VISITOR_KEYS[node.type];
	    if (!keys || !keys.length) return false;

	    var _arr = keys;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var key = _arr[_i];
	      if (node[key]) return true;
	    }

	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  TraversalContext.prototype.create = function create(node, obj, key, listKey) {
	    var path = _path2["default"].get({
	      parentPath: this.parentPath,
	      parent: node,
	      container: obj,
	      key: key,
	      listKey: listKey
	    });
	    path.unshiftContext(this);
	    return path;
	  };

	  /**
	   * [Please add a description.]
	   */

	  TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
	    // nothing to traverse!
	    if (container.length === 0) return false;

	    var visited = [];

	    var queue = this.queue = [];
	    var stop = false;

	    // build up initial queue
	    for (var key = 0; key < container.length; key++) {
	      var self = container[key];
	      if (self && this.shouldVisit(self)) {
	        queue.push(this.create(parent, container, key, listKey));
	      }
	    }

	    // visit the queue
	    var _arr2 = queue;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var path = _arr2[_i2];
	      path.resync();

	      if (visited.indexOf(path.node) >= 0) continue;
	      visited.push(path.node);

	      if (path.visit()) {
	        stop = true;
	        break;
	      }
	    }

	    var _arr3 = queue;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var path = _arr3[_i3];
	      path.shiftContext();
	    }

	    this.queue = null;

	    return stop;
	  };

	  /**
	   * [Please add a description.]
	   */

	  TraversalContext.prototype.visitSingle = function visitSingle(node, key) {
	    if (this.shouldVisit(node[key])) {
	      var path = this.create(node, node, key);
	      path.visit();
	      path.shiftContext();
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  TraversalContext.prototype.visit = function visit(node, key) {
	    var nodes = node[key];
	    if (!nodes) return;

	    if (Array.isArray(nodes)) {
	      return this.visitMultiple(nodes, node, key);
	    } else {
	      return this.visitSingle(node, key);
	    }
	  };

	  return TraversalContext;
	})();

	exports["default"] = TraversalContext;
	module.exports = exports["default"];
	},{"../types":193,"./path":169}],161:[function(require,module,exports){
	/**
	 * [Please add a description.]
	 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Hub = function Hub(file) {
	  _classCallCheck(this, Hub);

	  this.file = file;
	};

	exports["default"] = Hub;
	module.exports = exports["default"];
	},{}],162:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports["default"] = traverse;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _context = require("./context");

	var _context2 = _interopRequireDefault(_context);

	var _visitors = require("./visitors");

	var visitors = _interopRequireWildcard(_visitors);

	var _messages = require("../messages");

	var messages = _interopRequireWildcard(_messages);

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _types = require("../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function traverse(parent, opts, scope, state, parentPath) {
	  if (!parent) return;
	  if (!opts) opts = {};

	  if (!opts.noScope && !scope) {
	    if (parent.type !== "Program" && parent.type !== "File") {
	      throw new Error(messages.get("traverseNeedsParent", parent.type));
	    }
	  }

	  visitors.explode(opts);

	  // array of nodes
	  if (Array.isArray(parent)) {
	    for (var i = 0; i < parent.length; i++) {
	      traverse.node(parent[i], opts, scope, state, parentPath);
	    }
	  } else {
	    traverse.node(parent, opts, scope, state, parentPath);
	  }
	}

	traverse.visitors = visitors;
	traverse.verify = visitors.verify;
	traverse.explode = visitors.explode;

	/**
	 * [Please add a description.]
	 */

	traverse.node = function (node, opts, scope, state, parentPath, skipKeys) {
	  var keys = t.VISITOR_KEYS[node.type];
	  if (!keys) return;

	  var context = new _context2["default"](scope, opts, state, parentPath);
	  var _arr = keys;
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var key = _arr[_i];
	    if (skipKeys && skipKeys[key]) continue;
	    if (context.visit(node, key)) return;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var CLEAR_KEYS = t.COMMENT_KEYS.concat(["_scopeInfo", "_paths", "tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);

	/**
	 * [Please add a description.]
	 */

	traverse.clearNode = function (node) {
	  for (var i = 0; i < CLEAR_KEYS.length; i++) {
	    var key = CLEAR_KEYS[i];
	    if (node[key] != null) node[key] = undefined;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var clearVisitor = {
	  noScope: true,
	  exit: traverse.clearNode
	};

	/**
	 * [Please add a description.]
	 */

	traverse.removeProperties = function (tree) {
	  traverse(tree, clearVisitor);
	  traverse.clearNode(tree);

	  return tree;
	};

	/**
	 * [Please add a description.]
	 */

	function hasBlacklistedType(node, parent, scope, state) {
	  if (node.type === state.type) {
	    state.has = true;
	    this.skip();
	  }
	}

	/**
	 * [Please add a description.]
	 */

	traverse.hasType = function (tree, scope, type, blacklistTypes) {
	  // the node we're searching in is blacklisted
	  if (_lodashCollectionIncludes2["default"](blacklistTypes, tree.type)) return false;

	  // the type we're looking for is the same as the passed node
	  if (tree.type === type) return true;

	  var state = {
	    has: false,
	    type: type
	  };

	  traverse(tree, {
	    blacklist: blacklistTypes,
	    enter: hasBlacklistedType
	  }, scope, state);

	  return state.has;
	};
	module.exports = exports["default"];
	},{"../messages":60,"../types":193,"./context":160,"./visitors":182,"lodash/collection/includes":341}],163:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.findParent = findParent;
	exports.getFunctionParent = getFunctionParent;
	exports.getStatementParent = getStatementParent;
	exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
	exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
	exports.getAncestry = getAncestry;
	exports.inType = inType;
	exports.inShadow = inShadow;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	var t = _interopRequireWildcard(_types);

	var _index = require("./index");

	/**
	 * Call the provided `callback` with the `NodePath`s of all the parents.
	 * When the `callback` returns a truthy value, we return that node path.
	 */

	var _index2 = _interopRequireDefault(_index);

	function findParent(callback) {
	  var path = this;
	  while (path = path.parentPath) {
	    if (callback(path)) return path;
	  }
	  return null;
	}

	/**
	 * Get the parent function of the current path.
	 */

	function getFunctionParent() {
	  return this.findParent(function (path) {
	    return path.isFunction() || path.isProgram();
	  });
	}

	/**
	 * Walk up the tree until we hit a parent node path in a list.
	 */

	function getStatementParent() {
	  var path = this;
	  do {
	    if (Array.isArray(path.container)) {
	      return path;
	    }
	  } while (path = path.parentPath);
	}

	/**
	 * Get the deepest common ancestor and then from it, get the earliest relationship path
	 * to that ancestor.
	 *
	 * Earliest is defined as being "before" all the other nodes in terms of list container
	 * position and visiting key.
	 */

	function getEarliestCommonAncestorFrom(paths) {
	  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
	    var earliest;
	    var keys = t.VISITOR_KEYS[deepest.type];

	    var _arr = ancestries;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var ancestry = _arr[_i];
	      var path = ancestry[i + 1];

	      // first path
	      if (!earliest) {
	        earliest = path;
	        continue;
	      }

	      // handle containers
	      if (path.listKey && earliest.listKey === path.listKey) {
	        // we're in the same container so check if we're earlier
	        if (path.key < earliest.key) {
	          earliest = path;
	          continue;
	        }
	      }

	      // handle keys
	      var earliestKeyIndex = keys.indexOf(earliest.parentKey);
	      var currentKeyIndex = keys.indexOf(path.parentKey);
	      if (earliestKeyIndex > currentKeyIndex) {
	        // key appears before so it's earlier
	        earliest = path;
	      }
	    }

	    return earliest;
	  });
	}

	/**
	 * Get the earliest path in the tree where the provided `paths` intersect.
	 *
	 * TODO: Possible optimisation target.
	 */

	function getDeepestCommonAncestorFrom(paths, filter) {
	  // istanbul ignore next

	  var _this = this;

	  if (!paths.length) {
	    return this;
	  }

	  if (paths.length === 1) {
	    return paths[0];
	  }

	  // minimum depth of the tree so we know the highest node
	  var minDepth = Infinity;

	  // last common ancestor
	  var lastCommonIndex, lastCommon;

	  // get the ancestors of the path, breaking when the parent exceeds ourselves
	  var ancestries = paths.map(function (path) {
	    var ancestry = [];

	    do {
	      ancestry.unshift(path);
	    } while ((path = path.parentPath) && path !== _this);

	    // save min depth to avoid going too far in
	    if (ancestry.length < minDepth) {
	      minDepth = ancestry.length;
	    }

	    return ancestry;
	  });

	  // get the first ancestry so we have a seed to assess all other ancestries with
	  var first = ancestries[0];

	  // check ancestor equality
	  depthLoop: for (var i = 0; i < minDepth; i++) {
	    var shouldMatch = first[i];

	    var _arr2 = ancestries;

	    // next iteration may break so store these so they can be returned
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var ancestry = _arr2[_i2];
	      if (ancestry[i] !== shouldMatch) {
	        // we've hit a snag
	        break depthLoop;
	      }
	    }lastCommonIndex = i;
	    lastCommon = shouldMatch;
	  }

	  if (lastCommon) {
	    if (filter) {
	      return filter(lastCommon, lastCommonIndex, ancestries);
	    } else {
	      return lastCommon;
	    }
	  } else {
	    throw new Error("Couldn't find intersection");
	  }
	}

	/**
	 * Build an array of node paths containing the entire ancestry of the current node path.
	 *
	 * NOTE: The current node path is included in this.
	 */

	function getAncestry() {
	  var path = this;
	  var paths = [];
	  do {
	    paths.push(path);
	  } while (path = path.parentPath);
	  return paths;
	}

	/**
	 * [Please add a description.]
	 */

	function inType() {
	  var path = this;
	  while (path) {
	    var _arr3 = arguments;

	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var type = _arr3[_i3];
	      if (path.node.type === type) return true;
	    }
	    path = path.parentPath;
	  }

	  return false;
	}

	/**
	 * Check if we're inside a shadowed function.
	 */

	function inShadow() {
	  var path = this;
	  while (path) {
	    if (path.isFunction()) {
	      if (path.node.shadow || path.isArrowFunctionExpression()) {
	        return path;
	      } else {
	        return null;
	      }
	    }
	    path = path.parentPath;
	  }
	  return null;
	}
	},{"../../types":193,"./index":169}],164:[function(require,module,exports){
	/**
	 * Share comments amongst siblings.
	 */

	"use strict";

	exports.__esModule = true;
	exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
	exports.addComment = addComment;
	exports.addComments = addComments;

	function shareCommentsWithSiblings() {
	  var node = this.node;
	  if (!node) return;

	  var trailing = node.trailingComments;
	  var leading = node.leadingComments;
	  if (!trailing && !leading) return;

	  var prev = this.getSibling(this.key - 1);
	  var next = this.getSibling(this.key + 1);

	  if (!prev.node) prev = next;
	  if (!next.node) next = prev;

	  prev.addComments("trailing", leading);
	  next.addComments("leading", trailing);
	}

	/**
	 * [Please add a description.]
	 */

	function addComment(type, content, line) {
	  this.addComments(type, [{
	    type: line ? "CommentLine" : "CommentBlock",
	    value: content
	  }]);
	}

	/**
	 * Give node `comments` of the specified `type`.
	 */

	function addComments(type, comments) {
	  if (!comments) return;

	  var node = this.node;
	  if (!node) return;

	  var key = type + "Comments";

	  if (node[key]) {
	    node[key] = node[key].concat(comments);
	  } else {
	    node[key] = comments;
	  }
	}
	},{}],165:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.call = call;
	exports.isBlacklisted = isBlacklisted;
	exports.visit = visit;
	exports.skip = skip;
	exports.skipKey = skipKey;
	exports.stop = stop;
	exports.setScope = setScope;
	exports.setContext = setContext;
	exports.resync = resync;
	exports._resyncParent = _resyncParent;
	exports._resyncKey = _resyncKey;
	exports._resyncList = _resyncList;
	exports._resyncRemoved = _resyncRemoved;
	exports.shiftContext = shiftContext;
	exports.unshiftContext = unshiftContext;
	exports.setup = setup;
	exports.setKey = setKey;
	exports.queueNode = queueNode;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("../index");

	/**
	 * [Please add a description.]
	 */

	var _index2 = _interopRequireDefault(_index);

	function call(key) {
	  var node = this.node;
	  if (!node) return;

	  var opts = this.opts;

	  var _arr = [opts[key], opts[node.type] && opts[node.type][key]];
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var fns = _arr[_i];
	    if (!fns) continue;

	    var _arr2 = fns;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var fn = _arr2[_i2];
	      if (!fn) continue;

	      var _node = this.node;
	      if (!_node) return;

	      var previousType = this.type;

	      // call the function with the params (node, parent, scope, state)
	      var replacement = fn.call(this, _node, this.parent, this.scope, this.state);

	      if (replacement) {
	        this.replaceWith(replacement, true);
	      }

	      if (this.shouldStop || this.shouldSkip || this.removed) return;

	      if (previousType !== this.type) {
	        this.queueNode(this);
	        return;
	      }
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function isBlacklisted() {
	  var blacklist = this.opts.blacklist;
	  return blacklist && blacklist.indexOf(this.node.type) > -1;
	}

	/**
	 * [Please add a description.]
	 */

	function visit() {
	  if (this.isBlacklisted()) return false;
	  if (this.opts.shouldSkip && this.opts.shouldSkip(this)) return false;

	  this.call("enter");

	  if (this.shouldSkip) {
	    return this.shouldStop;
	  }

	  var node = this.node;
	  var opts = this.opts;

	  if (node) {
	    if (Array.isArray(node)) {
	      // traverse over these replacement nodes we purposely don't call exitNode
	      // as the original node has been destroyed
	      for (var i = 0; i < node.length; i++) {
	        _index2["default"].node(node[i], opts, this.scope, this.state, this, this.skipKeys);
	      }
	    } else {
	      _index2["default"].node(node, opts, this.scope, this.state, this, this.skipKeys);
	      this.call("exit");
	    }
	  }

	  return this.shouldStop;
	}

	/**
	 * [Please add a description.]
	 */

	function skip() {
	  this.shouldSkip = true;
	}

	/**
	 * [Please add a description.]
	 */

	function skipKey(key) {
	  this.skipKeys[key] = true;
	}

	/**
	 * [Please add a description.]
	 */

	function stop() {
	  this.shouldStop = true;
	  this.shouldSkip = true;
	}

	/**
	 * [Please add a description.]
	 */

	function setScope() {
	  if (this.opts && this.opts.noScope) return;

	  var target = this.context || this.parentPath;
	  this.scope = this.getScope(target && target.scope);
	  if (this.scope) this.scope.init();
	}

	/**
	 * [Please add a description.]
	 */

	function setContext(context) {
	  this.shouldSkip = false;
	  this.shouldStop = false;
	  this.removed = false;
	  this.skipKeys = {};

	  if (context) {
	    this.context = context;
	    this.state = context.state;
	    this.opts = context.opts;
	  }

	  this.setScope();

	  return this;
	}

	/**
	 * Here we resync the node paths `key` and `container`. If they've changed according
	 * to what we have stored internally then we attempt to resync by crawling and looking
	 * for the new values.
	 */

	function resync() {
	  if (this.removed) return;

	  this._resyncParent();
	  this._resyncList();
	  this._resyncKey();
	  //this._resyncRemoved();
	}

	/**
	 * [Please add a description.]
	 */

	function _resyncParent() {
	  if (this.parentPath) {
	    this.parent = this.parentPath.node;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _resyncKey() {
	  if (!this.container) return;

	  if (this.node === this.container[this.key]) return;

	  // grrr, path key is out of sync. this is likely due to a modification to the AST
	  // not done through our path APIs

	  if (Array.isArray(this.container)) {
	    for (var i = 0; i < this.container.length; i++) {
	      if (this.container[i] === this.node) {
	        return this.setKey(i);
	      }
	    }
	  } else {
	    for (var key in this.container) {
	      if (this.container[key] === this.node) {
	        return this.setKey(key);
	      }
	    }
	  }

	  this.key = null;
	}

	/**
	 * [Please add a description.]
	 */

	function _resyncList() {
	  var listKey = this.listKey;
	  var parentPath = this.parentPath;
	  if (!listKey || !parentPath) return;

	  var newContainer = parentPath.node[listKey];
	  if (this.container === newContainer) return;

	  // container is out of sync. this is likely the result of it being reassigned

	  if (newContainer) {
	    this.container = newContainer;
	  } else {
	    this.container = null;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _resyncRemoved() {
	  if (this.key == null || !this.container || this.container[this.key] !== this.node) {
	    this._markRemoved();
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function shiftContext() {
	  this.contexts.shift();
	  this.setContext(this.contexts[0]);
	}

	/**
	 * [Please add a description.]
	 */

	function unshiftContext(context) {
	  this.contexts.unshift(context);
	  this.setContext(context);
	}

	/**
	 * [Please add a description.]
	 */

	function setup(parentPath, container, listKey, key) {
	  this.inList = !!listKey;
	  this.listKey = listKey;
	  this.parentKey = listKey || key;
	  this.container = container;

	  this.parentPath = parentPath || this.parentPath;
	  this.setKey(key);
	}

	/**
	 * [Please add a description.]
	 */

	function setKey(key) {
	  this.key = key;
	  this.node = this.container[this.key];
	  this.type = this.node && this.node.type;
	}

	/**
	 * [Please add a description.]
	 */

	function queueNode(path) {
	  var _arr3 = this.contexts;

	  for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	    var context = _arr3[_i3];
	    if (context.queue) {
	      context.queue.push(path);
	    }
	  }
	}
	},{"../index":162}],166:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.ensureBlock = ensureBlock;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function toComputedKey() {
	  var node = this.node;

	  var key;
	  if (this.isMemberExpression()) {
	    key = node.property;
	  } else if (this.isProperty()) {
	    key = node.key;
	  } else {
	    throw new ReferenceError("todo");
	  }

	  if (!node.computed) {
	    if (t.isIdentifier(key)) key = t.literal(key.name);
	  }

	  return key;
	}

	/**
	 * [Please add a description.]
	 */

	function ensureBlock() {
	  return t.ensureBlock(this.node);
	}
	},{"../../types":193}],167:[function(require,module,exports){
	(function (global){
	/* eslint eqeqeq: 0 */

	"use strict";

	exports.__esModule = true;
	exports.evaluateTruthy = evaluateTruthy;
	exports.evaluate = evaluate;
	var VALID_CALLEES = ["String", "Number", "Math"];

	/**
	 * Walk the input `node` and statically evaluate if it's truthy.
	 *
	 * Returning `true` when we're sure that the expression will evaluate to a
	 * truthy value, `false` if we're sure that it will evaluate to a falsy
	 * value and `undefined` if we aren't sure. Because of this please do not
	 * rely on coercion when using this method and check with === if it's false.
	 *
	 * For example do:
	 *
	 *   if (t.evaluateTruthy(node) === false) falsyLogic();
	 *
	 * **AND NOT**
	 *
	 *   if (!t.evaluateTruthy(node)) falsyLogic();
	 *
	 */

	function evaluateTruthy() {
	  var res = this.evaluate();
	  if (res.confident) return !!res.value;
	}

	/**
	 * Walk the input `node` and statically evaluate it.
	 *
	 * Returns an object in the form `{ confident, value }`. `confident` indicates
	 * whether or not we had to drop out of evaluating the expression because of
	 * hitting an unknown node that we couldn't confidently find the value of.
	 *
	 * Example:
	 *
	 *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
	 *   t.evaluate(parse("!true")) // { confident: true, value: false }
	 *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined }
	 *
	 */

	function evaluate() {
	  var confident = true;

	  var value = evaluate(this);
	  if (!confident) value = undefined;
	  return {
	    confident: confident,
	    value: value
	  };

	  function evaluate(path) {
	    if (!confident) return;

	    var node = path.node;

	    if (path.isSequenceExpression()) {
	      var exprs = path.get("expressions");
	      return evaluate(exprs[exprs.length - 1]);
	    }

	    if (path.isLiteral()) {
	      if (node.regex) {
	        // we have a regex and we can't represent it natively
	      } else {
	          return node.value;
	        }
	    }

	    if (path.isConditionalExpression()) {
	      if (evaluate(path.get("test"))) {
	        return evaluate(path.get("consequent"));
	      } else {
	        return evaluate(path.get("alternate"));
	      }
	    }

	    if (path.isTypeCastExpression()) {
	      return evaluate(path.get("expression"));
	    }

	    if (path.isIdentifier() && !path.scope.hasBinding(node.name, true)) {
	      if (node.name === "undefined") {
	        return undefined;
	      } else if (node.name === "Infinity") {
	        return Infinity;
	      } else if (node.name === "NaN") {
	        return NaN;
	      }
	    }

	    // "foo".length
	    if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {
	      var _property = path.get("property");
	      var object = path.get("object");

	      if (object.isLiteral() && _property.isIdentifier()) {
	        var _value = object.node.value;
	        var type = typeof _value;
	        if (type === "number" || type === "string") {
	          return _value[_property.node.name];
	        }
	      }
	    }

	    if (path.isReferencedIdentifier()) {
	      var binding = path.scope.getBinding(node.name);
	      if (binding && binding.hasValue) {
	        return binding.value;
	      } else {
	        var resolved = path.resolve();
	        if (resolved === path) {
	          return confident = false;
	        } else {
	          return evaluate(resolved);
	        }
	      }
	    }

	    if (path.isUnaryExpression({ prefix: true })) {
	      var arg = evaluate(path.get("argument"));
	      switch (node.operator) {
	        case "void":
	          return undefined;
	        case "!":
	          return !arg;
	        case "+":
	          return +arg;
	        case "-":
	          return -arg;
	        case "~":
	          return ~arg;
	      }
	    }

	    if (path.isArrayExpression() || path.isObjectExpression()) {
	      // we could evaluate these but it's probably impractical and not very useful
	    }

	    if (path.isLogicalExpression()) {
	      var left = evaluate(path.get("left"));
	      var right = evaluate(path.get("right"));

	      switch (node.operator) {
	        case "||":
	          return left || right;
	        case "&&":
	          return left && right;
	      }
	    }

	    if (path.isBinaryExpression()) {
	      var left = evaluate(path.get("left"));
	      var right = evaluate(path.get("right"));

	      switch (node.operator) {
	        case "-":
	          return left - right;
	        case "+":
	          return left + right;
	        case "/":
	          return left / right;
	        case "*":
	          return left * right;
	        case "%":
	          return left % right;
	        case "**":
	          return Math.pow(left, right);
	        case "<":
	          return left < right;
	        case ">":
	          return left > right;
	        case "<=":
	          return left <= right;
	        case ">=":
	          return left >= right;
	        case "==":
	          return left == right;
	        case "!=":
	          return left != right;
	        case "===":
	          return left === right;
	        case "!==":
	          return left !== right;
	      }
	    }

	    if (path.isCallExpression()) {
	      var callee = path.get("callee");
	      var context;
	      var func;

	      // Number(1);
	      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
	        func = global[node.callee.name];
	      }

	      if (callee.isMemberExpression()) {
	        var object = callee.get("object");
	        var property = callee.get("property");

	        // Math.min(1, 2)
	        if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0) {
	          context = global[object.node.name];
	          func = context[property.node.name];
	        }

	        // "abc".charCodeAt(4)
	        if (object.isLiteral() && property.isIdentifier()) {
	          var type = typeof object.node.value;
	          if (type === "string" || type === "number") {
	            context = object.node.value;
	            func = context[property.node.name];
	          }
	        }
	      }

	      if (func) {
	        var args = path.get("arguments").map(evaluate);
	        if (!confident) return;

	        return func.apply(context, args);
	      }
	    }

	    confident = false;
	  }
	}
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],168:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.getStatementParent = getStatementParent;
	exports.getOpposite = getOpposite;
	exports.getCompletionRecords = getCompletionRecords;
	exports.getSibling = getSibling;
	exports.get = get;
	exports._getKey = _getKey;
	exports._getPattern = _getPattern;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	function getStatementParent() {
	  var path = this;

	  do {
	    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
	      break;
	    } else {
	      path = path.parentPath;
	    }
	  } while (path);

	  if (path && (path.isProgram() || path.isFile())) {
	    throw new Error("File/Program node, we can't possibly find a statement parent to this");
	  }

	  return path;
	}

	/**
	 * [Please add a description.]
	 */

	function getOpposite() {
	  if (this.key === "left") {
	    return this.getSibling("right");
	  } else if (this.key === "right") {
	    return this.getSibling("left");
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function getCompletionRecords() {
	  var paths = [];

	  var add = function add(path) {
	    if (path) paths = paths.concat(path.getCompletionRecords());
	  };

	  if (this.isIfStatement()) {
	    add(this.get("consequent"));
	    add(this.get("alternate"));
	  } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
	    add(this.get("body"));
	  } else if (this.isProgram() || this.isBlockStatement()) {
	    add(this.get("body").pop());
	  } else if (this.isFunction()) {
	    return this.get("body").getCompletionRecords();
	  } else if (this.isTryStatement()) {
	    add(this.get("block"));
	    add(this.get("handler"));
	    add(this.get("finalizer"));
	  } else {
	    paths.push(this);
	  }

	  return paths;
	}

	/**
	 * [Please add a description.]
	 */

	function getSibling(key) {
	  return _index2["default"].get({
	    parentPath: this.parentPath,
	    parent: this.parent,
	    container: this.container,
	    listKey: this.listKey,
	    key: key
	  });
	}

	/**
	 * [Please add a description.]
	 */

	function get(key, context) {
	  if (context === true) context = this.context;
	  var parts = key.split(".");
	  if (parts.length === 1) {
	    // "foo"
	    return this._getKey(key, context);
	  } else {
	    // "foo.bar"
	    return this._getPattern(parts, context);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _getKey(key, context) {
	  // istanbul ignore next

	  var _this = this;

	  var node = this.node;
	  var container = node[key];

	  if (Array.isArray(container)) {
	    // requested a container so give them all the paths
	    return container.map(function (_, i) {
	      return _index2["default"].get({
	        listKey: key,
	        parentPath: _this,
	        parent: node,
	        container: container,
	        key: i
	      }).setContext(context);
	    });
	  } else {
	    return _index2["default"].get({
	      parentPath: this,
	      parent: node,
	      container: node,
	      key: key
	    }).setContext(context);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _getPattern(parts, context) {
	  var path = this;
	  var _arr = parts;
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var part = _arr[_i];
	    if (part === ".") {
	      path = path.parentPath;
	    } else {
	      if (Array.isArray(path)) {
	        path = path[part];
	      } else {
	        path = path.get(part, context);
	      }
	    }
	  }
	  return path;
	}

	/**
	 * [Please add a description.]
	 */

	function getBindingIdentifiers(duplicates) {
	  return t.getBindingIdentifiers(this.node, duplicates);
	}
	},{"../../types":193,"./index":169}],169:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _libVirtualTypes = require("./lib/virtual-types");

	var virtualTypes = _interopRequireWildcard(_libVirtualTypes);

	var _index = require("../index");

	var _index2 = _interopRequireDefault(_index);

	var _lodashObjectAssign = require("lodash/object/assign");

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _scope = require("../scope");

	var _scope2 = _interopRequireDefault(_scope);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var NodePath = (function () {

	  /**
	   * [Please add a description.]
	   */

	  function NodePath(hub, parent) {
	    _classCallCheck(this, NodePath);

	    this.contexts = [];
	    this.parent = parent;
	    this.data = {};
	    this.hub = hub;

	    this.shouldSkip = false;
	    this.shouldStop = false;
	    this.removed = false;
	    this.state = null;
	    this.opts = null;
	    this.skipKeys = null;
	    this.parentPath = null;
	    this.context = null;
	    this.container = null;
	    this.listKey = null;
	    this.inList = false;
	    this.parentKey = null;
	    this.key = null;
	    this.node = null;
	    this.scope = null;
	    this.type = null;
	    this.typeAnnotation = null;
	  }

	  /**
	   * [Please add a description.]
	   */

	  /**
	   * [Please add a description.]
	   */

	  NodePath.get = function get(_ref) {
	    var hub = _ref.hub;
	    var parentPath = _ref.parentPath;
	    var parent = _ref.parent;
	    var container = _ref.container;
	    var listKey = _ref.listKey;
	    var key = _ref.key;

	    if (!hub && parentPath) {
	      hub = parentPath.hub;
	    }

	    var targetNode = container[key];
	    var paths = parent._paths = parent._paths || [];
	    var path;

	    for (var i = 0; i < paths.length; i++) {
	      var pathCheck = paths[i];
	      if (pathCheck.node === targetNode) {
	        path = pathCheck;
	        break;
	      }
	    }

	    if (!path) {
	      path = new NodePath(hub, parent);
	      paths.push(path);
	    }

	    path.setup(parentPath, container, listKey, key);

	    return path;
	  };

	  /**
	   * [Please add a description.]
	   */

	  NodePath.prototype.getScope = function getScope(scope) {
	    var ourScope = scope;

	    // we're entering a new scope so let's construct it!
	    if (this.isScope()) {
	      ourScope = new _scope2["default"](this, scope);
	    }

	    return ourScope;
	  };

	  /**
	   * [Please add a description.]
	   */

	  NodePath.prototype.setData = function setData(key, val) {
	    return this.data[key] = val;
	  };

	  /**
	   * [Please add a description.]
	   */

	  NodePath.prototype.getData = function getData(key, def) {
	    var val = this.data[key];
	    if (!val && def) val = this.data[key] = def;
	    return val;
	  };

	  /**
	   * [Please add a description.]
	   */

	  NodePath.prototype.errorWithNode = function errorWithNode(msg) {
	    var Error = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];

	    return this.hub.file.errorWithNode(this.node, msg, Error);
	  };

	  /**
	   * [Please add a description.]
	   */

	  NodePath.prototype.traverse = function traverse(visitor, state) {
	    _index2["default"](this.node, visitor, this.scope, state, this);
	  };

	  return NodePath;
	})();

	exports["default"] = NodePath;
	_lodashObjectAssign2["default"](NodePath.prototype, require("./ancestry"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./inference"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./replacement"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./evaluation"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./conversion"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./introspection"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./context"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./removal"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./modification"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./family"));
	_lodashObjectAssign2["default"](NodePath.prototype, require("./comments"));

	var _arr = t.TYPES;

	var _loop = function () {
	  var type = _arr[_i];
	  var typeKey = "is" + type;
	  NodePath.prototype[typeKey] = function (opts) {
	    return t[typeKey](this.node, opts);
	  };
	};

	for (var _i = 0; _i < _arr.length; _i++) {
	  _loop();
	}

	var _loop2 = function (type) {
	  if (type[0] === "_") return "continue";
	  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);

	  NodePath.prototype["is" + type] = function (opts) {
	    return virtualTypes[type].checkPath(this, opts);
	  };
	};

	for (var type in virtualTypes) {
	  var _ret2 = _loop2(type);

	  // istanbul ignore next
	  if (_ret2 === "continue") continue;
	}
	module.exports = exports["default"];
	},{"../../types":193,"../index":162,"../scope":181,"./ancestry":163,"./comments":164,"./context":165,"./conversion":166,"./evaluation":167,"./family":168,"./inference":170,"./introspection":173,"./lib/virtual-types":176,"./modification":177,"./removal":178,"./replacement":179,"lodash/object/assign":437}],170:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.getTypeAnnotation = getTypeAnnotation;
	exports._getTypeAnnotation = _getTypeAnnotation;
	exports.isBaseType = isBaseType;
	exports.couldBeBaseType = couldBeBaseType;
	exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
	exports.isGenericType = isGenericType;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _inferers = require("./inferers");

	var inferers = _interopRequireWildcard(_inferers);

	var _types = require("../../../types");

	/**
	 * Infer the type of the current `NodePath`.
	 */

	var t = _interopRequireWildcard(_types);

	function getTypeAnnotation() {
	  if (this.typeAnnotation) return this.typeAnnotation;

	  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
	  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
	  return this.typeAnnotation = type;
	}

	/**
	 * todo: split up this method
	 */

	function _getTypeAnnotation() {
	  var node = this.node;

	  if (!node) {
	    // handle initializerless variables, add in checks for loop initializers too
	    if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
	      var declar = this.parentPath.parentPath;
	      var declarParent = declar.parentPath;

	      // for (var NODE in bar) {}
	      if (declar.key === "left" && declarParent.isForInStatement()) {
	        return t.stringTypeAnnotation();
	      }

	      // for (var NODE of bar) {}
	      if (declar.key === "left" && declarParent.isForOfStatement()) {
	        return t.anyTypeAnnotation();
	      }

	      return t.voidTypeAnnotation();
	    } else {
	      return;
	    }
	  }

	  if (node.typeAnnotation) {
	    return node.typeAnnotation;
	  }

	  var inferer = inferers[node.type];
	  if (inferer) {
	    return inferer.call(this, node);
	  }

	  inferer = inferers[this.parentPath.type];
	  if (inferer && inferer.validParent) {
	    return this.parentPath.getTypeAnnotation();
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function isBaseType(baseName, soft) {
	  return _isBaseType(baseName, this.getTypeAnnotation(), soft);
	}

	/**
	 * [Please add a description.]
	 */

	function _isBaseType(baseName, type, soft) {
	  if (baseName === "string") {
	    return t.isStringTypeAnnotation(type);
	  } else if (baseName === "number") {
	    return t.isNumberTypeAnnotation(type);
	  } else if (baseName === "boolean") {
	    return t.isBooleanTypeAnnotation(type);
	  } else if (baseName === "any") {
	    return t.isAnyTypeAnnotation(type);
	  } else if (baseName === "mixed") {
	    return t.isMixedTypeAnnotation(type);
	  } else if (baseName === "void") {
	    return t.isVoidTypeAnnotation(type);
	  } else {
	    if (soft) {
	      return false;
	    } else {
	      throw new Error("Unknown base type " + baseName);
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function couldBeBaseType(name) {
	  var type = this.getTypeAnnotation();
	  if (t.isAnyTypeAnnotation(type)) return true;

	  if (t.isUnionTypeAnnotation(type)) {
	    var _arr = type.types;

	    for (var _i = 0; _i < _arr.length; _i++) {
	      var type2 = _arr[_i];
	      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
	        return true;
	      }
	    }
	    return false;
	  } else {
	    return _isBaseType(name, type, true);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function baseTypeStrictlyMatches(right) {
	  var left = this.getTypeAnnotation();
	  right = right.getTypeAnnotation();

	  if (!t.isAnyTypeAnnotation() && t.isFlowBaseAnnotation(left)) {
	    return right.type === left.type;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function isGenericType(genericName) {
	  var type = this.getTypeAnnotation();
	  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });
	}
	},{"../../../types":193,"./inferers":172}],171:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	exports["default"] = function (node) {
	  if (!this.isReferenced()) return;

	  // check if a binding exists of this value and if so then return a union type of all
	  // possible types that the binding could be
	  var binding = this.scope.getBinding(node.name);
	  if (binding) {
	    if (binding.identifier.typeAnnotation) {
	      return binding.identifier.typeAnnotation;
	    } else {
	      return getTypeAnnotationBindingConstantViolations(this, node.name);
	    }
	  }

	  // built-in values
	  if (node.name === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (node.name === "NaN" || node.name === "Infinity") {
	    return t.numberTypeAnnotation();
	  } else if (node.name === "arguments") {
	    // todo
	  }
	};

	/**
	 * [Please add a description.]
	 */

	function getTypeAnnotationBindingConstantViolations(path, name) {
	  var binding = path.scope.getBinding(name);

	  var types = [];
	  path.typeAnnotation = t.unionTypeAnnotation(types);

	  var functionConstantViolations = [];
	  var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);

	  var testType = getConditionalAnnotation(path, name);
	  if (testType) {
	    var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);

	    // remove constant violations observed before the IfStatement
	    constantViolations = constantViolations.filter(function (path) {
	      return testConstantViolations.indexOf(path) < 0;
	    });

	    // clear current types and add in observed test type
	    types.push(testType.typeAnnotation);
	  }

	  if (constantViolations.length) {
	    // pick one constant from each scope which will represent the last possible
	    // control flow path that it could've taken/been
	    var rawConstantViolations = constantViolations.reverse();
	    var visitedScopes = [];
	    constantViolations = [];
	    var _arr = rawConstantViolations;

	    // add back on function constant violations since we can't track calls
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var violation = _arr[_i];
	      var violationScope = violation.scope;
	      if (visitedScopes.indexOf(violationScope) >= 0) continue;

	      visitedScopes.push(violationScope);
	      constantViolations.push(violation);

	      if (violationScope === path.scope) {
	        constantViolations = [violation];
	        break;
	      }
	    }constantViolations = constantViolations.concat(functionConstantViolations);

	    // push on inferred types of violated paths
	    var _arr2 = constantViolations;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var violation = _arr2[_i2];
	      types.push(violation.getTypeAnnotation());
	    }
	  }

	  if (types.length) {
	    return t.createUnionTypeAnnotation(types);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function getConstantViolationsBefore(binding, path, functions) {
	  var violations = binding.constantViolations.slice();
	  violations.unshift(binding.path);
	  return violations.filter(function (violation) {
	    violation = violation.resolve();
	    var status = violation._guessExecutionStatusRelativeTo(path);
	    if (functions && status === "function") functions.push(violation);
	    return status === "before";
	  });
	}

	/**
	 * [Please add a description.]
	 */

	function inferAnnotationFromBinaryExpression(name, path) {
	  var operator = path.node.operator;

	  var right = path.get("right").resolve();
	  var left = path.get("left").resolve();

	  var target;
	  if (left.isIdentifier({ name: name })) {
	    target = right;
	  } else if (right.isIdentifier({ name: name })) {
	    target = left;
	  }
	  if (target) {
	    if (operator === "===") {
	      return target.getTypeAnnotation();
	    } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	      return t.numberTypeAnnotation();
	    } else {
	      return;
	    }
	  } else {
	    if (operator !== "===") return;
	  }

	  //
	  var typeofPath;
	  var typePath;
	  if (left.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = left;
	    typePath = right;
	  } else if (right.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = right;
	    typePath = left;
	  }
	  if (!typePath && !typeofPath) return;

	  // ensure that the type path is a Literal
	  typePath = typePath.resolve();
	  if (!typePath.isLiteral()) return;

	  // and that it's a string so we can infer it
	  var typeValue = typePath.node.value;
	  if (typeof typeValue !== "string") return;

	  // and that the argument of the typeof path references us!
	  if (!typeofPath.get("argument").isIdentifier({ name: name })) return;

	  // turn type value into a type annotation
	  return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
	}

	/**
	 * [Please add a description.]
	 */

	function getParentConditionalPath(path) {
	  var parentPath;
	  while (parentPath = path.parentPath) {
	    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
	      if (path.key === "test") {
	        return;
	      } else {
	        return parentPath;
	      }
	    } else {
	      path = parentPath;
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function getConditionalAnnotation(path, name) {
	  var ifStatement = getParentConditionalPath(path);
	  if (!ifStatement) return;

	  var test = ifStatement.get("test");
	  var paths = [test];
	  var types = [];

	  do {
	    var _path = paths.shift().resolve();

	    if (_path.isLogicalExpression()) {
	      paths.push(_path.get("left"));
	      paths.push(_path.get("right"));
	    }

	    if (_path.isBinaryExpression()) {
	      var type = inferAnnotationFromBinaryExpression(name, _path);
	      if (type) types.push(type);
	    }
	  } while (paths.length);

	  if (types.length) {
	    return {
	      typeAnnotation: t.createUnionTypeAnnotation(types),
	      ifStatement: ifStatement
	    };
	  } else {
	    return getConditionalAnnotation(ifStatement, name);
	  }
	}
	module.exports = exports["default"];
	},{"../../../types":193}],172:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.VariableDeclarator = VariableDeclarator;
	exports.TypeCastExpression = TypeCastExpression;
	exports.NewExpression = NewExpression;
	exports.TemplateLiteral = TemplateLiteral;
	exports.UnaryExpression = UnaryExpression;
	exports.BinaryExpression = BinaryExpression;
	exports.LogicalExpression = LogicalExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.AssignmentExpression = AssignmentExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.Literal = Literal;
	exports.ObjectExpression = ObjectExpression;
	exports.ArrayExpression = ArrayExpression;
	exports.RestElement = RestElement;
	exports.CallExpression = CallExpression;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	// istanbul ignore next

	function _interopRequire(obj) { return obj && obj.__esModule ? obj["default"] : obj; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	var t = _interopRequireWildcard(_types);

	var _infererReference = require("./inferer-reference");

	/**
	 * [Please add a description.]
	 */

	exports.Identifier = _interopRequire(_infererReference);

	function VariableDeclarator() {
	  var id = this.get("id");

	  if (id.isIdentifier()) {
	    return this.get("init").getTypeAnnotation();
	  } else {
	    return;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function TypeCastExpression(node) {
	  return node.typeAnnotation;
	}

	TypeCastExpression.validParent = true;

	/**
	 * [Please add a description.]
	 */

	function NewExpression(node) {
	  if (this.get("callee").isIdentifier()) {
	    // only resolve identifier callee
	    return t.genericTypeAnnotation(node.callee);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function TemplateLiteral() {
	  return t.stringTypeAnnotation();
	}

	/**
	 * [Please add a description.]
	 */

	function UnaryExpression(node) {
	  var operator = node.operator;

	  if (operator === "void") {
	    return t.voidTypeAnnotation();
	  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.stringTypeAnnotation();
	  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function BinaryExpression(node) {
	  var operator = node.operator;

	  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  } else if (operator === "+") {
	    var right = this.get("right");
	    var left = this.get("left");

	    if (left.isBaseType("number") && right.isBaseType("number")) {
	      // both numbers so this will be a number
	      return t.numberTypeAnnotation();
	    } else if (left.isBaseType("string") || right.isBaseType("string")) {
	      // one is a string so the result will be a string
	      return t.stringTypeAnnotation();
	    }

	    // unsure if left and right are strings or numbers so stay on the safe side
	    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function LogicalExpression() {
	  return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
	}

	/**
	 * [Please add a description.]
	 */

	function ConditionalExpression() {
	  return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
	}

	/**
	 * [Please add a description.]
	 */

	function SequenceExpression(node) {
	  return this.get("expressions").pop().getTypeAnnotation();
	}

	/**
	 * [Please add a description.]
	 */

	function AssignmentExpression(node) {
	  return this.get("right").getTypeAnnotation();
	}

	/**
	 * [Please add a description.]
	 */

	function UpdateExpression(node) {
	  var operator = node.operator;
	  if (operator === "++" || operator === "--") {
	    return t.numberTypeAnnotation();
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function Literal(node) {
	  var value = node.value;
	  if (typeof value === "string") return t.stringTypeAnnotation();
	  if (typeof value === "number") return t.numberTypeAnnotation();
	  if (typeof value === "boolean") return t.booleanTypeAnnotation();
	  if (value === null) return t.voidTypeAnnotation();
	  if (node.regex) return t.genericTypeAnnotation(t.identifier("RegExp"));
	}

	/**
	 * [Please add a description.]
	 */

	function ObjectExpression() {
	  return t.genericTypeAnnotation(t.identifier("Object"));
	}

	/**
	 * [Please add a description.]
	 */

	function ArrayExpression() {
	  return t.genericTypeAnnotation(t.identifier("Array"));
	}

	/**
	 * [Please add a description.]
	 */

	function RestElement() {
	  return ArrayExpression();
	}

	RestElement.validParent = true;

	/**
	 * [Please add a description.]
	 */

	function Func() {
	  return t.genericTypeAnnotation(t.identifier("Function"));
	}

	exports.Function = Func;

	/**
	 * [Please add a description.]
	 */

	exports.Class = Func;

	function CallExpression() {
	  return resolveCall(this.get("callee"));
	}

	/**
	 * [Please add a description.]
	 */

	function TaggedTemplateExpression() {
	  return resolveCall(this.get("tag"));
	}

	/**
	 * [Please add a description.]
	 */

	function resolveCall(callee) {
	  callee = callee.resolve();

	  if (callee.isFunction()) {
	    if (callee.is("async")) {
	      if (callee.is("generator")) {
	        return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
	      } else {
	        return t.genericTypeAnnotation(t.identifier("Promise"));
	      }
	    } else {
	      if (callee.node.returnType) {
	        return callee.node.returnType;
	      } else {
	        // todo: get union type of all return arguments
	      }
	    }
	  }
	}
	},{"../../../types":193,"./inferer-reference":171}],173:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.matchesPattern = matchesPattern;
	exports.has = has;
	exports.isnt = isnt;
	exports.equals = equals;
	exports.isNodeType = isNodeType;
	exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
	exports.isCompletionRecord = isCompletionRecord;
	exports.isStatementOrBlock = isStatementOrBlock;
	exports.referencesImport = referencesImport;
	exports.getSource = getSource;
	exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
	exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
	exports.resolve = resolve;
	exports._resolve = _resolve;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _types = require("../../types");

	/**
	 * Match the current node if it matches the provided `pattern`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */

	var t = _interopRequireWildcard(_types);

	function matchesPattern(pattern, allowPartial) {
	  // not a member expression
	  if (!this.isMemberExpression()) return false;

	  var parts = pattern.split(".");
	  var search = [this.node];
	  var i = 0;

	  function matches(name) {
	    var part = parts[i];
	    return part === "*" || name === part;
	  }

	  while (search.length) {
	    var node = search.shift();

	    if (allowPartial && i === parts.length) {
	      return true;
	    }

	    if (t.isIdentifier(node)) {
	      // this part doesn't match
	      if (!matches(node.name)) return false;
	    } else if (t.isLiteral(node)) {
	      // this part doesn't match
	      if (!matches(node.value)) return false;
	    } else if (t.isMemberExpression(node)) {
	      if (node.computed && !t.isLiteral(node.property)) {
	        // we can't deal with this
	        return false;
	      } else {
	        search.unshift(node.property);
	        search.unshift(node.object);
	        continue;
	      }
	    } else if (t.isThisExpression(node)) {
	      if (!matches("this")) return false;
	    } else {
	      // we can't deal with this
	      return false;
	    }

	    // too many parts
	    if (++i > parts.length) {
	      return false;
	    }
	  }

	  return i === parts.length;
	}

	/**
	 * Check whether we have the input `key`. If the `key` references an array then we check
	 * if the array has any items, otherwise we just check if it's falsy.
	 */

	function has(key) {
	  var val = this.node[key];
	  if (val && Array.isArray(val)) {
	    return !!val.length;
	  } else {
	    return !!val;
	  }
	}

	/**
	 * Alias of `has`.
	 */

	var is = has;

	/**
	 * Opposite of `has`.
	 */

	exports.is = is;

	function isnt(key) {
	  return !this.has(key);
	}

	/**
	 * Check whether the path node `key` strict equals `value`.
	 */

	function equals(key, value) {
	  return this.node[key] === value;
	}

	/**
	 * Check the type against our stored internal type of the node. This is handy when a node has
	 * been removed yet we still internally know the type and need it to calculate node replacement.
	 */

	function isNodeType(type) {
	  return t.isType(this.type, type);
	}

	/**
	 * This checks whether or now we're in one of the following positions:
	 *
	 *   for (KEY in right);
	 *   for (KEY;;);
	 *
	 * This is because these spots allow VariableDeclarations AND normal expressions so we need
	 * to tell the path replacement that it's ok to replace this with an expression.
	 */

	function canHaveVariableDeclarationOrExpression() {
	  return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
	}

	/**
	 * Check whether the current path references a completion record
	 */

	function isCompletionRecord(allowInsideFunction) {
	  var path = this;
	  var first = true;

	  do {
	    var container = path.container;

	    // we're in a function so can't be a completion record
	    if (path.isFunction() && !first) {
	      return !!allowInsideFunction;
	    }

	    first = false;

	    // check to see if we're the last item in the container and if we are
	    // we're a completion record!
	    if (Array.isArray(container) && path.key !== container.length - 1) {
	      return false;
	    }
	  } while ((path = path.parentPath) && !path.isProgram());

	  return true;
	}

	/**
	 * Check whether or not the current `key` allows either a single statement or block statement
	 * so we can explode it if necessary.
	 */

	function isStatementOrBlock() {
	  if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
	    return false;
	  } else {
	    return _lodashCollectionIncludes2["default"](t.STATEMENT_OR_BLOCK_KEYS, this.key);
	  }
	}

	/**
	 * Check if the currently assigned path references the `importName` of `moduleSource`.
	 */

	function referencesImport(moduleSource, importName) {
	  if (!this.isReferencedIdentifier()) return false;

	  var binding = this.scope.getBinding(this.node.name);
	  if (!binding || binding.kind !== "module") return false;

	  var path = binding.path;
	  if (!path.isImportDeclaration()) return false;

	  // check moduleSource
	  if (path.node.source.value === moduleSource) {
	    if (!importName) return true;
	  } else {
	    return false;
	  }

	  var _arr = path.node.specifiers;
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var specifier = _arr[_i];
	    if (t.isSpecifierDefault(specifier) && importName === "default") {
	      return true;
	    }

	    if (t.isImportNamespaceSpecifier(specifier) && importName === "*") {
	      return true;
	    }

	    if (t.isImportSpecifier(specifier) && specifier.imported.name === importName) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Get the source code associated with this node.
	 */

	function getSource() {
	  var node = this.node;
	  if (node.end) {
	    return this.hub.file.code.slice(node.start, node.end);
	  } else {
	    return "";
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function willIMaybeExecuteBefore(target) {
	  return this._guessExecutionStatusRelativeTo(target) !== "after";
	}

	/**
	 * Given a `target` check the execution status of it relative to the current path.
	 *
	 * "Execution status" simply refers to where or not we **think** this will execuete
	 * before or after the input `target` element.
	 */

	function _guessExecutionStatusRelativeTo(target) {
	  // check if the two paths are in different functions, we can't track execution of these
	  var targetFuncParent = target.scope.getFunctionParent();
	  var selfFuncParent = this.scope.getFunctionParent();
	  if (targetFuncParent !== selfFuncParent) {
	    return "function";
	  }

	  var targetPaths = target.getAncestry();
	  //if (targetPaths.indexOf(this) >= 0) return "after";

	  var selfPaths = this.getAncestry();

	  // get ancestor where the branches intersect
	  var commonPath;
	  var targetIndex;
	  var selfIndex;
	  for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
	    var selfPath = selfPaths[selfIndex];
	    targetIndex = targetPaths.indexOf(selfPath);
	    if (targetIndex >= 0) {
	      commonPath = selfPath;
	      break;
	    }
	  }
	  if (!commonPath) {
	    return "before";
	  }

	  // get the relationship paths that associate these nodes to their common ancestor
	  var targetRelationship = targetPaths[targetIndex - 1];
	  var selfRelationship = selfPaths[selfIndex - 1];
	  if (!targetRelationship || !selfRelationship) {
	    return "before";
	  }

	  // container list so let's see which one is after the other
	  if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
	    return targetRelationship.key > selfRelationship.key ? "before" : "after";
	  }

	  // otherwise we're associated by a parent node, check which key comes before the other
	  var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
	  var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
	  return targetKeyPosition > selfKeyPosition ? "before" : "after";
	}

	/**
	 * Resolve a "pointer" `NodePath` to it's absolute path.
	 */

	function resolve(dangerous, resolved) {
	  return this._resolve(dangerous, resolved) || this;
	}

	/**
	 * [Please add a description.]
	 */

	function _resolve(dangerous, resolved) {
	  // detect infinite recursion
	  // todo: possibly have a max length on this just to be safe
	  if (resolved && resolved.indexOf(this) >= 0) return;

	  // we store all the paths we've "resolved" in this array to prevent infinite recursion
	  resolved = resolved || [];
	  resolved.push(this);

	  if (this.isVariableDeclarator()) {
	    if (this.get("id").isIdentifier()) {
	      return this.get("init").resolve(dangerous, resolved);
	    } else {
	      // otherwise it's a request for a pattern and that's a bit more tricky
	    }
	  } else if (this.isReferencedIdentifier()) {
	      var binding = this.scope.getBinding(this.node.name);
	      if (!binding) return;

	      // reassigned so we can't really resolve it
	      if (!binding.constant) return;

	      // todo - lookup module in dependency graph
	      if (binding.kind === "module") return;

	      if (binding.path !== this) {
	        return binding.path.resolve(dangerous, resolved);
	      }
	    } else if (this.isTypeCastExpression()) {
	      return this.get("expression").resolve(dangerous, resolved);
	    } else if (dangerous && this.isMemberExpression()) {
	      // this is dangerous, as non-direct target assignments will mutate it's state
	      // making this resolution inaccurate

	      var targetKey = this.toComputedKey();
	      if (!t.isLiteral(targetKey)) return;

	      var targetName = targetKey.value;

	      var target = this.get("object").resolve(dangerous, resolved);

	      if (target.isObjectExpression()) {
	        var props = target.get("properties");
	        var _arr2 = props;
	        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	          var prop = _arr2[_i2];
	          if (!prop.isProperty()) continue;

	          var key = prop.get("key");

	          // { foo: obj }
	          var match = prop.isnt("computed") && key.isIdentifier({ name: targetName });

	          // { "foo": "obj" } or { ["foo"]: "obj" }
	          match = match || key.isLiteral({ value: targetName });

	          if (match) return prop.get("value").resolve(dangerous, resolved);
	        }
	      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
	        var elems = target.get("elements");
	        var elem = elems[targetName];
	        if (elem) return elem.resolve(dangerous, resolved);
	      }
	    }
	}
	},{"../../types":193,"lodash/collection/includes":341}],174:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _transformationHelpersReact = require("../../../transformation/helpers/react");

	var react = _interopRequireWildcard(_transformationHelpersReact);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var referenceVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    if (this.isJSXIdentifier() && react.isCompatTag(node.name)) {
	      return;
	    }

	    // direct references that we need to track to hoist this to the highest scope we can
	    var binding = scope.getBinding(node.name);
	    if (!binding) return;

	    // this binding isn't accessible from the parent scope so we can safely ignore it
	    // eg. it's in a closure etc
	    if (binding !== state.scope.getBinding(node.name)) return;

	    if (binding.constant) {
	      state.bindings[node.name] = binding;
	    } else {
	      var _arr = binding.constantViolations;

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var violationPath = _arr[_i];
	        state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
	      }
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var PathHoister = (function () {
	  function PathHoister(path, scope) {
	    _classCallCheck(this, PathHoister);

	    this.breakOnScopePaths = [];
	    this.bindings = {};
	    this.scopes = [];
	    this.scope = scope;
	    this.path = path;
	  }

	  /**
	   * [Please add a description.]
	   */

	  PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
	    for (var key in this.bindings) {
	      var binding = this.bindings[key];
	      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
	        return false;
	      }
	    }

	    return true;
	  };

	  /**
	   * [Please add a description.]
	   */

	  PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
	    var scope = this.path.scope;
	    do {
	      if (this.isCompatibleScope(scope)) {
	        this.scopes.push(scope);
	      } else {
	        break;
	      }

	      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
	        break;
	      }
	    } while (scope = scope.parent);
	  };

	  /**
	   * [Please add a description.]
	   */

	  PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
	    var scopes = this.scopes;

	    var scope = scopes.pop();
	    if (!scope) return;

	    if (scope.path.isFunction()) {
	      if (this.hasOwnParamBindings(scope)) {
	        // should ignore this scope since it's ourselves
	        if (this.scope === scope) return;

	        // needs to be attached to the body
	        return scope.path.get("body").get("body")[0];
	      } else {
	        // doesn't need to be be attached to this scope
	        return this.getNextScopeStatementParent();
	      }
	    } else if (scope.path.isProgram()) {
	      return this.getNextScopeStatementParent();
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
	    var scope = this.scopes.pop();
	    if (scope) return scope.path.getStatementParent();
	  };

	  /**
	   * [Please add a description.]
	   */

	  PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
	    for (var name in this.bindings) {
	      if (!scope.hasOwnBinding(name)) continue;

	      var binding = this.bindings[name];
	      if (binding.kind === "param") return true;
	    }
	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  PathHoister.prototype.run = function run() {
	    var node = this.path.node;
	    if (node._hoisted) return;
	    node._hoisted = true;

	    this.path.traverse(referenceVisitor, this);

	    this.getCompatibleScopes();

	    var attachTo = this.getAttachmentPath();
	    if (!attachTo) return;

	    // don't bother hoisting to the same function as this will cause multiple branches to be evaluated more than once leading to a bad optimisation
	    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;

	    var uid = attachTo.scope.generateUidIdentifier("ref");

	    attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);

	    var parent = this.path.parentPath;

	    if (parent.isJSXElement() && this.path.container === parent.node.children) {
	      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with
	      // an expression container
	      uid = t.JSXExpressionContainer(uid);
	    }

	    this.path.replaceWith(uid);
	  };

	  return PathHoister;
	})();

	exports["default"] = PathHoister;
	module.exports = exports["default"];
	},{"../../../transformation/helpers/react":79,"../../../types":193}],175:[function(require,module,exports){
	// this file contains hooks that handle ancestry cleanup of parent nodes when removing children

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _types = require("../../../types");

	/**
	 * Pre hooks should be used for either rejecting removal or delegating removal
	 */

	var t = _interopRequireWildcard(_types);

	var pre = [

	/**
	 * [Please add a description.]
	 */

	function (self) {
	  if (self.key === "body" && (self.isBlockStatement() || self.isClassBody())) {
	    // function () NODE
	    // class NODE
	    // attempting to remove a block statement that's someones body so let's just clear all the inner
	    // statements instead
	    self.node.body = [];
	    return true;
	  }
	},

	/**
	 * [Please add a description.]
	 */

	function (self, parent) {
	  var replace = false;

	  // () => NODE;
	  // removing the body of an arrow function
	  replace = replace || self.key === "body" && parent.isArrowFunctionExpression();

	  // throw NODE;
	  // removing a throw statement argument
	  replace = replace || self.key === "argument" && parent.isThrowStatement();

	  if (replace) {
	    self.replaceWith(t.identifier("undefined"));
	    return true;
	  }
	}];

	/**
	 * Post hooks should be used for cleaning up parents
	 */

	exports.pre = pre;
	var post = [

	/**
	 * [Please add a description.]
	 */

	function (self, parent) {
	  var removeParent = false;

	  // while (NODE);
	  // removing the test of a while/switch, we can either just remove it entirely *or* turn the `test` into `true`
	  // unlikely that the latter will ever be what's wanted so we just remove the loop to avoid infinite recursion
	  removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());

	  // export NODE;
	  // just remove a declaration for an export as this is no longer valid
	  removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();

	  // label: NODE
	  // stray labeled statement with no body
	  removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();

	  // var NODE;
	  // remove an entire declaration if there are no declarators left
	  removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 0;

	  // NODE;
	  // remove the entire expression statement if there's no expression
	  removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();

	  // if (NODE);
	  // remove the entire if since the consequent is never going to be hit, if there's an alternate then it's already been
	  // handled with the `pre` hook
	  removeParent = removeParent || self.key === "test" && parent.isIfStatement();

	  if (removeParent) {
	    parent.dangerouslyRemove();
	    return true;
	  }
	},

	/**
	 * [Please add a description.]
	 */

	function (self, parent) {
	  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
	    // (node, NODE);
	    // we've just removed the second element of a sequence expression so let's turn that sequence
	    // expression into a regular expression
	    parent.replaceWith(parent.node.expressions[0]);
	    return true;
	  }
	},

	/**
	 * [Please add a description.]
	 */

	function (self, parent) {
	  if (parent.isBinary()) {
	    // left + NODE;
	    // NODE + right;
	    // we're in a binary expression, better remove it and replace it with the last expression
	    if (self.key === "left") {
	      parent.replaceWith(parent.node.right);
	    } else {
	      // key === "right"
	      parent.replaceWith(parent.node.left);
	    }
	    return true;
	  }
	}];
	exports.post = post;
	},{"../../../types":193}],176:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _transformationHelpersReact = require("../../../transformation/helpers/react");

	var react = _interopRequireWildcard(_transformationHelpersReact);

	var _types = require("../../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var ReferencedIdentifier = {
	  types: ["Identifier", "JSXIdentifier"],
	  checkPath: function checkPath(_ref, opts) {
	    var node = _ref.node;
	    var parent = _ref.parent;

	    if (!t.isIdentifier(node, opts)) {
	      if (t.isJSXIdentifier(node, opts)) {
	        if (react.isCompatTag(node.name)) return false;
	      } else {
	        // not a JSXIdentifier or an Identifier
	        return false;
	      }
	    }

	    // check if node is referenced
	    return t.isReferenced(node, parent);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.ReferencedIdentifier = ReferencedIdentifier;
	var BindingIdentifier = {
	  types: ["Identifier"],
	  checkPath: function checkPath(_ref2) {
	    var node = _ref2.node;
	    var parent = _ref2.parent;

	    return t.isBinding(node, parent);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.BindingIdentifier = BindingIdentifier;
	var Statement = {
	  types: ["Statement"],
	  checkPath: function checkPath(_ref3) {
	    var node = _ref3.node;
	    var parent = _ref3.parent;

	    if (t.isStatement(node)) {
	      if (t.isVariableDeclaration(node)) {
	        if (t.isForXStatement(parent, { left: node })) return false;
	        if (t.isForStatement(parent, { init: node })) return false;
	      }

	      return true;
	    } else {
	      return false;
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Statement = Statement;
	var Expression = {
	  types: ["Expression"],
	  checkPath: function checkPath(path) {
	    if (path.isIdentifier()) {
	      return path.isReferencedIdentifier();
	    } else {
	      return t.isExpression(path.node);
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Expression = Expression;
	var Scope = {
	  types: ["Scopable"],
	  checkPath: function checkPath(path) {
	    return t.isScope(path.node, path.parent);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Scope = Scope;
	var Referenced = {
	  checkPath: function checkPath(path) {
	    return t.isReferenced(path.node, path.parent);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Referenced = Referenced;
	var BlockScoped = {
	  checkPath: function checkPath(path) {
	    return t.isBlockScoped(path.node);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.BlockScoped = BlockScoped;
	var Var = {
	  types: ["VariableDeclaration"],
	  checkPath: function checkPath(path) {
	    return t.isVar(path.node);
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Var = Var;
	var DirectiveLiteral = {
	  types: ["Literal"],
	  checkPath: function checkPath(path) {
	    return path.isLiteral() && path.parentPath.isExpressionStatement();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.DirectiveLiteral = DirectiveLiteral;
	var Directive = {
	  types: ["ExpressionStatement"],
	  checkPath: function checkPath(path) {
	    return path.get("expression").isLiteral();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Directive = Directive;
	var User = {
	  checkPath: function checkPath(path) {
	    return path.node && !!path.node.loc;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.User = User;
	var Generated = {
	  checkPath: function checkPath(path) {
	    return !path.isUser();
	  }
	};

	/**
	 * [Please add a description.]
	 */

	exports.Generated = Generated;
	var Flow = {
	  types: ["Flow", "ImportDeclaration"],
	  checkPath: function checkPath(_ref4) {
	    var node = _ref4.node;

	    if (t.isFlow(node)) {
	      return true;
	    } else if (t.isImportDeclaration(node)) {
	      return node.importKind === "type" || node.importKind === "typeof";
	    } else {
	      return false;
	    }
	  }
	};
	exports.Flow = Flow;
	},{"../../../transformation/helpers/react":79,"../../../types":193}],177:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.insertBefore = insertBefore;
	exports._containerInsert = _containerInsert;
	exports._containerInsertBefore = _containerInsertBefore;
	exports._containerInsertAfter = _containerInsertAfter;
	exports._maybePopFromStatements = _maybePopFromStatements;
	exports.insertAfter = insertAfter;
	exports.updateSiblingKeys = updateSiblingKeys;
	exports._verifyNodeList = _verifyNodeList;
	exports.unshiftContainer = unshiftContainer;
	exports.pushContainer = pushContainer;
	exports.hoist = hoist;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _libHoister = require("./lib/hoister");

	var _libHoister2 = _interopRequireDefault(_libHoister);

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _types = require("../../types");

	/**
	 * Insert the provided nodes before the current one.
	 */

	var t = _interopRequireWildcard(_types);

	function insertBefore(nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertBefore(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) nodes.push(this.node);
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertBefore(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.push(this.node);
	      this.node = this.container[this.key] = t.blockStatement(nodes);
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }

	  return [this];
	}

	/**
	 * [Please add a description.]
	 */

	function _containerInsert(from, nodes) {
	  this.updateSiblingKeys(from, nodes.length);

	  var paths = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var to = from + i;
	    var node = nodes[i];
	    this.container.splice(to, 0, node);

	    if (this.context) {
	      var path = this.context.create(this.parent, this.container, to, this.listKey);
	      paths.push(path);
	      this.queueNode(path);
	    } else {
	      paths.push(_index2["default"].get({
	        parentPath: this,
	        parent: node,
	        container: this.container,
	        listKey: this.listKey,
	        key: to
	      }));
	    }
	  }

	  return paths;
	}

	/**
	 * [Please add a description.]
	 */

	function _containerInsertBefore(nodes) {
	  return this._containerInsert(this.key, nodes);
	}

	/**
	 * [Please add a description.]
	 */

	function _containerInsertAfter(nodes) {
	  return this._containerInsert(this.key + 1, nodes);
	}

	/**
	 * [Please add a description.]
	 */

	function _maybePopFromStatements(nodes) {
	  var last = nodes[nodes.length - 1];
	  if (t.isExpressionStatement(last) && t.isIdentifier(last.expression) && !this.isCompletionRecord()) {
	    nodes.pop();
	  }
	}

	/**
	 * Insert the provided nodes after the current one. When inserting nodes after an
	 * expression, ensure that the completion record is correct by pushing the current node.
	 */

	function insertAfter(nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertAfter(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) {
	      var temp = this.scope.generateDeclaredUidIdentifier();
	      nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
	      nodes.push(t.expressionStatement(temp));
	    }
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertAfter(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.unshift(this.node);
	      this.node = this.container[this.key] = t.blockStatement(nodes);
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }

	  return [this];
	}

	/**
	 * Update all sibling node paths after `fromIndex` by `incrementBy`.
	 */

	function updateSiblingKeys(fromIndex, incrementBy) {
	  var paths = this.parent._paths;
	  for (var i = 0; i < paths.length; i++) {
	    var path = paths[i];
	    if (path.key >= fromIndex) {
	      path.key += incrementBy;
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _verifyNodeList(nodes) {
	  if (nodes.constructor !== Array) {
	    nodes = [nodes];
	  }

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) {
	      throw new Error("Node list has falsy node with the index of " + i);
	    } else if (typeof node !== "object") {
	      throw new Error("Node list contains a non-object node with the index of " + i);
	    } else if (!node.type) {
	      throw new Error("Node list contains a node without a type with the index of " + i);
	    } else if (node instanceof _index2["default"]) {
	      nodes[i] = node.node;
	    }
	  }

	  return nodes;
	}

	/**
	 * [Please add a description.]
	 */

	function unshiftContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  // get the first path and insert our nodes before it, if it doesn't exist then it
	  // doesn't matter, our nodes will be inserted anyway

	  var container = this.node[listKey];
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: container,
	    listKey: listKey,
	    key: 0
	  });

	  return path.insertBefore(nodes);
	}

	/**
	 * [Please add a description.]
	 */

	function pushContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  // get an invisible path that represents the last node + 1 and replace it with our
	  // nodes, effectively inlining it

	  var container = this.node[listKey];
	  var i = container.length;
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: container,
	    listKey: listKey,
	    key: i
	  });

	  return path.replaceWith(nodes, true);
	}

	/**
	 * Hoist the current node to the highest scope possible and return a UID
	 * referencing it.
	 */

	function hoist() {
	  var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];

	  var hoister = new _libHoister2["default"](this, scope);
	  return hoister.run();
	}
	},{"../../types":193,"./index":169,"./lib/hoister":174}],178:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.remove = remove;
	exports.dangerouslyRemove = dangerouslyRemove;
	exports._callRemovalHooks = _callRemovalHooks;
	exports._remove = _remove;
	exports._markRemoved = _markRemoved;
	exports._assertUnremoved = _assertUnremoved;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _libRemovalHooks = require("./lib/removal-hooks");

	/**
	 * Deprecated in favor of `dangerouslyRemove` as it's far more scary and more accurately portrays
	 * the risk.
	 */

	var removalHooks = _interopRequireWildcard(_libRemovalHooks);

	function remove() {
	  console.trace("Path#remove has been renamed to Path#dangerouslyRemove, removing a node is extremely dangerous so please refrain using it.");
	  return this.dangerouslyRemove();
	}

	/**
	 * Dangerously remove the current node. This may sometimes result in a tainted
	 * invalid AST so use with caution.
	 */

	function dangerouslyRemove() {
	  this._assertUnremoved();

	  this.resync();

	  if (this._callRemovalHooks("pre")) {
	    this._markRemoved();
	    return;
	  }

	  this.shareCommentsWithSiblings();
	  this._remove();
	  this._markRemoved();

	  this._callRemovalHooks("post");
	}

	/**
	 * [Please add a description.]
	 */

	function _callRemovalHooks(position) {
	  var _arr = removalHooks[position];

	  for (var _i = 0; _i < _arr.length; _i++) {
	    var fn = _arr[_i];
	    if (fn(this, this.parentPath)) return true;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _remove() {
	  if (Array.isArray(this.container)) {
	    this.container.splice(this.key, 1);
	    this.updateSiblingKeys(this.key, -1);
	  } else {
	    this.container[this.key] = null;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function _markRemoved() {
	  this.shouldSkip = true;
	  this.removed = true;
	  this.node = null;
	}

	/**
	 * [Please add a description.]
	 */

	function _assertUnremoved() {
	  if (this.removed) {
	    throw this.errorWithNode("NodePath has been removed so is read-only.");
	  }
	}
	},{"./lib/removal-hooks":175}],179:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.replaceWithMultiple = replaceWithMultiple;
	exports.replaceWithSourceString = replaceWithSourceString;
	exports.replaceWith = replaceWith;
	exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
	exports.replaceInline = replaceInline;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersCodeFrame = require("../../helpers/code-frame");

	var _helpersCodeFrame2 = _interopRequireDefault(_helpersCodeFrame);

	var _index = require("../index");

	var _index2 = _interopRequireDefault(_index);

	var _index3 = require("./index");

	var _index4 = _interopRequireDefault(_index3);

	var _helpersParse = require("../../helpers/parse");

	var _helpersParse2 = _interopRequireDefault(_helpersParse);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var hoistVariablesVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  Function: function Function() {
	    this.skip();
	  },

	  /**
	   * [Please add a description.]
	   */

	  VariableDeclaration: function VariableDeclaration(node, parent, scope) {
	    if (node.kind !== "var") return;

	    var bindings = this.getBindingIdentifiers();
	    for (var key in bindings) {
	      scope.push({ id: bindings[key] });
	    }

	    var exprs = [];

	    var _arr = node.declarations;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var declar = _arr[_i];
	      if (declar.init) {
	        exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
	      }
	    }

	    return exprs;
	  }
	};

	/**
	 * Replace a node with an array of multiple. This method performs the following steps:
	 *
	 *  - Inherit the comments of first provided node with that of the current node.
	 *  - Insert the provided nodes after the current node.
	 *  - Remove the current node.
	 */

	function replaceWithMultiple(nodes) {
	  this.resync();

	  nodes = this._verifyNodeList(nodes);
	  t.inheritsComments(nodes[0], this.node);
	  this.node = this.container[this.key] = null;
	  this.insertAfter(nodes);
	  if (!this.node) this.dangerouslyRemove();
	}

	/**
	 * Parse a string as an expression and replace the current node with the result.
	 *
	 * NOTE: This is typically not a good idea to use. Building source strings when
	 * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
	 * easier to use, your transforms will be extremely brittle.
	 */

	function replaceWithSourceString(replacement) {
	  this.resync();

	  try {
	    replacement = "(" + replacement + ")";
	    replacement = _helpersParse2["default"](replacement);
	  } catch (err) {
	    var loc = err.loc;
	    if (loc) {
	      err.message += " - make sure this is an expression.";
	      err.message += "\n" + _helpersCodeFrame2["default"](replacement, loc.line, loc.column + 1);
	    }
	    throw err;
	  }

	  replacement = replacement.program.body[0].expression;
	  _index2["default"].removeProperties(replacement);
	  return this.replaceWith(replacement);
	}

	/**
	 * Replace the current node with another.
	 */

	function replaceWith(replacement, whateverAllowed) {
	  this.resync();

	  if (this.removed) {
	    throw new Error("You can't replace this node, we've already removed it");
	  }

	  if (replacement instanceof _index4["default"]) {
	    replacement = replacement.node;
	  }

	  if (!replacement) {
	    throw new Error("You passed `path.replaceWith()` a falsy node, use `path.dangerouslyRemove()` instead");
	  }

	  if (this.node === replacement) {
	    return;
	  }

	  if (this.isProgram() && !t.isProgram(replacement)) {
	    throw new Error("You can only replace a Program root node with another Program node");
	  }

	  // normalise inserting an entire AST
	  if (t.isProgram(replacement) && !this.isProgram()) {
	    replacement = replacement.body;
	    whateverAllowed = true;
	  }

	  if (Array.isArray(replacement)) {
	    if (whateverAllowed) {
	      return this.replaceWithMultiple(replacement);
	    } else {
	      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
	    }
	  }

	  if (typeof replacement === "string") {
	    // triggers an error
	    return this.replaceWithSourceString();
	  }

	  // replacing a statement with an expression so wrap it in an expression statement
	  if (this.isNodeType("Statement") && t.isExpression(replacement) && !this.canHaveVariableDeclarationOrExpression()) {
	    replacement = t.expressionStatement(replacement);
	  }

	  // replacing an expression with a statement so let's explode it
	  if (this.isNodeType("Expression") && t.isStatement(replacement)) {
	    return this.replaceExpressionWithStatements([replacement]);
	  }

	  var oldNode = this.node;
	  if (oldNode) t.inheritsComments(replacement, oldNode);

	  // replace the node
	  this.node = this.container[this.key] = replacement;
	  this.type = replacement.type;

	  // potentially create new scope
	  this.setScope();
	}

	/**
	 * This method takes an array of statements nodes and then explodes it
	 * into expressions. This method retains completion records which is
	 * extremely important to retain original semantics.
	 */

	function replaceExpressionWithStatements(nodes) {
	  this.resync();

	  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);

	  if (toSequenceExpression) {
	    return this.replaceWith(toSequenceExpression);
	  } else {
	    var container = t.functionExpression(null, [], t.blockStatement(nodes));
	    container.shadow = true;

	    this.replaceWith(t.callExpression(container, []));
	    this.traverse(hoistVariablesVisitor);

	    // add implicit returns to all ending expression statements
	    var last = this.get("callee").getCompletionRecords();
	    var _arr2 = last;
	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var lastNode = _arr2[_i2];
	      if (!lastNode.isExpressionStatement()) continue;

	      var loop = lastNode.findParent(function (path) {
	        return path.isLoop();
	      });
	      if (loop) {
	        var uid = this.get("callee").scope.generateDeclaredUidIdentifier("ret");
	        this.get("callee.body").pushContainer("body", t.returnStatement(uid));
	        lastNode.get("expression").replaceWith(t.assignmentExpression("=", uid, lastNode.node.expression));
	      } else {
	        lastNode.replaceWith(t.returnStatement(lastNode.node.expression));
	      }
	    }

	    return this.node;
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function replaceInline(nodes) {
	  this.resync();

	  if (Array.isArray(nodes)) {
	    if (Array.isArray(this.container)) {
	      nodes = this._verifyNodeList(nodes);
	      this._containerInsertAfter(nodes);
	      return this.dangerouslyRemove();
	    } else {
	      return this.replaceWithMultiple(nodes);
	    }
	  } else {
	    return this.replaceWith(nodes);
	  }
	}
	},{"../../helpers/code-frame":55,"../../helpers/parse":59,"../../types":193,"../index":162,"./index":169}],180:[function(require,module,exports){
	/**
	 * [Please add a description.]
	 */

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Binding = (function () {
	  function Binding(_ref) {
	    var existing = _ref.existing;
	    var identifier = _ref.identifier;
	    var scope = _ref.scope;
	    var path = _ref.path;
	    var kind = _ref.kind;

	    _classCallCheck(this, Binding);

	    this.constantViolations = [];
	    this.constant = true;

	    this.identifier = identifier;
	    this.references = 0;
	    this.referenced = false;

	    this.scope = scope;
	    this.path = path;
	    this.kind = kind;

	    this.hasValue = false;
	    this.hasDeoptedValue = false;
	    this.value = null;

	    this.clearValue();

	    if (existing) {
	      this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
	    }
	  }

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.deoptValue = function deoptValue() {
	    this.clearValue();
	    this.hasDeoptedValue = true;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.setValue = function setValue(value) {
	    if (this.hasDeoptedValue) return;
	    this.hasValue = true;
	    this.value = value;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.clearValue = function clearValue() {
	    this.hasDeoptedValue = false;
	    this.hasValue = false;
	    this.value = null;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.reassign = function reassign(path) {
	    this.constant = false;
	    this.constantViolations.push(path);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.reference = function reference() {
	    this.referenced = true;
	    this.references++;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.dereference = function dereference() {
	    this.references--;
	    this.referenced = !!this.references;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Binding.prototype.isCompatibleWithType = function isCompatibleWithType() {
	    return false;
	  };

	  return Binding;
	})();

	exports["default"] = Binding;
	module.exports = exports["default"];
	},{}],181:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _lodashCollectionIncludes = require("lodash/collection/includes");

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _repeating = require("repeating");

	var _repeating2 = _interopRequireDefault(_repeating);

	var _index = require("../index");

	var _index2 = _interopRequireDefault(_index);

	var _lodashObjectDefaults = require("lodash/object/defaults");

	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

	var _messages = require("../../messages");

	var messages = _interopRequireWildcard(_messages);

	var _binding = require("./binding");

	var _binding2 = _interopRequireDefault(_binding);

	var _globals = require("globals");

	var _globals2 = _interopRequireDefault(_globals);

	var _lodashArrayFlatten = require("lodash/array/flatten");

	var _lodashArrayFlatten2 = _interopRequireDefault(_lodashArrayFlatten);

	var _lodashObjectExtend = require("lodash/object/extend");

	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);

	var _helpersObject = require("../../helpers/object");

	var _helpersObject2 = _interopRequireDefault(_helpersObject);

	var _types = require("../../types");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_types);

	var collectorVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  For: function For(node, parent, scope) {
	    var _arr = t.FOR_INIT_KEYS;

	    for (var _i = 0; _i < _arr.length; _i++) {
	      var key = _arr[_i];
	      var declar = this.get(key);
	      if (declar.isVar()) scope.getFunctionParent().registerBinding("var", declar);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Declaration: function Declaration(node, parent, scope) {
	    // delegate block scope handling to the `blockVariableVisitor`
	    if (this.isBlockScoped()) return;

	    // this will be hit again once we traverse into it after this iteration
	    if (this.isExportDeclaration() && this.get("declaration").isDeclaration()) return;

	    // we've ran into a declaration!
	    scope.getFunctionParent().registerDeclaration(this);
	  },

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node) {
	    var binding = this.scope.getBinding(node.name);
	    if (binding) {
	      binding.reference(this);
	    } else {
	      this.scope.getProgramParent().addGlobal(node);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ForXStatement: function ForXStatement() {
	    var left = this.get("left");
	    if (left.isPattern() || left.isIdentifier()) {
	      this.scope.registerConstantViolation(left, left);
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  ExportDeclaration: {
	    exit: function exit(node) {
	      var declar = node.declaration;
	      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
	        this.scope.getBinding(declar.id.name).reference();
	      } else if (t.isVariableDeclaration(declar)) {
	        var _arr2 = declar.declarations;

	        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	          var decl = _arr2[_i2];
	          var ids = t.getBindingIdentifiers(decl);
	          for (var name in ids) {
	            this.scope.getBinding(name).reference();
	          }
	        }
	      }
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  LabeledStatement: function LabeledStatement(node) {
	    this.scope.getProgramParent().addGlobal(node);
	    this.scope.getBlockParent().registerDeclaration(this);
	  },

	  /**
	   * [Please add a description.]
	   */

	  AssignmentExpression: function AssignmentExpression() {
	    // register undeclared bindings as globals
	    var ids = this.getBindingIdentifiers();
	    var programParent;
	    for (var name in ids) {
	      if (this.scope.getBinding(name)) continue;

	      programParent = programParent || this.scope.getProgramParent();
	      programParent.addGlobal(ids[name]);
	    }

	    // register as constant violation
	    this.scope.registerConstantViolation(this, this.get("left"), this.get("right"));
	  },

	  /**
	   * [Please add a description.]
	   */

	  UpdateExpression: function UpdateExpression(node, parent, scope) {
	    scope.registerConstantViolation(this, this.get("argument"), null);
	  },

	  /**
	   * [Please add a description.]
	   */

	  UnaryExpression: function UnaryExpression(node, parent, scope) {
	    if (node.operator === "delete") scope.registerConstantViolation(this, this.get("left"), null);
	  },

	  /**
	   * [Please add a description.]
	   */

	  BlockScoped: function BlockScoped(node, parent, scope) {
	    if (scope.path === this) scope = scope.parent;
	    scope.getBlockParent().registerDeclaration(this);
	  },

	  /**
	   * [Please add a description.]
	   */

	  ClassDeclaration: function ClassDeclaration(node, parent, scope) {
	    var name = node.id.name;
	    scope.bindings[name] = scope.getBinding(name);
	  },

	  /**
	   * [Please add a description.]
	   */

	  Block: function Block(node, parent, scope) {
	    var paths = this.get("body");
	    var _arr3 = paths;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var path = _arr3[_i3];
	      if (path.isFunctionDeclaration()) {
	        scope.getBlockParent().registerDeclaration(path);
	      }
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var renameVisitor = {

	  /**
	   * [Please add a description.]
	   */

	  ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
	    if (node.name === state.oldName) {
	      node.name = state.newName;
	    }
	  },

	  /**
	   * [Please add a description.]
	   */

	  Scope: function Scope(node, parent, scope, state) {
	    if (!scope.bindingIdentifierEquals(state.oldName, state.binding)) {
	      this.skip();
	    }
	  }
	};

	/**
	 * [Please add a description.]
	 */

	renameVisitor.AssignmentExpression = renameVisitor.Declaration = function (node, parent, scope, state) {
	  var ids = this.getBindingIdentifiers();

	  for (var name in ids) {
	    if (name === state.oldName) ids[name].name = state.newName;
	  }
	};

	/**
	 * [Please add a description.]
	 */

	var Scope = (function () {

	  /**
	   * This searches the current "scope" and collects all references/bindings
	   * within.
	   */

	  function Scope(path, parent) {
	    _classCallCheck(this, Scope);

	    if (parent && parent.block === path.node) {
	      return parent;
	    }

	    var cached = path.getData("scope");
	    if (cached && cached.parent === parent && cached.block === path.node) {
	      return cached;
	    } else {
	      path.setData("scope", this);
	    }

	    this.parent = parent;
	    this.hub = path.hub;

	    this.parentBlock = path.parent;
	    this.block = path.node;
	    this.path = path;
	  }

	  /**
	   * Globals.
	   */

	  /**
	   * Traverse node with current scope and path.
	   */

	  Scope.prototype.traverse = function traverse(node, opts, state) {
	    _index2["default"](node, opts, this, state, this.path);
	  };

	  /**
	   * Generate a unique identifier and add it to the current scope.
	   */

	  Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
	    var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    var id = this.generateUidIdentifier(name);
	    this.push({ id: id });
	    return id;
	  };

	  /**
	   * Generate a unique identifier.
	   */

	  Scope.prototype.generateUidIdentifier = function generateUidIdentifier(name) {
	    return t.identifier(this.generateUid(name));
	  };

	  /**
	   * Generate a unique `_id1` binding.
	   */

	  Scope.prototype.generateUid = function generateUid(name) {
	    name = t.toIdentifier(name).replace(/^_+/, "");

	    var uid;
	    var i = 0;
	    do {
	      uid = this._generateUid(name, i);
	      i++;
	    } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));

	    var program = this.getProgramParent();
	    program.references[uid] = true;
	    program.uids[uid] = true;

	    return uid;
	  };

	  /**
	   * Generate an `_id1`.
	   */

	  Scope.prototype._generateUid = function _generateUid(name, i) {
	    var id = name;
	    if (i > 1) id += i;
	    return "_" + id;
	  };

	  /**
	   * Generate a unique identifier based on a node.
	   */

	  Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent, defaultName) {
	    var node = parent;

	    if (t.isAssignmentExpression(parent)) {
	      node = parent.left;
	    } else if (t.isVariableDeclarator(parent)) {
	      node = parent.id;
	    } else if (t.isProperty(node)) {
	      node = node.key;
	    }

	    var parts = [];

	    var add = function add(node) {
	      if (t.isModuleDeclaration(node)) {
	        if (node.source) {
	          add(node.source);
	        } else if (node.specifiers && node.specifiers.length) {
	          var _arr4 = node.specifiers;

	          for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
	            var specifier = _arr4[_i4];
	            add(specifier);
	          }
	        } else if (node.declaration) {
	          add(node.declaration);
	        }
	      } else if (t.isModuleSpecifier(node)) {
	        add(node.local);
	      } else if (t.isMemberExpression(node)) {
	        add(node.object);
	        add(node.property);
	      } else if (t.isIdentifier(node)) {
	        parts.push(node.name);
	      } else if (t.isLiteral(node)) {
	        parts.push(node.value);
	      } else if (t.isCallExpression(node)) {
	        add(node.callee);
	      } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
	        var _arr5 = node.properties;

	        for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
	          var prop = _arr5[_i5];
	          add(prop.key || prop.argument);
	        }
	      }
	    };

	    add(node);

	    var id = parts.join("$");
	    id = id.replace(/^_/, "") || defaultName || "ref";

	    return this.generateUidIdentifier(id);
	  };

	  /**
	   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
	   * evaluating it wont result in potentially arbitrary code from being ran. The following are
	   * whitelisted and determined not to cause side effects:
	   *
	   *  - `this` expressions
	   *  - `super` expressions
	   *  - Bound identifiers
	   */

	  Scope.prototype.isStatic = function isStatic(node) {
	    if (t.isThisExpression(node) || t.isSuper(node)) {
	      return true;
	    }

	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding) {
	        return binding.constant;
	      } else {
	        return this.hasBinding(node.name);
	      }
	    }

	    return false;
	  };

	  /**
	   * Possibly generate a memoised identifier if it is not static and has consequences.
	   */

	  Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node, dontPush) {
	    if (this.isStatic(node)) {
	      return null;
	    } else {
	      var id = this.generateUidIdentifierBasedOnNode(node);
	      if (!dontPush) this.push({ id: id });
	      return id;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind, name, id) {
	    // ignore parameters
	    if (kind === "param") return;

	    // ignore hoisted functions if there's also a local let
	    if (kind === "hoisted" && local.kind === "let") return;

	    var duplicate = false;

	    // don't allow duplicate bindings to exist alongside
	    if (!duplicate) duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";

	    // don't allow a local of param with a kind of let
	    if (!duplicate) duplicate = local.kind === "param" && (kind === "let" || kind === "const");

	    if (duplicate) {
	      throw this.hub.file.errorWithNode(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.rename = function rename(oldName, newName, block) {
	    newName = newName || this.generateUidIdentifier(oldName).name;

	    var info = this.getBinding(oldName);
	    if (!info) return;

	    var state = {
	      newName: newName,
	      oldName: oldName,
	      binding: info.identifier,
	      info: info
	    };

	    var scope = info.scope;
	    scope.traverse(block || scope.block, renameVisitor, state);

	    if (!block) {
	      scope.removeOwnBinding(oldName);
	      scope.bindings[newName] = info;
	      state.binding.name = newName;
	    }

	    var file = this.hub.file;
	    if (file) {
	      this._renameFromMap(file.moduleFormatter.localImports, oldName, newName, state.binding);
	      //this._renameFromMap(file.moduleFormatter.localExports, oldName, newName);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
	    if (map[oldName]) {
	      map[newName] = value;
	      map[oldName] = null;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.dump = function dump() {
	    var sep = _repeating2["default"]("-", 60);
	    console.log(sep);
	    var scope = this;
	    do {
	      console.log("#", scope.block.type);
	      for (var name in scope.bindings) {
	        var binding = scope.bindings[name];
	        console.log(" -", name, {
	          constant: binding.constant,
	          references: binding.references,
	          kind: binding.kind
	        });
	      }
	    } while (scope = scope.parent);
	    console.log(sep);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.toArray = function toArray(node, i) {
	    var file = this.hub.file;

	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding && binding.constant && binding.path.isGenericType("Array")) return node;
	    }

	    if (t.isArrayExpression(node)) {
	      return node;
	    }

	    if (t.isIdentifier(node, { name: "arguments" })) {
	      return t.callExpression(t.memberExpression(file.addHelper("slice"), t.identifier("call")), [node]);
	    }

	    var helperName = "to-array";
	    var args = [node];
	    if (i === true) {
	      helperName = "to-consumable-array";
	    } else if (i) {
	      args.push(t.literal(i));
	      helperName = "sliced-to-array";
	      if (this.hub.file.isLoose("es6.forOf")) helperName += "-loose";
	    }
	    return t.callExpression(file.addHelper(helperName), args);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.registerDeclaration = function registerDeclaration(path) {
	    if (path.isLabeledStatement()) {
	      this.registerBinding("label", path);
	    } else if (path.isFunctionDeclaration()) {
	      this.registerBinding("hoisted", path);
	    } else if (path.isVariableDeclaration()) {
	      var declarations = path.get("declarations");
	      var _arr6 = declarations;
	      for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
	        var declar = _arr6[_i6];
	        this.registerBinding(path.node.kind, declar);
	      }
	    } else if (path.isClassDeclaration()) {
	      this.registerBinding("let", path);
	    } else if (path.isImportDeclaration() || path.isExportDeclaration()) {
	      this.registerBinding("module", path);
	    } else {
	      this.registerBinding("unknown", path);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.registerConstantViolation = function registerConstantViolation(root, left, right) {
	    var ids = left.getBindingIdentifiers();
	    for (var name in ids) {
	      var binding = this.getBinding(name);
	      if (!binding) continue;

	      if (right) {
	        var rightType = right.typeAnnotation;
	        if (rightType && binding.isCompatibleWithType(rightType)) continue;
	      }

	      binding.reassign(root, left, right);
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.registerBinding = function registerBinding(kind, path) {
	    if (!kind) throw new ReferenceError("no `kind`");

	    if (path.isVariableDeclaration()) {
	      var declarators = path.get("declarations");
	      var _arr7 = declarators;
	      for (var _i7 = 0; _i7 < _arr7.length; _i7++) {
	        var declar = _arr7[_i7];
	        this.registerBinding(kind, declar);
	      }
	      return;
	    }

	    var parent = this.getProgramParent();
	    var ids = path.getBindingIdentifiers(true);

	    for (var name in ids) {
	      var _arr8 = ids[name];

	      for (var _i8 = 0; _i8 < _arr8.length; _i8++) {
	        var id = _arr8[_i8];
	        var local = this.getOwnBinding(name);
	        if (local) {
	          // same identifier so continue safely as we're likely trying to register it
	          // multiple times
	          if (local.identifier === id) continue;

	          this.checkBlockScopedCollisions(local, kind, name, id);
	        }

	        parent.references[name] = true;

	        this.bindings[name] = new _binding2["default"]({
	          identifier: id,
	          existing: local,
	          scope: this,
	          path: path,
	          kind: kind
	        });
	      }
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.addGlobal = function addGlobal(node) {
	    this.globals[node.name] = node;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.hasUid = function hasUid(name) {
	    var scope = this;

	    do {
	      if (scope.uids[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.hasGlobal = function hasGlobal(name) {
	    var scope = this;

	    do {
	      if (scope.globals[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.hasReference = function hasReference(name) {
	    var scope = this;

	    do {
	      if (scope.references[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.isPure = function isPure(node, constantsOnly) {
	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (!binding) return false;
	      if (constantsOnly) return binding.constant;
	      return true;
	    } else if (t.isClass(node)) {
	      return !node.superClass || this.isPure(node.superClass, constantsOnly);
	    } else if (t.isBinary(node)) {
	      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
	    } else if (t.isArrayExpression(node)) {
	      var _arr9 = node.elements;

	      for (var _i9 = 0; _i9 < _arr9.length; _i9++) {
	        var elem = _arr9[_i9];
	        if (!this.isPure(elem, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isObjectExpression(node)) {
	      var _arr10 = node.properties;

	      for (var _i10 = 0; _i10 < _arr10.length; _i10++) {
	        var prop = _arr10[_i10];
	        if (!this.isPure(prop, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isProperty(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      return this.isPure(node.value, constantsOnly);
	    } else {
	      return t.isPure(node);
	    }
	  };

	  /**
	   * Set some arbitrary data on the current scope.
	   */

	  Scope.prototype.setData = function setData(key, val) {
	    return this.data[key] = val;
	  };

	  /**
	   * Recursively walk up scope tree looking for the data `key`.
	   */

	  Scope.prototype.getData = function getData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) return data;
	    } while (scope = scope.parent);
	  };

	  /**
	   * Recursively walk up scope tree looking for the data `key` and if it exists,
	   * remove it.
	   */

	  Scope.prototype.removeData = function removeData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) scope.data[key] = null;
	    } while (scope = scope.parent);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.init = function init() {
	    if (!this.references) this.crawl();
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.crawl = function crawl() {
	    var path = this.path;

	    //

	    var info = this.block._scopeInfo;
	    if (info) return _lodashObjectExtend2["default"](this, info);

	    info = this.block._scopeInfo = {
	      references: _helpersObject2["default"](),
	      bindings: _helpersObject2["default"](),
	      globals: _helpersObject2["default"](),
	      uids: _helpersObject2["default"](),
	      data: _helpersObject2["default"]()
	    };

	    _lodashObjectExtend2["default"](this, info);

	    // ForStatement - left, init

	    if (path.isLoop()) {
	      var _arr11 = t.FOR_INIT_KEYS;

	      for (var _i11 = 0; _i11 < _arr11.length; _i11++) {
	        var key = _arr11[_i11];
	        var node = path.get(key);
	        if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);
	      }
	    }

	    // FunctionExpression - id

	    if (path.isFunctionExpression() && path.has("id")) {
	      if (!t.isProperty(path.parent, { method: true })) {
	        this.registerBinding("var", path);
	      }
	    }

	    // Class

	    if (path.isClassExpression() && path.has("id")) {
	      this.registerBinding("var", path);
	    }

	    // Function - params, rest

	    if (path.isFunction()) {
	      var params = path.get("params");
	      var _arr12 = params;
	      for (var _i12 = 0; _i12 < _arr12.length; _i12++) {
	        var param = _arr12[_i12];
	        this.registerBinding("param", param);
	      }
	    }

	    // CatchClause - param

	    if (path.isCatchClause()) {
	      this.registerBinding("let", path);
	    }

	    // ComprehensionExpression - blocks

	    if (path.isComprehensionExpression()) {
	      this.registerBinding("let", path);
	    }

	    // Program

	    var parent = this.getProgramParent();
	    if (parent.crawling) return;

	    this.crawling = true;
	    path.traverse(collectorVisitor);
	    this.crawling = false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.push = function push(opts) {
	    var path = this.path;

	    if (path.isSwitchStatement()) {
	      path = this.getFunctionParent().path;
	    }

	    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
	      t.ensureBlock(path.node);
	      path = path.get("body");
	    }

	    if (!path.isBlockStatement() && !path.isProgram()) {
	      path = this.getBlockParent().path;
	    }

	    var unique = opts.unique;
	    var kind = opts.kind || "var";
	    var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;

	    var dataKey = "declaration:" + kind + ":" + blockHoist;
	    var declar = !unique && path.getData(dataKey);

	    if (!declar) {
	      declar = t.variableDeclaration(kind, []);
	      declar._generated = true;
	      declar._blockHoist = blockHoist;

	      this.hub.file.attachAuxiliaryComment(declar);

	      var _path$unshiftContainer = path.unshiftContainer("body", [declar]);

	      var declarPath = _path$unshiftContainer[0];

	      this.registerBinding(kind, declarPath);
	      if (!unique) path.setData(dataKey, declar);
	    }

	    declar.declarations.push(t.variableDeclarator(opts.id, opts.init));
	  };

	  /**
	   * Walk up to the top of the scope tree and get the `Program`.
	   */

	  Scope.prototype.getProgramParent = function getProgramParent() {
	    var scope = this;
	    do {
	      if (scope.path.isProgram()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };

	  /**
	   * Walk up the scope tree until we hit either a Function or reach the
	   * very top and hit Program.
	   */

	  Scope.prototype.getFunctionParent = function getFunctionParent() {
	    var scope = this;
	    do {
	      if (scope.path.isFunctionParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };

	  /**
	   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the
	   * very top and hit Program.
	   */

	  Scope.prototype.getBlockParent = function getBlockParent() {
	    var scope = this;
	    do {
	      if (scope.path.isBlockParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
	  };

	  /**
	   * Walks the scope tree and gathers **all** bindings.
	   */

	  Scope.prototype.getAllBindings = function getAllBindings() {
	    var ids = _helpersObject2["default"]();

	    var scope = this;
	    do {
	      _lodashObjectDefaults2["default"](ids, scope.bindings);
	      scope = scope.parent;
	    } while (scope);

	    return ids;
	  };

	  /**
	   * Walks the scope tree and gathers all declarations of `kind`.
	   */

	  Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() {
	    var ids = _helpersObject2["default"]();

	    var _arr13 = arguments;
	    for (var _i13 = 0; _i13 < _arr13.length; _i13++) {
	      var kind = _arr13[_i13];
	      var scope = this;
	      do {
	        for (var name in scope.bindings) {
	          var binding = scope.bindings[name];
	          if (binding.kind === kind) ids[name] = binding;
	        }
	        scope = scope.parent;
	      } while (scope);
	    }

	    return ids;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name, node) {
	    return this.getBindingIdentifier(name) === node;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.getBinding = function getBinding(name) {
	    var scope = this;

	    do {
	      var binding = scope.getOwnBinding(name);
	      if (binding) return binding;
	    } while (scope = scope.parent);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.getOwnBinding = function getOwnBinding(name) {
	    return this.bindings[name];
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name) {
	    var info = this.getBinding(name);
	    return info && info.identifier;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name) {
	    var binding = this.bindings[name];
	    return binding && binding.identifier;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.hasOwnBinding = function hasOwnBinding(name) {
	    return !!this.getOwnBinding(name);
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.hasBinding = function hasBinding(name, noGlobals) {
	    if (!name) return false;
	    if (this.hasOwnBinding(name)) return true;
	    if (this.parentHasBinding(name, noGlobals)) return true;
	    if (this.hasUid(name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.globals, name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.contextVariables, name)) return true;
	    return false;
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.parentHasBinding = function parentHasBinding(name, noGlobals) {
	    return this.parent && this.parent.hasBinding(name, noGlobals);
	  };

	  /**
	   * Move a binding of `name` to another `scope`.
	   */

	  Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	      info.scope = scope;
	      scope.bindings[name] = info;
	    }
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.removeOwnBinding = function removeOwnBinding(name) {
	    delete this.bindings[name];
	  };

	  /**
	   * [Please add a description.]
	   */

	  Scope.prototype.removeBinding = function removeBinding(name) {
	    // clear literal binding
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	    }

	    // clear uids with this name - https://github.com/babel/babel/issues/2101
	    var scope = this;
	    do {
	      if (scope.uids[name]) {
	        scope.uids[name] = false;
	      }
	    } while (scope = scope.parent);
	  };

	  _createClass(Scope, null, [{
	    key: "globals",
	    value: _lodashArrayFlatten2["default"]([_globals2["default"].builtin, _globals2["default"].browser, _globals2["default"].node].map(Object.keys)),

	    /**
	     * Variables available in current context.
	     */
	    enumerable: true
	  }, {
	    key: "contextVariables",
	    value: ["arguments", "undefined", "Infinity", "NaN"],
	    enumerable: true
	  }]);

	  return Scope;
	})();

	exports["default"] = Scope;
	module.exports = exports["default"];
	},{"../../helpers/object":58,"../../messages":60,"../../types":193,"../index":162,"./binding":180,"globals":321,"lodash/array/flatten":334,"lodash/collection/includes":341,"lodash/object/defaults":438,"lodash/object/extend":439,"repeating":513}],182:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.explode = explode;
	exports.verify = verify;
	exports.merge = merge;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _pathLibVirtualTypes = require("./path/lib/virtual-types");

	var virtualTypes = _interopRequireWildcard(_pathLibVirtualTypes);

	var _messages = require("../messages");

	var messages = _interopRequireWildcard(_messages);

	var _types = require("../types");

	var t = _interopRequireWildcard(_types);

	var _lodashLangClone = require("lodash/lang/clone");

	/**
	 * [Please add a description.]
	 */

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	function explode(visitor) {
	  if (visitor._exploded) return visitor;
	  visitor._exploded = true;

	  // normalise pipes
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    var parts = nodeType.split("|");
	    if (parts.length === 1) continue;

	    var fns = visitor[nodeType];
	    delete visitor[nodeType];

	    var _arr = parts;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var part = _arr[_i];
	      visitor[part] = fns;
	    }
	  }

	  // verify data structure
	  verify(visitor);

	  // make sure there's no __esModule type since this is because we're using loose mode
	  // and it sets __esModule to be enumerable on all modules :(
	  delete visitor.__esModule;

	  // ensure visitors are objects
	  ensureEntranceObjects(visitor);

	  // ensure enter/exit callbacks are arrays
	  ensureCallbackArrays(visitor);

	  // add type wrappers

	  var _arr2 = Object.keys(visitor);

	  // add aliases
	  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	    var nodeType = _arr2[_i2];
	    if (shouldIgnoreKey(nodeType)) continue;

	    var wrapper = virtualTypes[nodeType];
	    if (!wrapper) continue;

	    // wrap all the functions
	    var fns = visitor[nodeType];
	    for (var type in fns) {
	      fns[type] = wrapCheck(wrapper, fns[type]);
	    }

	    // clear it from the visitor
	    delete visitor[nodeType];

	    if (wrapper.types) {
	      var _arr4 = wrapper.types;

	      for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
	        var type = _arr4[_i4];
	        // merge the visitor if necessary or just put it back in
	        if (visitor[type]) {
	          mergePair(visitor[type], fns);
	        } else {
	          visitor[type] = fns;
	        }
	      }
	    } else {
	      mergePair(visitor, fns);
	    }
	  }for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    var fns = visitor[nodeType];

	    var aliases = t.FLIPPED_ALIAS_KEYS[nodeType];
	    if (!aliases) continue;

	    // clear it from the visitor
	    delete visitor[nodeType];

	    var _arr3 = aliases;
	    for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	      var alias = _arr3[_i3];
	      var existing = visitor[alias];
	      if (existing) {
	        mergePair(existing, fns);
	      } else {
	        visitor[alias] = _lodashLangClone2["default"](fns);
	      }
	    }
	  }

	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    ensureCallbackArrays(visitor[nodeType]);
	  }

	  return visitor;
	}

	/**
	 * [Please add a description.]
	 */

	function verify(visitor) {
	  if (visitor._verified) return;

	  if (typeof visitor === "function") {
	    throw new Error(messages.get("traverseVerifyRootFunction"));
	  }

	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    if (t.TYPES.indexOf(nodeType) < 0) {
	      throw new Error(messages.get("traverseVerifyNodeType", nodeType));
	    }

	    var visitors = visitor[nodeType];
	    if (typeof visitors === "object") {
	      for (var visitorKey in visitors) {
	        if (visitorKey === "enter" || visitorKey === "exit") continue;
	        throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
	      }
	    }
	  }

	  visitor._verified = true;
	}

	/**
	 * [Please add a description.]
	 */

	function merge(visitors) {
	  var rootVisitor = {};

	  var _arr5 = visitors;
	  for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
	    var visitor = _arr5[_i5];
	    explode(visitor);

	    for (var type in visitor) {
	      var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
	      mergePair(nodeVisitor, visitor[type]);
	    }
	  }

	  return rootVisitor;
	}

	/**
	 * [Please add a description.]
	 */

	function ensureEntranceObjects(obj) {
	  for (var key in obj) {
	    if (shouldIgnoreKey(key)) continue;

	    var fns = obj[key];
	    if (typeof fns === "function") {
	      obj[key] = { enter: fns };
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function ensureCallbackArrays(obj) {
	  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
	  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
	}

	/**
	 * [Please add a description.]
	 */

	function wrapCheck(wrapper, fn) {
	  return function () {
	    if (wrapper.checkPath(this)) {
	      return fn.apply(this, arguments);
	    }
	  };
	}

	/**
	 * [Please add a description.]
	 */

	function shouldIgnoreKey(key) {
	  // internal/hidden key
	  if (key[0] === "_") return true;

	  // ignore function keys
	  if (key === "enter" || key === "exit" || key === "shouldSkip") return true;

	  // ignore other options
	  if (key === "blacklist" || key === "noScope" || key === "skipKeys") return true;

	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	function mergePair(dest, src) {
	  for (var key in src) {
	    dest[key] = [].concat(dest[key] || [], src[key]);
	  }
	}
	},{"../messages":60,"../types":193,"./path/lib/virtual-types":176,"lodash/lang/clone":422}],183:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashLangIsPlainObject = require("lodash/lang/isPlainObject");

	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);

	var _lodashLangIsNumber = require("lodash/lang/isNumber");

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var _lodashLangIsRegExp = require("lodash/lang/isRegExp");

	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);

	var _lodashLangIsString = require("lodash/lang/isString");

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _traversal = require("../traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _index = require("./index");

	/**
	 * [Please add a description.]
	 */

	var t = _interopRequireWildcard(_index);

	function toComputedKey(node) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.literal(key.name);
	    }
	    return key;
	  })();
	}

	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */

	function toSequenceExpression(nodes, scope) {
	  var declars = [];
	  var bailed = false;

	  var result = convert(nodes);
	  if (bailed) return;

	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }

	  return result;

	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];

	    var _arr = nodes;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var node = _arr[_i];
	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed

	        var _arr2 = node.declarations;
	        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	          var declar = _arr2[_i2];
	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }

	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }

	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : t.identifier("undefined");
	        var alternate = node.alternate ? convert([node.alternate]) : t.identifier("undefined");
	        if (!consequent || !alternate) return bailed = true;

	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }

	      ensureLastUndefined = false;
	    }

	    if (ensureLastUndefined) {
	      exprs.push(t.identifier("undefined"));
	    }

	    //

	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function toKeyAlias(node) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias;

	    if (node.kind === "method") {
	      return toKeyAlias.uid++;
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_traversal2["default"].removeProperties(t.cloneDeep(key)));
	    }

	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }

	    return alias;
	  })();
	}

	toKeyAlias.uid = 0;

	/**
	 * [Please add a description.]
	 */

	function toIdentifier(name) {
	  if (t.isIdentifier(name)) return name.name;

	  name = name + "";

	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");

	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");

	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });

	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }

	  return name || "_";
	}

	/**
	 * [Please add a description.]
	 */

	function toBindingIdentifierName(name) {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}

	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */

	function toStatement(node, ignore) {
	  if (t.isStatement(node)) {
	    return node;
	  }

	  var mustHaveId = false;
	  var newType;

	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }

	  if (mustHaveId && !node.id) {
	    newType = false;
	  }

	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }

	  node.type = newType;

	  return node;
	}

	/**
	 * [Please add a description.]
	 */

	function toExpression(node) {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }

	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }

	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}

	/**
	 * [Please add a description.]
	 */

	function toBlock(node, parent) {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }

	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }

	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }

	    node = [node];
	  }

	  return t.blockStatement(node);
	}

	/**
	 * [Please add a description.]
	 */

	function valueToNode(value) {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }

	  // null, booleans, strings, numbers, regexs
	  if (value === true || value === false || value === null || _lodashLangIsString2["default"](value) || _lodashLangIsNumber2["default"](value) || _lodashLangIsRegExp2["default"](value)) {
	    return t.literal(value);
	  }

	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }

	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.literal(key);
	      }
	      props.push(t.property("init", nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }

	  throw new Error("don't know how to turn this value into a node");
	}
	},{"../traversal":162,"./index":193,"lodash/lang/isNumber":430,"lodash/lang/isPlainObject":432,"lodash/lang/isRegExp":433,"lodash/lang/isString":434}],184:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("ArrayExpression", {
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});

	_index2["default"]("AssignmentExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});

	_index2["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});

	_index2["default"]("BlockStatement", {
	  visitor: ["body"],
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});

	_index2["default"]("BreakStatement", {
	  visitor: ["label"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index2["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"]
	});

	_index2["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  aliases: ["Scopable"]
	});

	_index2["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Expression"]
	});

	_index2["default"]("ContinueStatement", {
	  visitor: ["label"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index2["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});

	_index2["default"]("DoWhileStatement", {
	  visitor: ["body", "test"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});

	_index2["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});

	_index2["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  aliases: ["Statement"]
	});

	_index2["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"]
	});

	_index2["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"]
	});

	_index2["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"]
	});

	_index2["default"]("FunctionDeclaration", {
	  builder: {
	    id: null,
	    params: null,
	    body: null,
	    generator: false,
	    async: false
	  },
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  aliases: ["Scopable", "Function", "Func", "BlockParent", "FunctionParent", "Statement", "Pure", "Declaration"]
	});

	_index2["default"]("FunctionExpression", {
	  builder: {
	    id: null,
	    params: null,
	    body: null,
	    generator: false,
	    async: false
	  },
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  aliases: ["Scopable", "Function", "Func", "BlockParent", "FunctionParent", "Expression", "Pure"]
	});

	_index2["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression"]
	});

	_index2["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement"]
	});

	_index2["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"]
	});

	_index2["default"]("Literal", {
	  builder: ["value"],
	  aliases: ["Expression", "Pure"]
	});

	_index2["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});

	_index2["default"]("MemberExpression", {
	  builder: {
	    object: null,
	    property: null,
	    computed: false
	  },
	  visitor: ["object", "property"],
	  aliases: ["Expression"]
	});

	_index2["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"]
	});

	_index2["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"]
	});

	_index2["default"]("Program", {
	  visitor: ["body"],
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});

	_index2["default"]("Property", {
	  builder: {
	    kind: "init",
	    key: null,
	    value: null,
	    computed: false
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable"]
	});

	_index2["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"]
	});

	_index2["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index2["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  aliases: ["Expression"]
	});

	_index2["default"]("SwitchCase", {
	  visitor: ["test", "consequent"]
	});

	_index2["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"]
	});

	_index2["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});

	_index2["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index2["default"]("TryStatement", {
	  builder: ["block", "handler", "finalizer"],
	  visitor: ["block", "handlers", "handler", "guardedHandlers", "finalizer"],
	  aliases: ["Statement"]
	});

	_index2["default"]("UnaryExpression", {
	  builder: {
	    operator: null,
	    argument: null,
	    prefix: false
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});

	_index2["default"]("UpdateExpression", {
	  builder: {
	    operator: null,
	    argument: null,
	    prefix: false
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});

	_index2["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"]
	});

	_index2["default"]("VariableDeclarator", {
	  visitor: ["id", "init"]
	});

	_index2["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});

	_index2["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"]
	});
	},{"./index":188}],185:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern"]
	});

	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern"]
	});

	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "Func", "BlockParent", "FunctionParent", "Expression", "Pure"]
	});

	_index2["default"]("ClassBody", {
	  visitor: ["body"]
	});

	_index2["default"]("ClassDeclaration", {
	  visitor: ["id", "body", "superClass", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration"]
	});

	_index2["default"]("ClassExpression", {
	  visitor: ["id", "body", "superClass", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Expression"]
	});

	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source", "exported"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"]
	});

	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"]
	});

	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"]
	});

	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"]
	});

	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"]
	});

	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"]
	});

	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"]
	});

	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"]
	});

	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"]
	});

	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"]
	});

	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"]
	});

	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"]
	});

	_index2["default"]("MethodDefinition", {
	  builder: {
	    key: null,
	    value: null,
	    kind: "method",
	    computed: false,
	    "static": false
	  },
	  visitor: ["key", "value", "decorators"]
	});

	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern"]
	});

	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"]
	});

	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});

	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"]
	});

	_index2["default"]("TemplateElement");

	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression"]
	});

	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"]
	});
	},{"./index":188}],186:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AwaitExpression", {
	  builder: ["argument", "all"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"]
	});

	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"]
	});

	_index2["default"]("ComprehensionBlock", {
	  visitor: ["left", "right"]
	});

	_index2["default"]("ComprehensionExpression", {
	  visitor: ["filter", "blocks", "body"],
	  aliases: ["Expression", "Scopable"]
	});

	_index2["default"]("Decorator", {
	  visitor: ["expression"]
	});

	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"]
	});

	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"]
	});
	},{"./index":188}],187:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"]
	});

	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"]
	});

	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow"]
	});

	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
	});

	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
	});

	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
	});

	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
	});

	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"]
	});

	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"]
	});

	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"]
	});

	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"]
	});

	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
	});

	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"]
	});

	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"]
	});

	_index2["default"]("NumberLiteralTypeAnnotation", {
	  aliases: ["Flow"]
	});

	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"]
	});

	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"]
	});

	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"]
	});

	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
	});

	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"]
	});

	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow"]
	});

	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"]
	});

	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"]
	});

	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"]
	});

	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"]
	});

	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"]
	});

	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"]
	});

	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"]
	});

	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"]
	});

	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});
	},{"./index":188}],188:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports["default"] = define;
	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var BUILDER_KEYS = {};

	exports.BUILDER_KEYS = BUILDER_KEYS;
	function builderFromArray(arr) {
	  var builder = {};
	  var _arr = arr;
	  for (var _i = 0; _i < _arr.length; _i++) {
	    var key = _arr[_i];builder[key] = null;
	  }return builder;
	}

	function define(type) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.visitor = opts.visitor || [];
	  opts.aliases = opts.aliases || [];

	  if (!opts.builder) opts.builder = builderFromArray(opts.visitor);
	  if (Array.isArray(opts.builder)) opts.builder = builderFromArray(opts.builder);

	  VISITOR_KEYS[type] = opts.visitor;
	  ALIAS_KEYS[type] = opts.aliases;
	  BUILDER_KEYS[type] = opts.builder;
	}
	},{}],189:[function(require,module,exports){
	"use strict";

	require("./index");

	require("./core");

	require("./es2015");

	require("./flow");

	require("./jsx");

	require("./misc");

	require("./experimental");
	},{"./core":184,"./es2015":185,"./experimental":186,"./flow":187,"./index":188,"./jsx":190,"./misc":191}],190:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"]
	});

	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"]
	});

	_index2["default"]("JSXElement", {
	  visitor: ["openingElement", "closingElement", "children"],
	  aliases: ["JSX", "Immutable", "Expression"]
	});

	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});

	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"]
	});

	_index2["default"]("JSXIdentifier", {
	  aliases: ["JSX", "Expression"]
	});

	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"]
	});

	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"]
	});

	_index2["default"]("JSXOpeningElement", {
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"]
	});

	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"]
	});
	},{"./index":188}],191:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("Noop", {
	  visitor: []
	});

	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression"]
	});
	},{"./index":188}],192:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	var _index = require("./index");

	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */

	var t = _interopRequireWildcard(_index);

	function createUnionTypeAnnotation(types) {
	  var flattened = removeTypeDuplicates(types);

	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}

	/**
	 * Dedupe type annotations.
	 */

	function removeTypeDuplicates(nodes) {
	  var generics = {};
	  var bases = {};

	  // store union type groups to circular references
	  var typeGroups = [];

	  var types = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;

	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }

	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }

	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }

	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }

	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;

	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }

	      continue;
	    }

	    types.push(node);
	  }

	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }

	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }

	  return types;
	}

	/**
	 * Create a type anotation based on typeof expression.
	 */

	function createTypeAnnotationBasedOnTypeof(type) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}
	},{"./index":193}],193:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inherits = inherits;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _toFastProperties = require("to-fast-properties");

	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);

	var _lodashArrayCompact = require("lodash/array/compact");

	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);

	var _lodashObjectAssign = require("lodash/object/assign");

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _lodashCollectionEach = require("lodash/collection/each");

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashArrayUniq = require("lodash/array/uniq");

	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);

	require("./definitions/init");

	var _definitions = require("./definitions");

	var t = exports;

	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */

	function registerType(type, skipAliasCheck) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts, skipAliasCheck);
	  };

	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}

	/**
	 * Constants.
	 */

	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];

	exports.COMMENT_KEYS = COMMENT_KEYS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["_scopeInfo", "_paths", "start", "loc", "end"]
	};

	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = ["==", "===", "!=", "!==", "in", "instanceof"];
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];

	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];

	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;

	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */

	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	_lodashCollectionEach2["default"](t.VISITOR_KEYS, function (keys, type) {
	  registerType(type, true);
	});

	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */

	t.FLIPPED_ALIAS_KEYS = {};

	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});

	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */

	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type, false);
	});

	var TYPES = Object.keys(t.VISITOR_KEYS).concat(Object.keys(t.FLIPPED_ALIAS_KEYS));

	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */

	// @TODO should `skipAliasCheck` be removed?
	exports.TYPES = TYPES;

	function is(type, node, opts, skipAliasCheck) {
	  if (!node) return false;

	  var matches = isType(node.type, type);
	  if (!matches) return false;

	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}

	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */

	function isType(nodeType, targetType) {
	  if (nodeType === targetType) return true;

	  var aliases = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;

	    var _arr = aliases;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var alias = _arr[_i];
	      if (nodeType === alias) return true;
	    }
	  }

	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	_lodashCollectionEach2["default"](t.VISITOR_KEYS, function (keys, type) {
	  if (t.BUILDER_KEYS[type]) return;

	  var defs = {};
	  _lodashCollectionEach2["default"](keys, function (key) {
	    defs[key] = null;
	  });
	  t.BUILDER_KEYS[type] = defs;
	});

	/**
	 * [Please add a description.]
	 */

	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  var builder = function builder() {
	    var node = {};
	    node.start = null;
	    node.type = type;

	    var i = 0;

	    for (var key in keys) {
	      var arg = arguments[i++];
	      if (arg === undefined) arg = keys[key];
	      node[key] = arg;
	    }

	    return node;
	  };

	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});

	/**
	 * Test if an object is shallowly equal.
	 */

	function shallowEqual(actual, expected) {
	  var keys = Object.keys(expected);

	  var _arr2 = keys;
	  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	    var key = _arr2[_i2];
	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Append a node to a member expression.
	 */

	function appendToMemberExpression(member, append, computed) {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}

	/**
	 * Prepend a node to a member expression.
	 */

	function prependToMemberExpression(member, prepend) {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}

	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */

	function ensureBlock(node) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];

	  return node[key] = t.toBlock(node[key], node);
	}

	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */

	function clone(node) {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}

	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */

	function cloneDeep(node) {
	  var newNode = {};

	  for (var key in node) {
	    if (key[0] === "_") continue;

	    var val = node[key];

	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }

	    newNode[key] = val;
	  }

	  return newNode;
	}

	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */

	function buildMatchMemberExpression(match, allowPartial) {
	  var parts = match.split(".");

	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;

	    var search = [member];
	    var i = 0;

	    while (search.length) {
	      var node = search.shift();

	      if (allowPartial && i === parts.length) {
	        return true;
	      }

	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }

	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }

	    return true;
	  };
	}

	/**
	 * Remove comment properties from a node.
	 */

	function removeComments(node) {
	  var _arr3 = COMMENT_KEYS;

	  for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	    var key = _arr3[_i3];
	    delete node[key];
	  }
	  return node;
	}

	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */

	function inheritsComments(child, parent) {
	  if (child && parent) {
	    var _arr4 = COMMENT_KEYS;

	    for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
	      var key = _arr4[_i4];
	      child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	    }
	  }
	  return child;
	}

	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */

	function inherits(child, parent) {
	  if (!child || !parent) return child;

	  var _arr5 = t.INHERIT_KEYS.optional;
	  for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
	    var key = _arr5[_i5];
	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }

	  var _arr6 = t.INHERIT_KEYS.force;
	  for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
	    var key = _arr6[_i6];
	    child[key] = parent[key];
	  }

	  t.inheritsComments(child, parent);

	  return child;
	}

	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);

	// Export all type checkers from other files.
	_lodashObjectAssign2["default"](t, require("./retrievers"));
	_lodashObjectAssign2["default"](t, require("./validators"));
	_lodashObjectAssign2["default"](t, require("./converters"));
	_lodashObjectAssign2["default"](t, require("./flow"));
	},{"./converters":183,"./definitions":188,"./definitions/init":189,"./flow":192,"./retrievers":194,"./validators":195,"lodash/array/compact":333,"lodash/array/uniq":337,"lodash/collection/each":339,"lodash/object/assign":437,"to-fast-properties":531}],194:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _helpersObject = require("../helpers/object");

	var _helpersObject2 = _interopRequireDefault(_helpersObject);

	var _index = require("./index");

	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */

	var t = _interopRequireWildcard(_index);

	function getBindingIdentifiers(node, duplicates) {
	  var search = [].concat(node);
	  var ids = _helpersObject2["default"]();

	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;

	    var key = t.getBindingIdentifiers.keys[id.type];

	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	    } else if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	    } else if (key && id[key]) {
	      search = search.concat(id[key]);
	    }
	  }

	  return ids;
	}

	/**
	 * Mapping of types to their identifier keys.
	 */

	getBindingIdentifiers.keys = {
	  DeclareClass: "id",
	  DeclareFunction: "id",
	  DeclareModule: "id",
	  DeclareVariable: "id",
	  InterfaceDeclaration: "id",
	  TypeAlias: "id",

	  ComprehensionExpression: "blocks",
	  ComprehensionBlock: "left",

	  CatchClause: "param",
	  LabeledStatement: "label",
	  UnaryExpression: "argument",
	  AssignmentExpression: "left",

	  ImportSpecifier: "local",
	  ImportNamespaceSpecifier: "local",
	  ImportDefaultSpecifier: "local",
	  ImportDeclaration: "specifiers",

	  FunctionDeclaration: "id",
	  FunctionExpression: "id",

	  ClassDeclaration: "id",
	  ClassExpression: "id",

	  RestElement: "argument",
	  UpdateExpression: "argument",

	  SpreadProperty: "argument",
	  Property: "value",

	  AssignmentPattern: "left",
	  ArrayPattern: "elements",
	  ObjectPattern: "properties",

	  VariableDeclaration: "declarations",
	  VariableDeclarator: "id"
	};
	},{"../helpers/object":58,"./index":193}],195:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _retrievers = require("./retrievers");

	var _esutils = require("esutils");

	var _esutils2 = _interopRequireDefault(_esutils);

	var _index = require("./index");

	/**
	 * Check if the input `node` is a binding identifier.
	 */

	var t = _interopRequireWildcard(_index);

	function isBinding(node, parent) {
	  var bindingKey = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (bindingKey) {
	    return parent[bindingKey] === node;
	  } else {
	    return false;
	  }
	}

	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */

	function isReferenced(node, parent) {
	  switch (parent.type) {
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }

	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;

	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "Property":
	      if (parent.key === node) {
	        return parent.computed;
	      }

	    // no: var NODE = init;
	    // yes: var id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;

	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      var _arr = parent.params;

	      for (var _i = 0; _i < _arr.length; _i++) {
	        var param = _arr[_i];
	        if (param === node) return false;
	      }

	      return parent.id !== node;

	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }

	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;

	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;

	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;

	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;

	    // yes: class { [NODE](){} }
	    case "MethodDefinition":
	      return parent.key === node && parent.computed;

	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;

	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;

	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;

	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;

	    // no: [NODE = foo] = [];
	    // no: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return false;

	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }

	  return true;
	}

	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */

	function isValidIdentifier(name) {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}

	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */

	function isLet(node) {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node._let);
	}

	/**
	 * Check if the input `node` is block scoped.
	 */

	function isBlockScoped(node) {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}

	/**
	 * Check if the input `node` is a variable declaration.
	 */

	function isVar(node) {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node._let;
	}

	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */

	function isSpecifierDefault(specifier) {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}

	/**
	 * Check if the input `node` is a scope.
	 */

	function isScope(node, parent) {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }

	  return t.isScopable(node);
	}

	/**
	 * Check if the input `node` is definitely immutable.
	 */

	function isImmutable(node) {
	  if (t.isType(node.type, "Immutable")) return true;

	  if (t.isLiteral(node)) {
	    if (node.regex) {
	      // regexs are mutable
	      return false;
	    } else {
	      // immutable!
	      return true;
	    }
	  } else if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }

	  return false;
	}
	},{"./index":193,"./retrievers":194,"esutils":319}],196:[function(require,module,exports){
	(function (__dirname){
	"use strict";

	exports.__esModule = true;
	exports.canCompile = canCompile;
	exports.list = list;
	exports.regexify = regexify;
	exports.arrayify = arrayify;
	exports.booleanify = booleanify;
	exports.shouldIgnore = shouldIgnore;
	exports.template = template;
	exports.parseTemplate = parseTemplate;
	// istanbul ignore next

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashStringEscapeRegExp = require("lodash/string/escapeRegExp");

	var _lodashStringEscapeRegExp2 = _interopRequireDefault(_lodashStringEscapeRegExp);

	var _lodashStringStartsWith = require("lodash/string/startsWith");

	var _lodashStringStartsWith2 = _interopRequireDefault(_lodashStringStartsWith);

	var _lodashLangCloneDeep = require("lodash/lang/cloneDeep");

	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);

	var _lodashLangIsBoolean = require("lodash/lang/isBoolean");

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _messages = require("./messages");

	var messages = _interopRequireWildcard(_messages);

	var _minimatch = require("minimatch");

	var _minimatch2 = _interopRequireDefault(_minimatch);

	var _lodashCollectionContains = require("lodash/collection/contains");

	var _lodashCollectionContains2 = _interopRequireDefault(_lodashCollectionContains);

	var _traversal = require("./traversal");

	var _traversal2 = _interopRequireDefault(_traversal);

	var _lodashLangIsString = require("lodash/lang/isString");

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _lodashLangIsRegExp = require("lodash/lang/isRegExp");

	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);

	var _lodashLangIsEmpty = require("lodash/lang/isEmpty");

	var _lodashLangIsEmpty2 = _interopRequireDefault(_lodashLangIsEmpty);

	var _helpersParse = require("./helpers/parse");

	var _helpersParse2 = _interopRequireDefault(_helpersParse);

	var _path = require("path");

	var _path2 = _interopRequireDefault(_path);

	var _lodashObjectHas = require("lodash/object/has");

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _fs = require("fs");

	var _fs2 = _interopRequireDefault(_fs);

	var _types = require("./types");

	var t = _interopRequireWildcard(_types);

	var _slash = require("slash");

	var _slash2 = _interopRequireDefault(_slash);

	var _pathExists = require("path-exists");

	var _pathExists2 = _interopRequireDefault(_pathExists);

	var _util = require("util");

	/**
	 * Test if a filename ends with a compilable extension.
	 */

	exports.inherits = _util.inherits;
	exports.inspect = _util.inspect;

	function canCompile(filename, altExts) {
	  var exts = altExts || canCompile.EXTENSIONS;
	  var ext = _path2["default"].extname(filename);
	  return _lodashCollectionContains2["default"](exts, ext);
	}

	/**
	 * Default set of compilable extensions.
	 */

	canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];

	/**
	 * Create an array from any value, splitting strings by ",".
	 */

	function list(val) {
	  if (!val) {
	    return [];
	  } else if (Array.isArray(val)) {
	    return val;
	  } else if (typeof val === "string") {
	    return val.split(",");
	  } else {
	    return [val];
	  }
	}

	/**
	 * Create a RegExp from a string, array, or regexp.
	 */

	function regexify(val) {
	  if (!val) return new RegExp(/.^/);

	  if (Array.isArray(val)) val = new RegExp(val.map(_lodashStringEscapeRegExp2["default"]).join("|"), "i");

	  if (_lodashLangIsString2["default"](val)) {
	    // normalise path separators
	    val = _slash2["default"](val);

	    // remove starting wildcards or relative separator if present
	    if (_lodashStringStartsWith2["default"](val, "./") || _lodashStringStartsWith2["default"](val, "*/")) val = val.slice(2);
	    if (_lodashStringStartsWith2["default"](val, "**/")) val = val.slice(3);

	    var regex = _minimatch2["default"].makeRe(val, { nocase: true });
	    return new RegExp(regex.source.slice(1, -1), "i");
	  }

	  if (_lodashLangIsRegExp2["default"](val)) return val;

	  throw new TypeError("illegal type for regexify");
	}

	/**
	 * Create an array from a boolean, string, or array, mapped by and optional function.
	 */

	function arrayify(val, mapFn) {
	  if (!val) return [];
	  if (_lodashLangIsBoolean2["default"](val)) return arrayify([val], mapFn);
	  if (_lodashLangIsString2["default"](val)) return arrayify(list(val), mapFn);

	  if (Array.isArray(val)) {
	    if (mapFn) val = val.map(mapFn);
	    return val;
	  }

	  return [val];
	}

	/**
	 * Makes boolean-like strings into booleans.
	 */

	function booleanify(val) {
	  if (val === "true") return true;
	  if (val === "false") return false;
	  return val;
	}

	/**
	 * Tests if a filename should be ignored based on "ignore" and "only" options.
	 */

	function shouldIgnore(filename, ignore, only) {
	  filename = _slash2["default"](filename);

	  if (only) {
	    var _arr = only;

	    for (var _i = 0; _i < _arr.length; _i++) {
	      var pattern = _arr[_i];
	      if (_shouldIgnore(pattern, filename)) return false;
	    }
	    return true;
	  } else if (ignore.length) {
	    var _arr2 = ignore;

	    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	      var pattern = _arr2[_i2];
	      if (_shouldIgnore(pattern, filename)) return true;
	    }
	  }

	  return false;
	}

	/**
	 * [Please add a description.]
	 */

	function _shouldIgnore(pattern, filename) {
	  if (typeof pattern === "function") {
	    return pattern(filename);
	  } else {
	    return pattern.test(filename);
	  }
	}

	/**
	 * A visitor for Babel templates, replaces placeholder references.
	 */

	var templateVisitor = {

	  /**
	   * 360 NoScope PWNd
	   */
	  noScope: true,

	  enter: function enter(node, parent, scope, nodes) {
	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }

	    if (t.isIdentifier(node) && _lodashObjectHas2["default"](nodes, node.name)) {
	      this.skip();
	      this.replaceInline(nodes[node.name]);
	    }
	  },

	  exit: function exit(node) {
	    _traversal2["default"].clearNode(node);
	  }
	};

	/**
	 * Create an instance of a template to use in a transformer.
	 */

	function template(name, nodes, keepExpression) {
	  var ast = exports.templates[name];
	  if (!ast) throw new ReferenceError("unknown template " + name);

	  if (nodes === true) {
	    keepExpression = true;
	    nodes = null;
	  }

	  ast = _lodashLangCloneDeep2["default"](ast);

	  if (!_lodashLangIsEmpty2["default"](nodes)) {
	    _traversal2["default"](ast, templateVisitor, null, nodes);
	  }

	  if (ast.body.length > 1) return ast.body;

	  var node = ast.body[0];

	  if (!keepExpression && t.isExpressionStatement(node)) {
	    return node.expression;
	  } else {
	    return node;
	  }
	}

	/**
	 * Parse a template.
	 */

	function parseTemplate(loc, code) {
	  var ast = _helpersParse2["default"](code, { filename: loc, looseModules: true }).program;
	  ast = _traversal2["default"].removeProperties(ast);
	  return ast;
	}

	/**
	 * Load templates from transformation/templates directory.
	 */

	function loadTemplates() {
	  var templates = {};

	  var templatesLoc = _path2["default"].join(__dirname, "transformation/templates");
	  if (!_pathExists2["default"].sync(templatesLoc)) {
	    throw new ReferenceError(messages.get("missingTemplatesDirectory"));
	  }

	  var _arr3 = _fs2["default"].readdirSync(templatesLoc);

	  for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	    var name = _arr3[_i3];
	    if (name[0] === ".") return;

	    var key = _path2["default"].basename(name, _path2["default"].extname(name));
	    var loc = _path2["default"].join(templatesLoc, name);
	    var code = _fs2["default"].readFileSync(loc, "utf8");

	    templates[key] = parseTemplate(loc, code);
	  }

	  return templates;
	}

	try {
	  exports.templates = require("../templates.json");
	} catch (err) {
	  if (err.code !== "MODULE_NOT_FOUND") throw err;
	  exports.templates = loadTemplates();
	}
	}).call(this,"/lib")
	},{"../templates.json":535,"./helpers/parse":59,"./messages":60,"./traversal":162,"./types":193,"fs":4,"lodash/collection/contains":338,"lodash/lang/cloneDeep":423,"lodash/lang/isBoolean":426,"lodash/lang/isEmpty":427,"lodash/lang/isRegExp":433,"lodash/lang/isString":434,"lodash/object/has":440,"lodash/string/escapeRegExp":446,"lodash/string/startsWith":447,"minimatch":450,"path":12,"path-exists":454,"slash":517,"util":30}],197:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("constant-folding", {
	    metadata: {
	      group: "builtin-prepass",
	      experimental: true
	    },

	    visitor: {
	      AssignmentExpression: function AssignmentExpression() {
	        var left = this.get("left");
	        if (!left.isIdentifier()) return;

	        var binding = this.scope.getBinding(left.node.name);
	        if (!binding || binding.hasDeoptValue) return;

	        var evaluated = this.get("right").evaluate();
	        if (evaluated.confident) {
	          binding.setValue(evaluated.value);
	        } else {
	          binding.deoptValue();
	        }
	      },

	      IfStatement: function IfStatement() {
	        var evaluated = this.get("test").evaluate();
	        if (!evaluated.confident) {
	          // todo: deopt binding values for constant violations inside
	          return this.skip();
	        }

	        if (evaluated.value) {
	          this.skipKey("alternate");
	        } else {
	          this.skipKey("consequent");
	        }
	      },

	      Scopable: {
	        enter: function enter() {
	          var funcScope = this.scope.getFunctionParent();

	          for (var name in this.scope.bindings) {
	            var binding = this.scope.bindings[name];
	            var deopt = false;

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	              for (var _iterator = binding.constantViolations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var path = _step.value;

	                var funcViolationScope = path.scope.getFunctionParent();
	                if (funcViolationScope !== funcScope) {
	                  deopt = true;
	                  break;
	                }
	              }
	            } catch (err) {
	              _didIteratorError = true;
	              _iteratorError = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion && _iterator["return"]) {
	                  _iterator["return"]();
	                }
	              } finally {
	                if (_didIteratorError) {
	                  throw _iteratorError;
	                }
	              }
	            }

	            if (deopt) binding.deoptValue();
	          }
	        },

	        exit: function exit() {
	          for (var name in this.scope.bindings) {
	            var binding = this.scope.bindings[name];
	            binding.clearValue();
	          }
	        }
	      },

	      Expression: {
	        exit: function exit() {
	          var res = this.evaluate();
	          if (res.confident) return t.valueToNode(res.value);
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],198:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  function toStatements(node) {
	    if (t.isBlockStatement(node)) {
	      var hasBlockScoped = false;

	      for (var i = 0; i < node.body.length; i++) {
	        var bodyNode = node.body[i];
	        if (t.isBlockScoped(bodyNode)) hasBlockScoped = true;
	      }

	      if (!hasBlockScoped) {
	        return node.body;
	      }
	    }

	    return node;
	  }

	  var visitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope) {
	      var binding = scope.getBinding(node.name);
	      if (!binding || binding.references > 1 || !binding.constant) return;
	      if (binding.kind === "param" || binding.kind === "module") return;

	      var replacement = binding.path.node;
	      if (t.isVariableDeclarator(replacement)) {
	        replacement = replacement.init;
	      }
	      if (!replacement) return;

	      // ensure it's a "pure" type
	      if (!scope.isPure(replacement, true)) return;

	      if (t.isClass(replacement) || t.isFunction(replacement)) {
	        // don't change this if it's in a different scope, this can be bad
	        // for performance since it may be inside a loop or deeply nested in
	        // hot code
	        if (binding.path.scope.parent !== scope) return;
	      }

	      if (this.findParent(function (path) {
	        return path.node === replacement;
	      })) {
	        return;
	      }

	      t.toExpression(replacement);
	      scope.removeBinding(node.name);
	      binding.path.dangerouslyRemove();
	      return replacement;
	    },

	    "ClassDeclaration|FunctionDeclaration": function ClassDeclarationFunctionDeclaration(node, parent, scope) {
	      var binding = scope.getBinding(node.id.name);
	      if (binding && !binding.referenced) {
	        this.dangerouslyRemove();
	      }
	    },

	    VariableDeclarator: function VariableDeclarator(node, parent, scope) {
	      if (!t.isIdentifier(node.id) || !scope.isPure(node.init, true)) return;
	      visitor["ClassDeclaration|FunctionDeclaration"].apply(this, arguments);
	    },

	    ConditionalExpression: function ConditionalExpression(node) {
	      var evaluateTest = this.get("test").evaluateTruthy();
	      if (evaluateTest === true) {
	        return node.consequent;
	      } else if (evaluateTest === false) {
	        return node.alternate;
	      }
	    },

	    BlockStatement: function BlockStatement() {
	      var paths = this.get("body");

	      var purge = false;

	      for (var i = 0; i < paths.length; i++) {
	        var path = paths[i];

	        if (!purge && path.isCompletionStatement()) {
	          purge = true;
	          continue;
	        }

	        if (purge && !path.isFunctionDeclaration()) {
	          path.dangerouslyRemove();
	        }
	      }
	    },

	    IfStatement: {
	      exit: function exit(node) {
	        var consequent = node.consequent;
	        var alternate = node.alternate;
	        var test = node.test;

	        var evaluateTest = this.get("test").evaluateTruthy();

	        // we can check if a test will be truthy 100% and if so then we can inline
	        // the consequent and completely ignore the alternate
	        //
	        //   if (true) { foo; } -> { foo; }
	        //   if ("foo") { foo; } -> { foo; }
	        //

	        if (evaluateTest === true) {
	          return toStatements(consequent);
	        }

	        // we can check if a test will be falsy 100% and if so we can inline the
	        // alternate if there is one and completely remove the consequent
	        //
	        //   if ("") { bar; } else { foo; } -> { foo; }
	        //   if ("") { bar; } ->
	        //

	        if (evaluateTest === false) {
	          if (alternate) {
	            return toStatements(alternate);
	          } else {
	            return this.dangerouslyRemove();
	          }
	        }

	        // remove alternate blocks that are empty
	        //
	        //   if (foo) { foo; } else {} -> if (foo) { foo; }
	        //

	        if (t.isBlockStatement(alternate) && !alternate.body.length) {
	          alternate = node.alternate = null;
	        }

	        // if the consequent block is empty turn alternate blocks into a consequent
	        // and flip the test
	        //
	        //   if (foo) {} else { bar; } -> if (!foo) { bar; }
	        //

	        if (t.isBlockStatement(consequent) && !consequent.body.length && t.isBlockStatement(alternate) && alternate.body.length) {
	          node.consequent = node.alternate;
	          node.alternate = null;
	          node.test = t.unaryExpression("!", test, true);
	        }
	      }
	    }
	  };

	  return new Plugin("dead-code-elimination", {
	    metadata: {
	      group: "builtin-pre",
	      experimental: true
	    },

	    visitor: visitor
	  });
	};

	module.exports = exports["default"];
	},{}],199:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var parse = _ref.parse;
	  var traverse = _ref.traverse;

	  return new Plugin("eval", {
	    metadata: {
	      group: "builtin-pre"
	    },

	    visitor: {
	      CallExpression: function CallExpression(node) {
	        if (this.get("callee").isIdentifier({ name: "eval" }) && node.arguments.length === 1) {
	          var evaluate = this.get("arguments")[0].evaluate();
	          if (!evaluate.confident) return;

	          var code = evaluate.value;
	          if (typeof code !== "string") return;

	          var ast = parse(code);
	          traverse.removeProperties(ast);
	          return ast.program;
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],200:[function(require,module,exports){
	(function (process){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("inline-environment-variables", {
	    metadata: {
	      group: "builtin-pre"
	    },

	    visitor: {
	      MemberExpression: function MemberExpression(node) {
	        if (this.get("object").matchesPattern("process.env")) {
	          var key = this.toComputedKey();
	          if (t.isLiteral(key)) {
	            return t.valueToNode(process.env[key.value]);
	          }
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	}).call(this,require('_process'))
	},{"_process":14}],201:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("jscript", {
	    metadata: {
	      group: "builtin-trailing"
	    },

	    visitor: {
	      FunctionExpression: {
	        exit: function exit(node) {
	          if (!node.id) return;
	          node._ignoreUserWhitespace = true;

	          return t.callExpression(t.functionExpression(null, [], t.blockStatement([t.toStatement(node), t.returnStatement(node.id)])), []);
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],202:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("member-expression-literals", {
	    metadata: {
	      group: "builtin-trailing"
	    },

	    visitor: {
	      MemberExpression: {
	        exit: function exit(node) {
	          var prop = node.property;
	          if (node.computed && t.isLiteral(prop) && t.isValidIdentifier(prop.value)) {
	            // foo["bar"] => foo.bar
	            node.property = t.identifier(prop.value);
	            node.computed = false;
	          }
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],203:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("property-literals", {
	    metadata: {
	      group: "builtin-trailing"
	    },

	    visitor: {
	      Property: {
	        exit: function exit(node) {
	          var key = node.key;
	          if (t.isLiteral(key) && t.isValidIdentifier(key.value)) {
	            // "foo": "bar" -> foo: "bar"
	            node.key = t.identifier(key.value);
	            node.computed = false;
	          }
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],204:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _lodashArrayPull = require("lodash/array/pull");

	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  function isProtoKey(node) {
	    return t.isLiteral(t.toComputedKey(node, node.key), { value: "__proto__" });
	  }

	  function isProtoAssignmentExpression(node) {
	    var left = node.left;
	    return t.isMemberExpression(left) && t.isLiteral(t.toComputedKey(left, left.property), { value: "__proto__" });
	  }

	  function buildDefaultsCallExpression(expr, ref, file) {
	    return t.expressionStatement(t.callExpression(file.addHelper("defaults"), [ref, expr.right]));
	  }

	  return new Plugin("proto-to-assign", {
	    metadata: {
	      secondPass: true
	    },

	    visitor: {
	      AssignmentExpression: function AssignmentExpression(node, parent, scope, file) {
	        if (!isProtoAssignmentExpression(node)) return;

	        var nodes = [];
	        var left = node.left.object;
	        var temp = scope.maybeGenerateMemoised(left);

	        if (temp) nodes.push(t.expressionStatement(t.assignmentExpression("=", temp, left)));
	        nodes.push(buildDefaultsCallExpression(node, temp || left, file));
	        if (temp) nodes.push(temp);

	        return nodes;
	      },

	      ExpressionStatement: function ExpressionStatement(node, parent, scope, file) {
	        var expr = node.expression;
	        if (!t.isAssignmentExpression(expr, { operator: "=" })) return;

	        if (isProtoAssignmentExpression(expr)) {
	          return buildDefaultsCallExpression(expr, expr.left.object, file);
	        }
	      },

	      ObjectExpression: function ObjectExpression(node, parent, scope, file) {
	        var proto;

	        for (var i = 0; i < node.properties.length; i++) {
	          var prop = node.properties[i];

	          if (isProtoKey(prop)) {
	            proto = prop.value;
	            (0, _lodashArrayPull2["default"])(node.properties, prop);
	          }
	        }

	        if (proto) {
	          var args = [t.objectExpression([]), proto];
	          if (node.properties.length) args.push(node);
	          return t.callExpression(file.addHelper("extends"), args);
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{"lodash/array/pull":336}],205:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;

	  var immutabilityVisitor = {
	    enter: function enter(node, parent, scope, state) {
	      var _this = this;

	      var stop = function stop() {
	        state.isImmutable = false;
	        _this.stop();
	      };

	      if (this.isJSXClosingElement()) {
	        this.skip();
	        return;
	      }

	      if (this.isJSXIdentifier({ name: "ref" }) && this.parentPath.isJSXAttribute({ name: node })) {
	        return stop();
	      }

	      if (this.isJSXIdentifier() || this.isIdentifier() || this.isJSXMemberExpression()) {
	        return;
	      }

	      if (!this.isImmutable()) stop();
	    }
	  };

	  return new Plugin("react-constant-elements", {
	    metadata: {
	      group: "builtin-basic"
	    },

	    visitor: {
	      JSXElement: function JSXElement(node) {
	        if (node._hoisted) return;

	        var state = { isImmutable: true };
	        this.traverse(immutabilityVisitor, state);

	        if (state.isImmutable) {
	          this.hoist();
	        } else {
	          node._hoisted = true;
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],206:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  function addDisplayName(id, call) {
	    var props = call.arguments[0].properties;
	    var safe = true;

	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var key = t.toComputedKey(prop);
	      if (t.isLiteral(key, { value: "displayName" })) {
	        safe = false;
	        break;
	      }
	    }

	    if (safe) {
	      props.unshift(t.property("init", t.identifier("displayName"), t.literal(id)));
	    }
	  }

	  var isCreateClassCallExpression = t.buildMatchMemberExpression("React.createClass");

	  function isCreateClass(node) {
	    if (!node || !t.isCallExpression(node)) return false;

	    // not React.createClass call member object
	    if (!isCreateClassCallExpression(node.callee)) return false;

	    // no call arguments
	    var args = node.arguments;
	    if (args.length !== 1) return false;

	    // first node arg is not an object
	    var first = args[0];
	    if (!t.isObjectExpression(first)) return false;

	    return true;
	  }

	  return new Plugin("react-display-name", {
	    metadata: {
	      group: "builtin-pre"
	    },

	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope, file) {
	        if (isCreateClass(node.declaration)) {
	          addDisplayName(file.opts.basename, node.declaration);
	        }
	      },

	      "AssignmentExpression|Property|VariableDeclarator": function AssignmentExpressionPropertyVariableDeclarator(node) {
	        var left, right;

	        if (t.isAssignmentExpression(node)) {
	          left = node.left;
	          right = node.right;
	        } else if (t.isProperty(node)) {
	          left = node.key;
	          right = node.value;
	        } else if (t.isVariableDeclarator(node)) {
	          left = node.id;
	          right = node.init;
	        }

	        if (t.isMemberExpression(left)) {
	          left = left.property;
	        }

	        if (t.isIdentifier(left) && isCreateClass(right)) {
	          addDisplayName(left.name, right);
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],207:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("remove-console", {
	    metadata: {
	      group: "builtin-pre"
	    },

	    visitor: {
	      CallExpression: function CallExpression() {
	        if (this.get("callee").matchesPattern("console", true)) {
	          this.dangerouslyRemove();
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],208:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("remove-debugger", {
	    metadata: {
	      group: "builtin-pre"
	    },

	    visitor: {
	      DebuggerStatement: function DebuggerStatement() {
	        this.dangerouslyRemove();
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],209:[function(require,module,exports){
	module.exports={
	  "builtins": {
	    "Symbol": "symbol",
	    "Promise": "promise",
	    "Map": "map",
	    "WeakMap": "weak-map",
	    "Set": "set",
	    "WeakSet": "weak-set"
	  },

	  "methods": {
	    "Array": {
	      "concat": "array/concat",
	      "copyWithin": "array/copy-within",
	      "entries": "array/entries",
	      "every": "array/every",
	      "fill": "array/fill",
	      "filter": "array/filter",
	      "findIndex": "array/find-index",
	      "find": "array/find",
	      "forEach": "array/for-each",
	      "from": "array/from",
	      "includes": "array/includes",
	      "indexOf": "array/index-of",
	      "join": "array/join",
	      "keys": "array/keys",
	      "lastIndexOf": "array/last-index-of",
	      "map": "array/map",
	      "of": "array/of",
	      "pop": "array/pop",
	      "push": "array/push",
	      "reduceRight": "array/reduce-right",
	      "reduce": "array/reduce",
	      "reverse": "array/reverse",
	      "shift": "array/shift",
	      "slice": "array/slice",
	      "some": "array/some",
	      "sort": "array/sort",
	      "splice": "array/splice",
	      "turn": "array/turn",
	      "unshift": "array/unshift",
	      "values": "array/values"
	    },

	    "Object": {
	      "assign": "object/assign",
	      "classof": "object/classof",
	      "create": "object/create",
	      "define": "object/define",
	      "defineProperties": "object/define-properties",
	      "defineProperty": "object/define-property",
	      "entries": "object/entries",
	      "freeze": "object/freeze",
	      "getOwnPropertyDescriptor": "object/get-own-property-descriptor",
	      "getOwnPropertyDescriptors": "object/get-own-property-descriptors",
	      "getOwnPropertyNames": "object/get-own-property-names",
	      "getOwnPropertySymbols": "object/get-own-property-symbols",
	      "getPrototypePf": "object/get-prototype-of",
	      "index": "object/index",
	      "isExtensible": "object/is-extensible",
	      "isFrozen": "object/is-frozen",
	      "isObject": "object/is-object",
	      "isSealed": "object/is-sealed",
	      "is": "object/is",
	      "keys": "object/keys",
	      "make": "object/make",
	      "preventExtensions": "object/prevent-extensions",
	      "seal": "object/seal",
	      "setPrototypeOf": "object/set-prototype-of",
	      "values": "object/values"
	    },

	    "RegExp": {
	      "escape": "regexp/escape"
	    },

	    "Function": {
	      "only": "function/only",
	      "part": "function/part"
	    },

	    "Math": {
	      "acosh": "math/acosh",
	      "asinh": "math/asinh",
	      "atanh": "math/atanh",
	      "cbrt": "math/cbrt",
	      "clz32": "math/clz32",
	      "cosh": "math/cosh",
	      "expm1": "math/expm1",
	      "fround": "math/fround",
	      "hypot": "math/hypot",
	      "pot": "math/pot",
	      "imul": "math/imul",
	      "log10": "math/log10",
	      "log1p": "math/log1p",
	      "log2": "math/log2",
	      "sign": "math/sign",
	      "sinh": "math/sinh",
	      "tanh": "math/tanh",
	      "trunc": "math/trunc"
	    },

	    "Date": {
	      "addLocale": "date/add-locale",
	      "formatUTC": "date/format-utc",
	      "format": "date/format"
	    },

	    "Symbol": {
	      "for": "symbol/for",
	      "hasInstance": "symbol/has-instance",
	      "is-concat-spreadable": "symbol/is-concat-spreadable",
	      "iterator": "symbol/iterator",
	      "keyFor": "symbol/key-for",
	      "match": "symbol/match",
	      "replace": "symbol/replace",
	      "search": "symbol/search",
	      "species": "symbol/species",
	      "split": "symbol/split",
	      "toPrimitive": "symbol/to-primitive",
	      "toStringTag": "symbol/to-string-tag",
	      "unscopables": "symbol/unscopables"
	    },

	    "String": {
	      "at": "string/at",
	      "codePointAt": "string/code-point-at",
	      "endsWith": "string/ends-with",
	      "escapeHTML": "string/escape-html",
	      "fromCodePoint": "string/from-code-point",
	      "includes": "string/includes",
	      "raw": "string/raw",
	      "repeat": "string/repeat",
	      "startsWith": "string/starts-with",
	      "unescapeHTML": "string/unescape-html"
	    },

	    "Number": {
	      "EPSILON": "number/epsilon",
	      "isFinite": "number/is-finite",
	      "isInteger": "number/is-integer",
	      "isNaN": "number/is-nan",
	      "isSafeInteger": "number/is-safe-integer",
	      "MAX_SAFE_INTEGER": "number/max-safe-integer",
	      "MIN_SAFE_INTEGER": "number/min-safe-integer",
	      "parseFloat": "number/parse-float",
	      "parseInt": "number/parse-int",
	      "random": "number/random"
	    },

	    "Reflect": {
	      "apply": "reflect/apply",
	      "construct": "reflect/construct",
	      "defineProperty": "reflect/define-property",
	      "deleteProperty": "reflect/delete-property",
	      "enumerate": "reflect/enumerate",
	      "getOwnPropertyDescriptor": "reflect/get-own-property-descriptor",
	      "getPrototypeOf": "reflect/get-prototype-of",
	      "get": "reflect/get",
	      "has": "reflect/has",
	      "isExtensible": "reflect/is-extensible",
	      "ownKeys": "reflect/own-keys",
	      "preventExtensions": "reflect/prevent-extensions",
	      "setPrototypeOf": "reflect/set-prototype-of",
	      "set": "reflect/set"
	    }
	  }
	}

	},{}],210:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _definitions = require("./definitions");

	var _definitions2 = _interopRequireDefault(_definitions);

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  var RUNTIME_MODULE_NAME = "babel-runtime";

	  function has(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	  }

	  return new Plugin("runtime", {
	    metadata: {
	      group: "builtin-post-modules"
	    },

	    pre: function pre(file) {
	      file.set("helperGenerator", function (name) {
	        return file.addImport(RUNTIME_MODULE_NAME + "/helpers/" + name, name, "absoluteDefault");
	      });

	      file.setDynamic("regeneratorIdentifier", function () {
	        return file.addImport(RUNTIME_MODULE_NAME + "/regenerator", "regeneratorRuntime", "absoluteDefault");
	      });
	    },

	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, file) {
	        if (node.name === "regeneratorRuntime") {
	          return file.get("regeneratorIdentifier");
	        }

	        if (t.isMemberExpression(parent)) return;
	        if (!has(_definitions2["default"].builtins, node.name)) return;
	        if (scope.getBindingIdentifier(node.name)) return;

	        // Symbol() -> _core.Symbol(); new Promise -> new _core.Promise
	        var modulePath = _definitions2["default"].builtins[node.name];
	        return file.addImport(RUNTIME_MODULE_NAME + "/core-js/" + modulePath, node.name, "absoluteDefault");
	      },

	      CallExpression: function CallExpression(node, parent, scope, file) {
	        // arr[Symbol.iterator]() -> _core.$for.getIterator(arr)

	        if (node.arguments.length) return;

	        var callee = node.callee;
	        if (!t.isMemberExpression(callee)) return;
	        if (!callee.computed) return;
	        if (!this.get("callee.property").matchesPattern("Symbol.iterator")) return;

	        return t.callExpression(file.addImport(RUNTIME_MODULE_NAME + "/core-js/get-iterator", "getIterator", "absoluteDefault"), [callee.object]);
	      },

	      BinaryExpression: function BinaryExpression(node, parent, scope, file) {
	        // Symbol.iterator in arr -> core.$for.isIterable(arr)

	        if (node.operator !== "in") return;
	        if (!this.get("left").matchesPattern("Symbol.iterator")) return;

	        return t.callExpression(file.addImport(RUNTIME_MODULE_NAME + "/core-js/is-iterable", "isIterable", "absoluteDefault"), [node.right]);
	      },

	      MemberExpression: {
	        enter: function enter(node, parent, scope, file) {
	          // Array.from -> _core.Array.from

	          if (!this.isReferenced()) return;

	          var obj = node.object;
	          var prop = node.property;

	          if (!t.isReferenced(obj, node)) return;

	          if (node.computed) return;

	          if (!has(_definitions2["default"].methods, obj.name)) return;

	          var methods = _definitions2["default"].methods[obj.name];
	          if (!has(methods, prop.name)) return;

	          // doesn't reference the global
	          if (scope.getBindingIdentifier(obj.name)) return;

	          // special case Object.defineProperty to not use core-js when using string keys
	          if (obj.name === "Object" && prop.name === "defineProperty" && this.parentPath.isCallExpression()) {
	            var call = this.parentPath.node;
	            if (call.arguments.length === 3 && t.isLiteral(call.arguments[1])) return;
	          }

	          var modulePath = methods[prop.name];
	          return file.addImport(RUNTIME_MODULE_NAME + "/core-js/" + modulePath, obj.name + "$" + prop.name, "absoluteDefault");
	        },

	        exit: function exit(node, parent, scope, file) {
	          if (!this.isReferenced()) return;

	          var prop = node.property;
	          var obj = node.object;

	          if (!has(_definitions2["default"].builtins, obj.name)) return;
	          if (scope.getBindingIdentifier(obj.name)) return;

	          var modulePath = _definitions2["default"].builtins[obj.name];
	          return t.memberExpression(file.addImport(RUNTIME_MODULE_NAME + "/core-js/" + modulePath, "" + obj.name, "absoluteDefault"), prop);
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{"./definitions":209}],211:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _leven = require("leven");

	var _leven2 = _interopRequireDefault(_leven);

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;
	  var messages = _ref.messages;

	  return new Plugin("undeclared-variables-check", {
	    metadata: {
	      group: "builtin-pre"
	    },

	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope) {
	        var binding = scope.getBinding(node.name);
	        if (binding && binding.kind === "type" && !this.parentPath.isFlow()) {
	          throw this.errorWithNode(messages.get("undeclaredVariableType", node.name), ReferenceError);
	        }

	        if (scope.hasBinding(node.name)) return;

	        // get the closest declaration to offer as a suggestion
	        // the variable name may have just been mistyped

	        var bindings = scope.getAllBindings();

	        var closest;
	        var shortest = -1;

	        for (var name in bindings) {
	          var distance = (0, _leven2["default"])(node.name, name);
	          if (distance <= 0 || distance > 3) continue;
	          if (distance <= shortest) continue;

	          closest = name;
	          shortest = distance;
	        }

	        var msg;
	        if (closest) {
	          msg = messages.get("undeclaredVariableSuggestion", node.name, closest);
	        } else {
	          msg = messages.get("undeclaredVariable", node.name);
	        }

	        //

	        throw this.errorWithNode(msg, ReferenceError);
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{"leven":212}],212:[function(require,module,exports){
	'use strict';
	var arr = [];
	var charCodeCache = [];

	module.exports = function (a, b) {
		if (a === b) {
			return 0;
		}

		var aLen = a.length;
		var bLen = b.length;

		if (aLen === 0) {
			return bLen;
		}

		if (bLen === 0) {
			return aLen;
		}

		var bCharCode;
		var ret;
		var tmp;
		var tmp2;
		var i = 0;
		var j = 0;

		while (i < aLen) {
			charCodeCache[i] = a.charCodeAt(i);
			arr[i] = ++i;
		}

		while (j < bLen) {
			bCharCode = b.charCodeAt(j);
			tmp = j++;
			ret = j;

			for (i = 0; i < aLen; i++) {
				tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + 1;
				tmp = arr[i];
				ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
			}
		}

		return ret;
	};

	},{}],213:[function(require,module,exports){
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (_ref) {
	  var Plugin = _ref.Plugin;
	  var t = _ref.types;

	  return new Plugin("undefined-to-void", {
	    metadata: {
	      group: "builtin-basic"
	    },

	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(node, parent) {
	        if (node.name === "undefined") {
	          return t.unaryExpression("void", t.literal(0), true);
	        }
	      }
	    }
	  });
	};

	module.exports = exports["default"];
	},{}],214:[function(require,module,exports){
	(function (process){
	'use strict';
	var escapeStringRegexp = require('escape-string-regexp');
	var ansiStyles = require('ansi-styles');
	var stripAnsi = require('strip-ansi');
	var hasAnsi = require('has-ansi');
	var supportsColor = require('supports-color');
	var defineProps = Object.defineProperties;
	var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);

	function Chalk(options) {
		// detect mode if not set manually
		this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
	}

	// use bright blue on Windows as the normal blue color is illegible
	if (isSimpleWindowsTerm) {
		ansiStyles.blue.open = '\u001b[94m';
	}

	var styles = (function () {
		var ret = {};

		Object.keys(ansiStyles).forEach(function (key) {
			ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

			ret[key] = {
				get: function () {
					return build.call(this, this._styles.concat(key));
				}
			};
		});

		return ret;
	})();

	var proto = defineProps(function chalk() {}, styles);

	function build(_styles) {
		var builder = function builder() {
			return applyStyle.apply(builder, arguments);
		};

		builder._styles = _styles;
		builder.enabled = this.enabled;
		// __proto__ is used because we must return a function, but there is
		// no way to create a function with a different prototype.
		/*eslint no-proto: 0 */
		builder.__proto__ = proto;

		return builder;
	}

	function applyStyle() {
		// support varags, but simply cast to string in case there's only one arg
		var args = arguments;
		var argsLen = args.length;
		var str = argsLen !== 0 && String(arguments[0]);

		if (argsLen > 1) {
			// don't slice `arguments`, it prevents v8 optimizations
			for (var a = 1; a < argsLen; a++) {
				str += ' ' + args[a];
			}
		}

		if (!this.enabled || !str) {
			return str;
		}

		var nestedStyles = this._styles;
		var i = nestedStyles.length;

		// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
		// see https://github.com/chalk/chalk/issues/58
		// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
		var originalDim = ansiStyles.dim.open;
		if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
			ansiStyles.dim.open = '';
		}

		while (i--) {
			var code = ansiStyles[nestedStyles[i]];

			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			str = code.open + str.replace(code.closeRe, code.open) + code.close;
		}

		// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.
		ansiStyles.dim.open = originalDim;

		return str;
	}

	function init() {
		var ret = {};

		Object.keys(styles).forEach(function (name) {
			ret[name] = {
				get: function () {
					return build.call(this, [name]);
				}
			};
		});

		return ret;
	}

	defineProps(Chalk.prototype, init());

	module.exports = new Chalk();
	module.exports.styles = ansiStyles;
	module.exports.hasColor = hasAnsi;
	module.exports.stripColor = stripAnsi;
	module.exports.supportsColor = supportsColor;

	}).call(this,require('_process'))
	},{"_process":14,"ansi-styles":215,"escape-string-regexp":216,"has-ansi":217,"strip-ansi":219,"supports-color":221}],215:[function(require,module,exports){
	'use strict';

	function assembleStyles () {
		var styles = {
			modifiers: {
				reset: [0, 0],
				bold: [1, 22], // 21 isn't widely supported and 22 does the same thing
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			colors: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],
				gray: [90, 39]
			},
			bgColors: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49]
			}
		};

		// fix humans
		styles.colors.grey = styles.colors.gray;

		Object.keys(styles).forEach(function (groupName) {
			var group = styles[groupName];

			Object.keys(group).forEach(function (styleName) {
				var style = group[styleName];

				styles[styleName] = group[styleName] = {
					open: '\u001b[' + style[0] + 'm',
					close: '\u001b[' + style[1] + 'm'
				};
			});

			Object.defineProperty(styles, groupName, {
				value: group,
				enumerable: false
			});
		});

		return styles;
	}

	Object.defineProperty(module, 'exports', {
		enumerable: true,
		get: assembleStyles
	});

	},{}],216:[function(require,module,exports){
	'use strict';

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		return str.replace(matchOperatorsRe,  '\\$&');
	};

	},{}],217:[function(require,module,exports){
	'use strict';
	var ansiRegex = require('ansi-regex');
	var re = new RegExp(ansiRegex().source); // remove the `g` flag
	module.exports = re.test.bind(re);

	},{"ansi-regex":218}],218:[function(require,module,exports){
	'use strict';
	module.exports = function () {
		return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
	};

	},{}],219:[function(require,module,exports){
	'use strict';
	var ansiRegex = require('ansi-regex')();

	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};

	},{"ansi-regex":220}],220:[function(require,module,exports){
	arguments[4][218][0].apply(exports,arguments)
	},{"dup":218}],221:[function(require,module,exports){
	(function (process){
	'use strict';
	var argv = process.argv;

	var terminator = argv.indexOf('--');
	var hasFlag = function (flag) {
		flag = '--' + flag;
		var pos = argv.indexOf(flag);
		return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
	};

	module.exports = (function () {
		if ('FORCE_COLOR' in process.env) {
			return true;
		}

		if (hasFlag('no-color') ||
			hasFlag('no-colors') ||
			hasFlag('color=false')) {
			return false;
		}

		if (hasFlag('color') ||
			hasFlag('colors') ||
			hasFlag('color=true') ||
			hasFlag('color=always')) {
			return true;
		}

		if (process.stdout && !process.stdout.isTTY) {
			return false;
		}

		if (process.platform === 'win32') {
			return true;
		}

		if ('COLORTERM' in process.env) {
			return true;
		}

		if (process.env.TERM === 'dumb') {
			return false;
		}

		if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
			return true;
		}

		return false;
	})();

	}).call(this,require('_process'))
	},{"_process":14}],222:[function(require,module,exports){
	(function (Buffer){
	'use strict';
	var fs = require('fs');
	var path = require('path');

	var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
	var mapFileCommentRx =
	  // //# sourceMappingURL=foo.js.map                       
	  /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg

	function decodeBase64(base64) {
	  return new Buffer(base64, 'base64').toString();
	}

	function stripComment(sm) {
	  return sm.split(',').pop();
	}

	function readFromFileMap(sm, dir) {
	  // NOTE: this will only work on the server since it attempts to read the map file

	  var r = mapFileCommentRx.exec(sm);
	  mapFileCommentRx.lastIndex = 0;
	  
	  // for some odd reason //# .. captures in 1 and /* .. */ in 2
	  var filename = r[1] || r[2];
	  var filepath = path.join(dir, filename);

	  try {
	    return fs.readFileSync(filepath, 'utf8');
	  } catch (e) {
	    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
	  }
	}

	function Converter (sm, opts) {
	  opts = opts || {};

	  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
	  if (opts.hasComment) sm = stripComment(sm);
	  if (opts.isEncoded) sm = decodeBase64(sm);
	  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

	  this.sourcemap = sm;
	}

	function convertFromLargeSource(content){
	  var lines = content.split('\n');
	  var line;
	  // find first line which contains a source map starting at end of content 
	  for (var i = lines.length - 1; i > 0; i--) {
	    line = lines[i]
	    if (~line.indexOf('sourceMappingURL=data:')) return exports.fromComment(line);
	  }
	}

	Converter.prototype.toJSON = function (space) {
	  return JSON.stringify(this.sourcemap, null, space);
	};

	Converter.prototype.toBase64 = function () {
	  var json = this.toJSON();
	  return new Buffer(json).toString('base64');
	};

	Converter.prototype.toComment = function (options) {
	  var base64 = this.toBase64();
	  var data = 'sourceMappingURL=data:application/json;base64,' + base64;
	  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
	};

	// returns copy instead of original
	Converter.prototype.toObject = function () {
	  return JSON.parse(this.toJSON());
	};

	Converter.prototype.addProperty = function (key, value) {
	  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
	  return this.setProperty(key, value);
	};

	Converter.prototype.setProperty = function (key, value) {
	  this.sourcemap[key] = value;
	  return this;
	};

	Converter.prototype.getProperty = function (key) {
	  return this.sourcemap[key];
	};

	exports.fromObject = function (obj) {
	  return new Converter(obj);
	};

	exports.fromJSON = function (json) {
	  return new Converter(json, { isJSON: true });
	};

	exports.fromBase64 = function (base64) {
	  return new Converter(base64, { isEncoded: true });
	};

	exports.fromComment = function (comment) {
	  comment = comment
	    .replace(/^\/\*/g, '//')
	    .replace(/\*\/$/g, '');

	  return new Converter(comment, { isEncoded: true, hasComment: true });
	};

	exports.fromMapFileComment = function (comment, dir) {
	  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromSource = function (content, largeSource) {
	  if (largeSource) return convertFromLargeSource(content);

	  var m = content.match(commentRx);
	  commentRx.lastIndex = 0;
	  return m ? exports.fromComment(m.pop()) : null;
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromMapFileSource = function (content, dir) {
	  var m = content.match(mapFileCommentRx);
	  mapFileCommentRx.lastIndex = 0;
	  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
	};

	exports.removeComments = function (src) {
	  commentRx.lastIndex = 0;
	  return src.replace(commentRx, '');
	};

	exports.removeMapFileComments = function (src) {
	  mapFileCommentRx.lastIndex = 0;
	  return src.replace(mapFileCommentRx, '');
	};

	Object.defineProperty(exports, 'commentRegex', {
	  get: function getCommentRegex () {
	    commentRx.lastIndex = 0;
	    return commentRx;
	  }
	});

	Object.defineProperty(exports, 'mapFileCommentRegex', {
	  get: function getMapFileCommentRegex () {
	    mapFileCommentRx.lastIndex = 0;
	    return mapFileCommentRx;
	  }
	});

	}).call(this,require("buffer").Buffer)
	},{"buffer":5,"fs":4,"path":12}],223:[function(require,module,exports){
	// false -> Array#indexOf
	// true  -> Array#includes
	var $ = require('./$');
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = $.toObject($this)
	      , length = $.toLength(O.length)
	      , index  = $.toIndex(fromIndex, length)
	      , value;
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index;
	    } return !IS_INCLUDES && -1;
	  };
	};
	},{"./$":244}],224:[function(require,module,exports){
	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var $   = require('./$')
	  , ctx = require('./$.ctx');
	module.exports = function(TYPE){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
	  return function($this, callbackfn, that){
	    var O      = Object($.assertDefined($this))
	      , self   = $.ES5Object(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = $.toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};
	},{"./$":244,"./$.ctx":232}],225:[function(require,module,exports){
	var $ = require('./$');
	function assert(condition, msg1, msg2){
	  if(!condition)throw TypeError(msg2 ? msg1 + msg2 : msg1);
	}
	assert.def = $.assertDefined;
	assert.fn = function(it){
	  if(!$.isFunction(it))throw TypeError(it + ' is not a function!');
	  return it;
	};
	assert.obj = function(it){
	  if(!$.isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	assert.inst = function(it, Constructor, name){
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
	  return it;
	};
	module.exports = assert;
	},{"./$":244}],226:[function(require,module,exports){
	var $        = require('./$')
	  , enumKeys = require('./$.enum-keys');
	// 19.1.2.1 Object.assign(target, source, ...)
	/* eslint-disable no-unused-vars */
	module.exports = Object.assign || function assign(target, source){
	/* eslint-enable no-unused-vars */
	  var T = Object($.assertDefined(target))
	    , l = arguments.length
	    , i = 1;
	  while(l > i){
	    var S      = $.ES5Object(arguments[i++])
	      , keys   = enumKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)T[key = keys[j++]] = S[key];
	  }
	  return T;
	};
	},{"./$":244,"./$.enum-keys":235}],227:[function(require,module,exports){
	var $        = require('./$')
	  , TAG      = require('./$.wks')('toStringTag')
	  , toString = {}.toString;
	function cof(it){
	  return toString.call(it).slice(8, -1);
	}
	cof.classof = function(it){
	  var O, T;
	  return it == undefined ? it === undefined ? 'Undefined' : 'Null'
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
	};
	cof.set = function(it, tag, stat){
	  if(it && !$.has(it = stat ? it : it.prototype, TAG))$.hide(it, TAG, tag);
	};
	module.exports = cof;
	},{"./$":244,"./$.wks":262}],228:[function(require,module,exports){
	'use strict';
	var $        = require('./$')
	  , ctx      = require('./$.ctx')
	  , safe     = require('./$.uid').safe
	  , assert   = require('./$.assert')
	  , forOf    = require('./$.for-of')
	  , step     = require('./$.iter').step
	  , $has     = $.has
	  , set      = $.set
	  , isObject = $.isObject
	  , hide     = $.hide
	  , isExtensible = Object.isExtensible || isObject
	  , ID       = safe('id')
	  , O1       = safe('O1')
	  , LAST     = safe('last')
	  , FIRST    = safe('first')
	  , ITER     = safe('iter')
	  , SIZE     = $.DESC ? safe('size') : 'size'
	  , id       = 0;

	function fastKey(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!$has(it, ID)){
	    // can't set id to frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add id
	    if(!create)return 'E';
	    // add missing object id
	    hide(it, ID, ++id);
	  // return object id with prefix
	  } return 'O' + it[ID];
	}

	function getEntry(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that[O1][index];
	  // frozen object case
	  for(entry = that[FIRST]; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	}

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      assert.inst(that, C, NAME);
	      set(that, O1, $.create(null));
	      set(that, SIZE, 0);
	      set(that, LAST, undefined);
	      set(that, FIRST, undefined);
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    require('./$.mix')(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that[FIRST] = that[LAST] = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that[O1][entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that[FIRST] == entry)that[FIRST] = next;
	          if(that[LAST] == entry)that[LAST] = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        var f = ctx(callbackfn, arguments[1], 3)
	          , entry;
	        while(entry = entry ? entry.n : this[FIRST]){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if($.DESC)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return assert.def(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that[LAST] = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that[LAST],          // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that[FIRST])that[FIRST] = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that[O1][index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  // add .keys, .values, .entries, [@@iterator]
	  // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	  setIter: function(C, NAME, IS_MAP){
	    require('./$.iter-define')(C, NAME, function(iterated, kind){
	      set(this, ITER, {o: iterated, k: kind});
	    }, function(){
	      var iter  = this[ITER]
	        , kind  = iter.k
	        , entry = iter.l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])){
	        // or finish the iteration
	        iter.o = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	  }
	};
	},{"./$":244,"./$.assert":225,"./$.ctx":232,"./$.for-of":236,"./$.iter":243,"./$.iter-define":241,"./$.mix":246,"./$.uid":260}],229:[function(require,module,exports){
	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $def  = require('./$.def')
	  , forOf = require('./$.for-of');
	module.exports = function(NAME){
	  $def($def.P, NAME, {
	    toJSON: function toJSON(){
	      var arr = [];
	      forOf(this, false, arr.push, arr);
	      return arr;
	    }
	  });
	};
	},{"./$.def":233,"./$.for-of":236}],230:[function(require,module,exports){
	'use strict';
	var $         = require('./$')
	  , safe      = require('./$.uid').safe
	  , assert    = require('./$.assert')
	  , forOf     = require('./$.for-of')
	  , $has      = $.has
	  , isObject  = $.isObject
	  , hide      = $.hide
	  , isExtensible = Object.isExtensible || isObject
	  , id        = 0
	  , ID        = safe('id')
	  , WEAK      = safe('weak')
	  , LEAK      = safe('leak')
	  , method    = require('./$.array-methods')
	  , find      = method(5)
	  , findIndex = method(6);
	function findFrozen(store, key){
	  return find(store.array, function(it){
	    return it[0] === key;
	  });
	}
	// fallback for frozen keys
	function leakStore(that){
	  return that[LEAK] || hide(that, LEAK, {
	    array: [],
	    get: function(key){
	      var entry = findFrozen(this, key);
	      if(entry)return entry[1];
	    },
	    has: function(key){
	      return !!findFrozen(this, key);
	    },
	    set: function(key, value){
	      var entry = findFrozen(this, key);
	      if(entry)entry[1] = value;
	      else this.array.push([key, value]);
	    },
	    'delete': function(key){
	      var index = findIndex(this.array, function(it){
	        return it[0] === key;
	      });
	      if(~index)this.array.splice(index, 1);
	      return !!~index;
	    }
	  })[LEAK];
	}

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      $.set(assert.inst(that, C, NAME), ID, id++);
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    require('./$.mix')(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        if(!isExtensible(key))return leakStore(this)['delete'](key);
	        return $has(key, WEAK) && $has(key[WEAK], this[ID]) && delete key[WEAK][this[ID]];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        if(!isExtensible(key))return leakStore(this).has(key);
	        return $has(key, WEAK) && $has(key[WEAK], this[ID]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    if(!isExtensible(assert.obj(key))){
	      leakStore(that).set(key, value);
	    } else {
	      $has(key, WEAK) || hide(key, WEAK, {});
	      key[WEAK][that[ID]] = value;
	    } return that;
	  },
	  leakStore: leakStore,
	  WEAK: WEAK,
	  ID: ID
	};
	},{"./$":244,"./$.array-methods":224,"./$.assert":225,"./$.for-of":236,"./$.mix":246,"./$.uid":260}],231:[function(require,module,exports){
	'use strict';
	var $     = require('./$')
	  , $def  = require('./$.def')
	  , BUGGY = require('./$.iter').BUGGY
	  , forOf = require('./$.for-of')
	  , species = require('./$.species')
	  , assertInstance = require('./$.assert').inst;

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = $.g[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  function fixMethod(KEY){
	    var fn = proto[KEY];
	    require('./$.redef')(proto, KEY,
	      KEY == 'delete' ? function(a){ return fn.call(this, a === 0 ? 0 : a); }
	      : KEY == 'has' ? function has(a){ return fn.call(this, a === 0 ? 0 : a); }
	      : KEY == 'get' ? function get(a){ return fn.call(this, a === 0 ? 0 : a); }
	      : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	      : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  }
	  if(!$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    require('./$.mix')(C.prototype, methods);
	  } else {
	    var inst  = new C
	      , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)
	      , buggyZero;
	    // wrap for init collections from iterable
	    if(!require('./$.iter-detect')(function(iter){ new C(iter); })){ // eslint-disable-line no-new
	      C = wrapper(function(target, iterable){
	        assertInstance(target, C, NAME);
	        var that = new Base;
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    IS_WEAK || inst.forEach(function(val, key){
	      buggyZero = 1 / key === -Infinity;
	    });
	    // fix converting -0 key to +0
	    if(buggyZero){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    // + fix .add & .set for chaining
	    if(buggyZero || chain !== inst)fixMethod(ADDER);
	  }

	  require('./$.cof').set(C, NAME);

	  O[NAME] = C;
	  $def($def.G + $def.W + $def.F * (C != Base), O);
	  species(C);
	  species($.core[NAME]); // for wrapper

	  if(!IS_WEAK)common.setIter(C, NAME, IS_MAP);

	  return C;
	};
	},{"./$":244,"./$.assert":225,"./$.cof":227,"./$.def":233,"./$.for-of":236,"./$.iter":243,"./$.iter-detect":242,"./$.mix":246,"./$.redef":249,"./$.species":254}],232:[function(require,module,exports){
	// Optional / simple context binding
	var assertFunction = require('./$.assert').fn;
	module.exports = function(fn, that, length){
	  assertFunction(fn);
	  if(~length && that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  } return function(/* ...args */){
	      return fn.apply(that, arguments);
	    };
	};
	},{"./$.assert":225}],233:[function(require,module,exports){
	var $          = require('./$')
	  , global     = $.g
	  , core       = $.core
	  , isFunction = $.isFunction
	  , $redef     = require('./$.redef');
	function ctx(fn, that){
	  return function(){
	    return fn.apply(that, arguments);
	  };
	}
	global.core = core;
	// type bitmap
	$def.F = 1;  // forced
	$def.G = 2;  // global
	$def.S = 4;  // static
	$def.P = 8;  // proto
	$def.B = 16; // bind
	$def.W = 32; // wrap
	function $def(type, name, source){
	  var key, own, out, exp
	    , isGlobal = type & $def.G
	    , isProto  = type & $def.P
	    , target   = isGlobal ? global : type & $def.S
	        ? global[name] : (global[name] || {}).prototype
	    , exports  = isGlobal ? core : core[name] || (core[name] = {});
	  if(isGlobal)source = name;
	  for(key in source){
	    // contains in native
	    own = !(type & $def.F) && target && key in target;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    if(type & $def.B && own)exp = ctx(out, global);
	    else exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
	    // extend global
	    if(target && !own)$redef(target, key, out);
	    // export
	    if(exports[key] != out)$.hide(exports, key, exp);
	    if(isProto)(exports.prototype || (exports.prototype = {}))[key] = out;
	  }
	}
	module.exports = $def;
	},{"./$":244,"./$.redef":249}],234:[function(require,module,exports){
	var $        = require('./$')
	  , document = $.g.document
	  , isObject = $.isObject
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};
	},{"./$":244}],235:[function(require,module,exports){
	var $ = require('./$');
	module.exports = function(it){
	  var keys       = $.getKeys(it)
	    , getDesc    = $.getDesc
	    , getSymbols = $.getSymbols;
	  if(getSymbols)$.each.call(getSymbols(it), function(key){
	    if(getDesc(it, key).enumerable)keys.push(key);
	  });
	  return keys;
	};
	},{"./$":244}],236:[function(require,module,exports){
	var ctx  = require('./$.ctx')
	  , get  = require('./$.iter').get
	  , call = require('./$.iter-call');
	module.exports = function(iterable, entries, fn, that){
	  var iterator = get(iterable)
	    , f        = ctx(fn, that, entries ? 2 : 1)
	    , step;
	  while(!(step = iterator.next()).done){
	    if(call(iterator, f, step.value, entries) === false){
	      return call.close(iterator);
	    }
	  }
	};
	},{"./$.ctx":232,"./$.iter":243,"./$.iter-call":240}],237:[function(require,module,exports){
	module.exports = function($){
	  $.FW   = true;
	  $.path = $.g;
	  return $;
	};
	},{}],238:[function(require,module,exports){
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var $ = require('./$')
	  , toString = {}.toString
	  , getNames = $.getNames;

	var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	function getWindowNames(it){
	  try {
	    return getNames(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	}

	module.exports.get = function getOwnPropertyNames(it){
	  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
	  return getNames($.toObject(it));
	};
	},{"./$":244}],239:[function(require,module,exports){
	// Fast apply
	// http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	    case 5: return un ? fn(args[0], args[1], args[2], args[3], args[4])
	                      : fn.call(that, args[0], args[1], args[2], args[3], args[4]);
	  } return              fn.apply(that, args);
	};
	},{}],240:[function(require,module,exports){
	var assertObject = require('./$.assert').obj;
	function close(iterator){
	  var ret = iterator['return'];
	  if(ret !== undefined)assertObject(ret.call(iterator));
	}
	function call(iterator, fn, value, entries){
	  try {
	    return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
	  } catch(e){
	    close(iterator);
	    throw e;
	  }
	}
	call.close = close;
	module.exports = call;
	},{"./$.assert":225}],241:[function(require,module,exports){
	var $def            = require('./$.def')
	  , $redef          = require('./$.redef')
	  , $               = require('./$')
	  , cof             = require('./$.cof')
	  , $iter           = require('./$.iter')
	  , SYMBOL_ITERATOR = require('./$.wks')('iterator')
	  , FF_ITERATOR     = '@@iterator'
	  , KEYS            = 'keys'
	  , VALUES          = 'values'
	  , Iterators       = $iter.Iterators;
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
	  $iter.create(Constructor, NAME, next);
	  function createMethod(kind){
	    function $$(that){
	      return new Constructor(that, kind);
	    }
	    switch(kind){
	      case KEYS: return function keys(){ return $$(this); };
	      case VALUES: return function values(){ return $$(this); };
	    } return function entries(){ return $$(this); };
	  }
	  var TAG      = NAME + ' Iterator'
	    , proto    = Base.prototype
	    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , _default = _native || createMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if(_native){
	    var IteratorPrototype = $.getProto(_default.call(new Base));
	    // Set @@toStringTag to native iterators
	    cof.set(IteratorPrototype, TAG, true);
	    // FF fix
	    if($.FW && $.has(proto, FF_ITERATOR))$iter.set(IteratorPrototype, $.that);
	  }
	  // Define iterator
	  if($.FW || FORCE)$iter.set(proto, _default);
	  // Plug for library
	  Iterators[NAME] = _default;
	  Iterators[TAG]  = $.that;
	  if(DEFAULT){
	    methods = {
	      keys:    IS_SET            ? _default : createMethod(KEYS),
	      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
	      entries: DEFAULT != VALUES ? _default : createMethod('entries')
	    };
	    if(FORCE)for(key in methods){
	      if(!(key in proto))$redef(proto, key, methods[key]);
	    } else $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
	  }
	};
	},{"./$":244,"./$.cof":227,"./$.def":233,"./$.iter":243,"./$.redef":249,"./$.wks":262}],242:[function(require,module,exports){
	var SYMBOL_ITERATOR = require('./$.wks')('iterator')
	  , SAFE_CLOSING    = false;
	try {
	  var riter = [7][SYMBOL_ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	module.exports = function(exec){
	  if(!SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[SYMBOL_ITERATOR]();
	    iter.next = function(){ safe = true; };
	    arr[SYMBOL_ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};
	},{"./$.wks":262}],243:[function(require,module,exports){
	'use strict';
	var $                 = require('./$')
	  , cof               = require('./$.cof')
	  , classof           = cof.classof
	  , assert            = require('./$.assert')
	  , assertObject      = assert.obj
	  , SYMBOL_ITERATOR   = require('./$.wks')('iterator')
	  , FF_ITERATOR       = '@@iterator'
	  , Iterators         = require('./$.shared')('iterators')
	  , IteratorPrototype = {};
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	setIterator(IteratorPrototype, $.that);
	function setIterator(O, value){
	  $.hide(O, SYMBOL_ITERATOR, value);
	  // Add iterator for FF iterator protocol
	  if(FF_ITERATOR in [])$.hide(O, FF_ITERATOR, value);
	}

	module.exports = {
	  // Safari has buggy iterators w/o `next`
	  BUGGY: 'keys' in [] && !('next' in [].keys()),
	  Iterators: Iterators,
	  step: function(done, value){
	    return {value: value, done: !!done};
	  },
	  is: function(it){
	    var O      = Object(it)
	      , Symbol = $.g.Symbol;
	    return (Symbol && Symbol.iterator || FF_ITERATOR) in O
	      || SYMBOL_ITERATOR in O
	      || $.has(Iterators, classof(O));
	  },
	  get: function(it){
	    var Symbol = $.g.Symbol
	      , getIter;
	    if(it != undefined){
	      getIter = it[Symbol && Symbol.iterator || FF_ITERATOR]
	        || it[SYMBOL_ITERATOR]
	        || Iterators[classof(it)];
	    }
	    assert($.isFunction(getIter), it, ' is not iterable!');
	    return assertObject(getIter.call(it));
	  },
	  set: setIterator,
	  create: function(Constructor, NAME, next, proto){
	    Constructor.prototype = $.create(proto || IteratorPrototype, {next: $.desc(1, next)});
	    cof.set(Constructor, NAME + ' Iterator');
	  }
	};
	},{"./$":244,"./$.assert":225,"./$.cof":227,"./$.shared":253,"./$.wks":262}],244:[function(require,module,exports){
	'use strict';
	var global = typeof self != 'undefined' ? self : Function('return this')()
	  , core   = {}
	  , defineProperty = Object.defineProperty
	  , hasOwnProperty = {}.hasOwnProperty
	  , ceil  = Math.ceil
	  , floor = Math.floor
	  , max   = Math.max
	  , min   = Math.min;
	// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.
	var DESC = !!function(){
	  try {
	    return defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;
	  } catch(e){ /* empty */ }
	}();
	var hide = createDefiner(1);
	// 7.1.4 ToInteger
	function toInteger(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	}
	function desc(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	}
	function simpleSet(object, key, value){
	  object[key] = value;
	  return object;
	}
	function createDefiner(bitmap){
	  return DESC ? function(object, key, value){
	    return $.setDesc(object, key, desc(bitmap, value));
	  } : simpleSet;
	}

	function isObject(it){
	  return it !== null && (typeof it == 'object' || typeof it == 'function');
	}
	function isFunction(it){
	  return typeof it == 'function';
	}
	function assertDefined(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	}

	var $ = module.exports = require('./$.fw')({
	  g: global,
	  core: core,
	  html: global.document && document.documentElement,
	  // http://jsperf.com/core-js-isobject
	  isObject:   isObject,
	  isFunction: isFunction,
	  that: function(){
	    return this;
	  },
	  // 7.1.4 ToInteger
	  toInteger: toInteger,
	  // 7.1.15 ToLength
	  toLength: function(it){
	    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	  },
	  toIndex: function(index, length){
	    index = toInteger(index);
	    return index < 0 ? max(index + length, 0) : min(index, length);
	  },
	  has: function(it, key){
	    return hasOwnProperty.call(it, key);
	  },
	  create:     Object.create,
	  getProto:   Object.getPrototypeOf,
	  DESC:       DESC,
	  desc:       desc,
	  getDesc:    Object.getOwnPropertyDescriptor,
	  setDesc:    defineProperty,
	  setDescs:   Object.defineProperties,
	  getKeys:    Object.keys,
	  getNames:   Object.getOwnPropertyNames,
	  getSymbols: Object.getOwnPropertySymbols,
	  assertDefined: assertDefined,
	  // Dummy, fix for not array-like ES3 string in es5 module
	  ES5Object: Object,
	  toObject: function(it){
	    return $.ES5Object(assertDefined(it));
	  },
	  hide: hide,
	  def: createDefiner(0),
	  set: global.Symbol ? simpleSet : hide,
	  each: [].forEach
	});
	/* eslint-disable no-undef */
	if(typeof __e != 'undefined')__e = core;
	if(typeof __g != 'undefined')__g = global;
	},{"./$.fw":237}],245:[function(require,module,exports){
	var $ = require('./$');
	module.exports = function(object, el){
	  var O      = $.toObject(object)
	    , keys   = $.getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};
	},{"./$":244}],246:[function(require,module,exports){
	var $redef = require('./$.redef');
	module.exports = function(target, src){
	  for(var key in src)$redef(target, key, src[key]);
	  return target;
	};
	},{"./$.redef":249}],247:[function(require,module,exports){
	var $            = require('./$')
	  , assertObject = require('./$.assert').obj;
	module.exports = function ownKeys(it){
	  assertObject(it);
	  var keys       = $.getNames(it)
	    , getSymbols = $.getSymbols;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};
	},{"./$":244,"./$.assert":225}],248:[function(require,module,exports){
	'use strict';
	var $      = require('./$')
	  , invoke = require('./$.invoke')
	  , assertFunction = require('./$.assert').fn;
	module.exports = function(/* ...pargs */){
	  var fn     = assertFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = $.path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that    = this
	      , _length = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !_length)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(_length > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};
	},{"./$":244,"./$.assert":225,"./$.invoke":239}],249:[function(require,module,exports){
	var $   = require('./$')
	  , tpl = String({}.hasOwnProperty)
	  , SRC = require('./$.uid').safe('src')
	  , _toString = Function.toString;

	function $redef(O, key, val, safe){
	  if($.isFunction(val)){
	    var base = O[key];
	    $.hide(val, SRC, base ? String(base) : tpl.replace(/hasOwnProperty/, String(key)));
	    if(!('name' in val))val.name = key;
	  }
	  if(O === $.g){
	    O[key] = val;
	  } else {
	    if(!safe)delete O[key];
	    $.hide(O, key, val);
	  }
	}

	// add fake Function#toString for correct work wrapped methods / constructors
	// with methods similar to LoDash isNative
	$redef(Function.prototype, 'toString', function toString(){
	  return $.has(this, SRC) ? this[SRC] : _toString.call(this);
	});

	$.core.inspectSource = function(it){
	  return _toString.call(it);
	};

	module.exports = $redef;
	},{"./$":244,"./$.uid":260}],250:[function(require,module,exports){
	'use strict';
	module.exports = function(regExp, replace, isStatic){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(isStatic ? it : this).replace(regExp, replacer);
	  };
	};
	},{}],251:[function(require,module,exports){
	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};
	},{}],252:[function(require,module,exports){
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var $      = require('./$')
	  , assert = require('./$.assert');
	function check(O, proto){
	  assert.obj(O);
	  assert(proto === null || $.isObject(proto), proto, ": can't set as prototype!");
	}
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
	    ? function(buggy, set){
	        try {
	          set = require('./$.ctx')(Function.call, $.getDesc(Object.prototype, '__proto__').set, 2);
	          set({}, []);
	        } catch(e){ buggy = true; }
	        return function setPrototypeOf(O, proto){
	          check(O, proto);
	          if(buggy)O.__proto__ = proto;
	          else set(O, proto);
	          return O;
	        };
	      }()
	    : undefined),
	  check: check
	};
	},{"./$":244,"./$.assert":225,"./$.ctx":232}],253:[function(require,module,exports){
	var $      = require('./$')
	  , SHARED = '__core-js_shared__'
	  , store  = $.g[SHARED] || ($.g[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	},{"./$":244}],254:[function(require,module,exports){
	var $       = require('./$')
	  , SPECIES = require('./$.wks')('species');
	module.exports = function(C){
	  if($.DESC && !(SPECIES in C))$.setDesc(C, SPECIES, {
	    configurable: true,
	    get: $.that
	  });
	};
	},{"./$":244,"./$.wks":262}],255:[function(require,module,exports){
	// true  -> String#at
	// false -> String#codePointAt
	var $ = require('./$');
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String($.assertDefined(that))
	      , i = $.toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l
	      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	        ? TO_STRING ? s.charAt(i) : a
	        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	},{"./$":244}],256:[function(require,module,exports){
	// http://wiki.ecmascript.org/doku.php?id=strawman:string_padding
	var $      = require('./$')
	  , repeat = require('./$.string-repeat');

	module.exports = function(that, minLength, fillChar, left){
	  // 1. Let O be CheckObjectCoercible(this value).
	  // 2. Let S be ToString(O).
	  var S = String($.assertDefined(that));
	  // 4. If intMinLength is undefined, return S.
	  if(minLength === undefined)return S;
	  // 4. Let intMinLength be ToInteger(minLength).
	  var intMinLength = $.toInteger(minLength);
	  // 5. Let fillLen be the number of characters in S minus intMinLength.
	  var fillLen = intMinLength - S.length;
	  // 6. If fillLen < 0, then throw a RangeError exception.
	  // 7. If fillLen is +∞, then throw a RangeError exception.
	  if(fillLen < 0 || fillLen === Infinity){
	    throw new RangeError('Cannot satisfy string length ' + minLength + ' for string: ' + S);
	  }
	  // 8. Let sFillStr be the string represented by fillStr.
	  // 9. If sFillStr is undefined, let sFillStr be a space character.
	  var sFillStr = fillChar === undefined ? ' ' : String(fillChar);
	  // 10. Let sFillVal be a String made of sFillStr, repeated until fillLen is met.
	  var sFillVal = repeat.call(sFillStr, Math.ceil(fillLen / sFillStr.length));
	  // truncate if we overflowed
	  if(sFillVal.length > fillLen)sFillVal = left
	    ? sFillVal.slice(sFillVal.length - fillLen)
	    : sFillVal.slice(0, fillLen);
	  // 11. Return a string made from sFillVal, followed by S.
	  // 11. Return a String made from S, followed by sFillVal.
	  return left ? sFillVal.concat(S) : S.concat(sFillVal);
	};
	},{"./$":244,"./$.string-repeat":257}],257:[function(require,module,exports){
	'use strict';
	var $ = require('./$');

	module.exports = function repeat(count){
	  var str = String($.assertDefined(this))
	    , res = ''
	    , n   = $.toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};
	},{"./$":244}],258:[function(require,module,exports){
	'use strict';
	var $      = require('./$')
	  , ctx    = require('./$.ctx')
	  , cof    = require('./$.cof')
	  , invoke = require('./$.invoke')
	  , cel    = require('./$.dom-create')
	  , global             = $.g
	  , isFunction         = $.isFunction
	  , html               = $.html
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	function run(){
	  var id = +this;
	  if($.has(queue, id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	}
	function listner(event){
	  run.call(event.data);
	}
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!isFunction(setTask) || !isFunction(clearTask)){
	  setTask = function(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(isFunction(fn) ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(cof(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Modern browsers, skip implementation for WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is object
	  } else if(global.addEventListener && isFunction(global.postMessage) && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id, '*');
	    };
	    global.addEventListener('message', listner, false);
	  // WebWorkers
	  } else if(isFunction(MessageChannel)){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listner;
	    defer = ctx(port.postMessage, port, 1);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};
	},{"./$":244,"./$.cof":227,"./$.ctx":232,"./$.dom-create":234,"./$.invoke":239}],259:[function(require,module,exports){
	module.exports = function(exec){
	  try {
	    exec();
	    return false;
	  } catch(e){
	    return true;
	  }
	};
	},{}],260:[function(require,module,exports){
	var sid = 0;
	function uid(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
	}
	uid.safe = require('./$').g.Symbol || uid;
	module.exports = uid;
	},{"./$":244}],261:[function(require,module,exports){
	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = require('./$.wks')('unscopables');
	if(!(UNSCOPABLES in []))require('./$').hide(Array.prototype, UNSCOPABLES, {});
	module.exports = function(key){
	  [][UNSCOPABLES][key] = true;
	};
	},{"./$":244,"./$.wks":262}],262:[function(require,module,exports){
	var global = require('./$').g
	  , store  = require('./$.shared')('wks');
	module.exports = function(name){
	  return store[name] || (store[name] =
	    global.Symbol && global.Symbol[name] || require('./$.uid').safe('Symbol.' + name));
	};
	},{"./$":244,"./$.shared":253,"./$.uid":260}],263:[function(require,module,exports){
	var $                = require('./$')
	  , cel              = require('./$.dom-create')
	  , cof              = require('./$.cof')
	  , $def             = require('./$.def')
	  , invoke           = require('./$.invoke')
	  , arrayMethod      = require('./$.array-methods')
	  , IE_PROTO         = require('./$.uid').safe('__proto__')
	  , assert           = require('./$.assert')
	  , assertObject     = assert.obj
	  , ObjectProto      = Object.prototype
	  , html             = $.html
	  , A                = []
	  , _slice           = A.slice
	  , _join            = A.join
	  , classof          = cof.classof
	  , has              = $.has
	  , defineProperty   = $.setDesc
	  , getOwnDescriptor = $.getDesc
	  , defineProperties = $.setDescs
	  , isFunction       = $.isFunction
	  , isObject         = $.isObject
	  , toObject         = $.toObject
	  , toLength         = $.toLength
	  , toIndex          = $.toIndex
	  , IE8_DOM_DEFINE   = false
	  , $indexOf         = require('./$.array-includes')(false)
	  , $forEach         = arrayMethod(0)
	  , $map             = arrayMethod(1)
	  , $filter          = arrayMethod(2)
	  , $some            = arrayMethod(3)
	  , $every           = arrayMethod(4);

	if(!$.DESC){
	  try {
	    IE8_DOM_DEFINE = defineProperty(cel('div'), 'x',
	      {get: function(){ return 8; }}
	    ).x == 8;
	  } catch(e){ /* empty */ }
	  $.setDesc = function(O, P, Attributes){
	    if(IE8_DOM_DEFINE)try {
	      return defineProperty(O, P, Attributes);
	    } catch(e){ /* empty */ }
	    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	    if('value' in Attributes)assertObject(O)[P] = Attributes.value;
	    return O;
	  };
	  $.getDesc = function(O, P){
	    if(IE8_DOM_DEFINE)try {
	      return getOwnDescriptor(O, P);
	    } catch(e){ /* empty */ }
	    if(has(O, P))return $.desc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
	  };
	  $.setDescs = defineProperties = function(O, Properties){
	    assertObject(O);
	    var keys   = $.getKeys(Properties)
	      , length = keys.length
	      , i = 0
	      , P;
	    while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
	    return O;
	  };
	}
	$def($def.S + $def.F * !$.DESC, 'Object', {
	  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $.getDesc,
	  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	  defineProperty: $.setDesc,
	  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties
	});

	  // IE 8- don't enum bug keys
	var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
	            'toLocaleString,toString,valueOf').split(',')
	  // Additional keys for getOwnPropertyNames
	  , keys2 = keys1.concat('length', 'prototype')
	  , keysLen1 = keys1.length;

	// Create object with `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = cel('iframe')
	    , i      = keysLen1
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict.prototype[keys1[i]];
	  return createDict();
	};
	function createGetKeys(names, length){
	  return function(object){
	    var O      = toObject(object)
	      , i      = 0
	      , result = []
	      , key;
	    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	    // Don't enum bug & hidden keys
	    while(length > i)if(has(O, key = names[i++])){
	      ~$indexOf(result, key) || result.push(key);
	    }
	    return result;
	  };
	}
	function Empty(){}
	$def($def.S, 'Object', {
	  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	  getPrototypeOf: $.getProto = $.getProto || function(O){
	    O = Object(assert.def(O));
	    if(has(O, IE_PROTO))return O[IE_PROTO];
	    if(isFunction(O.constructor) && O instanceof O.constructor){
	      return O.constructor.prototype;
	    } return O instanceof Object ? ObjectProto : null;
	  },
	  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
	  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	  create: $.create = $.create || function(O, /*?*/Properties){
	    var result;
	    if(O !== null){
	      Empty.prototype = assertObject(O);
	      result = new Empty();
	      Empty.prototype = null;
	      // add "__proto__" for Object.getPrototypeOf shim
	      result[IE_PROTO] = O;
	    } else result = createDict();
	    return Properties === undefined ? result : defineProperties(result, Properties);
	  },
	  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
	  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false),
	  // 19.1.2.17 / 15.2.3.8 Object.seal(O)
	  seal: function seal(it){
	    return it; // <- cap
	  },
	  // 19.1.2.5 / 15.2.3.9 Object.freeze(O)
	  freeze: function freeze(it){
	    return it; // <- cap
	  },
	  // 19.1.2.15 / 15.2.3.10 Object.preventExtensions(O)
	  preventExtensions: function preventExtensions(it){
	    return it; // <- cap
	  },
	  // 19.1.2.13 / 15.2.3.11 Object.isSealed(O)
	  isSealed: function isSealed(it){
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.12 / 15.2.3.12 Object.isFrozen(O)
	  isFrozen: function isFrozen(it){
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.11 / 15.2.3.13 Object.isExtensible(O)
	  isExtensible: function isExtensible(it){
	    return isObject(it); // <- cap
	  }
	});

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	$def($def.P, 'Function', {
	  bind: function(that /*, args... */){
	    var fn       = assert.fn(this)
	      , partArgs = _slice.call(arguments, 1);
	    function bound(/* args... */){
	      var args   = partArgs.concat(_slice.call(arguments))
	        , constr = this instanceof bound
	        , ctx    = constr ? $.create(fn.prototype) : that
	        , result = invoke(fn, args, ctx);
	      return constr ? ctx : result;
	    }
	    if(fn.prototype)bound.prototype = fn.prototype;
	    return bound;
	  }
	});

	// Fix for not array-like ES3 string and DOM objects
	if(!(0 in Object('z') && 'z'[0] == 'z')){
	  $.ES5Object = function(it){
	    return cof(it) == 'String' ? it.split('') : Object(it);
	  };
	}

	var buggySlice = true;
	try {
	  if(html)_slice.call(html);
	  buggySlice = false;
	} catch(e){ /* empty */ }

	$def($def.P + $def.F * buggySlice, 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return _slice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

	$def($def.P + $def.F * ($.ES5Object != Object), 'Array', {
	  join: function join(){
	    return _join.apply($.ES5Object(this), arguments);
	  }
	});

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	$def($def.S, 'Array', {
	  isArray: function(arg){
	    return cof(arg) == 'Array';
	  }
	});
	function createArrayReduce(isRight){
	  return function(callbackfn, memo){
	    assert.fn(callbackfn);
	    var O      = toObject(this)
	      , length = toLength(O.length)
	      , index  = isRight ? length - 1 : 0
	      , i      = isRight ? -1 : 1;
	    if(arguments.length < 2)for(;;){
	      if(index in O){
	        memo = O[index];
	        index += i;
	        break;
	      }
	      index += i;
	      assert(isRight ? index >= 0 : length > index, 'Reduce of empty array with no initial value');
	    }
	    for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
	      memo = callbackfn(memo, O[index], index, this);
	    }
	    return memo;
	  };
	}
	$def($def.P, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: $.each = $.each || function forEach(callbackfn/*, that = undefined */){
	    return $forEach(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn/*, that = undefined */){
	    return $map(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn/*, that = undefined */){
	    return $filter(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn/*, that = undefined */){
	    return $some(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn/*, that = undefined */){
	    return $every(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: createArrayReduce(false),
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: createArrayReduce(true),
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(el /*, fromIndex = 0 */){
	    return $indexOf(this, el, arguments[1]);
	  },
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function(el, fromIndex /* = @[*-1] */){
	    var O      = toObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, $.toInteger(fromIndex));
	    if(index < 0)index = toLength(length + index);
	    for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
	    return -1;
	  }
	});

	// 21.1.3.25 / 15.5.4.20 String.prototype.trim()
	$def($def.P, 'String', {trim: require('./$.replacer')(/^\s*([\s\S]*\S)?\s*$/, '$1')});

	// 20.3.3.1 / 15.9.4.4 Date.now()
	$def($def.S, 'Date', {now: function(){
	  return +new Date;
	}});

	function lz(num){
	  return num > 9 ? num : '0' + num;
	}

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	// PhantomJS and old webkit had a broken Date implementation.
	var date       = new Date(-5e13 - 1)
	  , brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z'
	      && require('./$.throws')(function(){ new Date(NaN).toISOString(); }));
	$def($def.P + $def.F * brokenDate, 'Date', {toISOString: function(){
	  if(!isFinite(this))throw RangeError('Invalid time value');
	  var d = this
	    , y = d.getUTCFullYear()
	    , m = d.getUTCMilliseconds()
	    , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	}});

	if(classof(function(){ return arguments; }()) == 'Object')cof.classof = function(it){
	  var tag = classof(it);
	  return tag == 'Object' && isFunction(it.callee) ? 'Arguments' : tag;
	};
	},{"./$":244,"./$.array-includes":223,"./$.array-methods":224,"./$.assert":225,"./$.cof":227,"./$.def":233,"./$.dom-create":234,"./$.invoke":239,"./$.replacer":250,"./$.throws":259,"./$.uid":260}],264:[function(require,module,exports){
	'use strict';
	var $       = require('./$')
	  , $def    = require('./$.def')
	  , toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	  copyWithin: function copyWithin(target/* = 0 */, start /* = 0, end = @length */){
	    var O     = Object($.assertDefined(this))
	      , len   = $.toLength(O.length)
	      , to    = toIndex(target, len)
	      , from  = toIndex(start, len)
	      , end   = arguments[2]
	      , fin   = end === undefined ? len : toIndex(end, len)
	      , count = Math.min(fin - from, len - to)
	      , inc   = 1;
	    if(from < to && to < from + count){
	      inc  = -1;
	      from = from + count - 1;
	      to   = to   + count - 1;
	    }
	    while(count-- > 0){
	      if(from in O)O[to] = O[from];
	      else delete O[to];
	      to   += inc;
	      from += inc;
	    } return O;
	  }
	});
	require('./$.unscope')('copyWithin');
	},{"./$":244,"./$.def":233,"./$.unscope":261}],265:[function(require,module,exports){
	'use strict';
	var $       = require('./$')
	  , $def    = require('./$.def')
	  , toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	  fill: function fill(value /*, start = 0, end = @length */){
	    var O      = Object($.assertDefined(this))
	      , length = $.toLength(O.length)
	      , index  = toIndex(arguments[1], length)
	      , end    = arguments[2]
	      , endPos = end === undefined ? length : toIndex(end, length);
	    while(endPos > index)O[index++] = value;
	    return O;
	  }
	});
	require('./$.unscope')('fill');
	},{"./$":244,"./$.def":233,"./$.unscope":261}],266:[function(require,module,exports){
	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var KEY    = 'findIndex'
	  , $def   = require('./$.def')
	  , forced = true
	  , $find  = require('./$.array-methods')(6);
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$def($def.P + $def.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	require('./$.unscope')(KEY);
	},{"./$.array-methods":224,"./$.def":233,"./$.unscope":261}],267:[function(require,module,exports){
	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var KEY    = 'find'
	  , $def   = require('./$.def')
	  , forced = true
	  , $find  = require('./$.array-methods')(5);
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$def($def.P + $def.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	require('./$.unscope')(KEY);
	},{"./$.array-methods":224,"./$.def":233,"./$.unscope":261}],268:[function(require,module,exports){
	var $     = require('./$')
	  , ctx   = require('./$.ctx')
	  , $def  = require('./$.def')
	  , $iter = require('./$.iter')
	  , call  = require('./$.iter-call');
	$def($def.S + $def.F * !require('./$.iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = Object($.assertDefined(arrayLike))
	      , mapfn   = arguments[1]
	      , mapping = mapfn !== undefined
	      , f       = mapping ? ctx(mapfn, arguments[2], 2) : undefined
	      , index   = 0
	      , length, result, step, iterator;
	    if($iter.is(O)){
	      iterator = $iter.get(O);
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result   = new (typeof this == 'function' ? this : Array);
	      for(; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, f, [step.value, index], true) : step.value;
	      }
	    } else {
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result = new (typeof this == 'function' ? this : Array)(length = $.toLength(O.length));
	      for(; length > index; index++){
	        result[index] = mapping ? f(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});
	},{"./$":244,"./$.ctx":232,"./$.def":233,"./$.iter":243,"./$.iter-call":240,"./$.iter-detect":242}],269:[function(require,module,exports){
	var $          = require('./$')
	  , setUnscope = require('./$.unscope')
	  , ITER       = require('./$.uid').safe('iter')
	  , $iter      = require('./$.iter')
	  , step       = $iter.step
	  , Iterators  = $iter.Iterators;

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	require('./$.iter-define')(Array, 'Array', function(iterated, kind){
	  $.set(this, ITER, {o: $.toObject(iterated), i: 0, k: kind});
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var iter  = this[ITER]
	    , O     = iter.o
	    , kind  = iter.k
	    , index = iter.i++;
	  if(!O || index >= O.length){
	    iter.o = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	setUnscope('keys');
	setUnscope('values');
	setUnscope('entries');
	},{"./$":244,"./$.iter":243,"./$.iter-define":241,"./$.uid":260,"./$.unscope":261}],270:[function(require,module,exports){
	var $def = require('./$.def');
	$def($def.S, 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , length = arguments.length
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      , result = new (typeof this == 'function' ? this : Array)(length);
	    while(length > index)result[index] = arguments[index++];
	    result.length = length;
	    return result;
	  }
	});
	},{"./$.def":233}],271:[function(require,module,exports){
	require('./$.species')(Array);
	},{"./$.species":254}],272:[function(require,module,exports){
	var $             = require('./$')
	  , HAS_INSTANCE  = require('./$.wks')('hasInstance')
	  , FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(!$.isFunction(this) || !$.isObject(O))return false;
	  if(!$.isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = $.getProto(O))if(this.prototype === O)return true;
	  return false;
	}});
	},{"./$":244,"./$.wks":262}],273:[function(require,module,exports){
	'use strict';
	var $    = require('./$')
	  , NAME = 'name'
	  , setDesc = $.setDesc
	  , FunctionProto = Function.prototype;
	// 19.2.4.2 name
	NAME in FunctionProto || $.FW && $.DESC && setDesc(FunctionProto, NAME, {
	  configurable: true,
	  get: function(){
	    var match = String(this).match(/^\s*function ([^ (]*)/)
	      , name  = match ? match[1] : '';
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(5, name));
	    return name;
	  },
	  set: function(value){
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(0, value));
	  }
	});
	},{"./$":244}],274:[function(require,module,exports){
	'use strict';
	var strong = require('./$.collection-strong');

	// 23.1 Map Objects
	require('./$.collection')('Map', function(get){
	  return function Map(){ return get(this, arguments[0]); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);
	},{"./$.collection":231,"./$.collection-strong":228}],275:[function(require,module,exports){
	var Infinity = 1 / 0
	  , $def  = require('./$.def')
	  , E     = Math.E
	  , pow   = Math.pow
	  , abs   = Math.abs
	  , exp   = Math.exp
	  , log   = Math.log
	  , sqrt  = Math.sqrt
	  , ceil  = Math.ceil
	  , floor = Math.floor
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	function roundTiesToEven(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	}

	// 20.2.2.28 Math.sign(x)
	function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	}
	// 20.2.2.5 Math.asinh(x)
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
	}
	// 20.2.2.14 Math.expm1(x)
	function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
	}

	$def($def.S, 'Math', {
	  // 20.2.2.3 Math.acosh(x)
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;
	  },
	  // 20.2.2.5 Math.asinh(x)
	  asinh: asinh,
	  // 20.2.2.7 Math.atanh(x)
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
	  },
	  // 20.2.2.9 Math.cbrt(x)
	  cbrt: function cbrt(x){
	    return sign(x = +x) * pow(abs(x), 1 / 3);
	  },
	  // 20.2.2.11 Math.clz32(x)
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * Math.LOG2E) : 32;
	  },
	  // 20.2.2.12 Math.cosh(x)
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  },
	  // 20.2.2.14 Math.expm1(x)
	  expm1: expm1,
	  // 20.2.2.16 Math.fround(x)
	  fround: function fround(x){
	    var $abs  = abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  },
	  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , len  = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < len){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * sqrt(sum);
	  },
	  // 20.2.2.18 Math.imul(x, y)
	  imul: function imul(x, y){
	    var UInt16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UInt16 & xn
	      , yl = UInt16 & yn;
	    return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);
	  },
	  // 20.2.2.20 Math.log1p(x)
	  log1p: function log1p(x){
	    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
	  },
	  // 20.2.2.21 Math.log10(x)
	  log10: function log10(x){
	    return log(x) / Math.LN10;
	  },
	  // 20.2.2.22 Math.log2(x)
	  log2: function log2(x){
	    return log(x) / Math.LN2;
	  },
	  // 20.2.2.28 Math.sign(x)
	  sign: sign,
	  // 20.2.2.30 Math.sinh(x)
	  sinh: function sinh(x){
	    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
	  },
	  // 20.2.2.33 Math.tanh(x)
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  },
	  // 20.2.2.34 Math.trunc(x)
	  trunc: function trunc(it){
	    return (it > 0 ? floor : ceil)(it);
	  }
	});
	},{"./$.def":233}],276:[function(require,module,exports){
	'use strict';
	var $          = require('./$')
	  , isObject   = $.isObject
	  , isFunction = $.isFunction
	  , NUMBER     = 'Number'
	  , $Number    = $.g[NUMBER]
	  , Base       = $Number
	  , proto      = $Number.prototype;
	function toPrimitive(it){
	  var fn, val;
	  if(isFunction(fn = it.valueOf) && !isObject(val = fn.call(it)))return val;
	  if(isFunction(fn = it.toString) && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to number");
	}
	function toNumber(it){
	  if(isObject(it))it = toPrimitive(it);
	  if(typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48){
	    var binary = false;
	    switch(it.charCodeAt(1)){
	      case 66 : case 98  : binary = true;
	      case 79 : case 111 : return parseInt(it.slice(2), binary ? 2 : 8);
	    }
	  } return +it;
	}
	if($.FW && !($Number('0o1') && $Number('0b1'))){
	  $Number = function Number(it){
	    return this instanceof $Number ? new Base(toNumber(it)) : toNumber(it);
	  };
	  $.each.call($.DESC ? $.getNames(Base) : (
	      // ES3:
	      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	      // ES6 (in case, if modules with ES6 Number statics required before):
	      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	    ).split(','), function(key){
	      if($.has(Base, key) && !$.has($Number, key)){
	        $.setDesc($Number, key, $.getDesc(Base, key));
	      }
	    }
	  );
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  require('./$.redef')($.g, NUMBER, $Number);
	}
	},{"./$":244,"./$.redef":249}],277:[function(require,module,exports){
	var $     = require('./$')
	  , $def  = require('./$.def')
	  , abs   = Math.abs
	  , floor = Math.floor
	  , _isFinite = $.g.isFinite
	  , MAX_SAFE_INTEGER = 0x1fffffffffffff; // pow(2, 53) - 1 == 9007199254740991;
	function isInteger(it){
	  return !$.isObject(it) && _isFinite(it) && floor(it) === it;
	}
	$def($def.S, 'Number', {
	  // 20.1.2.1 Number.EPSILON
	  EPSILON: Math.pow(2, -52),
	  // 20.1.2.2 Number.isFinite(number)
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  },
	  // 20.1.2.3 Number.isInteger(number)
	  isInteger: isInteger,
	  // 20.1.2.4 Number.isNaN(number)
	  isNaN: function isNaN(number){
	    return number != number;
	  },
	  // 20.1.2.5 Number.isSafeInteger(number)
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;
	  },
	  // 20.1.2.6 Number.MAX_SAFE_INTEGER
	  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
	  // 20.1.2.10 Number.MIN_SAFE_INTEGER
	  MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,
	  // 20.1.2.12 Number.parseFloat(string)
	  parseFloat: parseFloat,
	  // 20.1.2.13 Number.parseInt(string, radix)
	  parseInt: parseInt
	});
	},{"./$":244,"./$.def":233}],278:[function(require,module,exports){
	// 19.1.3.1 Object.assign(target, source)
	var $def = require('./$.def');
	$def($def.S, 'Object', {assign: require('./$.assign')});
	},{"./$.assign":226,"./$.def":233}],279:[function(require,module,exports){
	// 19.1.3.10 Object.is(value1, value2)
	var $def = require('./$.def');
	$def($def.S, 'Object', {
	  is: require('./$.same')
	});
	},{"./$.def":233,"./$.same":251}],280:[function(require,module,exports){
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $def = require('./$.def');
	$def($def.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
	},{"./$.def":233,"./$.set-proto":252}],281:[function(require,module,exports){
	var $        = require('./$')
	  , $def     = require('./$.def')
	  , isObject = $.isObject
	  , toObject = $.toObject;
	$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
	  'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
	, function(KEY, ID){
	  var fn     = ($.core.Object || {})[KEY] || Object[KEY]
	    , forced = 0
	    , method = {};
	  method[KEY] = ID == 0 ? function freeze(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 1 ? function seal(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 2 ? function preventExtensions(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 3 ? function isFrozen(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 4 ? function isSealed(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 5 ? function isExtensible(it){
	    return isObject(it) ? fn(it) : false;
	  } : ID == 6 ? function getOwnPropertyDescriptor(it, key){
	    return fn(toObject(it), key);
	  } : ID == 7 ? function getPrototypeOf(it){
	    return fn(Object($.assertDefined(it)));
	  } : ID == 8 ? function keys(it){
	    return fn(toObject(it));
	  } : require('./$.get-names').get;
	  try {
	    fn('z');
	  } catch(e){
	    forced = 1;
	  }
	  $def($def.S + $def.F * forced, 'Object', method);
	});
	},{"./$":244,"./$.def":233,"./$.get-names":238}],282:[function(require,module,exports){
	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var cof = require('./$.cof')
	  , tmp = {};
	tmp[require('./$.wks')('toStringTag')] = 'z';
	if(require('./$').FW && cof(tmp) != 'z'){
	  require('./$.redef')(Object.prototype, 'toString', function toString(){
	    return '[object ' + cof.classof(this) + ']';
	  }, true);
	}
	},{"./$":244,"./$.cof":227,"./$.redef":249,"./$.wks":262}],283:[function(require,module,exports){
	'use strict';
	var $        = require('./$')
	  , ctx      = require('./$.ctx')
	  , cof      = require('./$.cof')
	  , $def     = require('./$.def')
	  , assert   = require('./$.assert')
	  , forOf    = require('./$.for-of')
	  , setProto = require('./$.set-proto').set
	  , same     = require('./$.same')
	  , species  = require('./$.species')
	  , SPECIES  = require('./$.wks')('species')
	  , RECORD   = require('./$.uid').safe('record')
	  , PROMISE  = 'Promise'
	  , global   = $.g
	  , process  = global.process
	  , isNode   = cof(process) == 'process'
	  , asap     = process && process.nextTick || require('./$.task').set
	  , P        = global[PROMISE]
	  , isFunction     = $.isFunction
	  , isObject       = $.isObject
	  , assertFunction = assert.fn
	  , assertObject   = assert.obj
	  , Wrapper;

	function testResolve(sub){
	  var test = new P(function(){});
	  if(sub)test.constructor = Object;
	  return P.resolve(test) === test;
	}

	var useNative = function(){
	  var works = false;
	  function P2(x){
	    var self = new P(x);
	    setProto(self, P2.prototype);
	    return self;
	  }
	  try {
	    works = isFunction(P) && isFunction(P.resolve) && testResolve();
	    setProto(P2, P);
	    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
	    // actual Firefox has broken subclass support, test that
	    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
	      works = false;
	    }
	    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
	    if(works && $.DESC){
	      var thenableThenGotten = false;
	      P.resolve($.setDesc({}, 'then', {
	        get: function(){ thenableThenGotten = true; }
	      }));
	      works = thenableThenGotten;
	    }
	  } catch(e){ works = false; }
	  return works;
	}();

	// helpers
	function isPromise(it){
	  return isObject(it) && (useNative ? cof.classof(it) == 'Promise' : RECORD in it);
	}
	function sameConstructor(a, b){
	  // library wrapper special case
	  if(!$.FW && a === P && b === Wrapper)return true;
	  return same(a, b);
	}
	function getConstructor(C){
	  var S = assertObject(C)[SPECIES];
	  return S != undefined ? S : C;
	}
	function isThenable(it){
	  var then;
	  if(isObject(it))then = it.then;
	  return isFunction(then) ? then : false;
	}
	function notify(record){
	  var chain = record.c;
	  // strange IE + webpack dev server bug - use .call(global)
	  if(chain.length)asap.call(global, function(){
	    var value = record.v
	      , ok    = record.s == 1
	      , i     = 0;
	    function run(react){
	      var cb = ok ? react.ok : react.fail
	        , ret, then;
	      try {
	        if(cb){
	          if(!ok)record.h = true;
	          ret = cb === true ? value : cb(value);
	          if(ret === react.P){
	            react.rej(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(ret)){
	            then.call(ret, react.res, react.rej);
	          } else react.res(ret);
	        } else react.rej(value);
	      } catch(err){
	        react.rej(err);
	      }
	    }
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    chain.length = 0;
	  });
	}
	function isUnhandled(promise){
	  var record = promise[RECORD]
	    , chain  = record.a || record.c
	    , i      = 0
	    , react;
	  if(record.h)return false;
	  while(chain.length > i){
	    react = chain[i++];
	    if(react.fail || !isUnhandled(react.P))return false;
	  } return true;
	}
	function $reject(value){
	  var record = this
	    , promise;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  record.v = value;
	  record.s = 2;
	  record.a = record.c.slice();
	  setTimeout(function(){
	    // strange IE + webpack dev server bug - use .call(global)
	    asap.call(global, function(){
	      if(isUnhandled(promise = record.p)){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(global.console && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      }
	      record.a = undefined;
	    });
	  }, 1);
	  notify(record);
	}
	function $resolve(value){
	  var record = this
	    , then;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  try {
	    if(then = isThenable(value)){
	      // strange IE + webpack dev server bug - use .call(global)
	      asap.call(global, function(){
	        var wrapper = {r: record, d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      record.v = value;
	      record.s = 1;
	      notify(record);
	    }
	  } catch(e){
	    $reject.call({r: record, d: false}, e); // wrap
	  }
	}

	// constructor polyfill
	if(!useNative){
	  // 25.4.3.1 Promise(executor)
	  P = function Promise(executor){
	    assertFunction(executor);
	    var record = {
	      p: assert.inst(this, P, PROMISE),       // <- promise
	      c: [],                                  // <- awaiting reactions
	      a: undefined,                           // <- checked in isUnhandled reactions
	      s: 0,                                   // <- state
	      d: false,                               // <- done
	      v: undefined,                           // <- value
	      h: false                                // <- handled rejection
	    };
	    $.hide(this, RECORD, record);
	    try {
	      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
	    } catch(err){
	      $reject.call(record, err);
	    }
	  };
	  require('./$.mix')(P.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var S = assertObject(assertObject(this).constructor)[SPECIES];
	      var react = {
	        ok:   isFunction(onFulfilled) ? onFulfilled : true,
	        fail: isFunction(onRejected)  ? onRejected  : false
	      };
	      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
	        react.res = assertFunction(res);
	        react.rej = assertFunction(rej);
	      });
	      var record = this[RECORD];
	      record.c.push(react);
	      if(record.a)record.a.push(react);
	      if(record.s)notify(record);
	      return promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	}

	// export
	$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
	cof.set(P, PROMISE);
	species(P);
	species(Wrapper = $.core[PROMISE]);

	// statics
	$def($def.S + $def.F * !useNative, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    return new (getConstructor(this))(function(res, rej){ rej(r); });
	  }
	});
	$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    return isPromise(x) && sameConstructor(x.constructor, this)
	      ? x : new this(function(res){ res(x); });
	  }
	});
	$def($def.S + $def.F * !(useNative && require('./$.iter-detect')(function(iter){
	  P.all(iter)['catch'](function(){});
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C      = getConstructor(this)
	      , values = [];
	    return new C(function(res, rej){
	      forOf(iterable, false, values.push, values);
	      var remaining = values.length
	        , results   = Array(remaining);
	      if(remaining)$.each.call(values, function(promise, index){
	        C.resolve(promise).then(function(value){
	          results[index] = value;
	          --remaining || res(results);
	        }, rej);
	      });
	      else res(results);
	    });
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C = getConstructor(this);
	    return new C(function(res, rej){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(res, rej);
	      });
	    });
	  }
	});
	},{"./$":244,"./$.assert":225,"./$.cof":227,"./$.ctx":232,"./$.def":233,"./$.for-of":236,"./$.iter-detect":242,"./$.mix":246,"./$.same":251,"./$.set-proto":252,"./$.species":254,"./$.task":258,"./$.uid":260,"./$.wks":262}],284:[function(require,module,exports){
	var $         = require('./$')
	  , $def      = require('./$.def')
	  , setProto  = require('./$.set-proto')
	  , $iter     = require('./$.iter')
	  , ITERATOR  = require('./$.wks')('iterator')
	  , ITER      = require('./$.uid').safe('iter')
	  , step      = $iter.step
	  , assert    = require('./$.assert')
	  , isObject  = $.isObject
	  , getProto  = $.getProto
	  , $Reflect  = $.g.Reflect
	  , _apply    = Function.apply
	  , assertObject = assert.obj
	  , _isExtensible = Object.isExtensible || isObject
	  , _preventExtensions = Object.preventExtensions
	  // IE TP has broken Reflect.enumerate
	  , buggyEnumerate = !($Reflect && $Reflect.enumerate && ITERATOR in $Reflect.enumerate({}));

	function Enumerate(iterated){
	  $.set(this, ITER, {o: iterated, k: undefined, i: 0});
	}
	$iter.create(Enumerate, 'Object', function(){
	  var iter = this[ITER]
	    , keys = iter.k
	    , key;
	  if(keys == undefined){
	    iter.k = keys = [];
	    for(key in iter.o)keys.push(key);
	  }
	  do {
	    if(iter.i >= keys.length)return step(1);
	  } while(!((key = keys[iter.i++]) in iter.o));
	  return step(0, key);
	});

	var reflect = {
	  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	  apply: function apply(target, thisArgument, argumentsList){
	    return _apply.call(target, thisArgument, argumentsList);
	  },
	  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	  construct: function construct(target, argumentsList /*, newTarget*/){
	    var proto    = assert.fn(arguments.length < 3 ? target : arguments[2]).prototype
	      , instance = $.create(isObject(proto) ? proto : Object.prototype)
	      , result   = _apply.call(target, instance, argumentsList);
	    return isObject(result) ? result : instance;
	  },
	  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    assertObject(target);
	    try {
	      $.setDesc(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  },
	  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = $.getDesc(assertObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  },
	  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
	  get: function get(target, propertyKey/*, receiver*/){
	    var receiver = arguments.length < 3 ? target : arguments[2]
	      , desc = $.getDesc(assertObject(target), propertyKey), proto;
	    if(desc)return $.has(desc, 'value')
	      ? desc.value
	      : desc.get === undefined
	        ? undefined
	        : desc.get.call(receiver);
	    return isObject(proto = getProto(target))
	      ? get(proto, propertyKey, receiver)
	      : undefined;
	  },
	  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return $.getDesc(assertObject(target), propertyKey);
	  },
	  // 26.1.8 Reflect.getPrototypeOf(target)
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(assertObject(target));
	  },
	  // 26.1.9 Reflect.has(target, propertyKey)
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  },
	  // 26.1.10 Reflect.isExtensible(target)
	  isExtensible: function isExtensible(target){
	    return _isExtensible(assertObject(target));
	  },
	  // 26.1.11 Reflect.ownKeys(target)
	  ownKeys: require('./$.own-keys'),
	  // 26.1.12 Reflect.preventExtensions(target)
	  preventExtensions: function preventExtensions(target){
	    assertObject(target);
	    try {
	      if(_preventExtensions)_preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  },
	  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	  set: function set(target, propertyKey, V/*, receiver*/){
	    var receiver = arguments.length < 4 ? target : arguments[3]
	      , ownDesc  = $.getDesc(assertObject(target), propertyKey)
	      , existingDescriptor, proto;
	    if(!ownDesc){
	      if(isObject(proto = getProto(target))){
	        return set(proto, propertyKey, V, receiver);
	      }
	      ownDesc = $.desc(0);
	    }
	    if($.has(ownDesc, 'value')){
	      if(ownDesc.writable === false || !isObject(receiver))return false;
	      existingDescriptor = $.getDesc(receiver, propertyKey) || $.desc(0);
	      existingDescriptor.value = V;
	      $.setDesc(receiver, propertyKey, existingDescriptor);
	      return true;
	    }
	    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	  }
	};
	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	if(setProto)reflect.setPrototypeOf = function setPrototypeOf(target, proto){
	  setProto.check(target, proto);
	  try {
	    setProto.set(target, proto);
	    return true;
	  } catch(e){
	    return false;
	  }
	};

	$def($def.G, {Reflect: {}});

	$def($def.S + $def.F * buggyEnumerate, 'Reflect', {
	  // 26.1.5 Reflect.enumerate(target)
	  enumerate: function enumerate(target){
	    return new Enumerate(assertObject(target));
	  }
	});

	$def($def.S, 'Reflect', reflect);
	},{"./$":244,"./$.assert":225,"./$.def":233,"./$.iter":243,"./$.own-keys":247,"./$.set-proto":252,"./$.uid":260,"./$.wks":262}],285:[function(require,module,exports){
	var $       = require('./$')
	  , cof     = require('./$.cof')
	  , $RegExp = $.g.RegExp
	  , Base    = $RegExp
	  , proto   = $RegExp.prototype
	  , re      = /a/g
	  // "new" creates a new object
	  , CORRECT_NEW = new $RegExp(re) !== re
	  // RegExp allows a regex with flags as the pattern
	  , ALLOWS_RE_WITH_FLAGS = function(){
	    try {
	      return $RegExp(re, 'i') == '/a/i';
	    } catch(e){ /* empty */ }
	  }();
	if($.FW && $.DESC){
	  if(!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS){
	    $RegExp = function RegExp(pattern, flags){
	      var patternIsRegExp  = cof(pattern) == 'RegExp'
	        , flagsIsUndefined = flags === undefined;
	      if(!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined)return pattern;
	      return CORRECT_NEW
	        ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags)
	        : new Base(patternIsRegExp ? pattern.source : pattern
	          , patternIsRegExp && flagsIsUndefined ? pattern.flags : flags);
	    };
	    $.each.call($.getNames(Base), function(key){
	      key in $RegExp || $.setDesc($RegExp, key, {
	        configurable: true,
	        get: function(){ return Base[key]; },
	        set: function(it){ Base[key] = it; }
	      });
	    });
	    proto.constructor = $RegExp;
	    $RegExp.prototype = proto;
	    require('./$.redef')($.g, 'RegExp', $RegExp);
	  }
	  // 21.2.5.3 get RegExp.prototype.flags()
	  if(/./g.flags != 'g')$.setDesc(proto, 'flags', {
	    configurable: true,
	    get: require('./$.replacer')(/^.*\/(\w*)$/, '$1')
	  });
	}
	require('./$.species')($RegExp);
	},{"./$":244,"./$.cof":227,"./$.redef":249,"./$.replacer":250,"./$.species":254}],286:[function(require,module,exports){
	'use strict';
	var strong = require('./$.collection-strong');

	// 23.2 Set Objects
	require('./$.collection')('Set', function(get){
	  return function Set(){ return get(this, arguments[0]); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);
	},{"./$.collection":231,"./$.collection-strong":228}],287:[function(require,module,exports){
	'use strict';
	var $def = require('./$.def')
	  , $at  = require('./$.string-at')(false);
	$def($def.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});
	},{"./$.def":233,"./$.string-at":255}],288:[function(require,module,exports){
	'use strict';
	var $    = require('./$')
	  , cof  = require('./$.cof')
	  , $def = require('./$.def')
	  , toLength = $.toLength;

	// should throw error on regex
	$def($def.P + $def.F * !require('./$.throws')(function(){ 'q'.endsWith(/./); }), 'String', {
	  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    var that = String($.assertDefined(this))
	      , endPosition = arguments[1]
	      , len = toLength(that.length)
	      , end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    searchString += '';
	    return that.slice(end - searchString.length, end) === searchString;
	  }
	});
	},{"./$":244,"./$.cof":227,"./$.def":233,"./$.throws":259}],289:[function(require,module,exports){
	var $def    = require('./$.def')
	  , toIndex = require('./$').toIndex
	  , fromCharCode = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res = []
	      , len = arguments.length
	      , i   = 0
	      , code;
	    while(len > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});
	},{"./$":244,"./$.def":233}],290:[function(require,module,exports){
	'use strict';
	var $    = require('./$')
	  , cof  = require('./$.cof')
	  , $def = require('./$.def');

	$def($def.P, 'String', {
	  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
	  includes: function includes(searchString /*, position = 0 */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    return !!~String($.assertDefined(this)).indexOf(searchString, arguments[1]);
	  }
	});
	},{"./$":244,"./$.cof":227,"./$.def":233}],291:[function(require,module,exports){
	var set   = require('./$').set
	  , $at   = require('./$.string-at')(true)
	  , ITER  = require('./$.uid').safe('iter')
	  , $iter = require('./$.iter')
	  , step  = $iter.step;

	// 21.1.3.27 String.prototype[@@iterator]()
	require('./$.iter-define')(String, 'String', function(iterated){
	  set(this, ITER, {o: String(iterated), i: 0});
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var iter  = this[ITER]
	    , O     = iter.o
	    , index = iter.i
	    , point;
	  if(index >= O.length)return step(1);
	  point = $at(O, index);
	  iter.i += point.length;
	  return step(0, point);
	});
	},{"./$":244,"./$.iter":243,"./$.iter-define":241,"./$.string-at":255,"./$.uid":260}],292:[function(require,module,exports){
	var $    = require('./$')
	  , $def = require('./$.def');

	$def($def.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl = $.toObject(callSite.raw)
	      , len = $.toLength(tpl.length)
	      , sln = arguments.length
	      , res = []
	      , i   = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < sln)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});
	},{"./$":244,"./$.def":233}],293:[function(require,module,exports){
	var $def = require('./$.def');

	$def($def.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: require('./$.string-repeat')
	});
	},{"./$.def":233,"./$.string-repeat":257}],294:[function(require,module,exports){
	'use strict';
	var $    = require('./$')
	  , cof  = require('./$.cof')
	  , $def = require('./$.def');

	// should throw error on regex
	$def($def.P + $def.F * !require('./$.throws')(function(){ 'q'.startsWith(/./); }), 'String', {
	  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    var that  = String($.assertDefined(this))
	      , index = $.toLength(Math.min(arguments[1], that.length));
	    searchString += '';
	    return that.slice(index, index + searchString.length) === searchString;
	  }
	});
	},{"./$":244,"./$.cof":227,"./$.def":233,"./$.throws":259}],295:[function(require,module,exports){
	'use strict';
	// ECMAScript 6 symbols shim
	var $        = require('./$')
	  , setTag   = require('./$.cof').set
	  , uid      = require('./$.uid')
	  , shared   = require('./$.shared')
	  , $def     = require('./$.def')
	  , $redef   = require('./$.redef')
	  , keyOf    = require('./$.keyof')
	  , enumKeys = require('./$.enum-keys')
	  , assertObject = require('./$.assert').obj
	  , ObjectProto = Object.prototype
	  , DESC     = $.DESC
	  , has      = $.has
	  , $create  = $.create
	  , getDesc  = $.getDesc
	  , setDesc  = $.setDesc
	  , desc     = $.desc
	  , $names   = require('./$.get-names')
	  , getNames = $names.get
	  , toObject = $.toObject
	  , $Symbol  = $.g.Symbol
	  , setter   = false
	  , TAG      = uid('tag')
	  , HIDDEN   = uid('hidden')
	  , _propertyIsEnumerable = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols = shared('symbols')
	  , useNative = $.isFunction($Symbol);

	var setSymbolDesc = DESC ? function(){ // fallback for old Android
	  try {
	    return $create(setDesc({}, HIDDEN, {
	      get: function(){
	        return setDesc(this, HIDDEN, {value: false})[HIDDEN];
	      }
	    }))[HIDDEN] || setDesc;
	  } catch(e){
	    return function(it, key, D){
	      var protoDesc = getDesc(ObjectProto, key);
	      if(protoDesc)delete ObjectProto[key];
	      setDesc(it, key, D);
	      if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
	    };
	  }
	}() : setDesc;

	function wrap(tag){
	  var sym = AllSymbols[tag] = $.set($create($Symbol.prototype), TAG, tag);
	  DESC && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, desc(1, value));
	    }
	  });
	  return sym;
	}

	function defineProperty(it, key, D){
	  if(D && has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, desc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = $create(D, {enumerable: desc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return setDesc(it, key, D);
	}
	function defineProperties(it, P){
	  assertObject(it);
	  var keys = enumKeys(P = toObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)defineProperty(it, key = keys[i++], P[key]);
	  return it;
	}
	function create(it, P){
	  return P === undefined ? $create(it) : defineProperties($create(it), P);
	}
	function propertyIsEnumerable(key){
	  var E = _propertyIsEnumerable.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
	    ? E : true;
	}
	function getOwnPropertyDescriptor(it, key){
	  var D = getDesc(it = toObject(it), key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	}
	function getOwnPropertyNames(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
	  return result;
	}
	function getOwnPropertySymbols(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	}

	// 19.4.1.1 Symbol([description])
	if(!useNative){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments[0]));
	  };
	  $redef($Symbol.prototype, 'toString', function(){
	    return this[TAG];
	  });

	  $.create     = create;
	  $.setDesc    = defineProperty;
	  $.getDesc    = getOwnPropertyDescriptor;
	  $.setDescs   = defineProperties;
	  $.getNames   = $names.get = getOwnPropertyNames;
	  $.getSymbols = getOwnPropertySymbols;

	  if($.DESC && $.FW)$redef(ObjectProto, 'propertyIsEnumerable', propertyIsEnumerable, true);
	}

	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call((
	    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
	    'species,split,toPrimitive,toStringTag,unscopables'
	  ).split(','), function(it){
	    var sym = require('./$.wks')(it);
	    symbolStatics[it] = useNative ? sym : wrap(sym);
	  }
	);

	setter = true;

	$def($def.G + $def.W, {Symbol: $Symbol});

	$def($def.S, 'Symbol', symbolStatics);

	$def($def.S + $def.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: getOwnPropertySymbols
	});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setTag($.g.JSON, 'JSON', true);
	},{"./$":244,"./$.assert":225,"./$.cof":227,"./$.def":233,"./$.enum-keys":235,"./$.get-names":238,"./$.keyof":245,"./$.redef":249,"./$.shared":253,"./$.uid":260,"./$.wks":262}],296:[function(require,module,exports){
	'use strict';
	var $         = require('./$')
	  , weak      = require('./$.collection-weak')
	  , leakStore = weak.leakStore
	  , ID        = weak.ID
	  , WEAK      = weak.WEAK
	  , has       = $.has
	  , isObject  = $.isObject
	  , isExtensible = Object.isExtensible || isObject
	  , tmp       = {};

	// 23.3 WeakMap Objects
	var $WeakMap = require('./$.collection')('WeakMap', function(get){
	  return function WeakMap(){ return get(this, arguments[0]); };
	}, {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      if(!isExtensible(key))return leakStore(this).get(key);
	      if(has(key, WEAK))return key[WEAK][this[ID]];
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	}, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  $.each.call(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    require('./$.redef')(proto, key, function(a, b){
	      // store frozen objects on leaky map
	      if(isObject(a) && !isExtensible(a)){
	        var result = leakStore(this)[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}
	},{"./$":244,"./$.collection":231,"./$.collection-weak":230,"./$.redef":249}],297:[function(require,module,exports){
	'use strict';
	var weak = require('./$.collection-weak');

	// 23.4 WeakSet Objects
	require('./$.collection')('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments[0]); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);
	},{"./$.collection":231,"./$.collection-weak":230}],298:[function(require,module,exports){
	'use strict';
	var $def      = require('./$.def')
	  , $includes = require('./$.array-includes')(true);
	$def($def.P, 'Array', {
	  // https://github.com/domenic/Array.prototype.includes
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments[1]);
	  }
	});
	require('./$.unscope')('includes');
	},{"./$.array-includes":223,"./$.def":233,"./$.unscope":261}],299:[function(require,module,exports){
	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	require('./$.collection-to-json')('Map');
	},{"./$.collection-to-json":229}],300:[function(require,module,exports){
	// https://gist.github.com/WebReflection/9353781
	var $       = require('./$')
	  , $def    = require('./$.def')
	  , ownKeys = require('./$.own-keys');

	$def($def.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O      = $.toObject(object)
	      , result = {};
	    $.each.call(ownKeys(O), function(key){
	      $.setDesc(result, key, $.desc(0, $.getDesc(O, key)));
	    });
	    return result;
	  }
	});
	},{"./$":244,"./$.def":233,"./$.own-keys":247}],301:[function(require,module,exports){
	// http://goo.gl/XkBrjD
	var $    = require('./$')
	  , $def = require('./$.def');
	function createObjectToArray(isEntries){
	  return function(object){
	    var O      = $.toObject(object)
	      , keys   = $.getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = Array(length)
	      , key;
	    if(isEntries)while(length > i)result[i] = [key = keys[i++], O[key]];
	    else while(length > i)result[i] = O[keys[i++]];
	    return result;
	  };
	}
	$def($def.S, 'Object', {
	  values:  createObjectToArray(false),
	  entries: createObjectToArray(true)
	});
	},{"./$":244,"./$.def":233}],302:[function(require,module,exports){
	// https://github.com/benjamingr/RexExp.escape
	var $def = require('./$.def');
	$def($def.S, 'RegExp', {
	  escape: require('./$.replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&', true)
	});

	},{"./$.def":233,"./$.replacer":250}],303:[function(require,module,exports){
	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	require('./$.collection-to-json')('Set');
	},{"./$.collection-to-json":229}],304:[function(require,module,exports){
	// https://github.com/mathiasbynens/String.prototype.at
	'use strict';
	var $def = require('./$.def')
	  , $at  = require('./$.string-at')(true);
	$def($def.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});
	},{"./$.def":233,"./$.string-at":255}],305:[function(require,module,exports){
	'use strict';
	var $def = require('./$.def')
	  , $pad = require('./$.string-pad');
	$def($def.P, 'String', {
	  lpad: function lpad(n){
	    return $pad(this, n, arguments[1], true);
	  }
	});
	},{"./$.def":233,"./$.string-pad":256}],306:[function(require,module,exports){
	'use strict';
	var $def = require('./$.def')
	  , $pad = require('./$.string-pad');
	$def($def.P, 'String', {
	  rpad: function rpad(n){
	    return $pad(this, n, arguments[1], false);
	  }
	});
	},{"./$.def":233,"./$.string-pad":256}],307:[function(require,module,exports){
	// JavaScript 1.6 / Strawman array statics shim
	var $       = require('./$')
	  , $def    = require('./$.def')
	  , $Array  = $.core.Array || Array
	  , statics = {};
	function setStatics(keys, length){
	  $.each.call(keys.split(','), function(key){
	    if(length == undefined && key in $Array)statics[key] = $Array[key];
	    else if(key in [])statics[key] = require('./$.ctx')(Function.call, [][key], length);
	  });
	}
	setStatics('pop,reverse,shift,keys,values,entries', 1);
	setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
	setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
	           'reduce,reduceRight,copyWithin,fill,turn');
	$def($def.S, 'Array', statics);
	},{"./$":244,"./$.ctx":232,"./$.def":233}],308:[function(require,module,exports){
	require('./es6.array.iterator');
	var $           = require('./$')
	  , Iterators   = require('./$.iter').Iterators
	  , ITERATOR    = require('./$.wks')('iterator')
	  , ArrayValues = Iterators.Array
	  , NL          = $.g.NodeList
	  , HTC         = $.g.HTMLCollection
	  , NLProto     = NL && NL.prototype
	  , HTCProto    = HTC && HTC.prototype;
	if($.FW){
	  if(NL && !(ITERATOR in NLProto))$.hide(NLProto, ITERATOR, ArrayValues);
	  if(HTC && !(ITERATOR in HTCProto))$.hide(HTCProto, ITERATOR, ArrayValues);
	}
	Iterators.NodeList = Iterators.HTMLCollection = ArrayValues;
	},{"./$":244,"./$.iter":243,"./$.wks":262,"./es6.array.iterator":269}],309:[function(require,module,exports){
	var $def  = require('./$.def')
	  , $task = require('./$.task');
	$def($def.G + $def.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});
	},{"./$.def":233,"./$.task":258}],310:[function(require,module,exports){
	// ie9- setTimeout & setInterval additional parameters fix
	var $         = require('./$')
	  , $def      = require('./$.def')
	  , invoke    = require('./$.invoke')
	  , partial   = require('./$.partial')
	  , navigator = $.g.navigator
	  , MSIE      = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	function wrap(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      $.isFunction(fn) ? fn : Function(fn)
	    ), time);
	  } : set;
	}
	$def($def.G + $def.B + $def.F * MSIE, {
	  setTimeout:  wrap($.g.setTimeout),
	  setInterval: wrap($.g.setInterval)
	});
	},{"./$":244,"./$.def":233,"./$.invoke":239,"./$.partial":248}],311:[function(require,module,exports){
	require('./modules/es5');
	require('./modules/es6.symbol');
	require('./modules/es6.object.assign');
	require('./modules/es6.object.is');
	require('./modules/es6.object.set-prototype-of');
	require('./modules/es6.object.to-string');
	require('./modules/es6.object.statics-accept-primitives');
	require('./modules/es6.function.name');
	require('./modules/es6.function.has-instance');
	require('./modules/es6.number.constructor');
	require('./modules/es6.number.statics');
	require('./modules/es6.math');
	require('./modules/es6.string.from-code-point');
	require('./modules/es6.string.raw');
	require('./modules/es6.string.iterator');
	require('./modules/es6.string.code-point-at');
	require('./modules/es6.string.ends-with');
	require('./modules/es6.string.includes');
	require('./modules/es6.string.repeat');
	require('./modules/es6.string.starts-with');
	require('./modules/es6.array.from');
	require('./modules/es6.array.of');
	require('./modules/es6.array.iterator');
	require('./modules/es6.array.species');
	require('./modules/es6.array.copy-within');
	require('./modules/es6.array.fill');
	require('./modules/es6.array.find');
	require('./modules/es6.array.find-index');
	require('./modules/es6.regexp');
	require('./modules/es6.promise');
	require('./modules/es6.map');
	require('./modules/es6.set');
	require('./modules/es6.weak-map');
	require('./modules/es6.weak-set');
	require('./modules/es6.reflect');
	require('./modules/es7.array.includes');
	require('./modules/es7.string.at');
	require('./modules/es7.string.lpad');
	require('./modules/es7.string.rpad');
	require('./modules/es7.regexp.escape');
	require('./modules/es7.object.get-own-property-descriptors');
	require('./modules/es7.object.to-array');
	require('./modules/es7.map.to-json');
	require('./modules/es7.set.to-json');
	require('./modules/js.array.statics');
	require('./modules/web.timers');
	require('./modules/web.immediate');
	require('./modules/web.dom.iterable');
	module.exports = require('./modules/$').core;

	},{"./modules/$":244,"./modules/es5":263,"./modules/es6.array.copy-within":264,"./modules/es6.array.fill":265,"./modules/es6.array.find":267,"./modules/es6.array.find-index":266,"./modules/es6.array.from":268,"./modules/es6.array.iterator":269,"./modules/es6.array.of":270,"./modules/es6.array.species":271,"./modules/es6.function.has-instance":272,"./modules/es6.function.name":273,"./modules/es6.map":274,"./modules/es6.math":275,"./modules/es6.number.constructor":276,"./modules/es6.number.statics":277,"./modules/es6.object.assign":278,"./modules/es6.object.is":279,"./modules/es6.object.set-prototype-of":280,"./modules/es6.object.statics-accept-primitives":281,"./modules/es6.object.to-string":282,"./modules/es6.promise":283,"./modules/es6.reflect":284,"./modules/es6.regexp":285,"./modules/es6.set":286,"./modules/es6.string.code-point-at":287,"./modules/es6.string.ends-with":288,"./modules/es6.string.from-code-point":289,"./modules/es6.string.includes":290,"./modules/es6.string.iterator":291,"./modules/es6.string.raw":292,"./modules/es6.string.repeat":293,"./modules/es6.string.starts-with":294,"./modules/es6.symbol":295,"./modules/es6.weak-map":296,"./modules/es6.weak-set":297,"./modules/es7.array.includes":298,"./modules/es7.map.to-json":299,"./modules/es7.object.get-own-property-descriptors":300,"./modules/es7.object.to-array":301,"./modules/es7.regexp.escape":302,"./modules/es7.set.to-json":303,"./modules/es7.string.at":304,"./modules/es7.string.lpad":305,"./modules/es7.string.rpad":306,"./modules/js.array.statics":307,"./modules/web.dom.iterable":308,"./modules/web.immediate":309,"./modules/web.timers":310}],312:[function(require,module,exports){

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = require('ms');

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

	},{"ms":314}],313:[function(require,module,exports){
	(function (process){

	/**
	 * Module dependencies.
	 */

	var tty = require('tty');
	var util = require('util');

	/**
	 * This is the Node.js implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = require('./debug');
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [6, 2, 3, 4, 5, 1];

	/**
	 * The file descriptor to write the `debug()` calls to.
	 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
	 *
	 *   $ DEBUG_FD=3 node script.js 3>debug.log
	 */

	var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
	var stream = 1 === fd ? process.stdout :
	             2 === fd ? process.stderr :
	             createWritableStdioStream(fd);

	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
	  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
	  if (0 === debugColors.length) {
	    return tty.isatty(fd);
	  } else {
	    return '0' !== debugColors
	        && 'no' !== debugColors
	        && 'false' !== debugColors
	        && 'disabled' !== debugColors;
	  }
	}

	/**
	 * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
	 */

	var inspect = (4 === util.inspect.length ?
	  // node <= 0.8.x
	  function (v, colors) {
	    return util.inspect(v, void 0, void 0, colors);
	  } :
	  // node > 0.8.x
	  function (v, colors) {
	    return util.inspect(v, { colors: colors });
	  }
	);

	exports.formatters.o = function(v) {
	  return inspect(v, this.useColors)
	    .replace(/\s*\n\s*/g, ' ');
	};

	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	  var name = this.namespace;

	  if (useColors) {
	    var c = this.color;

	    args[0] = '  \u001b[3' + c + ';1m' + name + ' '
	      + '\u001b[0m'
	      + args[0] + '\u001b[3' + c + 'm'
	      + ' +' + exports.humanize(this.diff) + '\u001b[0m';
	  } else {
	    args[0] = new Date().toUTCString()
	      + ' ' + name + ' ' + args[0];
	  }
	  return args;
	}

	/**
	 * Invokes `console.error()` with the specified arguments.
	 */

	function log() {
	  return stream.write(util.format.apply(this, arguments) + '\n');
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  if (null == namespaces) {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  } else {
	    process.env.DEBUG = namespaces;
	  }
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  return process.env.DEBUG;
	}

	/**
	 * Copied from `node/src/node.js`.
	 *
	 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
	 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
	 */

	function createWritableStdioStream (fd) {
	  var stream;
	  var tty_wrap = process.binding('tty_wrap');

	  // Note stream._type is used for test-module-load-list.js

	  switch (tty_wrap.guessHandleType(fd)) {
	    case 'TTY':
	      stream = new tty.WriteStream(fd);
	      stream._type = 'tty';

	      // Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    case 'FILE':
	      var fs = require('fs');
	      stream = new fs.SyncWriteStream(fd, { autoClose: false });
	      stream._type = 'fs';
	      break;

	    case 'PIPE':
	    case 'TCP':
	      var net = require('net');
	      stream = new net.Socket({
	        fd: fd,
	        readable: false,
	        writable: true
	      });

	      // FIXME Should probably have an option in net.Socket to create a
	      // stream from an existing fd which is writable only. But for now
	      // we'll just add this hack and set the `readable` member to false.
	      // Test: ./node test/fixtures/echo.js < /etc/passwd
	      stream.readable = false;
	      stream.read = null;
	      stream._type = 'pipe';

	      // FIXME Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    default:
	      // Probably an error on in uv_guess_handle()
	      throw new Error('Implement me. Unknown stream file type!');
	  }

	  // For supporting legacy API we put the FD here.
	  stream.fd = fd;

	  stream._isStdio = true;

	  return stream;
	}

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	exports.enable(load());

	}).call(this,require('_process'))
	},{"./debug":312,"_process":14,"fs":4,"net":4,"tty":27,"util":30}],314:[function(require,module,exports){
	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	},{}],315:[function(require,module,exports){
	'use strict';
	var repeating = require('repeating');

	// detect either spaces or tabs but not both to properly handle tabs
	// for indentation and spaces for alignment
	var INDENT_RE = /^(?:( )+|\t+)/;

	function getMostUsed(indents) {
		var result = 0;
		var maxUsed = 0;
		var maxWeight = 0;

		for (var n in indents) {
			var indent = indents[n];
			var u = indent[0];
			var w = indent[1];

			if (u > maxUsed || u === maxUsed && w > maxWeight) {
				maxUsed = u;
				maxWeight = w;
				result = +n;
			}
		}

		return result;
	}

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		// used to see if tabs or spaces are the most used
		var tabs = 0;
		var spaces = 0;

		// remember the size of previous line's indentation
		var prev = 0;

		// remember how many indents/unindents as occurred for a given size
		// and how much lines follow a given indentation
		//
		// indents = {
		//    3: [1, 0],
		//    4: [1, 5],
		//    5: [1, 0],
		//   12: [1, 0],
		// }
		var indents = {};

		// pointer to the array of last used indent
		var current;

		// whether the last action was an indent (opposed to an unindent)
		var isIndent;

		str.split(/\n/g).forEach(function (line) {
			if (!line) {
				// ignore empty lines
				return;
			}

			var indent;
			var matches = line.match(INDENT_RE);

			if (!matches) {
				indent = 0;
			} else {
				indent = matches[0].length;

				if (matches[1]) {
					spaces++;
				} else {
					tabs++;
				}
			}

			var diff = indent - prev;
			prev = indent;

			if (diff) {
				// an indent or unindent has been detected

				isIndent = diff > 0;

				current = indents[isIndent ? diff : -diff];

				if (current) {
					current[0]++;
				} else {
					current = indents[diff] = [1, 0];
				}
			} else if (current) {
				// if the last action was an indent, increment the weight
				current[1] += +isIndent;
			}
		});

		var amount = getMostUsed(indents);

		var type;
		var actual;
		if (!amount) {
			type = null;
			actual = '';
		} else if (spaces >= tabs) {
			type = 'space';
			actual = repeating(' ', amount);
		} else {
			type = 'tab';
			actual = repeating('\t', amount);
		}

		return {
			amount: amount,
			type: type,
			indent: actual
		};
	};

	},{"repeating":513}],316:[function(require,module,exports){
	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    function isExpression(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'ArrayExpression':
	            case 'AssignmentExpression':
	            case 'BinaryExpression':
	            case 'CallExpression':
	            case 'ConditionalExpression':
	            case 'FunctionExpression':
	            case 'Identifier':
	            case 'Literal':
	            case 'LogicalExpression':
	            case 'MemberExpression':
	            case 'NewExpression':
	            case 'ObjectExpression':
	            case 'SequenceExpression':
	            case 'ThisExpression':
	            case 'UnaryExpression':
	            case 'UpdateExpression':
	                return true;
	        }
	        return false;
	    }

	    function isIterationStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'DoWhileStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'WhileStatement':
	                return true;
	        }
	        return false;
	    }

	    function isStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'BlockStatement':
	            case 'BreakStatement':
	            case 'ContinueStatement':
	            case 'DebuggerStatement':
	            case 'DoWhileStatement':
	            case 'EmptyStatement':
	            case 'ExpressionStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'IfStatement':
	            case 'LabeledStatement':
	            case 'ReturnStatement':
	            case 'SwitchStatement':
	            case 'ThrowStatement':
	            case 'TryStatement':
	            case 'VariableDeclaration':
	            case 'WhileStatement':
	            case 'WithStatement':
	                return true;
	        }
	        return false;
	    }

	    function isSourceElement(node) {
	      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
	    }

	    function trailingStatement(node) {
	        switch (node.type) {
	        case 'IfStatement':
	            if (node.alternate != null) {
	                return node.alternate;
	            }
	            return node.consequent;

	        case 'LabeledStatement':
	        case 'ForStatement':
	        case 'ForInStatement':
	        case 'WhileStatement':
	        case 'WithStatement':
	            return node.body;
	        }
	        return null;
	    }

	    function isProblematicIfStatement(node) {
	        var current;

	        if (node.type !== 'IfStatement') {
	            return false;
	        }
	        if (node.alternate == null) {
	            return false;
	        }
	        current = node.consequent;
	        do {
	            if (current.type === 'IfStatement') {
	                if (current.alternate == null)  {
	                    return true;
	                }
	            }
	            current = trailingStatement(current);
	        } while (current);

	        return false;
	    }

	    module.exports = {
	        isExpression: isExpression,
	        isStatement: isStatement,
	        isIterationStatement: isIterationStatement,
	        isSourceElement: isSourceElement,
	        isProblematicIfStatement: isProblematicIfStatement,

	        trailingStatement: trailingStatement
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */

	},{}],317:[function(require,module,exports){
	/*
	  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

	    // See `tools/generate-identifier-regex.js`.
	    ES5Regex = {
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
	    };

	    ES6Regex = {
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	    };

	    function isDecimalDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39;  // 0..9
	    }

	    function isHexDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
	            0x61 <= ch && ch <= 0x66 ||     // a..f
	            0x41 <= ch && ch <= 0x46;       // A..F
	    }

	    function isOctalDigit(ch) {
	        return ch >= 0x30 && ch <= 0x37;  // 0..7
	    }

	    // 7.2 White Space

	    NON_ASCII_WHITESPACES = [
	        0x1680, 0x180E,
	        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
	        0x202F, 0x205F,
	        0x3000,
	        0xFEFF
	    ];

	    function isWhiteSpace(ch) {
	        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
	            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
	    }

	    // 7.3 Line Terminators

	    function isLineTerminator(ch) {
	        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
	    }

	    // 7.6 Identifier Names and Identifiers

	    function fromCodePoint(cp) {
	        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
	        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
	        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
	        return cu1 + cu2;
	    }

	    IDENTIFIER_START = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_START[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    IDENTIFIER_PART = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_PART[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch >= 0x30 && ch <= 0x39 ||  // 0..9
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    function isIdentifierStartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    function isIdentifierStartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    module.exports = {
	        isDecimalDigit: isDecimalDigit,
	        isHexDigit: isHexDigit,
	        isOctalDigit: isOctalDigit,
	        isWhiteSpace: isWhiteSpace,
	        isLineTerminator: isLineTerminator,
	        isIdentifierStartES5: isIdentifierStartES5,
	        isIdentifierPartES5: isIdentifierPartES5,
	        isIdentifierStartES6: isIdentifierStartES6,
	        isIdentifierPartES6: isIdentifierPartES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */

	},{}],318:[function(require,module,exports){
	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var code = require('./code');

	    function isStrictModeReservedWordES6(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }

	    function isKeywordES5(id, strict) {
	        // yield should not be treated as keyword under non-strict mode.
	        if (!strict && id === 'yield') {
	            return false;
	        }
	        return isKeywordES6(id, strict);
	    }

	    function isKeywordES6(id, strict) {
	        if (strict && isStrictModeReservedWordES6(id)) {
	            return true;
	        }

	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }

	    function isReservedWordES5(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
	    }

	    function isReservedWordES6(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
	    }

	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }

	    function isIdentifierNameES5(id) {
	        var i, iz, ch;

	        if (id.length === 0) { return false; }

	        ch = id.charCodeAt(0);
	        if (!code.isIdentifierStartES5(ch)) {
	            return false;
	        }

	        for (i = 1, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (!code.isIdentifierPartES5(ch)) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function decodeUtf16(lead, trail) {
	        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	    }

	    function isIdentifierNameES6(id) {
	        var i, iz, ch, lowCh, check;

	        if (id.length === 0) { return false; }

	        check = code.isIdentifierStartES6;
	        for (i = 0, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (0xD800 <= ch && ch <= 0xDBFF) {
	                ++i;
	                if (i >= iz) { return false; }
	                lowCh = id.charCodeAt(i);
	                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
	                    return false;
	                }
	                ch = decodeUtf16(ch, lowCh);
	            }
	            if (!check(ch)) {
	                return false;
	            }
	            check = code.isIdentifierPartES6;
	        }
	        return true;
	    }

	    function isIdentifierES5(id, strict) {
	        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
	    }

	    function isIdentifierES6(id, strict) {
	        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
	    }

	    module.exports = {
	        isKeywordES5: isKeywordES5,
	        isKeywordES6: isKeywordES6,
	        isReservedWordES5: isReservedWordES5,
	        isReservedWordES6: isReservedWordES6,
	        isRestrictedWord: isRestrictedWord,
	        isIdentifierNameES5: isIdentifierNameES5,
	        isIdentifierNameES6: isIdentifierNameES6,
	        isIdentifierES5: isIdentifierES5,
	        isIdentifierES6: isIdentifierES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */

	},{"./code":317}],319:[function(require,module,exports){
	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/


	(function () {
	    'use strict';

	    exports.ast = require('./ast');
	    exports.code = require('./code');
	    exports.keyword = require('./keyword');
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */

	},{"./ast":316,"./code":317,"./keyword":318}],320:[function(require,module,exports){
	module.exports={
		"builtin": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"nonstandard": {
			"escape": false,
			"unescape": false
		},
		"browser": {
			"addEventListener": false,
			"alert": false,
			"applicationCache": false,
			"atob": false,
			"Audio": false,
			"AudioProcessingEvent": false,
			"BeforeUnloadEvent": false,
			"Blob": false,
			"blur": false,
			"btoa": false,
			"cancelAnimationFrame": false,
			"CanvasGradient": false,
			"CanvasPattern": false,
			"CanvasRenderingContext2D": false,
			"clearInterval": false,
			"clearTimeout": false,
			"close": false,
			"closed": false,
			"CloseEvent": false,
			"Comment": false,
			"CompositionEvent": false,
			"confirm": false,
			"console": false,
			"crypto": false,
			"CSS": false,
			"CustomEvent": false,
			"DataView": false,
			"Debug": false,
			"defaultStatus": false,
			"devicePixelRatio": false,
			"dispatchEvent": false,
			"document": false,
			"Document": false,
			"DocumentFragment": false,
			"DOMParser": false,
			"DragEvent": false,
			"Element": false,
			"ElementTimeControl": false,
			"ErrorEvent": false,
			"event": false,
			"Event": false,
			"FileReader": false,
			"fetch": false,
			"find": false,
			"focus": false,
			"FocusEvent": false,
			"FormData": false,
			"frameElement": false,
			"frames": false,
			"GamepadEvent": false,
			"getComputedStyle": false,
			"getSelection": false,
			"HashChangeEvent": false,
			"Headers": false,
			"history": false,
			"HTMLAnchorElement": false,
			"HTMLBaseElement": false,
			"HTMLBlockquoteElement": false,
			"HTMLBodyElement": false,
			"HTMLBRElement": false,
			"HTMLButtonElement": false,
			"HTMLCanvasElement": false,
			"HTMLDirectoryElement": false,
			"HTMLDivElement": false,
			"HTMLDListElement": false,
			"HTMLElement": false,
			"HTMLFieldSetElement": false,
			"HTMLFontElement": false,
			"HTMLFormElement": false,
			"HTMLFrameElement": false,
			"HTMLFrameSetElement": false,
			"HTMLHeadElement": false,
			"HTMLHeadingElement": false,
			"HTMLHRElement": false,
			"HTMLHtmlElement": false,
			"HTMLIFrameElement": false,
			"HTMLImageElement": false,
			"HTMLInputElement": false,
			"HTMLIsIndexElement": false,
			"HTMLLabelElement": false,
			"HTMLLayerElement": false,
			"HTMLLegendElement": false,
			"HTMLLIElement": false,
			"HTMLLinkElement": false,
			"HTMLMapElement": false,
			"HTMLMenuElement": false,
			"HTMLMetaElement": false,
			"HTMLModElement": false,
			"HTMLObjectElement": false,
			"HTMLOListElement": false,
			"HTMLOptGroupElement": false,
			"HTMLOptionElement": false,
			"HTMLParagraphElement": false,
			"HTMLParamElement": false,
			"HTMLPreElement": false,
			"HTMLQuoteElement": false,
			"HTMLScriptElement": false,
			"HTMLSelectElement": false,
			"HTMLStyleElement": false,
			"HTMLTableCaptionElement": false,
			"HTMLTableCellElement": false,
			"HTMLTableColElement": false,
			"HTMLTableElement": false,
			"HTMLTableRowElement": false,
			"HTMLTableSectionElement": false,
			"HTMLTextAreaElement": false,
			"HTMLTitleElement": false,
			"HTMLUListElement": false,
			"HTMLVideoElement": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBEnvironment": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"Image": false,
			"indexedDB": false,
			"innerHeight": false,
			"innerWidth": false,
			"InputEvent": false,
			"Intl": false,
			"KeyboardEvent": false,
			"length": false,
			"localStorage": false,
			"location": false,
			"matchMedia": false,
			"MessageChannel": false,
			"MessageEvent": false,
			"MessagePort": false,
			"MouseEvent": false,
			"moveBy": false,
			"moveTo": false,
			"MutationObserver": false,
			"name": false,
			"navigator": false,
			"Node": false,
			"NodeFilter": false,
			"NodeList": false,
			"Notification": false,
			"OfflineAudioCompletionEvent": false,
			"onbeforeunload": true,
			"onblur": true,
			"onerror": true,
			"onfocus": true,
			"onload": true,
			"onresize": true,
			"onunload": true,
			"open": false,
			"openDatabase": false,
			"opener": false,
			"opera": false,
			"Option": false,
			"outerHeight": false,
			"outerWidth": false,
			"PageTransitionEvent": false,
			"pageXOffset": false,
			"pageYOffset": false,
			"parent": false,
			"PopStateEvent": false,
			"postMessage": false,
			"print": false,
			"ProgressEvent": false,
			"prompt": false,
			"Range": false,
			"Request": false,
			"Response": false,
			"removeEventListener": false,
			"requestAnimationFrame": false,
			"resizeBy": false,
			"resizeTo": false,
			"screen": false,
			"screenX": false,
			"screenY": false,
			"scroll": false,
			"scrollbars": false,
			"scrollBy": false,
			"scrollTo": false,
			"scrollX": false,
			"scrollY": false,
			"self": false,
			"sessionStorage": false,
			"setInterval": false,
			"setTimeout": false,
			"SharedWorker": false,
			"showModalDialog": false,
			"status": false,
			"stop": false,
			"StorageEvent": false,
			"SVGAElement": false,
			"SVGAltGlyphDefElement": false,
			"SVGAltGlyphElement": false,
			"SVGAltGlyphItemElement": false,
			"SVGAngle": false,
			"SVGAnimateColorElement": false,
			"SVGAnimatedAngle": false,
			"SVGAnimatedBoolean": false,
			"SVGAnimatedEnumeration": false,
			"SVGAnimatedInteger": false,
			"SVGAnimatedLength": false,
			"SVGAnimatedLengthList": false,
			"SVGAnimatedNumber": false,
			"SVGAnimatedNumberList": false,
			"SVGAnimatedPathData": false,
			"SVGAnimatedPoints": false,
			"SVGAnimatedPreserveAspectRatio": false,
			"SVGAnimatedRect": false,
			"SVGAnimatedString": false,
			"SVGAnimatedTransformList": false,
			"SVGAnimateElement": false,
			"SVGAnimateMotionElement": false,
			"SVGAnimateTransformElement": false,
			"SVGAnimationElement": false,
			"SVGCircleElement": false,
			"SVGClipPathElement": false,
			"SVGColor": false,
			"SVGColorProfileElement": false,
			"SVGColorProfileRule": false,
			"SVGComponentTransferFunctionElement": false,
			"SVGCSSRule": false,
			"SVGCursorElement": false,
			"SVGDefsElement": false,
			"SVGDescElement": false,
			"SVGDocument": false,
			"SVGElement": false,
			"SVGElementInstance": false,
			"SVGElementInstanceList": false,
			"SVGEllipseElement": false,
			"SVGEvent": false,
			"SVGExternalResourcesRequired": false,
			"SVGFEBlendElement": false,
			"SVGFEColorMatrixElement": false,
			"SVGFEComponentTransferElement": false,
			"SVGFECompositeElement": false,
			"SVGFEConvolveMatrixElement": false,
			"SVGFEDiffuseLightingElement": false,
			"SVGFEDisplacementMapElement": false,
			"SVGFEDistantLightElement": false,
			"SVGFEFloodElement": false,
			"SVGFEFuncAElement": false,
			"SVGFEFuncBElement": false,
			"SVGFEFuncGElement": false,
			"SVGFEFuncRElement": false,
			"SVGFEGaussianBlurElement": false,
			"SVGFEImageElement": false,
			"SVGFEMergeElement": false,
			"SVGFEMergeNodeElement": false,
			"SVGFEMorphologyElement": false,
			"SVGFEOffsetElement": false,
			"SVGFEPointLightElement": false,
			"SVGFESpecularLightingElement": false,
			"SVGFESpotLightElement": false,
			"SVGFETileElement": false,
			"SVGFETurbulenceElement": false,
			"SVGFilterElement": false,
			"SVGFilterPrimitiveStandardAttributes": false,
			"SVGFitToViewBox": false,
			"SVGFontElement": false,
			"SVGFontFaceElement": false,
			"SVGFontFaceFormatElement": false,
			"SVGFontFaceNameElement": false,
			"SVGFontFaceSrcElement": false,
			"SVGFontFaceUriElement": false,
			"SVGForeignObjectElement": false,
			"SVGGElement": false,
			"SVGGlyphElement": false,
			"SVGGlyphRefElement": false,
			"SVGGradientElement": false,
			"SVGHKernElement": false,
			"SVGICCColor": false,
			"SVGImageElement": false,
			"SVGLangSpace": false,
			"SVGLength": false,
			"SVGLengthList": false,
			"SVGLinearGradientElement": false,
			"SVGLineElement": false,
			"SVGLocatable": false,
			"SVGMarkerElement": false,
			"SVGMaskElement": false,
			"SVGMatrix": false,
			"SVGMetadataElement": false,
			"SVGMissingGlyphElement": false,
			"SVGMPathElement": false,
			"SVGNumber": false,
			"SVGNumberList": false,
			"SVGPaint": false,
			"SVGPathElement": false,
			"SVGPathSeg": false,
			"SVGPathSegArcAbs": false,
			"SVGPathSegArcRel": false,
			"SVGPathSegClosePath": false,
			"SVGPathSegCurvetoCubicAbs": false,
			"SVGPathSegCurvetoCubicRel": false,
			"SVGPathSegCurvetoCubicSmoothAbs": false,
			"SVGPathSegCurvetoCubicSmoothRel": false,
			"SVGPathSegCurvetoQuadraticAbs": false,
			"SVGPathSegCurvetoQuadraticRel": false,
			"SVGPathSegCurvetoQuadraticSmoothAbs": false,
			"SVGPathSegCurvetoQuadraticSmoothRel": false,
			"SVGPathSegLinetoAbs": false,
			"SVGPathSegLinetoHorizontalAbs": false,
			"SVGPathSegLinetoHorizontalRel": false,
			"SVGPathSegLinetoRel": false,
			"SVGPathSegLinetoVerticalAbs": false,
			"SVGPathSegLinetoVerticalRel": false,
			"SVGPathSegList": false,
			"SVGPathSegMovetoAbs": false,
			"SVGPathSegMovetoRel": false,
			"SVGPatternElement": false,
			"SVGPoint": false,
			"SVGPointList": false,
			"SVGPolygonElement": false,
			"SVGPolylineElement": false,
			"SVGPreserveAspectRatio": false,
			"SVGRadialGradientElement": false,
			"SVGRect": false,
			"SVGRectElement": false,
			"SVGRenderingIntent": false,
			"SVGScriptElement": false,
			"SVGSetElement": false,
			"SVGStopElement": false,
			"SVGStringList": false,
			"SVGStylable": false,
			"SVGStyleElement": false,
			"SVGSVGElement": false,
			"SVGSwitchElement": false,
			"SVGSymbolElement": false,
			"SVGTests": false,
			"SVGTextContentElement": false,
			"SVGTextElement": false,
			"SVGTextPathElement": false,
			"SVGTextPositioningElement": false,
			"SVGTitleElement": false,
			"SVGTransform": false,
			"SVGTransformable": false,
			"SVGTransformList": false,
			"SVGTRefElement": false,
			"SVGTSpanElement": false,
			"SVGUnitTypes": false,
			"SVGURIReference": false,
			"SVGUseElement": false,
			"SVGViewElement": false,
			"SVGViewSpec": false,
			"SVGVKernElement": false,
			"SVGZoomAndPan": false,
			"Text": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"TimeEvent": false,
			"top": false,
			"TouchEvent": false,
			"UIEvent": false,
			"URL": false,
			"WebGLActiveInfo": false,
			"WebGLBuffer": false,
			"WebGLContextEvent": false,
			"WebGLFramebuffer": false,
			"WebGLProgram": false,
			"WebGLRenderbuffer": false,
			"WebGLRenderingContext": false,
			"WebGLShader": false,
			"WebGLShaderPrecisionFormat": false,
			"WebGLTexture": false,
			"WebGLUniformLocation": false,
			"WebSocket": false,
			"WheelEvent": false,
			"window": false,
			"Window": false,
			"Worker": false,
			"XDomainRequest": false,
			"XMLHttpRequest": false,
			"XMLSerializer": false,
			"XPathEvaluator": false,
			"XPathException": false,
			"XPathExpression": false,
			"XPathNamespace": false,
			"XPathNSResolver": false,
			"XPathResult": false
		},
		"worker": {
			"importScripts": true,
			"postMessage": true,
			"self": true
		},
		"node": {
			"__dirname": false,
			"__filename": false,
			"arguments": false,
			"Buffer": false,
			"clearImmediate": false,
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"DataView": false,
			"exports": true,
			"GLOBAL": false,
			"global": false,
			"module": false,
			"process": false,
			"require": false,
			"setImmediate": false,
			"setInterval": false,
			"setTimeout": false
		},
		"amd": {
			"define": false,
			"require": false
		},
		"mocha": {
			"after": false,
			"afterEach": false,
			"before": false,
			"beforeEach": false,
			"context": false,
			"describe": false,
			"it": false,
			"setup": false,
			"specify": false,
			"suite": false,
			"suiteSetup": false,
			"suiteTeardown": false,
			"teardown": false,
			"test": false,
			"xcontext": false,
			"xdescribe": false,
			"xit": false,
			"xspecify": false
		},
		"jasmine": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fail": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jasmine": false,
			"pending": false,
			"runs": false,
			"spyOn": false,
			"waits": false,
			"waitsFor": false,
			"xdescribe": false,
			"xit": false
		},
		"qunit": {
			"asyncTest": false,
			"deepEqual": false,
			"equal": false,
			"expect": false,
			"module": false,
			"notDeepEqual": false,
			"notEqual": false,
			"notPropEqual": false,
			"notStrictEqual": false,
			"ok": false,
			"propEqual": false,
			"QUnit": false,
			"raises": false,
			"start": false,
			"stop": false,
			"strictEqual": false,
			"test": false,
			"throws": false
		},
		"phantomjs": {
			"console": true,
			"exports": true,
			"phantom": true,
			"require": true,
			"WebPage": true
		},
		"couch": {
			"emit": false,
			"exports": false,
			"getRow": false,
			"log": false,
			"module": false,
			"provides": false,
			"require": false,
			"respond": false,
			"send": false,
			"start": false,
			"sum": false
		},
		"rhino": {
			"defineClass": false,
			"deserialize": false,
			"gc": false,
			"help": false,
			"importClass": false,
			"importPackage": false,
			"java": false,
			"load": false,
			"loadClass": false,
			"Packages": false,
			"print": false,
			"quit": false,
			"readFile": false,
			"readUrl": false,
			"runCommand": false,
			"seal": false,
			"serialize": false,
			"spawn": false,
			"sync": false,
			"toint32": false,
			"version": false
		},
		"wsh": {
			"ActiveXObject": true,
			"Enumerator": true,
			"GetObject": true,
			"ScriptEngine": true,
			"ScriptEngineBuildVersion": true,
			"ScriptEngineMajorVersion": true,
			"ScriptEngineMinorVersion": true,
			"VBArray": true,
			"WScript": true,
			"WSH": true,
			"XDomainRequest": true
		},
		"jquery": {
			"$": false,
			"jQuery": false
		},
		"yui": {
			"Y": false,
			"YUI": false,
			"YUI_config": false
		},
		"shelljs": {
			"cat": false,
			"cd": false,
			"chmod": false,
			"config": false,
			"cp": false,
			"dirs": false,
			"echo": false,
			"env": false,
			"error": false,
			"exec": false,
			"exit": false,
			"find": false,
			"grep": false,
			"ls": false,
			"mkdir": false,
			"mv": false,
			"popd": false,
			"pushd": false,
			"pwd": false,
			"rm": false,
			"sed": false,
			"target": false,
			"tempdir": false,
			"test": false,
			"which": false
		},
		"prototypejs": {
			"$": false,
			"$$": false,
			"$A": false,
			"$break": false,
			"$continue": false,
			"$F": false,
			"$H": false,
			"$R": false,
			"$w": false,
			"Abstract": false,
			"Ajax": false,
			"Autocompleter": false,
			"Builder": false,
			"Class": false,
			"Control": false,
			"Draggable": false,
			"Draggables": false,
			"Droppables": false,
			"Effect": false,
			"Element": false,
			"Enumerable": false,
			"Event": false,
			"Field": false,
			"Form": false,
			"Hash": false,
			"Insertion": false,
			"ObjectRange": false,
			"PeriodicalExecuter": false,
			"Position": false,
			"Prototype": false,
			"Scriptaculous": false,
			"Selector": false,
			"Sortable": false,
			"SortableObserver": false,
			"Sound": false,
			"Template": false,
			"Toggle": false,
			"Try": false
		},
		"meteor": {
			"$": false,
			"_": false,
			"Accounts": false,
			"App": false,
			"Assets": false,
			"Blaze": false,
			"check": false,
			"Cordova": false,
			"DDP": false,
			"DDPServer": false,
			"Deps": false,
			"EJSON": false,
			"Email": false,
			"HTTP": false,
			"Log": false,
			"Match": false,
			"Meteor": false,
			"Mongo": false,
			"MongoInternals": false,
			"Npm": false,
			"Package": false,
			"Plugin": false,
			"process": false,
			"Random": false,
			"ReactiveDict": false,
			"ReactiveVar": false,
			"Router": false,
			"Session": false,
			"share": false,
			"Spacebars": false,
			"Template": false,
			"Tinytest": false,
			"Tracker": false,
			"UI": false,
			"Utils": false,
			"WebApp": false,
			"WebAppInternals": false
		},
		"mongo": {
			"_isWindows": false,
			"_rand": false,
			"BulkWriteResult": false,
			"cat": false,
			"cd": false,
			"connect": false,
			"db": false,
			"getHostName": false,
			"getMemInfo": false,
			"hostname": false,
			"listFiles": false,
			"load": false,
			"ls": false,
			"md5sumFile": false,
			"mkdir": false,
			"Mongo": false,
			"ObjectId": false,
			"PlanCache": false,
			"pwd": false,
			"quit": false,
			"removeFile": false,
			"rs": false,
			"sh": false,
			"UUID": false,
			"version": false,
			"WriteResult": false
		},
		"applescript": {
			"$": false,
			"Application": false,
			"Automation": false,
			"console": false,
			"delay": false,
			"Library": false,
			"ObjC": false,
			"ObjectSpecifier": false,
			"Path": false,
			"Progress": false,
			"Ref": false
		}
	}

	},{}],321:[function(require,module,exports){
	module.exports = require('./globals.json');

	},{"./globals.json":320}],322:[function(require,module,exports){
	// https://github.com/paulmillr/es6-shim
	// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger
	var isNaN = require("is-nan");
	var isFinite = require("is-finite");
	module.exports = Number.isInteger || function(val) {
		return typeof val === "number" &&
			! isNaN(val) &&
			isFinite(val) &&
			parseInt(val, 10) === val;
	};

	},{"is-finite":323,"is-nan":325}],323:[function(require,module,exports){
	'use strict';
	var numberIsNan = require('number-is-nan');

	module.exports = Number.isFinite || function (val) {
		return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
	};

	},{"number-is-nan":324}],324:[function(require,module,exports){
	'use strict';
	module.exports = Number.isNaN || function (x) {
		return x !== x;
	};

	},{}],325:[function(require,module,exports){
	'use strict';

	var define = require('define-properties');

	/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

	var numberIsNaN = function isNaN(value) {
		return value !== value;
	};

	define(numberIsNaN, {
		shim: function shimNumberIsNaN() {
			if (!Number.isNaN) {
				define(Number, { isNaN: numberIsNaN });
			}
			return Number.isNaN || numberIsNaN;
		}
	});

	module.exports = numberIsNaN;

	},{"define-properties":326}],326:[function(require,module,exports){
	'use strict';

	var keys = require('object-keys');
	var foreach = require('foreach');
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

	var toStr = Object.prototype.toString;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			Object.defineProperty(obj, 'x', { value: obj, enumerable: false });
	        /* eslint-disable no-unused-vars */
	        for (var _ in obj) { return false; }
	        /* eslint-enable no-unused-vars */
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			Object.defineProperty(object, name, {
				configurable: true,
				enumerable: false,
				writable: true,
				value: value
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = props.concat(Object.getOwnPropertySymbols(map));
		}
		foreach(props, function (name) {
			defineProperty(object, name, map[name], predicates[name]);
		});
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	module.exports = defineProperties;

	},{"foreach":327,"object-keys":328}],327:[function(require,module,exports){

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	module.exports = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};


	},{}],328:[function(require,module,exports){
	'use strict';

	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var slice = Array.prototype.slice;
	var isArgs = require('./isArguments');
	var hasDontEnumBug = !({ 'toString': null }).propertyIsEnumerable('toString');
	var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var blacklistedKeys = {
		$window: true,
		$console: true,
		$parent: true,
		$self: true,
		$frames: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			if (!blacklistedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' && !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};

	keysShim.shim = function shimObjectKeys() {
		if (!Object.keys) {
			Object.keys = keysShim;
		} else {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				return (Object.keys(arguments) || '').length === 2;
			}(1, 2));
			if (!keysWorksWithArguments) {
				var originalKeys = Object.keys;
				Object.keys = function keys(object) {
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					} else {
						return originalKeys(object);
					}
				};
			}
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;

	},{"./isArguments":329}],329:[function(require,module,exports){
	'use strict';

	var toStr = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};

	},{}],330:[function(require,module,exports){
	// Copyright 2014, 2015 Simon Lydell
	// X11 (“MIT”) Licensed. (See LICENSE.)

	// This regex comes from regex.coffee, and is inserted here by generate-index.js
	// (run `npm run build`).
	module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|((?:0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?))|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?:~]|[;,.[\](){}])|(\s+)|(^$|[\s\S])/g

	module.exports.matchToToken = function(match) {
	  var token = {type: "invalid", value: match[0]}
	       if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4])
	  else if (match[ 5]) token.type = "comment"
	  else if (match[ 6]) token.type = "comment", token.closed = !!match[7]
	  else if (match[ 8]) token.type = "regex"
	  else if (match[ 9]) token.type = "number"
	  else if (match[10]) token.type = "name"
	  else if (match[11]) token.type = "punctuator"
	  else if (match[12]) token.type = "whitespace"
	  return token
	}

	},{}],331:[function(require,module,exports){
	// Copyright 2014, 2015 Simon Lydell
	// X11 (“MIT”) Licensed. (See LICENSE.)

	var leftPad = require("left-pad")

	function get(options, key, defaultValue) {
	  return (key in options ? options[key] : defaultValue)
	}

	function lineNumbers(code, options) {
	  var getOption = get.bind(null, options || {})
	  var transform = getOption("transform", Function.prototype)
	  var padding   = getOption("padding", " ")
	  var before    = getOption("before", " ")
	  var after     = getOption("after", " | ")
	  var start     = getOption("start", 1)
	  var isArray   = Array.isArray(code)
	  var lines     = (isArray ? code : code.split("\n"))
	  var end       = start + lines.length - 1
	  var width     = String(end).length
	  var numbered  = lines.map(function(line, index) {
	    var number  = start + index
	    var params  = {before: before, number: number, width: width, after: after,
	                   line: line}
	    transform(params)
	    return params.before + leftPad(params.number, width, padding) +
	           params.after + params.line
	  })
	  return (isArray ? numbered : numbered.join("\n"))
	}

	module.exports = lineNumbers

	},{"left-pad":332}],332:[function(require,module,exports){
	module.exports = leftpad;

	function leftpad (str, len, ch) {
	  str = String(str);

	  var i = -1;

	  ch || (ch = ' ');
	  len = len - str.length;


	  while (++i < len) {
	    str = ch + str;
	  }

	  return str;
	}

	},{}],333:[function(require,module,exports){
	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */
	function compact(array) {
	  var index = -1,
	      length = array ? array.length : 0,
	      resIndex = -1,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}

	module.exports = compact;

	},{}],334:[function(require,module,exports){
	var baseFlatten = require('../internal/baseFlatten'),
	    isIterateeCall = require('../internal/isIterateeCall');

	/**
	 * Flattens a nested array. If `isDeep` is `true` the array is recursively
	 * flattened, otherwise it is only flattened a single level.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, 3, [4]]]);
	 * // => [1, 2, 3, [4]]
	 *
	 * // using `isDeep`
	 * _.flatten([1, [2, 3, [4]]], true);
	 * // => [1, 2, 3, 4]
	 */
	function flatten(array, isDeep, guard) {
	  var length = array ? array.length : 0;
	  if (guard && isIterateeCall(array, isDeep, guard)) {
	    isDeep = false;
	  }
	  return length ? baseFlatten(array, isDeep) : [];
	}

	module.exports = flatten;

	},{"../internal/baseFlatten":363,"../internal/isIterateeCall":413}],335:[function(require,module,exports){
	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;

	},{}],336:[function(require,module,exports){
	var baseIndexOf = require('../internal/baseIndexOf');

	/** Used for native method references. */
	var arrayProto = Array.prototype;

	/** Native method references. */
	var splice = arrayProto.splice;

	/**
	 * Removes all provided values from `array` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.without`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...*} [values] The values to remove.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3, 1, 2, 3];
	 *
	 * _.pull(array, 2, 3);
	 * console.log(array);
	 * // => [1, 1]
	 */
	function pull() {
	  var args = arguments,
	      array = args[0];

	  if (!(array && array.length)) {
	    return array;
	  }
	  var index = 0,
	      indexOf = baseIndexOf,
	      length = args.length;

	  while (++index < length) {
	    var fromIndex = 0,
	        value = args[index];

	    while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	      splice.call(array, fromIndex, 1);
	    }
	  }
	  return array;
	}

	module.exports = pull;

	},{"../internal/baseIndexOf":370}],337:[function(require,module,exports){
	var baseCallback = require('../internal/baseCallback'),
	    baseUniq = require('../internal/baseUniq'),
	    isIterateeCall = require('../internal/isIterateeCall'),
	    sortedUniq = require('../internal/sortedUniq');

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurence of each element
	 * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	 * for sorted arrays. If an iteratee function is provided it is invoked for
	 * each element in the array to generate the criterion by which uniqueness
	 * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index, array).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias unique
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {boolean} [isSorted] Specify the array is sorted.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new duplicate-value-free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 *
	 * // using `isSorted`
	 * _.uniq([1, 1, 2], true);
	 * // => [1, 2]
	 *
	 * // using an iteratee function
	 * _.uniq([1, 2.5, 1.5, 2], function(n) {
	 *   return this.floor(n);
	 * }, Math);
	 * // => [1, 2.5]
	 *
	 * // using the `_.property` callback shorthand
	 * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */
	function uniq(array, isSorted, iteratee, thisArg) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (isSorted != null && typeof isSorted != 'boolean') {
	    thisArg = iteratee;
	    iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	    isSorted = false;
	  }
	  iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
	  return (isSorted)
	    ? sortedUniq(array, iteratee)
	    : baseUniq(array, iteratee);
	}

	module.exports = uniq;

	},{"../internal/baseCallback":357,"../internal/baseUniq":386,"../internal/isIterateeCall":413,"../internal/sortedUniq":419}],338:[function(require,module,exports){
	module.exports = require('./includes');

	},{"./includes":341}],339:[function(require,module,exports){
	module.exports = require('./forEach');

	},{"./forEach":340}],340:[function(require,module,exports){
	var arrayEach = require('../internal/arrayEach'),
	    baseEach = require('../internal/baseEach'),
	    createForEach = require('../internal/createForEach');

	/**
	 * Iterates over elements of `collection` invoking `iteratee` for each element.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection). Iteratee functions may exit iteration early
	 * by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length" property
	 * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	 * may be used for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @alias each
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array|Object|string} Returns `collection`.
	 * @example
	 *
	 * _([1, 2]).forEach(function(n) {
	 *   console.log(n);
	 * }).value();
	 * // => logs each value from left to right and returns the array
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	 *   console.log(n, key);
	 * });
	 * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	 */
	var forEach = createForEach(arrayEach, baseEach);

	module.exports = forEach;

	},{"../internal/arrayEach":349,"../internal/baseEach":361,"../internal/createForEach":398}],341:[function(require,module,exports){
	var baseIndexOf = require('../internal/baseIndexOf'),
	    getLength = require('../internal/getLength'),
	    isArray = require('../lang/isArray'),
	    isIterateeCall = require('../internal/isIterateeCall'),
	    isLength = require('../internal/isLength'),
	    isString = require('../lang/isString'),
	    values = require('../object/values');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Checks if `value` is in `collection` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	 * from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @alias contains, include
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {*} target The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	 * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	 * // => true
	 *
	 * _.includes('pebbles', 'eb');
	 * // => true
	 */
	function includes(collection, target, fromIndex, guard) {
	  var length = collection ? getLength(collection) : 0;
	  if (!isLength(length)) {
	    collection = values(collection);
	    length = collection.length;
	  }
	  if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	    fromIndex = 0;
	  } else {
	    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	  }
	  return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	    ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	    : (!!length && baseIndexOf(collection, target, fromIndex) > -1);
	}

	module.exports = includes;

	},{"../internal/baseIndexOf":370,"../internal/getLength":404,"../internal/isIterateeCall":413,"../internal/isLength":415,"../lang/isArray":425,"../lang/isString":434,"../object/values":445}],342:[function(require,module,exports){
	var arrayMap = require('../internal/arrayMap'),
	    baseCallback = require('../internal/baseCallback'),
	    baseMap = require('../internal/baseMap'),
	    isArray = require('../lang/isArray');

	/**
	 * Creates an array of values by running each element in `collection` through
	 * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	 * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	 * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	 * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	 * `sum`, `uniq`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @alias collect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function timesThree(n) {
	 *   return n * 3;
	 * }
	 *
	 * _.map([1, 2], timesThree);
	 * // => [3, 6]
	 *
	 * _.map({ 'a': 1, 'b': 2 }, timesThree);
	 * // => [3, 6] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee, thisArg) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  iteratee = baseCallback(iteratee, thisArg, 3);
	  return func(collection, iteratee);
	}

	module.exports = map;

	},{"../internal/arrayMap":350,"../internal/baseCallback":357,"../internal/baseMap":374,"../lang/isArray":425}],343:[function(require,module,exports){
	var arrayReduceRight = require('../internal/arrayReduceRight'),
	    baseEachRight = require('../internal/baseEachRight'),
	    createReduce = require('../internal/createReduce');

	/**
	 * This method is like `_.reduce` except that it iterates over elements of
	 * `collection` from right to left.
	 *
	 * @static
	 * @memberOf _
	 * @alias foldr
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * var array = [[0, 1], [2, 3], [4, 5]];
	 *
	 * _.reduceRight(array, function(flattened, other) {
	 *   return flattened.concat(other);
	 * }, []);
	 * // => [4, 5, 2, 3, 0, 1]
	 */
	var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	module.exports = reduceRight;

	},{"../internal/arrayReduceRight":352,"../internal/baseEachRight":362,"../internal/createReduce":399}],344:[function(require,module,exports){
	var arraySome = require('../internal/arraySome'),
	    baseCallback = require('../internal/baseCallback'),
	    baseSome = require('../internal/baseSome'),
	    isArray = require('../lang/isArray'),
	    isIterateeCall = require('../internal/isIterateeCall');

	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * The function returns as soon as it finds a passing value and does not iterate
	 * over the entire collection. The predicate is bound to `thisArg` and invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias any
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.some(users, 'active', false);
	 * // => true
	 *
	 * // using the `_.property` callback shorthand
	 * _.some(users, 'active');
	 * // => true
	 */
	function some(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arraySome : baseSome;
	  if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	    predicate = undefined;
	  }
	  if (typeof predicate != 'function' || thisArg !== undefined) {
	    predicate = baseCallback(predicate, thisArg, 3);
	  }
	  return func(collection, predicate);
	}

	module.exports = some;

	},{"../internal/arraySome":353,"../internal/baseCallback":357,"../internal/baseSome":383,"../internal/isIterateeCall":413,"../lang/isArray":425}],345:[function(require,module,exports){
	var baseCallback = require('../internal/baseCallback'),
	    baseMap = require('../internal/baseMap'),
	    baseSortBy = require('../internal/baseSortBy'),
	    compareAscending = require('../internal/compareAscending'),
	    isIterateeCall = require('../internal/isIterateeCall');

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection through `iteratee`. This method performs
	 * a stable sort, that is, it preserves the original sort order of equal elements.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return Math.sin(n);
	 * });
	 * // => [3, 1, 2]
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return this.sin(n);
	 * }, Math);
	 * // => [3, 1, 2]
	 *
	 * var users = [
	 *   { 'user': 'fred' },
	 *   { 'user': 'pebbles' },
	 *   { 'user': 'barney' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.sortBy(users, 'user'), 'user');
	 * // => ['barney', 'fred', 'pebbles']
	 */
	function sortBy(collection, iteratee, thisArg) {
	  if (collection == null) {
	    return [];
	  }
	  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	    iteratee = undefined;
	  }
	  var index = -1;
	  iteratee = baseCallback(iteratee, thisArg, 3);

	  var result = baseMap(collection, function(value, key, collection) {
	    return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	  });
	  return baseSortBy(result, compareAscending);
	}

	module.exports = sortBy;

	},{"../internal/baseCallback":357,"../internal/baseMap":374,"../internal/baseSortBy":384,"../internal/compareAscending":392,"../internal/isIterateeCall":413}],346:[function(require,module,exports){
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;

	},{}],347:[function(require,module,exports){
	(function (global){
	var cachePush = require('./cachePush'),
	    getNative = require('./getNative');

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;

	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}

	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./cachePush":391,"./getNative":406}],348:[function(require,module,exports){
	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = arrayCopy;

	},{}],349:[function(require,module,exports){
	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;

	},{}],350:[function(require,module,exports){
	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;

	},{}],351:[function(require,module,exports){
	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;

	},{}],352:[function(require,module,exports){
	/**
	 * A specialized version of `_.reduceRight` for arrays without support for
	 * callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initFromArray] Specify using the last element of `array`
	 *  as the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	  var length = array.length;
	  if (initFromArray && length) {
	    accumulator = array[--length];
	  }
	  while (length--) {
	    accumulator = iteratee(accumulator, array[length], length, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduceRight;

	},{}],353:[function(require,module,exports){
	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;

	},{}],354:[function(require,module,exports){
	/**
	 * Used by `_.defaults` to customize its `_.assign` use.
	 *
	 * @private
	 * @param {*} objectValue The destination object property value.
	 * @param {*} sourceValue The source object property value.
	 * @returns {*} Returns the value to assign to the destination object.
	 */
	function assignDefaults(objectValue, sourceValue) {
	  return objectValue === undefined ? sourceValue : objectValue;
	}

	module.exports = assignDefaults;

	},{}],355:[function(require,module,exports){
	var keys = require('../object/keys');

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;

	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);

	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}

	module.exports = assignWith;

	},{"../object/keys":441}],356:[function(require,module,exports){
	var baseCopy = require('./baseCopy'),
	    keys = require('../object/keys');

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;

	},{"../object/keys":441,"./baseCopy":360}],357:[function(require,module,exports){
	var baseMatches = require('./baseMatches'),
	    baseMatchesProperty = require('./baseMatchesProperty'),
	    bindCallback = require('./bindCallback'),
	    identity = require('../utility/identity'),
	    property = require('../utility/property');

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;

	},{"../utility/identity":448,"../utility/property":449,"./baseMatches":375,"./baseMatchesProperty":376,"./bindCallback":388}],358:[function(require,module,exports){
	var arrayCopy = require('./arrayCopy'),
	    arrayEach = require('./arrayEach'),
	    baseAssign = require('./baseAssign'),
	    baseForOwn = require('./baseForOwn'),
	    initCloneArray = require('./initCloneArray'),
	    initCloneByTag = require('./initCloneByTag'),
	    initCloneObject = require('./initCloneObject'),
	    isArray = require('../lang/isArray'),
	    isObject = require('../lang/isObject');

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	cloneableTags[dateTag] = cloneableTags[float32Tag] =
	cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[stringTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[mapTag] = cloneableTags[setTag] =
	cloneableTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * The base implementation of `_.clone` without support for argument juggling
	 * and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The object `value` belongs to.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates clones with source counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return arrayCopy(value, result);
	    }
	  } else {
	    var tag = objToString.call(value),
	        isFunc = tag == funcTag;

	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return baseAssign(result, value);
	      }
	    } else {
	      return cloneableTags[tag]
	        ? initCloneByTag(value, tag, isDeep)
	        : (object ? value : {});
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == value) {
	      return stackB[length];
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate it with its clone.
	  stackA.push(value);
	  stackB.push(result);

	  // Recursively populate clone (susceptible to call stack limits).
	  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	  });
	  return result;
	}

	module.exports = baseClone;

	},{"../lang/isArray":425,"../lang/isObject":431,"./arrayCopy":348,"./arrayEach":349,"./baseAssign":356,"./baseForOwn":366,"./initCloneArray":408,"./initCloneByTag":409,"./initCloneObject":410}],359:[function(require,module,exports){
	/**
	 * The base implementation of `compareAscending` which compares values and
	 * sorts them in ascending order without guaranteeing a stable sort.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function baseCompareAscending(value, other) {
	  if (value !== other) {
	    var valIsNull = value === null,
	        valIsUndef = value === undefined,
	        valIsReflexive = value === value;

	    var othIsNull = other === null,
	        othIsUndef = other === undefined,
	        othIsReflexive = other === other;

	    if ((value > other && !othIsNull) || !valIsReflexive ||
	        (valIsNull && !othIsUndef && othIsReflexive) ||
	        (valIsUndef && othIsReflexive)) {
	      return 1;
	    }
	    if ((value < other && !valIsNull) || !othIsReflexive ||
	        (othIsNull && !valIsUndef && valIsReflexive) ||
	        (othIsUndef && valIsReflexive)) {
	      return -1;
	    }
	  }
	  return 0;
	}

	module.exports = baseCompareAscending;

	},{}],360:[function(require,module,exports){
	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;

	},{}],361:[function(require,module,exports){
	var baseForOwn = require('./baseForOwn'),
	    createBaseEach = require('./createBaseEach');

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;

	},{"./baseForOwn":366,"./createBaseEach":394}],362:[function(require,module,exports){
	var baseForOwnRight = require('./baseForOwnRight'),
	    createBaseEach = require('./createBaseEach');

	/**
	 * The base implementation of `_.forEachRight` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEachRight = createBaseEach(baseForOwnRight, true);

	module.exports = baseEachRight;

	},{"./baseForOwnRight":367,"./createBaseEach":394}],363:[function(require,module,exports){
	var arrayPush = require('./arrayPush'),
	    isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isArrayLike = require('./isArrayLike'),
	    isObjectLike = require('./isObjectLike');

	/**
	 * The base implementation of `_.flatten` with added support for restricting
	 * flattening and specifying the start index.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);

	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    if (isObjectLike(value) && isArrayLike(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;

	},{"../lang/isArguments":424,"../lang/isArray":425,"./arrayPush":351,"./isArrayLike":411,"./isObjectLike":416}],364:[function(require,module,exports){
	var createBaseFor = require('./createBaseFor');

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;

	},{"./createBaseFor":395}],365:[function(require,module,exports){
	var baseFor = require('./baseFor'),
	    keysIn = require('../object/keysIn');

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;

	},{"../object/keysIn":442,"./baseFor":364}],366:[function(require,module,exports){
	var baseFor = require('./baseFor'),
	    keys = require('../object/keys');

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;

	},{"../object/keys":441,"./baseFor":364}],367:[function(require,module,exports){
	var baseForRight = require('./baseForRight'),
	    keys = require('../object/keys');

	/**
	 * The base implementation of `_.forOwnRight` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwnRight(object, iteratee) {
	  return baseForRight(object, iteratee, keys);
	}

	module.exports = baseForOwnRight;

	},{"../object/keys":441,"./baseForRight":368}],368:[function(require,module,exports){
	var createBaseFor = require('./createBaseFor');

	/**
	 * This function is like `baseFor` except that it iterates over properties
	 * in the opposite order.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseForRight = createBaseFor(true);

	module.exports = baseForRight;

	},{"./createBaseFor":395}],369:[function(require,module,exports){
	var toObject = require('./toObject');

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  if (pathKey !== undefined && pathKey in toObject(object)) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;

	},{"./toObject":420}],370:[function(require,module,exports){
	var indexOfNaN = require('./indexOfNaN');

	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;

	},{"./indexOfNaN":407}],371:[function(require,module,exports){
	var baseIsEqualDeep = require('./baseIsEqualDeep'),
	    isObject = require('../lang/isObject'),
	    isObjectLike = require('./isObjectLike');

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;

	},{"../lang/isObject":431,"./baseIsEqualDeep":372,"./isObjectLike":416}],372:[function(require,module,exports){
	var equalArrays = require('./equalArrays'),
	    equalByTag = require('./equalByTag'),
	    equalObjects = require('./equalObjects'),
	    isArray = require('../lang/isArray'),
	    isTypedArray = require('../lang/isTypedArray');

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;

	},{"../lang/isArray":425,"../lang/isTypedArray":435,"./equalArrays":400,"./equalByTag":401,"./equalObjects":402}],373:[function(require,module,exports){
	var baseIsEqual = require('./baseIsEqual'),
	    toObject = require('./toObject');

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;

	},{"./baseIsEqual":371,"./toObject":420}],374:[function(require,module,exports){
	var baseEach = require('./baseEach'),
	    isArrayLike = require('./isArrayLike');

	/**
	 * The base implementation of `_.map` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;

	},{"./baseEach":361,"./isArrayLike":411}],375:[function(require,module,exports){
	var baseIsMatch = require('./baseIsMatch'),
	    getMatchData = require('./getMatchData'),
	    toObject = require('./toObject');

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value && (value !== undefined || (key in toObject(object)));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;

	},{"./baseIsMatch":373,"./getMatchData":405,"./toObject":420}],376:[function(require,module,exports){
	var baseGet = require('./baseGet'),
	    baseIsEqual = require('./baseIsEqual'),
	    baseSlice = require('./baseSlice'),
	    isArray = require('../lang/isArray'),
	    isKey = require('./isKey'),
	    isStrictComparable = require('./isStrictComparable'),
	    last = require('../array/last'),
	    toObject = require('./toObject'),
	    toPath = require('./toPath');

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;

	},{"../array/last":335,"../lang/isArray":425,"./baseGet":369,"./baseIsEqual":371,"./baseSlice":382,"./isKey":414,"./isStrictComparable":417,"./toObject":420,"./toPath":421}],377:[function(require,module,exports){
	var arrayEach = require('./arrayEach'),
	    baseMergeDeep = require('./baseMergeDeep'),
	    isArray = require('../lang/isArray'),
	    isArrayLike = require('./isArrayLike'),
	    isObject = require('../lang/isObject'),
	    isObjectLike = require('./isObjectLike'),
	    isTypedArray = require('../lang/isTypedArray'),
	    keys = require('../object/keys');

	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);

	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}

	module.exports = baseMerge;

	},{"../lang/isArray":425,"../lang/isObject":431,"../lang/isTypedArray":435,"../object/keys":441,"./arrayEach":349,"./baseMergeDeep":378,"./isArrayLike":411,"./isObjectLike":416}],378:[function(require,module,exports){
	var arrayCopy = require('./arrayCopy'),
	    isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isArrayLike = require('./isArrayLike'),
	    isPlainObject = require('../lang/isPlainObject'),
	    isTypedArray = require('../lang/isTypedArray'),
	    toPlainObject = require('../lang/toPlainObject');

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];

	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;

	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}

	module.exports = baseMergeDeep;

	},{"../lang/isArguments":424,"../lang/isArray":425,"../lang/isPlainObject":432,"../lang/isTypedArray":435,"../lang/toPlainObject":436,"./arrayCopy":348,"./isArrayLike":411}],379:[function(require,module,exports){
	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;

	},{}],380:[function(require,module,exports){
	var baseGet = require('./baseGet'),
	    toPath = require('./toPath');

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;

	},{"./baseGet":369,"./toPath":421}],381:[function(require,module,exports){
	/**
	 * The base implementation of `_.reduce` and `_.reduceRight` without support
	 * for callback shorthands and `this` binding, which iterates over `collection`
	 * using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initFromCollection Specify using the first or last element
	 *  of `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	  eachFunc(collection, function(value, index, collection) {
	    accumulator = initFromCollection
	      ? (initFromCollection = false, value)
	      : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	module.exports = baseReduce;

	},{}],382:[function(require,module,exports){
	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;

	},{}],383:[function(require,module,exports){
	var baseEach = require('./baseEach');

	/**
	 * The base implementation of `_.some` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function baseSome(collection, predicate) {
	  var result;

	  baseEach(collection, function(value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}

	module.exports = baseSome;

	},{"./baseEach":361}],384:[function(require,module,exports){
	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define
	 * the sort order of `array` and replaces criteria objects with their
	 * corresponding values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	module.exports = baseSortBy;

	},{}],385:[function(require,module,exports){
	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;

	},{}],386:[function(require,module,exports){
	var baseIndexOf = require('./baseIndexOf'),
	    cacheIndexOf = require('./cacheIndexOf'),
	    createCache = require('./createCache');

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniq` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate-value-free array.
	 */
	function baseUniq(array, iteratee) {
	  var index = -1,
	      indexOf = baseIndexOf,
	      length = array.length,
	      isCommon = true,
	      isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	      seen = isLarge ? createCache() : null,
	      result = [];

	  if (seen) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	  } else {
	    isLarge = false;
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;

	    if (isCommon && value === value) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (indexOf(seen, computed, 0) < 0) {
	      if (iteratee || isLarge) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;

	},{"./baseIndexOf":370,"./cacheIndexOf":390,"./createCache":396}],387:[function(require,module,exports){
	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  var index = -1,
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = object[props[index]];
	  }
	  return result;
	}

	module.exports = baseValues;

	},{}],388:[function(require,module,exports){
	var identity = require('../utility/identity');

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;

	},{"../utility/identity":448}],389:[function(require,module,exports){
	(function (global){
	/** Native method references. */
	var ArrayBuffer = global.ArrayBuffer,
	    Uint8Array = global.Uint8Array;

	/**
	 * Creates a clone of the given array buffer.
	 *
	 * @private
	 * @param {ArrayBuffer} buffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function bufferClone(buffer) {
	  var result = new ArrayBuffer(buffer.byteLength),
	      view = new Uint8Array(result);

	  view.set(new Uint8Array(buffer));
	  return result;
	}

	module.exports = bufferClone;

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],390:[function(require,module,exports){
	var isObject = require('../lang/isObject');

	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	  return result ? 0 : -1;
	}

	module.exports = cacheIndexOf;

	},{"../lang/isObject":431}],391:[function(require,module,exports){
	var isObject = require('../lang/isObject');

	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}

	module.exports = cachePush;

	},{"../lang/isObject":431}],392:[function(require,module,exports){
	var baseCompareAscending = require('./baseCompareAscending');

	/**
	 * Used by `_.sortBy` to compare transformed elements of a collection and stable
	 * sort them in ascending order.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareAscending(object, other) {
	  return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	}

	module.exports = compareAscending;

	},{"./baseCompareAscending":359}],393:[function(require,module,exports){
	var bindCallback = require('./bindCallback'),
	    isIterateeCall = require('./isIterateeCall'),
	    restParam = require('../function/restParam');

	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;

	},{"../function/restParam":346,"./bindCallback":388,"./isIterateeCall":413}],394:[function(require,module,exports){
	var getLength = require('./getLength'),
	    isLength = require('./isLength'),
	    toObject = require('./toObject');

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;

	},{"./getLength":404,"./isLength":415,"./toObject":420}],395:[function(require,module,exports){
	var toObject = require('./toObject');

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;

	},{"./toObject":420}],396:[function(require,module,exports){
	(function (global){
	var SetCache = require('./SetCache'),
	    getNative = require('./getNative');

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}

	module.exports = createCache;

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./SetCache":347,"./getNative":406}],397:[function(require,module,exports){
	var restParam = require('../function/restParam');

	/**
	 * Creates a `_.defaults` or `_.defaultsDeep` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Function} Returns the new defaults function.
	 */
	function createDefaults(assigner, customizer) {
	  return restParam(function(args) {
	    var object = args[0];
	    if (object == null) {
	      return object;
	    }
	    args.push(customizer);
	    return assigner.apply(undefined, args);
	  });
	}

	module.exports = createDefaults;

	},{"../function/restParam":346}],398:[function(require,module,exports){
	var bindCallback = require('./bindCallback'),
	    isArray = require('../lang/isArray');

	/**
	 * Creates a function for `_.forEach` or `_.forEachRight`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over an array.
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @returns {Function} Returns the new each function.
	 */
	function createForEach(arrayFunc, eachFunc) {
	  return function(collection, iteratee, thisArg) {
	    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	      ? arrayFunc(collection, iteratee)
	      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	  };
	}

	module.exports = createForEach;

	},{"../lang/isArray":425,"./bindCallback":388}],399:[function(require,module,exports){
	var baseCallback = require('./baseCallback'),
	    baseReduce = require('./baseReduce'),
	    isArray = require('../lang/isArray');

	/**
	 * Creates a function for `_.reduce` or `_.reduceRight`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over an array.
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @returns {Function} Returns the new each function.
	 */
	function createReduce(arrayFunc, eachFunc) {
	  return function(collection, iteratee, accumulator, thisArg) {
	    var initFromArray = arguments.length < 3;
	    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	      ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	      : baseReduce(collection, baseCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	  };
	}

	module.exports = createReduce;

	},{"../lang/isArray":425,"./baseCallback":357,"./baseReduce":381}],400:[function(require,module,exports){
	var arraySome = require('./arraySome');

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;

	},{"./arraySome":353}],401:[function(require,module,exports){
	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;

	},{}],402:[function(require,module,exports){
	var keys = require('../object/keys');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;

	},{"../object/keys":441}],403:[function(require,module,exports){
	/** Used to escape characters for inclusion in compiled regexes. */
	var regexpEscapes = {
	  '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	  '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	  'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	  'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	  'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	};

	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
	  '\\': '\\',
	  "'": "'",
	  '\n': 'n',
	  '\r': 'r',
	  '\u2028': 'u2028',
	  '\u2029': 'u2029'
	};

	/**
	 * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @param {string} leadingChar The capture group for a leading character.
	 * @param {string} whitespaceChar The capture group for a whitespace character.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	  if (leadingChar) {
	    chr = regexpEscapes[chr];
	  } else if (whitespaceChar) {
	    chr = stringEscapes[chr];
	  }
	  return '\\' + chr;
	}

	module.exports = escapeRegExpChar;

	},{}],404:[function(require,module,exports){
	var baseProperty = require('./baseProperty');

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;

	},{"./baseProperty":379}],405:[function(require,module,exports){
	var isStrictComparable = require('./isStrictComparable'),
	    pairs = require('../object/pairs');

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;

	},{"../object/pairs":444,"./isStrictComparable":417}],406:[function(require,module,exports){
	var isNative = require('../lang/isNative');

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;

	},{"../lang/isNative":429}],407:[function(require,module,exports){
	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;

	},{}],408:[function(require,module,exports){
	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add array properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;

	},{}],409:[function(require,module,exports){
	var bufferClone = require('./bufferClone');

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return bufferClone(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      var buffer = object.buffer;
	      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      var result = new Ctor(object.source, reFlags.exec(object));
	      result.lastIndex = object.lastIndex;
	  }
	  return result;
	}

	module.exports = initCloneByTag;

	},{"./bufferClone":389}],410:[function(require,module,exports){
	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  var Ctor = object.constructor;
	  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	    Ctor = Object;
	  }
	  return new Ctor;
	}

	module.exports = initCloneObject;

	},{}],411:[function(require,module,exports){
	var getLength = require('./getLength'),
	    isLength = require('./isLength');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;

	},{"./getLength":404,"./isLength":415}],412:[function(require,module,exports){
	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;

	},{}],413:[function(require,module,exports){
	var isArrayLike = require('./isArrayLike'),
	    isIndex = require('./isIndex'),
	    isObject = require('../lang/isObject');

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	module.exports = isIterateeCall;

	},{"../lang/isObject":431,"./isArrayLike":411,"./isIndex":412}],414:[function(require,module,exports){
	var isArray = require('../lang/isArray'),
	    toObject = require('./toObject');

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;

	},{"../lang/isArray":425,"./toObject":420}],415:[function(require,module,exports){
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;

	},{}],416:[function(require,module,exports){
	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;

	},{}],417:[function(require,module,exports){
	var isObject = require('../lang/isObject');

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;

	},{"../lang/isObject":431}],418:[function(require,module,exports){
	var isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isIndex = require('./isIndex'),
	    isLength = require('./isLength'),
	    keysIn = require('../object/keysIn');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;

	},{"../lang/isArguments":424,"../lang/isArray":425,"../object/keysIn":442,"./isIndex":412,"./isLength":415}],419:[function(require,module,exports){
	/**
	 * An implementation of `_.uniq` optimized for sorted arrays without support
	 * for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate-value-free array.
	 */
	function sortedUniq(array, iteratee) {
	  var seen,
	      index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];

	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;

	    if (!index || seen !== computed) {
	      seen = computed;
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}

	module.exports = sortedUniq;

	},{}],420:[function(require,module,exports){
	var isObject = require('../lang/isObject');

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;

	},{"../lang/isObject":431}],421:[function(require,module,exports){
	var baseToString = require('./baseToString'),
	    isArray = require('../lang/isArray');

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;

	},{"../lang/isArray":425,"./baseToString":385}],422:[function(require,module,exports){
	var baseClone = require('../internal/baseClone'),
	    bindCallback = require('../internal/bindCallback'),
	    isIterateeCall = require('../internal/isIterateeCall');

	/**
	 * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	 * otherwise they are assigned by reference. If `customizer` is provided it is
	 * invoked to produce the cloned values. If `customizer` returns `undefined`
	 * cloning is handled by the method instead. The `customizer` is bound to
	 * `thisArg` and invoked with two argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var shallow = _.clone(users);
	 * shallow[0] === users[0];
	 * // => true
	 *
	 * var deep = _.clone(users, true);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.clone(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(false);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 0
	 */
	function clone(value, isDeep, customizer, thisArg) {
	  if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	    isDeep = false;
	  }
	  else if (typeof isDeep == 'function') {
	    thisArg = customizer;
	    customizer = isDeep;
	    isDeep = false;
	  }
	  return typeof customizer == 'function'
	    ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	    : baseClone(value, isDeep);
	}

	module.exports = clone;

	},{"../internal/baseClone":358,"../internal/bindCallback":388,"../internal/isIterateeCall":413}],423:[function(require,module,exports){
	var baseClone = require('../internal/baseClone'),
	    bindCallback = require('../internal/bindCallback');

	/**
	 * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	 * to produce the cloned values. If `customizer` returns `undefined` cloning
	 * is handled by the method instead. The `customizer` is bound to `thisArg`
	 * and invoked with two argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the deep cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var deep = _.cloneDeep(users);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.cloneDeep(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 20
	 */
	function cloneDeep(value, customizer, thisArg) {
	  return typeof customizer == 'function'
	    ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	    : baseClone(value, true);
	}

	module.exports = cloneDeep;

	},{"../internal/baseClone":358,"../internal/bindCallback":388}],424:[function(require,module,exports){
	var isArrayLike = require('../internal/isArrayLike'),
	    isObjectLike = require('../internal/isObjectLike');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;

	},{"../internal/isArrayLike":411,"../internal/isObjectLike":416}],425:[function(require,module,exports){
	var getNative = require('../internal/getNative'),
	    isLength = require('../internal/isLength'),
	    isObjectLike = require('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;

	},{"../internal/getNative":406,"../internal/isLength":415,"../internal/isObjectLike":416}],426:[function(require,module,exports){
	var isObjectLike = require('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	function isBoolean(value) {
	  return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	}

	module.exports = isBoolean;

	},{"../internal/isObjectLike":416}],427:[function(require,module,exports){
	var isArguments = require('./isArguments'),
	    isArray = require('./isArray'),
	    isArrayLike = require('../internal/isArrayLike'),
	    isFunction = require('./isFunction'),
	    isObjectLike = require('../internal/isObjectLike'),
	    isString = require('./isString'),
	    keys = require('../object/keys');

	/**
	 * Checks if `value` is empty. A value is considered empty unless it is an
	 * `arguments` object, array, string, or jQuery-like collection with a length
	 * greater than `0` or an object with own enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {Array|Object|string} value The value to inspect.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	      (isObjectLike(value) && isFunction(value.splice)))) {
	    return !value.length;
	  }
	  return !keys(value).length;
	}

	module.exports = isEmpty;

	},{"../internal/isArrayLike":411,"../internal/isObjectLike":416,"../object/keys":441,"./isArguments":424,"./isArray":425,"./isFunction":428,"./isString":434}],428:[function(require,module,exports){
	var isObject = require('./isObject');

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;

	},{"./isObject":431}],429:[function(require,module,exports){
	var isFunction = require('./isFunction'),
	    isObjectLike = require('../internal/isObjectLike');

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isNative;

	},{"../internal/isObjectLike":416,"./isFunction":428}],430:[function(require,module,exports){
	var isObjectLike = require('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	 * as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isNumber(8.4);
	 * // => true
	 *
	 * _.isNumber(NaN);
	 * // => true
	 *
	 * _.isNumber('8.4');
	 * // => false
	 */
	function isNumber(value) {
	  return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	}

	module.exports = isNumber;

	},{"../internal/isObjectLike":416}],431:[function(require,module,exports){
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;

	},{}],432:[function(require,module,exports){
	var baseForIn = require('../internal/baseForIn'),
	    isArguments = require('./isArguments'),
	    isObjectLike = require('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;

	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}

	module.exports = isPlainObject;

	},{"../internal/baseForIn":365,"../internal/isObjectLike":416,"./isArguments":424}],433:[function(require,module,exports){
	var isObject = require('./isObject');

	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	function isRegExp(value) {
	  return isObject(value) && objToString.call(value) == regexpTag;
	}

	module.exports = isRegExp;

	},{"./isObject":431}],434:[function(require,module,exports){
	var isObjectLike = require('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}

	module.exports = isString;

	},{"../internal/isObjectLike":416}],435:[function(require,module,exports){
	var isLength = require('../internal/isLength'),
	    isObjectLike = require('../internal/isObjectLike');

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;

	},{"../internal/isLength":415,"../internal/isObjectLike":416}],436:[function(require,module,exports){
	var baseCopy = require('../internal/baseCopy'),
	    keysIn = require('../object/keysIn');

	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}

	module.exports = toPlainObject;

	},{"../internal/baseCopy":360,"../object/keysIn":442}],437:[function(require,module,exports){
	var assignWith = require('../internal/assignWith'),
	    baseAssign = require('../internal/baseAssign'),
	    createAssigner = require('../internal/createAssigner');

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it is invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});

	module.exports = assign;

	},{"../internal/assignWith":355,"../internal/baseAssign":356,"../internal/createAssigner":393}],438:[function(require,module,exports){
	var assign = require('./assign'),
	    assignDefaults = require('../internal/assignDefaults'),
	    createDefaults = require('../internal/createDefaults');

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object for all destination properties that resolve to `undefined`. Once a
	 * property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var defaults = createDefaults(assign, assignDefaults);

	module.exports = defaults;

	},{"../internal/assignDefaults":354,"../internal/createDefaults":397,"./assign":437}],439:[function(require,module,exports){
	module.exports = require('./assign');

	},{"./assign":437}],440:[function(require,module,exports){
	var baseGet = require('../internal/baseGet'),
	    baseSlice = require('../internal/baseSlice'),
	    isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isIndex = require('../internal/isIndex'),
	    isKey = require('../internal/isKey'),
	    isLength = require('../internal/isLength'),
	    last = require('../array/last'),
	    toPath = require('../internal/toPath');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `path` is a direct property.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': { 'c': 3 } } };
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b.c');
	 * // => true
	 *
	 * _.has(object, ['a', 'b', 'c']);
	 * // => true
	 */
	function has(object, path) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasOwnProperty.call(object, path);
	  if (!result && !isKey(path)) {
	    path = toPath(path);
	    object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    if (object == null) {
	      return false;
	    }
	    path = last(path);
	    result = hasOwnProperty.call(object, path);
	  }
	  return result || (isLength(object.length) && isIndex(path, object.length) &&
	    (isArray(object) || isArguments(object)));
	}

	module.exports = has;

	},{"../array/last":335,"../internal/baseGet":369,"../internal/baseSlice":382,"../internal/isIndex":412,"../internal/isKey":414,"../internal/isLength":415,"../internal/toPath":421,"../lang/isArguments":424,"../lang/isArray":425}],441:[function(require,module,exports){
	var getNative = require('../internal/getNative'),
	    isArrayLike = require('../internal/isArrayLike'),
	    isObject = require('../lang/isObject'),
	    shimKeys = require('../internal/shimKeys');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;

	},{"../internal/getNative":406,"../internal/isArrayLike":411,"../internal/shimKeys":418,"../lang/isObject":431}],442:[function(require,module,exports){
	var isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isIndex = require('../internal/isIndex'),
	    isLength = require('../internal/isLength'),
	    isObject = require('../lang/isObject');

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keysIn;

	},{"../internal/isIndex":412,"../internal/isLength":415,"../lang/isArguments":424,"../lang/isArray":425,"../lang/isObject":431}],443:[function(require,module,exports){
	var baseMerge = require('../internal/baseMerge'),
	    createAssigner = require('../internal/createAssigner');

	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it is invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);

	module.exports = merge;

	},{"../internal/baseMerge":377,"../internal/createAssigner":393}],444:[function(require,module,exports){
	var keys = require('./keys'),
	    toObject = require('../internal/toObject');

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;

	},{"../internal/toObject":420,"./keys":441}],445:[function(require,module,exports){
	var baseValues = require('../internal/baseValues'),
	    keys = require('./keys');

	/**
	 * Creates an array of the own enumerable property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return baseValues(object, keys(object));
	}

	module.exports = values;

	},{"../internal/baseValues":387,"./keys":441}],446:[function(require,module,exports){
	var baseToString = require('../internal/baseToString'),
	    escapeRegExpChar = require('../internal/escapeRegExpChar');

	/**
	 * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	 * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	 */
	var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	    reHasRegExpChars = RegExp(reRegExpChars.source);

	/**
	 * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	 * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	 */
	function escapeRegExp(string) {
	  string = baseToString(string);
	  return (string && reHasRegExpChars.test(string))
	    ? string.replace(reRegExpChars, escapeRegExpChar)
	    : (string || '(?:)');
	}

	module.exports = escapeRegExp;

	},{"../internal/baseToString":385,"../internal/escapeRegExpChar":403}],447:[function(require,module,exports){
	var baseToString = require('../internal/baseToString');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Checks if `string` starts with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to search.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=0] The position to search from.
	 * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	 * @example
	 *
	 * _.startsWith('abc', 'a');
	 * // => true
	 *
	 * _.startsWith('abc', 'b');
	 * // => false
	 *
	 * _.startsWith('abc', 'b', 1);
	 * // => true
	 */
	function startsWith(string, target, position) {
	  string = baseToString(string);
	  position = position == null
	    ? 0
	    : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	  return string.lastIndexOf(target, position) == position;
	}

	module.exports = startsWith;

	},{"../internal/baseToString":385}],448:[function(require,module,exports){
	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;

	},{}],449:[function(require,module,exports){
	var baseProperty = require('../internal/baseProperty'),
	    basePropertyDeep = require('../internal/basePropertyDeep'),
	    isKey = require('../internal/isKey');

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;

	},{"../internal/baseProperty":379,"../internal/basePropertyDeep":380,"../internal/isKey":414}],450:[function(require,module,exports){
	module.exports = minimatch
	minimatch.Minimatch = Minimatch

	var path = { sep: '/' }
	try {
	  path = require('path')
	} catch (er) {}

	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = require('brace-expansion')

	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'

	// * => any number of characters
	var star = qmark + '*?'

	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')

	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}

	// normalizes slashes.
	var slashSplit = /\/+/

	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}

	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}

	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch

	  var orig = minimatch

	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }

	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }

	  return m
	}

	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}

	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}

	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }

	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''

	  return new Minimatch(pattern, options).match(p)
	}

	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}
	  pattern = pattern.trim()

	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }

	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false

	  // make the set of regexps etc.
	  this.make()
	}

	Minimatch.prototype.debug = function () {}

	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return

	  var pattern = this.pattern
	  var options = this.options

	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }

	  // step 1: figure out negation, etc.
	  this.parseNegate()

	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()

	  if (options.debug) this.debug = console.error

	  this.debug(this.pattern, set)

	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })

	  this.debug(this.pattern, set)

	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)

	  this.debug(this.pattern, set)

	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })

	  this.debug(this.pattern, set)

	  this.set = set
	}

	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0

	  if (options.nonegate) return

	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }

	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}

	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}

	Minimatch.prototype.braceExpand = braceExpand

	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }

	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern

	  if (typeof pattern === 'undefined') {
	    throw new Error('undefined pattern')
	  }

	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }

	  return expand(pattern)
	}

	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  var options = this.options

	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''

	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var plType
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this

	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }

	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)

	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }

	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false

	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue

	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }

	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue

	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }

	        if (!stateChar) {
	          re += '\\('
	          continue
	        }

	        plType = stateChar
	        patternListStack.push({
	          type: plType,
	          start: i - 1,
	          reStart: re.length
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue

	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }

	        clearStateChar()
	        hasMagic = true
	        re += ')'
	        var pl = patternListStack.pop()
	        plType = pl.type
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        switch (plType) {
	          case '!':
	            negativeLists.push(pl)
	            re += ')[^/]*?)'
	            pl.reEnd = re.length
	            break
	          case '?':
	          case '+':
	          case '*':
	            re += plType
	            break
	          case '@': break // the default anyway
	        }
	      continue

	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }

	        clearStateChar()
	        re += '|'
	      continue

	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()

	        if (inClass) {
	          re += '\\' + c
	          continue
	        }

	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue

	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }

	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }

	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue

	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()

	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }

	        re += c

	    } // switch
	  } // for

	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }

	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + 3)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2})*)(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }

	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })

	    this.debug('tail=%j\n   %s', tail, tail)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type

	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }

	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }

	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }

	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]

	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)

	    nlLast += nlAfter

	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter

	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }

	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }

	  if (addPatternStart) {
	    re = patternStart + re
	  }

	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }

	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }

	  var flags = options.nocase ? 'i' : ''
	  var regExp = new RegExp('^' + re + '$', flags)

	  regExp._glob = pattern
	  regExp._src = re

	  return regExp
	}

	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}

	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp

	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set

	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options

	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''

	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')

	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'

	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'

	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}

	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}

	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''

	  if (f === '/' && partial) return true

	  var options = this.options

	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }

	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)

	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.

	  var set = this.set
	  this.debug(this.pattern, 'set', set)

	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }

	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }

	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}

	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options

	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })

	  this.debug('matchOne', file.length, pattern.length)

	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]

	    this.debug(pattern, p, f)

	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false

	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])

	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }

	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]

	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }

	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }

	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }

	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }

	    if (!hit) return false
	  }

	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*

	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }

	  // should be unreachable.
	  throw new Error('wtf?')
	}

	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}

	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}

	},{"brace-expansion":451,"path":12}],451:[function(require,module,exports){
	var concatMap = require('concat-map');
	var balanced = require('balanced-match');

	module.exports = expandTop;

	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';

	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}

	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}

	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}


	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];

	  var parts = [];
	  var m = balanced('{', '}', str);

	  if (!m)
	    return str.split(',');

	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');

	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }

	  parts.push.apply(parts, p);

	  return parts;
	}

	function expandTop(str) {
	  if (!str)
	    return [];

	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}

	function identity(e) {
	  return e;
	}

	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}

	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}

	function expand(str, isTop) {
	  var expansions = [];

	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];

	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = /^(.*,)+(.+)?$/.test(m.body);
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }

	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }

	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.

	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];

	  var N;

	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);

	    N = [];

	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }

	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }

	  return expansions;
	}


	},{"balanced-match":452,"concat-map":453}],452:[function(require,module,exports){
	module.exports = balanced;
	function balanced(a, b, str) {
	  var bal = 0;
	  var m = {};
	  var ended = false;

	  for (var i = 0; i < str.length; i++) {
	    if (a == str.substr(i, a.length)) {
	      if (!('start' in m)) m.start = i;
	      bal++;
	    }
	    else if (b == str.substr(i, b.length) && 'start' in m) {
	      ended = true;
	      bal--;
	      if (!bal) {
	        m.end = i;
	        m.pre = str.substr(0, m.start);
	        m.body = (m.end - m.start > 1)
	          ? str.substring(m.start + a.length, m.end)
	          : '';
	        m.post = str.slice(m.end + b.length);
	        return m;
	      }
	    }
	  }

	  // if we opened more than we closed, find the one we closed
	  if (bal && ended) {
	    var start = m.start + a.length;
	    m = balanced(a, b, str.substr(start));
	    if (m) {
	      m.start += start;
	      m.end += start;
	      m.pre = str.slice(0, start) + m.pre;
	    }
	    return m;
	  }
	}

	},{}],453:[function(require,module,exports){
	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	},{}],454:[function(require,module,exports){
	'use strict';
	var fs = require('fs')

	module.exports = function (pth, cb) {
		var fn = typeof fs.access === 'function' ? fs.access : fs.stat;

		fn(pth, function (err) {
			cb(null, !err);
		});
	};

	module.exports.sync = function (pth) {
		var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;

		try {
			fn(pth);
			return true;
		} catch (err) {
			return false;
		}
	};

	},{"fs":4}],455:[function(require,module,exports){
	(function (process){
	'use strict';

	function posix(path) {
		return path.charAt(0) === '/';
	};

	function win32(path) {
		// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = !!device && device.charAt(1) !== ':';

		// UNC paths are always absolute
		return !!result[2] || isUnc;
	};

	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;

	}).call(this,require('_process'))
	},{"_process":14}],456:[function(require,module,exports){
	"use strict";

	var originalObject = Object;
	var originalDefProp = Object.defineProperty;
	var originalCreate = Object.create;

	function defProp(obj, name, value) {
	  if (originalDefProp) try {
	    originalDefProp.call(originalObject, obj, name, { value: value });
	  } catch (definePropertyIsBrokenInIE8) {
	    obj[name] = value;
	  } else {
	    obj[name] = value;
	  }
	}

	// For functions that will be invoked using .call or .apply, we need to
	// define those methods on the function objects themselves, rather than
	// inheriting them from Function.prototype, so that a malicious or clumsy
	// third party cannot interfere with the functionality of this module by
	// redefining Function.prototype.call or .apply.
	function makeSafeToCall(fun) {
	  if (fun) {
	    defProp(fun, "call", fun.call);
	    defProp(fun, "apply", fun.apply);
	  }
	  return fun;
	}

	makeSafeToCall(originalDefProp);
	makeSafeToCall(originalCreate);

	var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
	var numToStr = makeSafeToCall(Number.prototype.toString);
	var strSlice = makeSafeToCall(String.prototype.slice);

	var cloner = function(){};
	function create(prototype) {
	  if (originalCreate) {
	    return originalCreate.call(originalObject, prototype);
	  }
	  cloner.prototype = prototype || null;
	  return new cloner;
	}

	var rand = Math.random;
	var uniqueKeys = create(null);

	function makeUniqueKey() {
	  // Collisions are highly unlikely, but this module is in the business of
	  // making guarantees rather than safe bets.
	  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
	  while (hasOwn.call(uniqueKeys, uniqueKey));
	  return uniqueKeys[uniqueKey] = uniqueKey;
	}

	function internString(str) {
	  var obj = {};
	  obj[str] = true;
	  return Object.keys(obj)[0];
	}

	// External users might find this function useful, but it is not necessary
	// for the typical use of this module.
	defProp(exports, "makeUniqueKey", makeUniqueKey);

	// Object.getOwnPropertyNames is the only way to enumerate non-enumerable
	// properties, so if we wrap it to ignore our secret keys, there should be
	// no way (except guessing) to access those properties.
	var originalGetOPNs = Object.getOwnPropertyNames;
	Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	  for (var names = originalGetOPNs(object),
	           src = 0,
	           dst = 0,
	           len = names.length;
	       src < len;
	       ++src) {
	    if (!hasOwn.call(uniqueKeys, names[src])) {
	      if (src > dst) {
	        names[dst] = names[src];
	      }
	      ++dst;
	    }
	  }
	  names.length = dst;
	  return names;
	};

	function defaultCreatorFn(object) {
	  return create(null);
	}

	function makeAccessor(secretCreatorFn) {
	  var brand = makeUniqueKey();
	  var passkey = create(null);

	  secretCreatorFn = secretCreatorFn || defaultCreatorFn;

	  function register(object) {
	    var secret; // Created lazily.

	    function vault(key, forget) {
	      // Only code that has access to the passkey can retrieve (or forget)
	      // the secret object.
	      if (key === passkey) {
	        return forget
	          ? secret = null
	          : secret || (secret = secretCreatorFn(object));
	      }
	    }

	    defProp(object, brand, vault);
	  }

	  function accessor(object) {
	    if (!hasOwn.call(object, brand))
	      register(object);
	    return object[brand](passkey);
	  }

	  accessor.forget = function(object) {
	    if (hasOwn.call(object, brand))
	      object[brand](passkey, true);
	  };

	  return accessor;
	}

	defProp(exports, "makeAccessor", makeAccessor);

	},{}],457:[function(require,module,exports){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var types = require("recast").types;
	var isArray = types.builtInTypes.array;
	var b = types.builders;
	var n = types.namedTypes;
	var leap = require("./leap");
	var meta = require("./meta");
	var util = require("./util");
	var runtimeProperty = util.runtimeProperty;
	var hasOwn = Object.prototype.hasOwnProperty;

	function Emitter(contextId) {
	  assert.ok(this instanceof Emitter);
	  n.Identifier.assert(contextId);

	  // Used to generate unique temporary names.
	  this.nextTempId = 0;

	  Object.defineProperties(this, {
	    // In order to make sure the context object does not collide with
	    // anything in the local scope, we might have to rename it, so we
	    // refer to it symbolically instead of just assuming that it will be
	    // called "context".
	    contextId: { value: contextId },

	    // An append-only list of Statements that grows each time this.emit is
	    // called.
	    listing: { value: [] },

	    // A sparse array whose keys correspond to locations in this.listing
	    // that have been marked as branch/jump targets.
	    marked: { value: [true] },

	    // The last location will be marked when this.getDispatchLoop is
	    // called.
	    finalLoc: { value: loc() },

	    // A list of all leap.TryEntry statements emitted.
	    tryEntries: { value: [] }
	  });

	  // The .leapManager property needs to be defined by a separate
	  // defineProperties call so that .finalLoc will be visible to the
	  // leap.LeapManager constructor.
	  Object.defineProperties(this, {
	    // Each time we evaluate the body of a loop, we tell this.leapManager
	    // to enter a nested loop context that determines the meaning of break
	    // and continue statements therein.
	    leapManager: { value: new leap.LeapManager(this) }
	  });
	}

	var Ep = Emitter.prototype;
	exports.Emitter = Emitter;

	// Offsets into this.listing that could be used as targets for branches or
	// jumps are represented as numeric Literal nodes. This representation has
	// the amazingly convenient benefit of allowing the exact value of the
	// location to be determined at any time, even after generating code that
	// refers to the location.
	function loc() {
	  return b.literal(-1);
	}

	// Sets the exact value of the given location to the offset of the next
	// Statement emitted.
	Ep.mark = function(loc) {
	  n.Literal.assert(loc);
	  var index = this.listing.length;
	  if (loc.value === -1) {
	    loc.value = index;
	  } else {
	    // Locations can be marked redundantly, but their values cannot change
	    // once set the first time.
	    assert.strictEqual(loc.value, index);
	  }
	  this.marked[index] = true;
	  return loc;
	};

	Ep.emit = function(node) {
	  if (n.Expression.check(node))
	    node = b.expressionStatement(node);
	  n.Statement.assert(node);
	  this.listing.push(node);
	};

	// Shorthand for emitting assignment statements. This will come in handy
	// for assignments to temporary variables.
	Ep.emitAssign = function(lhs, rhs) {
	  this.emit(this.assign(lhs, rhs));
	  return lhs;
	};

	// Shorthand for an assignment statement.
	Ep.assign = function(lhs, rhs) {
	  return b.expressionStatement(
	    b.assignmentExpression("=", lhs, rhs));
	};

	// Convenience function for generating expressions like context.next,
	// context.sent, and context.rval.
	Ep.contextProperty = function(name, computed) {
	  return b.memberExpression(
	    this.contextId,
	    computed ? b.literal(name) : b.identifier(name),
	    !!computed
	  );
	};

	// Shorthand for setting context.rval and jumping to `context.stop()`.
	Ep.stop = function(rval) {
	  if (rval) {
	    this.setReturnValue(rval);
	  }

	  this.jump(this.finalLoc);
	};

	Ep.setReturnValue = function(valuePath) {
	  n.Expression.assert(valuePath.value);

	  this.emitAssign(
	    this.contextProperty("rval"),
	    this.explodeExpression(valuePath)
	  );
	};

	Ep.clearPendingException = function(tryLoc, assignee) {
	  n.Literal.assert(tryLoc);

	  var catchCall = b.callExpression(
	    this.contextProperty("catch", true),
	    [tryLoc]
	  );

	  if (assignee) {
	    this.emitAssign(assignee, catchCall);
	  } else {
	    this.emit(catchCall);
	  }
	};

	// Emits code for an unconditional jump to the given location, even if the
	// exact value of the location is not yet known.
	Ep.jump = function(toLoc) {
	  this.emitAssign(this.contextProperty("next"), toLoc);
	  this.emit(b.breakStatement());
	};

	// Conditional jump.
	Ep.jumpIf = function(test, toLoc) {
	  n.Expression.assert(test);
	  n.Literal.assert(toLoc);

	  this.emit(b.ifStatement(
	    test,
	    b.blockStatement([
	      this.assign(this.contextProperty("next"), toLoc),
	      b.breakStatement()
	    ])
	  ));
	};

	// Conditional jump, with the condition negated.
	Ep.jumpIfNot = function(test, toLoc) {
	  n.Expression.assert(test);
	  n.Literal.assert(toLoc);

	  var negatedTest;
	  if (n.UnaryExpression.check(test) &&
	      test.operator === "!") {
	    // Avoid double negation.
	    negatedTest = test.argument;
	  } else {
	    negatedTest = b.unaryExpression("!", test);
	  }

	  this.emit(b.ifStatement(
	    negatedTest,
	    b.blockStatement([
	      this.assign(this.contextProperty("next"), toLoc),
	      b.breakStatement()
	    ])
	  ));
	};

	// Returns a unique MemberExpression that can be used to store and
	// retrieve temporary values. Since the object of the member expression is
	// the context object, which is presumed to coexist peacefully with all
	// other local variables, and since we just increment `nextTempId`
	// monotonically, uniqueness is assured.
	Ep.makeTempVar = function() {
	  return this.contextProperty("t" + this.nextTempId++);
	};

	Ep.getContextFunction = function(id) {
	  return b.functionExpression(
	    id || null/*Anonymous*/,
	    [this.contextId],
	    b.blockStatement([this.getDispatchLoop()]),
	    false, // Not a generator anymore!
	    false // Nor an expression.
	  );
	};

	// Turns this.listing into a loop of the form
	//
	//   while (1) switch (context.next) {
	//   case 0:
	//   ...
	//   case n:
	//     return context.stop();
	//   }
	//
	// Each marked location in this.listing will correspond to one generated
	// case statement.
	Ep.getDispatchLoop = function() {
	  var self = this;
	  var cases = [];
	  var current;

	  // If we encounter a break, continue, or return statement in a switch
	  // case, we can skip the rest of the statements until the next case.
	  var alreadyEnded = false;

	  self.listing.forEach(function(stmt, i) {
	    if (self.marked.hasOwnProperty(i)) {
	      cases.push(b.switchCase(
	        b.literal(i),
	        current = []));
	      alreadyEnded = false;
	    }

	    if (!alreadyEnded) {
	      current.push(stmt);
	      if (isSwitchCaseEnder(stmt))
	        alreadyEnded = true;
	    }
	  });

	  // Now that we know how many statements there will be in this.listing,
	  // we can finally resolve this.finalLoc.value.
	  this.finalLoc.value = this.listing.length;

	  cases.push(
	    b.switchCase(this.finalLoc, [
	      // Intentionally fall through to the "end" case...
	    ]),

	    // So that the runtime can jump to the final location without having
	    // to know its offset, we provide the "end" case as a synonym.
	    b.switchCase(b.literal("end"), [
	      // This will check/clear both context.thrown and context.rval.
	      b.returnStatement(
	        b.callExpression(this.contextProperty("stop"), [])
	      )
	    ])
	  );

	  return b.whileStatement(
	    b.literal(1),
	    b.switchStatement(
	      b.assignmentExpression(
	        "=",
	        this.contextProperty("prev"),
	        this.contextProperty("next")
	      ),
	      cases
	    )
	  );
	};

	// See comment above re: alreadyEnded.
	function isSwitchCaseEnder(stmt) {
	  return n.BreakStatement.check(stmt)
	      || n.ContinueStatement.check(stmt)
	      || n.ReturnStatement.check(stmt)
	      || n.ThrowStatement.check(stmt);
	}

	Ep.getTryLocsList = function() {
	  if (this.tryEntries.length === 0) {
	    // To avoid adding a needless [] to the majority of runtime.wrap
	    // argument lists, force the caller to handle this case specially.
	    return null;
	  }

	  var lastLocValue = 0;

	  return b.arrayExpression(
	    this.tryEntries.map(function(tryEntry) {
	      var thisLocValue = tryEntry.firstLoc.value;
	      assert.ok(thisLocValue >= lastLocValue, "try entries out of order");
	      lastLocValue = thisLocValue;

	      var ce = tryEntry.catchEntry;
	      var fe = tryEntry.finallyEntry;

	      var locs = [
	        tryEntry.firstLoc,
	        // The null here makes a hole in the array.
	        ce ? ce.firstLoc : null
	      ];

	      if (fe) {
	        locs[2] = fe.firstLoc;
	        locs[3] = fe.afterLoc;
	      }

	      return b.arrayExpression(locs);
	    })
	  );
	};

	// All side effects must be realized in order.

	// If any subexpression harbors a leap, all subexpressions must be
	// neutered of side effects.

	// No destructive modification of AST nodes.

	Ep.explode = function(path, ignoreResult) {
	  assert.ok(path instanceof types.NodePath);

	  var node = path.value;
	  var self = this;

	  n.Node.assert(node);

	  if (n.Statement.check(node))
	    return self.explodeStatement(path);

	  if (n.Expression.check(node))
	    return self.explodeExpression(path, ignoreResult);

	  if (n.Declaration.check(node))
	    throw getDeclError(node);

	  switch (node.type) {
	  case "Program":
	    return path.get("body").map(
	      self.explodeStatement,
	      self
	    );

	  case "VariableDeclarator":
	    throw getDeclError(node);

	  // These node types should be handled by their parent nodes
	  // (ObjectExpression, SwitchStatement, and TryStatement, respectively).
	  case "Property":
	  case "SwitchCase":
	  case "CatchClause":
	    throw new Error(
	      node.type + " nodes should be handled by their parents");

	  default:
	    throw new Error(
	      "unknown Node of type " +
	        JSON.stringify(node.type));
	  }
	};

	function getDeclError(node) {
	  return new Error(
	    "all declarations should have been transformed into " +
	    "assignments before the Exploder began its work: " +
	    JSON.stringify(node));
	}

	Ep.explodeStatement = function(path, labelId) {
	  assert.ok(path instanceof types.NodePath);

	  var stmt = path.value;
	  var self = this;

	  n.Statement.assert(stmt);

	  if (labelId) {
	    n.Identifier.assert(labelId);
	  } else {
	    labelId = null;
	  }

	  // Explode BlockStatement nodes even if they do not contain a yield,
	  // because we don't want or need the curly braces.
	  if (n.BlockStatement.check(stmt)) {
	    return path.get("body").each(
	      self.explodeStatement,
	      self
	    );
	  }

	  if (!meta.containsLeap(stmt)) {
	    // Technically we should be able to avoid emitting the statement
	    // altogether if !meta.hasSideEffects(stmt), but that leads to
	    // confusing generated code (for instance, `while (true) {}` just
	    // disappears) and is probably a more appropriate job for a dedicated
	    // dead code elimination pass.
	    self.emit(stmt);
	    return;
	  }

	  switch (stmt.type) {
	  case "ExpressionStatement":
	    self.explodeExpression(path.get("expression"), true);
	    break;

	  case "LabeledStatement":
	    var after = loc();

	    // Did you know you can break from any labeled block statement or
	    // control structure? Well, you can! Note: when a labeled loop is
	    // encountered, the leap.LabeledEntry created here will immediately
	    // enclose a leap.LoopEntry on the leap manager's stack, and both
	    // entries will have the same label. Though this works just fine, it
	    // may seem a bit redundant. In theory, we could check here to
	    // determine if stmt knows how to handle its own label; for example,
	    // stmt happens to be a WhileStatement and so we know it's going to
	    // establish its own LoopEntry when we explode it (below). Then this
	    // LabeledEntry would be unnecessary. Alternatively, we might be
	    // tempted not to pass stmt.label down into self.explodeStatement,
	    // because we've handled the label here, but that's a mistake because
	    // labeled loops may contain labeled continue statements, which is not
	    // something we can handle in this generic case. All in all, I think a
	    // little redundancy greatly simplifies the logic of this case, since
	    // it's clear that we handle all possible LabeledStatements correctly
	    // here, regardless of whether they interact with the leap manager
	    // themselves. Also remember that labels and break/continue-to-label
	    // statements are rare, and all of this logic happens at transform
	    // time, so it has no additional runtime cost.
	    self.leapManager.withEntry(
	      new leap.LabeledEntry(after, stmt.label),
	      function() {
	        self.explodeStatement(path.get("body"), stmt.label);
	      }
	    );

	    self.mark(after);

	    break;

	  case "WhileStatement":
	    var before = loc();
	    var after = loc();

	    self.mark(before);
	    self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	    self.leapManager.withEntry(
	      new leap.LoopEntry(after, before, labelId),
	      function() { self.explodeStatement(path.get("body")); }
	    );
	    self.jump(before);
	    self.mark(after);

	    break;

	  case "DoWhileStatement":
	    var first = loc();
	    var test = loc();
	    var after = loc();

	    self.mark(first);
	    self.leapManager.withEntry(
	      new leap.LoopEntry(after, test, labelId),
	      function() { self.explode(path.get("body")); }
	    );
	    self.mark(test);
	    self.jumpIf(self.explodeExpression(path.get("test")), first);
	    self.mark(after);

	    break;

	  case "ForStatement":
	    var head = loc();
	    var update = loc();
	    var after = loc();

	    if (stmt.init) {
	      // We pass true here to indicate that if stmt.init is an expression
	      // then we do not care about its result.
	      self.explode(path.get("init"), true);
	    }

	    self.mark(head);

	    if (stmt.test) {
	      self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	    } else {
	      // No test means continue unconditionally.
	    }

	    self.leapManager.withEntry(
	      new leap.LoopEntry(after, update, labelId),
	      function() { self.explodeStatement(path.get("body")); }
	    );

	    self.mark(update);

	    if (stmt.update) {
	      // We pass true here to indicate that if stmt.update is an
	      // expression then we do not care about its result.
	      self.explode(path.get("update"), true);
	    }

	    self.jump(head);

	    self.mark(after);

	    break;

	  case "ForInStatement":
	    var head = loc();
	    var after = loc();

	    var keyIterNextFn = self.makeTempVar();
	    self.emitAssign(
	      keyIterNextFn,
	      b.callExpression(
	        runtimeProperty("keys"),
	        [self.explodeExpression(path.get("right"))]
	      )
	    );

	    self.mark(head);

	    var keyInfoTmpVar = self.makeTempVar();
	    self.jumpIf(
	      b.memberExpression(
	        b.assignmentExpression(
	          "=",
	          keyInfoTmpVar,
	          b.callExpression(keyIterNextFn, [])
	        ),
	        b.identifier("done"),
	        false
	      ),
	      after
	    );

	    self.emitAssign(
	      stmt.left,
	      b.memberExpression(
	        keyInfoTmpVar,
	        b.identifier("value"),
	        false
	      )
	    );

	    self.leapManager.withEntry(
	      new leap.LoopEntry(after, head, labelId),
	      function() { self.explodeStatement(path.get("body")); }
	    );

	    self.jump(head);

	    self.mark(after);

	    break;

	  case "BreakStatement":
	    self.emitAbruptCompletion({
	      type: "break",
	      target: self.leapManager.getBreakLoc(stmt.label)
	    });

	    break;

	  case "ContinueStatement":
	    self.emitAbruptCompletion({
	      type: "continue",
	      target: self.leapManager.getContinueLoc(stmt.label)
	    });

	    break;

	  case "SwitchStatement":
	    // Always save the discriminant into a temporary variable in case the
	    // test expressions overwrite values like context.sent.
	    var disc = self.emitAssign(
	      self.makeTempVar(),
	      self.explodeExpression(path.get("discriminant"))
	    );

	    var after = loc();
	    var defaultLoc = loc();
	    var condition = defaultLoc;
	    var caseLocs = [];

	    // If there are no cases, .cases might be undefined.
	    var cases = stmt.cases || [];

	    for (var i = cases.length - 1; i >= 0; --i) {
	      var c = cases[i];
	      n.SwitchCase.assert(c);

	      if (c.test) {
	        condition = b.conditionalExpression(
	          b.binaryExpression("===", disc, c.test),
	          caseLocs[i] = loc(),
	          condition
	        );
	      } else {
	        caseLocs[i] = defaultLoc;
	      }
	    }

	    self.jump(self.explodeExpression(
	      new types.NodePath(condition, path, "discriminant")
	    ));

	    self.leapManager.withEntry(
	      new leap.SwitchEntry(after),
	      function() {
	        path.get("cases").each(function(casePath) {
	          var c = casePath.value;
	          var i = casePath.name;

	          self.mark(caseLocs[i]);

	          casePath.get("consequent").each(
	            self.explodeStatement,
	            self
	          );
	        });
	      }
	    );

	    self.mark(after);
	    if (defaultLoc.value === -1) {
	      self.mark(defaultLoc);
	      assert.strictEqual(after.value, defaultLoc.value);
	    }

	    break;

	  case "IfStatement":
	    var elseLoc = stmt.alternate && loc();
	    var after = loc();

	    self.jumpIfNot(
	      self.explodeExpression(path.get("test")),
	      elseLoc || after
	    );

	    self.explodeStatement(path.get("consequent"));

	    if (elseLoc) {
	      self.jump(after);
	      self.mark(elseLoc);
	      self.explodeStatement(path.get("alternate"));
	    }

	    self.mark(after);

	    break;

	  case "ReturnStatement":
	    self.emitAbruptCompletion({
	      type: "return",
	      value: self.explodeExpression(path.get("argument"))
	    });

	    break;

	  case "WithStatement":
	    throw new Error(
	      node.type + " not supported in generator functions.");

	  case "TryStatement":
	    var after = loc();

	    var handler = stmt.handler;
	    if (!handler && stmt.handlers) {
	      handler = stmt.handlers[0] || null;
	    }

	    var catchLoc = handler && loc();
	    var catchEntry = catchLoc && new leap.CatchEntry(
	      catchLoc,
	      handler.param
	    );

	    var finallyLoc = stmt.finalizer && loc();
	    var finallyEntry = finallyLoc &&
	      new leap.FinallyEntry(finallyLoc, after);

	    var tryEntry = new leap.TryEntry(
	      self.getUnmarkedCurrentLoc(),
	      catchEntry,
	      finallyEntry
	    );

	    self.tryEntries.push(tryEntry);
	    self.updateContextPrevLoc(tryEntry.firstLoc);

	    self.leapManager.withEntry(tryEntry, function() {
	      self.explodeStatement(path.get("block"));

	      if (catchLoc) {
	        if (finallyLoc) {
	          // If we have both a catch block and a finally block, then
	          // because we emit the catch block first, we need to jump over
	          // it to the finally block.
	          self.jump(finallyLoc);

	        } else {
	          // If there is no finally block, then we need to jump over the
	          // catch block to the fall-through location.
	          self.jump(after);
	        }

	        self.updateContextPrevLoc(self.mark(catchLoc));

	        var bodyPath = path.get("handler", "body");
	        var safeParam = self.makeTempVar();
	        self.clearPendingException(tryEntry.firstLoc, safeParam);

	        var catchScope = bodyPath.scope;
	        var catchParamName = handler.param.name;
	        n.CatchClause.assert(catchScope.node);
	        assert.strictEqual(catchScope.lookup(catchParamName), catchScope);

	        types.visit(bodyPath, {
	          visitIdentifier: function(path) {
	            if (util.isReference(path, catchParamName) &&
	                path.scope.lookup(catchParamName) === catchScope) {
	              return safeParam;
	            }

	            this.traverse(path);
	          },

	          visitFunction: function(path) {
	            if (path.scope.declares(catchParamName)) {
	              // Don't descend into nested scopes that shadow the catch
	              // parameter with their own declarations. This isn't
	              // logically necessary because of the path.scope.lookup we
	              // do in visitIdentifier, but it saves time.
	              return false;
	            }

	            this.traverse(path);
	          }
	        });

	        self.leapManager.withEntry(catchEntry, function() {
	          self.explodeStatement(bodyPath);
	        });
	      }

	      if (finallyLoc) {
	        self.updateContextPrevLoc(self.mark(finallyLoc));

	        self.leapManager.withEntry(finallyEntry, function() {
	          self.explodeStatement(path.get("finalizer"));
	        });

	        self.emit(b.returnStatement(b.callExpression(
	          self.contextProperty("finish"),
	          [finallyEntry.firstLoc]
	        )));
	      }
	    });

	    self.mark(after);

	    break;

	  case "ThrowStatement":
	    self.emit(b.throwStatement(
	      self.explodeExpression(path.get("argument"))
	    ));

	    break;

	  default:
	    throw new Error(
	      "unknown Statement of type " +
	        JSON.stringify(stmt.type));
	  }
	};

	Ep.emitAbruptCompletion = function(record) {
	  if (!isValidCompletion(record)) {
	    assert.ok(
	      false,
	      "invalid completion record: " +
	        JSON.stringify(record)
	    );
	  }

	  assert.notStrictEqual(
	    record.type, "normal",
	    "normal completions are not abrupt"
	  );

	  var abruptArgs = [b.literal(record.type)];

	  if (record.type === "break" ||
	      record.type === "continue") {
	    n.Literal.assert(record.target);
	    abruptArgs[1] = record.target;
	  } else if (record.type === "return" ||
	             record.type === "throw") {
	    if (record.value) {
	      n.Expression.assert(record.value);
	      abruptArgs[1] = record.value;
	    }
	  }

	  this.emit(
	    b.returnStatement(
	      b.callExpression(
	        this.contextProperty("abrupt"),
	        abruptArgs
	      )
	    )
	  );
	};

	function isValidCompletion(record) {
	  var type = record.type;

	  if (type === "normal") {
	    return !hasOwn.call(record, "target");
	  }

	  if (type === "break" ||
	      type === "continue") {
	    return !hasOwn.call(record, "value")
	        && n.Literal.check(record.target);
	  }

	  if (type === "return" ||
	      type === "throw") {
	    return hasOwn.call(record, "value")
	        && !hasOwn.call(record, "target");
	  }

	  return false;
	}


	// Not all offsets into emitter.listing are potential jump targets. For
	// example, execution typically falls into the beginning of a try block
	// without jumping directly there. This method returns the current offset
	// without marking it, so that a switch case will not necessarily be
	// generated for this offset (I say "not necessarily" because the same
	// location might end up being marked in the process of emitting other
	// statements). There's no logical harm in marking such locations as jump
	// targets, but minimizing the number of switch cases keeps the generated
	// code shorter.
	Ep.getUnmarkedCurrentLoc = function() {
	  return b.literal(this.listing.length);
	};

	// The context.prev property takes the value of context.next whenever we
	// evaluate the switch statement discriminant, which is generally good
	// enough for tracking the last location we jumped to, but sometimes
	// context.prev needs to be more precise, such as when we fall
	// successfully out of a try block and into a finally block without
	// jumping. This method exists to update context.prev to the freshest
	// available location. If we were implementing a full interpreter, we
	// would know the location of the current instruction with complete
	// precision at all times, but we don't have that luxury here, as it would
	// be costly and verbose to set context.prev before every statement.
	Ep.updateContextPrevLoc = function(loc) {
	  if (loc) {
	    n.Literal.assert(loc);

	    if (loc.value === -1) {
	      // If an uninitialized location literal was passed in, set its value
	      // to the current this.listing.length.
	      loc.value = this.listing.length;
	    } else {
	      // Otherwise assert that the location matches the current offset.
	      assert.strictEqual(loc.value, this.listing.length);
	    }

	  } else {
	    loc = this.getUnmarkedCurrentLoc();
	  }

	  // Make sure context.prev is up to date in case we fell into this try
	  // statement without jumping to it. TODO Consider avoiding this
	  // assignment when we know control must have jumped here.
	  this.emitAssign(this.contextProperty("prev"), loc);
	};

	Ep.explodeExpression = function(path, ignoreResult) {
	  assert.ok(path instanceof types.NodePath);

	  var expr = path.value;
	  if (expr) {
	    n.Expression.assert(expr);
	  } else {
	    return expr;
	  }

	  var self = this;
	  var result; // Used optionally by several cases below.

	  function finish(expr) {
	    n.Expression.assert(expr);
	    if (ignoreResult) {
	      self.emit(expr);
	    } else {
	      return expr;
	    }
	  }

	  // If the expression does not contain a leap, then we either emit the
	  // expression as a standalone statement or return it whole.
	  if (!meta.containsLeap(expr)) {
	    return finish(expr);
	  }

	  // If any child contains a leap (such as a yield or labeled continue or
	  // break statement), then any sibling subexpressions will almost
	  // certainly have to be exploded in order to maintain the order of their
	  // side effects relative to the leaping child(ren).
	  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);

	  // In order to save the rest of explodeExpression from a combinatorial
	  // trainwreck of special cases, explodeViaTempVar is responsible for
	  // deciding when a subexpression needs to be "exploded," which is my
	  // very technical term for emitting the subexpression as an assignment
	  // to a temporary variable and the substituting the temporary variable
	  // for the original subexpression. Think of exploded view diagrams, not
	  // Michael Bay movies. The point of exploding subexpressions is to
	  // control the precise order in which the generated code realizes the
	  // side effects of those subexpressions.
	  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
	    assert.ok(childPath instanceof types.NodePath);

	    assert.ok(
	      !ignoreChildResult || !tempVar,
	      "Ignoring the result of a child expression but forcing it to " +
	        "be assigned to a temporary variable?"
	    );

	    var result = self.explodeExpression(childPath, ignoreChildResult);

	    if (ignoreChildResult) {
	      // Side effects already emitted above.

	    } else if (tempVar || (hasLeapingChildren &&
	                           !n.Literal.check(result))) {
	      // If tempVar was provided, then the result will always be assigned
	      // to it, even if the result does not otherwise need to be assigned
	      // to a temporary variable.  When no tempVar is provided, we have
	      // the flexibility to decide whether a temporary variable is really
	      // necessary.  Unfortunately, in general, a temporary variable is
	      // required whenever any child contains a yield expression, since it
	      // is difficult to prove (at all, let alone efficiently) whether
	      // this result would evaluate to the same value before and after the
	      // yield (see #206).  One narrow case where we can prove it doesn't
	      // matter (and thus we do not need a temporary variable) is when the
	      // result in question is a Literal value.
	      result = self.emitAssign(
	        tempVar || self.makeTempVar(),
	        result
	      );
	    }
	    return result;
	  }

	  // If ignoreResult is true, then we must take full responsibility for
	  // emitting the expression with all its side effects, and we should not
	  // return a result.

	  switch (expr.type) {
	  case "MemberExpression":
	    return finish(b.memberExpression(
	      self.explodeExpression(path.get("object")),
	      expr.computed
	        ? explodeViaTempVar(null, path.get("property"))
	        : expr.property,
	      expr.computed
	    ));

	  case "CallExpression":
	    var calleePath = path.get("callee");
	    var argsPath = path.get("arguments");

	    var newCallee;
	    var newArgs = [];

	    var hasLeapingArgs = false;
	    argsPath.each(function(argPath) {
	      hasLeapingArgs = hasLeapingArgs ||
	        meta.containsLeap(argPath.value);
	    });

	    if (n.MemberExpression.check(calleePath.value)) {
	      if (hasLeapingArgs) {
	        // If the arguments of the CallExpression contained any yield
	        // expressions, then we need to be sure to evaluate the callee
	        // before evaluating the arguments, but if the callee was a member
	        // expression, then we must be careful that the object of the
	        // member expression still gets bound to `this` for the call.

	        var newObject = explodeViaTempVar(
	          // Assign the exploded callee.object expression to a temporary
	          // variable so that we can use it twice without reevaluating it.
	          self.makeTempVar(),
	          calleePath.get("object")
	        );

	        var newProperty = calleePath.value.computed
	          ? explodeViaTempVar(null, calleePath.get("property"))
	          : calleePath.value.property;

	        newArgs.unshift(newObject);

	        newCallee = b.memberExpression(
	          b.memberExpression(
	            newObject,
	            newProperty,
	            calleePath.value.computed
	          ),
	          b.identifier("call"),
	          false
	        );

	      } else {
	        newCallee = self.explodeExpression(calleePath);
	      }

	    } else {
	      newCallee = self.explodeExpression(calleePath);

	      if (n.MemberExpression.check(newCallee)) {
	        // If the callee was not previously a MemberExpression, then the
	        // CallExpression was "unqualified," meaning its `this` object
	        // should be the global object. If the exploded expression has
	        // become a MemberExpression (e.g. a context property, probably a
	        // temporary variable), then we need to force it to be unqualified
	        // by using the (0, object.property)(...) trick; otherwise, it
	        // will receive the object of the MemberExpression as its `this`
	        // object.
	        newCallee = b.sequenceExpression([
	          b.literal(0),
	          newCallee
	        ]);
	      }
	    }

	    argsPath.each(function(argPath) {
	      newArgs.push(explodeViaTempVar(null, argPath));
	    });

	    return finish(b.callExpression(
	      newCallee,
	      newArgs
	    ));

	  case "NewExpression":
	    return finish(b.newExpression(
	      explodeViaTempVar(null, path.get("callee")),
	      path.get("arguments").map(function(argPath) {
	        return explodeViaTempVar(null, argPath);
	      })
	    ));

	  case "ObjectExpression":
	    return finish(b.objectExpression(
	      path.get("properties").map(function(propPath) {
	        return b.property(
	          propPath.value.kind,
	          propPath.value.key,
	          explodeViaTempVar(null, propPath.get("value"))
	        );
	      })
	    ));

	  case "ArrayExpression":
	    return finish(b.arrayExpression(
	      path.get("elements").map(function(elemPath) {
	        return explodeViaTempVar(null, elemPath);
	      })
	    ));

	  case "SequenceExpression":
	    var lastIndex = expr.expressions.length - 1;

	    path.get("expressions").each(function(exprPath) {
	      if (exprPath.name === lastIndex) {
	        result = self.explodeExpression(exprPath, ignoreResult);
	      } else {
	        self.explodeExpression(exprPath, true);
	      }
	    });

	    return result;

	  case "LogicalExpression":
	    var after = loc();

	    if (!ignoreResult) {
	      result = self.makeTempVar();
	    }

	    var left = explodeViaTempVar(result, path.get("left"));

	    if (expr.operator === "&&") {
	      self.jumpIfNot(left, after);
	    } else {
	      assert.strictEqual(expr.operator, "||");
	      self.jumpIf(left, after);
	    }

	    explodeViaTempVar(result, path.get("right"), ignoreResult);

	    self.mark(after);

	    return result;

	  case "ConditionalExpression":
	    var elseLoc = loc();
	    var after = loc();
	    var test = self.explodeExpression(path.get("test"));

	    self.jumpIfNot(test, elseLoc);

	    if (!ignoreResult) {
	      result = self.makeTempVar();
	    }

	    explodeViaTempVar(result, path.get("consequent"), ignoreResult);
	    self.jump(after);

	    self.mark(elseLoc);
	    explodeViaTempVar(result, path.get("alternate"), ignoreResult);

	    self.mark(after);

	    return result;

	  case "UnaryExpression":
	    return finish(b.unaryExpression(
	      expr.operator,
	      // Can't (and don't need to) break up the syntax of the argument.
	      // Think about delete a[b].
	      self.explodeExpression(path.get("argument")),
	      !!expr.prefix
	    ));

	  case "BinaryExpression":
	    return finish(b.binaryExpression(
	      expr.operator,
	      explodeViaTempVar(null, path.get("left")),
	      explodeViaTempVar(null, path.get("right"))
	    ));

	  case "AssignmentExpression":
	    return finish(b.assignmentExpression(
	      expr.operator,
	      self.explodeExpression(path.get("left")),
	      self.explodeExpression(path.get("right"))
	    ));

	  case "UpdateExpression":
	    return finish(b.updateExpression(
	      expr.operator,
	      self.explodeExpression(path.get("argument")),
	      expr.prefix
	    ));

	  case "YieldExpression":
	    var after = loc();
	    var arg = expr.argument && self.explodeExpression(path.get("argument"));

	    if (arg && expr.delegate) {
	      var result = self.makeTempVar();

	      self.emit(b.returnStatement(b.callExpression(
	        self.contextProperty("delegateYield"), [
	          arg,
	          b.literal(result.property.name),
	          after
	        ]
	      )));

	      self.mark(after);

	      return result;
	    }

	    self.emitAssign(self.contextProperty("next"), after);
	    self.emit(b.returnStatement(arg || null));
	    self.mark(after);

	    return self.contextProperty("sent");

	  default:
	    throw new Error(
	      "unknown Expression of type " +
	        JSON.stringify(expr.type));
	  }
	};

	},{"./leap":459,"./meta":460,"./util":461,"assert":1,"recast":488}],458:[function(require,module,exports){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var types = require("recast").types;
	var n = types.namedTypes;
	var b = types.builders;
	var hasOwn = Object.prototype.hasOwnProperty;

	// The hoist function takes a FunctionExpression or FunctionDeclaration
	// and replaces any Declaration nodes in its body with assignments, then
	// returns a VariableDeclaration containing just the names of the removed
	// declarations.
	exports.hoist = function(funPath) {
	  assert.ok(funPath instanceof types.NodePath);
	  n.Function.assert(funPath.value);

	  var vars = {};

	  function varDeclToExpr(vdec, includeIdentifiers) {
	    n.VariableDeclaration.assert(vdec);
	    var exprs = [];

	    vdec.declarations.forEach(function(dec) {
	      vars[dec.id.name] = dec.id;

	      if (dec.init) {
	        exprs.push(b.assignmentExpression(
	          "=", dec.id, dec.init
	        ));
	      } else if (includeIdentifiers) {
	        exprs.push(dec.id);
	      }
	    });

	    if (exprs.length === 0)
	      return null;

	    if (exprs.length === 1)
	      return exprs[0];

	    return b.sequenceExpression(exprs);
	  }

	  types.visit(funPath.get("body"), {
	    visitVariableDeclaration: function(path) {
	      var expr = varDeclToExpr(path.value, false);
	      if (expr === null) {
	        path.replace();
	      } else {
	        // We don't need to traverse this expression any further because
	        // there can't be any new declarations inside an expression.
	        return b.expressionStatement(expr);
	      }

	      // Since the original node has been either removed or replaced,
	      // avoid traversing it any further.
	      return false;
	    },

	    visitForStatement: function(path) {
	      var init = path.value.init;
	      if (n.VariableDeclaration.check(init)) {
	        path.get("init").replace(varDeclToExpr(init, false));
	      }
	      this.traverse(path);
	    },

	    visitForInStatement: function(path) {
	      var left = path.value.left;
	      if (n.VariableDeclaration.check(left)) {
	        path.get("left").replace(varDeclToExpr(left, true));
	      }
	      this.traverse(path);
	    },

	    visitFunctionDeclaration: function(path) {
	      var node = path.value;
	      vars[node.id.name] = node.id;

	      var parentNode = path.parent.node;
	      var assignment = b.expressionStatement(
	        b.assignmentExpression(
	          "=",
	          node.id,
	          b.functionExpression(
	            node.id,
	            node.params,
	            node.body,
	            node.generator,
	            node.expression
	          )
	        )
	      );

	      if (n.BlockStatement.check(path.parent.node)) {
	        // Insert the assignment form before the first statement in the
	        // enclosing block.
	        path.parent.get("body").unshift(assignment);

	        // Remove the function declaration now that we've inserted the
	        // equivalent assignment form at the beginning of the block.
	        path.replace();

	      } else {
	        // If the parent node is not a block statement, then we can just
	        // replace the declaration with the equivalent assignment form
	        // without worrying about hoisting it.
	        path.replace(assignment);
	      }

	      // Don't hoist variables out of inner functions.
	      return false;
	    },

	    visitFunctionExpression: function(path) {
	      // Don't descend into nested function expressions.
	      return false;
	    }
	  });

	  var paramNames = {};
	  funPath.get("params").each(function(paramPath) {
	    var param = paramPath.value;
	    if (n.Identifier.check(param)) {
	      paramNames[param.name] = param;
	    } else {
	      // Variables declared by destructuring parameter patterns will be
	      // harmlessly re-declared.
	    }
	  });

	  var declarations = [];

	  Object.keys(vars).forEach(function(name) {
	    if (!hasOwn.call(paramNames, name)) {
	      declarations.push(b.variableDeclarator(vars[name], null));
	    }
	  });

	  if (declarations.length === 0) {
	    return null; // Be sure to handle this case!
	  }

	  return b.variableDeclaration("var", declarations);
	};

	},{"assert":1,"recast":488}],459:[function(require,module,exports){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var types = require("recast").types;
	var n = types.namedTypes;
	var b = types.builders;
	var inherits = require("util").inherits;
	var hasOwn = Object.prototype.hasOwnProperty;

	function Entry() {
	  assert.ok(this instanceof Entry);
	}

	function FunctionEntry(returnLoc) {
	  Entry.call(this);
	  n.Literal.assert(returnLoc);
	  this.returnLoc = returnLoc;
	}

	inherits(FunctionEntry, Entry);
	exports.FunctionEntry = FunctionEntry;

	function LoopEntry(breakLoc, continueLoc, label) {
	  Entry.call(this);

	  n.Literal.assert(breakLoc);
	  n.Literal.assert(continueLoc);

	  if (label) {
	    n.Identifier.assert(label);
	  } else {
	    label = null;
	  }

	  this.breakLoc = breakLoc;
	  this.continueLoc = continueLoc;
	  this.label = label;
	}

	inherits(LoopEntry, Entry);
	exports.LoopEntry = LoopEntry;

	function SwitchEntry(breakLoc) {
	  Entry.call(this);
	  n.Literal.assert(breakLoc);
	  this.breakLoc = breakLoc;
	}

	inherits(SwitchEntry, Entry);
	exports.SwitchEntry = SwitchEntry;

	function TryEntry(firstLoc, catchEntry, finallyEntry) {
	  Entry.call(this);

	  n.Literal.assert(firstLoc);

	  if (catchEntry) {
	    assert.ok(catchEntry instanceof CatchEntry);
	  } else {
	    catchEntry = null;
	  }

	  if (finallyEntry) {
	    assert.ok(finallyEntry instanceof FinallyEntry);
	  } else {
	    finallyEntry = null;
	  }

	  // Have to have one or the other (or both).
	  assert.ok(catchEntry || finallyEntry);

	  this.firstLoc = firstLoc;
	  this.catchEntry = catchEntry;
	  this.finallyEntry = finallyEntry;
	}

	inherits(TryEntry, Entry);
	exports.TryEntry = TryEntry;

	function CatchEntry(firstLoc, paramId) {
	  Entry.call(this);

	  n.Literal.assert(firstLoc);
	  n.Identifier.assert(paramId);

	  this.firstLoc = firstLoc;
	  this.paramId = paramId;
	}

	inherits(CatchEntry, Entry);
	exports.CatchEntry = CatchEntry;

	function FinallyEntry(firstLoc, afterLoc) {
	  Entry.call(this);
	  n.Literal.assert(firstLoc);
	  n.Literal.assert(afterLoc);
	  this.firstLoc = firstLoc;
	  this.afterLoc = afterLoc;
	}

	inherits(FinallyEntry, Entry);
	exports.FinallyEntry = FinallyEntry;

	function LabeledEntry(breakLoc, label) {
	  Entry.call(this);

	  n.Literal.assert(breakLoc);
	  n.Identifier.assert(label);

	  this.breakLoc = breakLoc;
	  this.label = label;
	}

	inherits(LabeledEntry, Entry);
	exports.LabeledEntry = LabeledEntry;

	function LeapManager(emitter) {
	  assert.ok(this instanceof LeapManager);

	  var Emitter = require("./emit").Emitter;
	  assert.ok(emitter instanceof Emitter);

	  this.emitter = emitter;
	  this.entryStack = [new FunctionEntry(emitter.finalLoc)];
	}

	var LMp = LeapManager.prototype;
	exports.LeapManager = LeapManager;

	LMp.withEntry = function(entry, callback) {
	  assert.ok(entry instanceof Entry);
	  this.entryStack.push(entry);
	  try {
	    callback.call(this.emitter);
	  } finally {
	    var popped = this.entryStack.pop();
	    assert.strictEqual(popped, entry);
	  }
	};

	LMp._findLeapLocation = function(property, label) {
	  for (var i = this.entryStack.length - 1; i >= 0; --i) {
	    var entry = this.entryStack[i];
	    var loc = entry[property];
	    if (loc) {
	      if (label) {
	        if (entry.label &&
	            entry.label.name === label.name) {
	          return loc;
	        }
	      } else if (entry instanceof LabeledEntry) {
	        // Ignore LabeledEntry entries unless we are actually breaking to
	        // a label.
	      } else {
	        return loc;
	      }
	    }
	  }

	  return null;
	};

	LMp.getBreakLoc = function(label) {
	  return this._findLeapLocation("breakLoc", label);
	};

	LMp.getContinueLoc = function(label) {
	  return this._findLeapLocation("continueLoc", label);
	};

	},{"./emit":457,"assert":1,"recast":488,"util":30}],460:[function(require,module,exports){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var m = require("private").makeAccessor();
	var types = require("recast").types;
	var isArray = types.builtInTypes.array;
	var n = types.namedTypes;
	var hasOwn = Object.prototype.hasOwnProperty;

	function makePredicate(propertyName, knownTypes) {
	  function onlyChildren(node) {
	    n.Node.assert(node);

	    // Assume no side effects until we find out otherwise.
	    var result = false;

	    function check(child) {
	      if (result) {
	        // Do nothing.
	      } else if (isArray.check(child)) {
	        child.some(check);
	      } else if (n.Node.check(child)) {
	        assert.strictEqual(result, false);
	        result = predicate(child);
	      }
	      return result;
	    }

	    types.eachField(node, function(name, child) {
	      check(child);
	    });

	    return result;
	  }

	  function predicate(node) {
	    n.Node.assert(node);

	    var meta = m(node);
	    if (hasOwn.call(meta, propertyName))
	      return meta[propertyName];

	    // Certain types are "opaque," which means they have no side
	    // effects or leaps and we don't care about their subexpressions.
	    if (hasOwn.call(opaqueTypes, node.type))
	      return meta[propertyName] = false;

	    if (hasOwn.call(knownTypes, node.type))
	      return meta[propertyName] = true;

	    return meta[propertyName] = onlyChildren(node);
	  }

	  predicate.onlyChildren = onlyChildren;

	  return predicate;
	}

	var opaqueTypes = {
	  FunctionExpression: true
	};

	// These types potentially have side effects regardless of what side
	// effects their subexpressions have.
	var sideEffectTypes = {
	  CallExpression: true, // Anything could happen!
	  ForInStatement: true, // Modifies the key variable.
	  UnaryExpression: true, // Think delete.
	  BinaryExpression: true, // Might invoke .toString() or .valueOf().
	  AssignmentExpression: true, // Side-effecting by definition.
	  UpdateExpression: true, // Updates are essentially assignments.
	  NewExpression: true // Similar to CallExpression.
	};

	// These types are the direct cause of all leaps in control flow.
	var leapTypes = {
	  YieldExpression: true,
	  BreakStatement: true,
	  ContinueStatement: true,
	  ReturnStatement: true,
	  ThrowStatement: true
	};

	// All leap types are also side effect types.
	for (var type in leapTypes) {
	  if (hasOwn.call(leapTypes, type)) {
	    sideEffectTypes[type] = leapTypes[type];
	  }
	}

	exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
	exports.containsLeap = makePredicate("containsLeap", leapTypes);

	},{"assert":1,"private":456,"recast":488}],461:[function(require,module,exports){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var types = require("recast").types;
	var n = types.namedTypes;
	var b = types.builders;
	var hasOwn = Object.prototype.hasOwnProperty;

	exports.defaults = function(obj) {
	  var len = arguments.length;
	  var extension;

	  for (var i = 1; i < len; ++i) {
	    if ((extension = arguments[i])) {
	      for (var key in extension) {
	        if (hasOwn.call(extension, key) && !hasOwn.call(obj, key)) {
	          obj[key] = extension[key];
	        }
	      }
	    }
	  }

	  return obj;
	};

	exports.runtimeProperty = function(name) {
	  return b.memberExpression(
	    b.identifier("regeneratorRuntime"),
	    b.identifier(name),
	    false
	  );
	};

	// Inspired by the isReference function from ast-util:
	// https://github.com/eventualbuddha/ast-util/blob/9bf91c5ce8/lib/index.js#L466-L506
	exports.isReference = function(path, name) {
	  var node = path.value;

	  if (!n.Identifier.check(node)) {
	    return false;
	  }

	  if (name && node.name !== name) {
	    return false;
	  }

	  var parent = path.parent.value;

	  switch (parent.type) {
	  case "VariableDeclarator":
	    return path.name === "init";

	  case "MemberExpression":
	    return path.name === "object" || (
	      parent.computed && path.name === "property"
	    );

	  case "FunctionExpression":
	  case "FunctionDeclaration":
	  case "ArrowFunctionExpression":
	    if (path.name === "id") {
	      return false;
	    }

	    if (path.parentPath.name === "params" &&
	        parent.params === path.parentPath.value &&
	        parent.params[path.name] === node) {
	      return false;
	    }

	    return true;

	  case "ClassDeclaration":
	  case "ClassExpression":
	    return path.name !== "id";

	  case "CatchClause":
	    return path.name !== "param";

	  case "Property":
	  case "MethodDefinition":
	    return path.name !== "key";

	  case "ImportSpecifier":
	  case "ImportDefaultSpecifier":
	  case "ImportNamespaceSpecifier":
	  case "LabeledStatement":
	    return false;

	  default:
	    return true;
	  }
	};

	},{"assert":1,"recast":488}],462:[function(require,module,exports){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var fs = require("fs");
	var recast = require("recast");
	var types = recast.types;
	var n = types.namedTypes;
	var b = types.builders;
	var isArray = types.builtInTypes.array;
	var isObject = types.builtInTypes.object;
	var NodePath = types.NodePath;
	var hoist = require("./hoist").hoist;
	var Emitter = require("./emit").Emitter;
	var util = require("./util");
	var runtimeProperty = util.runtimeProperty;
	var getMarkInfo = require("private").makeAccessor();

	exports.transform = function transform(node, options) {
	  options = options || {};

	  var path = node instanceof NodePath ? node : new NodePath(node);
	  visitor.visit(path, options);
	  node = path.value;

	  if (options.includeRuntime === true ||
	      (options.includeRuntime === 'if used' && visitor.wasChangeReported())) {
	    injectRuntime(n.File.check(node) ? node.program : node);
	  }

	  options.madeChanges = visitor.wasChangeReported();

	  return node;
	};

	function injectRuntime(program) {
	  n.Program.assert(program);

	  // Include the runtime by modifying the AST rather than by concatenating
	  // strings. This technique will allow for more accurate source mapping.
	  var runtimePath = require("..").runtime.path;
	  var runtime = fs.readFileSync(runtimePath, "utf8");
	  var runtimeBody = recast.parse(runtime, {
	    sourceFileName: runtimePath
	  }).program.body;

	  var body = program.body;
	  body.unshift.apply(body, runtimeBody);
	}

	var visitor = types.PathVisitor.fromMethodsObject({
	  reset: function(node, options) {
	    this.options = options;
	  },

	  visitFunction: function(path) {
	    // Calling this.traverse(path) first makes for a post-order traversal.
	    this.traverse(path);

	    var node = path.value;
	    var shouldTransformAsync = node.async && !this.options.disableAsync;

	    if (!node.generator && !shouldTransformAsync) {
	      return;
	    }

	    this.reportChanged();

	    if (node.expression) {
	      // Transform expression lambdas into normal functions.
	      node.expression = false;
	      node.body = b.blockStatement([
	        b.returnStatement(node.body)
	      ]);
	    }

	    if (shouldTransformAsync) {
	      awaitVisitor.visit(path.get("body"));
	    }

	    var outerBody = [];
	    var innerBody = [];
	    var bodyPath = path.get("body", "body");

	    bodyPath.each(function(childPath) {
	      var node = childPath.value;
	      if (node && node._blockHoist != null) {
	        outerBody.push(node);
	      } else {
	        innerBody.push(node);
	      }
	    });

	    if (outerBody.length > 0) {
	      // Only replace the inner body if we actually hoisted any statements
	      // to the outer body.
	      bodyPath.replace(innerBody);
	    }

	    var outerFnExpr = getOuterFnExpr(path);
	    // Note that getOuterFnExpr has the side-effect of ensuring that the
	    // function has a name (so node.id will always be an Identifier), even
	    // if a temporary name has to be synthesized.
	    n.Identifier.assert(node.id);
	    var innerFnId = b.identifier(node.id.name + "$");
	    var contextId = path.scope.declareTemporary("context$");
	    var argsId = path.scope.declareTemporary("args$");

	    // Turn all declarations into vars, and replace the original
	    // declarations with equivalent assignment expressions.
	    var vars = hoist(path);

	    var didRenameArguments = renameArguments(path, argsId);
	    if (didRenameArguments) {
	      vars = vars || b.variableDeclaration("var", []);
	      vars.declarations.push(b.variableDeclarator(
	        argsId, b.identifier("arguments")
	      ));
	    }

	    var emitter = new Emitter(contextId);
	    emitter.explode(path.get("body"));

	    if (vars && vars.declarations.length > 0) {
	      outerBody.push(vars);
	    }

	    var wrapArgs = [
	      emitter.getContextFunction(innerFnId),
	      // Async functions that are not generators don't care about the
	      // outer function because they don't need it to be marked and don't
	      // inherit from its .prototype.
	      node.generator ? outerFnExpr : b.literal(null),
	      b.thisExpression()
	    ];

	    var tryLocsList = emitter.getTryLocsList();
	    if (tryLocsList) {
	      wrapArgs.push(tryLocsList);
	    }

	    var wrapCall = b.callExpression(
	      runtimeProperty(shouldTransformAsync ? "async" : "wrap"),
	      wrapArgs
	    );

	    outerBody.push(b.returnStatement(wrapCall));
	    node.body = b.blockStatement(outerBody);

	    var wasGeneratorFunction = node.generator;
	    if (wasGeneratorFunction) {
	      node.generator = false;
	    }

	    if (shouldTransformAsync) {
	      node.async = false;
	    }

	    if (wasGeneratorFunction &&
	        n.Expression.check(node)) {
	      return b.callExpression(runtimeProperty("mark"), [node]);
	    }
	  },

	  visitForOfStatement: function(path) {
	    this.traverse(path);

	    var node = path.value;
	    var tempIterId = path.scope.declareTemporary("t$");
	    var tempIterDecl = b.variableDeclarator(
	      tempIterId,
	      b.callExpression(
	        runtimeProperty("values"),
	        [node.right]
	      )
	    );

	    var tempInfoId = path.scope.declareTemporary("t$");
	    var tempInfoDecl = b.variableDeclarator(tempInfoId, null);

	    var init = node.left;
	    var loopId;
	    if (n.VariableDeclaration.check(init)) {
	      loopId = init.declarations[0].id;
	      init.declarations.push(tempIterDecl, tempInfoDecl);
	    } else {
	      loopId = init;
	      init = b.variableDeclaration("var", [
	        tempIterDecl,
	        tempInfoDecl
	      ]);
	    }
	    n.Identifier.assert(loopId);

	    var loopIdAssignExprStmt = b.expressionStatement(
	      b.assignmentExpression(
	        "=",
	        loopId,
	        b.memberExpression(
	          tempInfoId,
	          b.identifier("value"),
	          false
	        )
	      )
	    );

	    if (n.BlockStatement.check(node.body)) {
	      node.body.body.unshift(loopIdAssignExprStmt);
	    } else {
	      node.body = b.blockStatement([
	        loopIdAssignExprStmt,
	        node.body
	      ]);
	    }

	    return b.forStatement(
	      init,
	      b.unaryExpression(
	        "!",
	        b.memberExpression(
	          b.assignmentExpression(
	            "=",
	            tempInfoId,
	            b.callExpression(
	              b.memberExpression(
	                tempIterId,
	                b.identifier("next"),
	                false
	              ),
	              []
	            )
	          ),
	          b.identifier("done"),
	          false
	        )
	      ),
	      null,
	      node.body
	    );
	  }
	});

	// Given a NodePath for a Function, return an Expression node that can be
	// used to refer reliably to the function object from inside the function.
	// This expression is essentially a replacement for arguments.callee, with
	// the key advantage that it works in strict mode.
	function getOuterFnExpr(funPath) {
	  var node = funPath.value;
	  n.Function.assert(node);

	  if (node.generator && // Non-generator functions don't need to be marked.
	      n.FunctionDeclaration.check(node)) {
	    var pp = funPath.parent;

	    while (pp && !(n.BlockStatement.check(pp.value) ||
	                   n.Program.check(pp.value))) {
	      pp = pp.parent;
	    }

	    if (!pp) {
	      return node.id;
	    }

	    var markDecl = getRuntimeMarkDecl(pp);
	    var markedArray = markDecl.declarations[0].id;
	    var funDeclIdArray = markDecl.declarations[0].init.callee.object;
	    n.ArrayExpression.assert(funDeclIdArray);

	    var index = funDeclIdArray.elements.length;
	    funDeclIdArray.elements.push(node.id);

	    return b.memberExpression(
	      markedArray,
	      b.literal(index),
	      true
	    );
	  }

	  return node.id || (
	    node.id = funPath.scope.parent.declareTemporary("callee$")
	  );
	}

	function getRuntimeMarkDecl(blockPath) {
	  assert.ok(blockPath instanceof NodePath);
	  var block = blockPath.node;
	  isArray.assert(block.body);

	  var info = getMarkInfo(block);
	  if (info.decl) {
	    return info.decl;
	  }

	  info.decl = b.variableDeclaration("var", [
	    b.variableDeclarator(
	      blockPath.scope.declareTemporary("marked"),
	      b.callExpression(
	        b.memberExpression(
	          b.arrayExpression([]),
	          b.identifier("map"),
	          false
	        ),
	        [runtimeProperty("mark")]
	      )
	    )
	  ]);

	  for (var i = 0; i < block.body.length; ++i) {
	    if (!shouldNotHoistAbove(blockPath.get("body", i))) {
	      break;
	    }
	  }

	  blockPath.get("body").insertAt(i, info.decl);

	  return info.decl;
	}

	function shouldNotHoistAbove(stmtPath) {
	  var value = stmtPath.value;
	  n.Statement.assert(value);

	  // If the first statement is a "use strict" declaration, make sure to
	  // insert hoisted declarations afterwards.
	  return n.ExpressionStatement.check(value) &&
	    n.Literal.check(value.expression) &&
	    value.expression.value === "use strict";
	}

	function renameArguments(funcPath, argsId) {
	  assert.ok(funcPath instanceof types.NodePath);
	  var func = funcPath.value;
	  var didRenameArguments = false;

	  recast.visit(funcPath, {
	    visitFunction: function(path) {
	      if (path.value === func) {
	        this.traverse(path);
	      } else {
	        return false;
	      }
	    },

	    visitIdentifier: function(path) {
	      if (path.value.name === "arguments" &&
	          util.isReference(path)) {
	        path.replace(argsId);
	        didRenameArguments = true;
	        return false;
	      }

	      this.traverse(path);
	    }
	  });

	  // If the traversal replaced any arguments references, then we need to
	  // alias the outer function's arguments binding (be it the implicit
	  // arguments object or some other parameter or variable) to the variable
	  // named by argsId.
	  return didRenameArguments;
	}

	var awaitVisitor = types.PathVisitor.fromMethodsObject({
	  visitFunction: function(path) {
	    return false; // Don't descend into nested function scopes.
	  },

	  visitAwaitExpression: function(path) {
	    // Convert await and await* expressions to yield expressions.
	    var argument = path.value.argument;

	    // If the parser supports await* syntax using a boolean .all property
	    // (#171), desugar that syntax to yield Promise.all(argument).
	    if (path.value.all) {
	      argument = b.callExpression(
	        b.memberExpression(
	          b.identifier("Promise"),
	          b.identifier("all"),
	          false
	        ),
	        [argument]
	      );
	    }

	    // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`
	    // causes the argument to be wrapped in such a way that the runtime
	    // can distinguish between awaited and merely yielded values.
	    return b.yieldExpression(
	      b.callExpression(
	        runtimeProperty("awrap"),
	        [argument]
	      ),
	      false
	    );
	  }
	});

	},{"..":463,"./emit":457,"./hoist":458,"./util":461,"assert":1,"fs":4,"private":456,"recast":488}],463:[function(require,module,exports){
	(function (__dirname){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	var assert = require("assert");
	var path = require("path");
	var fs = require("fs");
	var through = require("through");
	var transform = require("./lib/visit").transform;
	var utils = require("./lib/util");
	var recast = require("recast");
	var types = recast.types;
	var genOrAsyncFunExp = /\bfunction\s*\*|\basync\b/;
	var blockBindingExp = /\b(let|const)\s+/;

	function exports(file, options) {
	  var data = [];
	  return through(write, end);

	  function write(buf) {
	    data.push(buf);
	  }

	  function end() {
	    this.queue(compile(data.join(""), options).code);
	    this.queue(null);
	  }
	}

	// To get a writable stream for use as a browserify transform, call
	// require("regenerator")().
	module.exports = exports;

	// To include the runtime globally in the current node process, call
	// require("regenerator").runtime().
	function runtime() {
	  require("./runtime");
	}
	exports.runtime = runtime;
	runtime.path = path.join(__dirname, "runtime.js");

	function compile(source, options) {
	  options = normalizeOptions(options);

	  if (!genOrAsyncFunExp.test(source)) {
	    return {
	      // Shortcut: no generators or async functions to transform.
	      code: (options.includeRuntime === true ? fs.readFileSync(
	        path.join(__dirname, "runtime.js"), "utf-8"
	      ) + "\n" : "") + source
	    };
	  }

	  var recastOptions = getRecastOptions(options);
	  var ast = recast.parse(source, recastOptions);
	  var nodePath = new types.NodePath(ast);
	  var programPath = nodePath.get("program");

	  if (shouldVarify(source, options)) {
	    // Transpile let/const into var declarations.
	    varifyAst(programPath.node);
	  }

	  transform(programPath, options);

	  return recast.print(nodePath, recastOptions);
	}

	function normalizeOptions(options) {
	  options = utils.defaults(options || {}, {
	    includeRuntime: false,
	    supportBlockBinding: true
	  });

	  if (!options.esprima) {
	    options.esprima = require("esprima-fb");
	  }

	  assert.ok(
	    /harmony/.test(options.esprima.version),
	    "Bad esprima version: " + options.esprima.version
	  );

	  return options;
	}

	function getRecastOptions(options) {
	  var recastOptions = {
	    range: true
	  };

	  function copy(name) {
	    if (name in options) {
	      recastOptions[name] = options[name];
	    }
	  }

	  copy("esprima");
	  copy("sourceFileName");
	  copy("sourceMapName");
	  copy("inputSourceMap");
	  copy("sourceRoot");

	  return recastOptions;
	}

	function shouldVarify(source, options) {
	  var supportBlockBinding = !!options.supportBlockBinding;
	  if (supportBlockBinding) {
	    if (!blockBindingExp.test(source)) {
	      supportBlockBinding = false;
	    }
	  }

	  return supportBlockBinding;
	}

	function varify(source, options) {
	  var recastOptions = getRecastOptions(normalizeOptions(options));
	  var ast = recast.parse(source, recastOptions);
	  varifyAst(ast.program);
	  return recast.print(ast, recastOptions).code;
	}

	function varifyAst(ast) {
	  types.namedTypes.Program.assert(ast);

	  var defsResult = require("defs")(ast, {
	    ast: true,
	    disallowUnknownReferences: false,
	    disallowDuplicated: false,
	    disallowVars: false,
	    loopClosures: "iife"
	  });

	  if (defsResult.errors) {
	    throw new Error(defsResult.errors.join("\n"))
	  }

	  return ast;
	}

	// Convenience for just translating let/const to var declarations.
	exports.varify = varify;

	// Allow packages that depend on Regenerator to use the same copy of
	// ast-types, in case multiple versions are installed by NPM.
	exports.types = types;

	// Transforms a string of source code, returning the { code, map? } result
	// from recast.print.
	exports.compile = compile;

	// To modify an AST directly, call require("regenerator").transform(ast).
	exports.transform = transform;

	}).call(this,"/node_modules/regenerator")
	},{"./lib/util":461,"./lib/visit":462,"./runtime":506,"assert":1,"defs":464,"esprima-fb":4,"fs":4,"path":12,"recast":488,"through":505}],464:[function(require,module,exports){
	"use strict";

	var assert = require("assert");
	var is = require("simple-is");
	var fmt = require("simple-fmt");
	var stringmap = require("stringmap");
	var stringset = require("stringset");
	var alter = require("alter");
	var traverse = require("ast-traverse");
	var breakable = require("breakable");
	var Scope = require("./scope");
	var error = require("./error");
	var getline = error.getline;
	var options = require("./options");
	var Stats = require("./stats");
	var jshint_vars = require("./jshint_globals/vars.js");


	function isConstLet(kind) {
	    return is.someof(kind, ["const", "let"]);
	}

	function isVarConstLet(kind) {
	    return is.someof(kind, ["var", "const", "let"]);
	}

	function isNonFunctionBlock(node) {
	    return node.type === "BlockStatement" && is.noneof(node.$parent.type, ["FunctionDeclaration", "FunctionExpression"]);
	}

	function isForWithConstLet(node) {
	    return node.type === "ForStatement" && node.init && node.init.type === "VariableDeclaration" && isConstLet(node.init.kind);
	}

	function isForInOfWithConstLet(node) {
	    return isForInOf(node) && node.left.type === "VariableDeclaration" && isConstLet(node.left.kind);
	}

	function isForInOf(node) {
	    return is.someof(node.type, ["ForInStatement", "ForOfStatement"]);
	}

	function isFunction(node) {
	    return is.someof(node.type, ["FunctionDeclaration", "FunctionExpression"]);
	}

	function isLoop(node) {
	    return is.someof(node.type, ["ForStatement", "ForInStatement", "ForOfStatement", "WhileStatement", "DoWhileStatement"]);
	}

	function isReference(node) {
	    var parent = node.$parent;
	    return node.$refToScope ||
	        node.type === "Identifier" &&
	        !(parent.type === "VariableDeclarator" && parent.id === node) && // var|let|const $
	        !(parent.type === "MemberExpression" && parent.computed === false && parent.property === node) && // obj.$
	        !(parent.type === "Property" && parent.key === node) && // {$: ...}
	        !(parent.type === "LabeledStatement" && parent.label === node) && // $: ...
	        !(parent.type === "CatchClause" && parent.param === node) && // catch($)
	        !(isFunction(parent) && parent.id === node) && // function $(..
	        !(isFunction(parent) && is.someof(node, parent.params)) && // function f($)..
	        true;
	}

	function isLvalue(node) {
	    return isReference(node) &&
	        ((node.$parent.type === "AssignmentExpression" && node.$parent.left === node) ||
	            (node.$parent.type === "UpdateExpression" && node.$parent.argument === node));
	}

	function createScopes(node, parent) {
	    assert(!node.$scope);

	    node.$parent = parent;
	    node.$scope = node.$parent ? node.$parent.$scope : null; // may be overridden

	    if (node.type === "Program") {
	        // Top-level program is a scope
	        // There's no block-scope under it
	        node.$scope = new Scope({
	            kind: "hoist",
	            node: node,
	            parent: null,
	        });

	    } else if (isFunction(node)) {
	        // Function is a scope, with params in it
	        // There's no block-scope under it

	        node.$scope = new Scope({
	            kind: "hoist",
	            node: node,
	            parent: node.$parent.$scope,
	        });

	        // function has a name
	        if (node.id) {
	            assert(node.id.type === "Identifier");

	            if (node.type === "FunctionDeclaration") {
	                // Function name goes in parent scope for declared functions
	                node.$parent.$scope.add(node.id.name, "fun", node.id, null);
	            } else if (node.type === "FunctionExpression") {
	                // Function name goes in function's scope for named function expressions
	                node.$scope.add(node.id.name, "fun", node.id, null);
	            } else {
	                assert(false);
	            }
	        }

	        node.params.forEach(function(param) {
	            node.$scope.add(param.name, "param", param, null);
	        });

	    } else if (node.type === "VariableDeclaration") {
	        // Variable declarations names goes in current scope
	        assert(isVarConstLet(node.kind));
	        node.declarations.forEach(function(declarator) {
	            assert(declarator.type === "VariableDeclarator");
	            var name = declarator.id.name;
	            if (options.disallowVars && node.kind === "var") {
	                error(getline(declarator), "var {0} is not allowed (use let or const)", name);
	            }
	            node.$scope.add(name, node.kind, declarator.id, declarator.range[1]);
	        });

	    } else if (isForWithConstLet(node) || isForInOfWithConstLet(node)) {
	        // For(In/Of) loop with const|let declaration is a scope, with declaration in it
	        // There may be a block-scope under it
	        node.$scope = new Scope({
	            kind: "block",
	            node: node,
	            parent: node.$parent.$scope,
	        });

	    } else if (isNonFunctionBlock(node)) {
	        // A block node is a scope unless parent is a function
	        node.$scope = new Scope({
	            kind: "block",
	            node: node,
	            parent: node.$parent.$scope,
	        });

	    } else if (node.type === "CatchClause") {
	        var identifier = node.param;

	        node.$scope = new Scope({
	            kind: "catch-block",
	            node: node,
	            parent: node.$parent.$scope,
	        });
	        node.$scope.add(identifier.name, "caught", identifier, null);

	        // All hoist-scope keeps track of which variables that are propagated through,
	        // i.e. an reference inside the scope points to a declaration outside the scope.
	        // This is used to mark "taint" the name since adding a new variable in the scope,
	        // with a propagated name, would change the meaning of the existing references.
	        //
	        // catch(e) is special because even though e is a variable in its own scope,
	        // we want to make sure that catch(e){let e} is never transformed to
	        // catch(e){var e} (but rather var e$0). For that reason we taint the use of e
	        // in the closest hoist-scope, i.e. where var e$0 belongs.
	        node.$scope.closestHoistScope().markPropagates(identifier.name);
	    }
	}

	function createTopScope(programScope, environments, globals) {
	    function inject(obj) {
	        for (var name in obj) {
	            var writeable = obj[name];
	            var kind = (writeable ? "var" : "const");
	            if (topScope.hasOwn(name)) {
	                topScope.remove(name);
	            }
	            topScope.add(name, kind, {loc: {start: {line: -1}}}, -1);
	        }
	    }

	    var topScope = new Scope({
	        kind: "hoist",
	        node: {},
	        parent: null,
	    });

	    var complementary = {
	        undefined: false,
	        Infinity: false,
	        console: false,
	    };

	    inject(complementary);
	    inject(jshint_vars.reservedVars);
	    inject(jshint_vars.ecmaIdentifiers);
	    if (environments) {
	        environments.forEach(function(env) {
	            if (!jshint_vars[env]) {
	                error(-1, 'environment "{0}" not found', env);
	            } else {
	                inject(jshint_vars[env]);
	            }
	        });
	    }
	    if (globals) {
	        inject(globals);
	    }

	    // link it in
	    programScope.parent = topScope;
	    topScope.children.push(programScope);

	    return topScope;
	}

	function setupReferences(ast, allIdentifiers, opts) {
	    var analyze = (is.own(opts, "analyze") ? opts.analyze : true);

	    function visit(node) {
	        if (!isReference(node)) {
	            return;
	        }
	        allIdentifiers.add(node.name);

	        var scope = node.$scope.lookup(node.name);
	        if (analyze && !scope && options.disallowUnknownReferences) {
	            error(getline(node), "reference to unknown global variable {0}", node.name);
	        }
	        // check const and let for referenced-before-declaration
	        if (analyze && scope && is.someof(scope.getKind(node.name), ["const", "let"])) {
	            var allowedFromPos = scope.getFromPos(node.name);
	            var referencedAtPos = node.range[0];
	            assert(is.finitenumber(allowedFromPos));
	            assert(is.finitenumber(referencedAtPos));
	            if (referencedAtPos < allowedFromPos) {
	                if (!node.$scope.hasFunctionScopeBetween(scope)) {
	                    error(getline(node), "{0} is referenced before its declaration", node.name);
	                }
	            }
	        }
	        node.$refToScope = scope;
	    }

	    traverse(ast, {pre: visit});
	}

	// TODO for loops init and body props are parallel to each other but init scope is outer that of body
	// TODO is this a problem?

	function varify(ast, stats, allIdentifiers, changes) {
	    function unique(name) {
	        assert(allIdentifiers.has(name));
	        for (var cnt = 0; ; cnt++) {
	            var genName = name + "$" + String(cnt);
	            if (!allIdentifiers.has(genName)) {
	                return genName;
	            }
	        }
	    }

	    function renameDeclarations(node) {
	        if (node.type === "VariableDeclaration" && isConstLet(node.kind)) {
	            var hoistScope = node.$scope.closestHoistScope();
	            var origScope = node.$scope;

	            // text change const|let => var
	            changes.push({
	                start: node.range[0],
	                end: node.range[0] + node.kind.length,
	                str: "var",
	            });

	            node.declarations.forEach(function(declarator) {
	                assert(declarator.type === "VariableDeclarator");
	                var name = declarator.id.name;

	                stats.declarator(node.kind);

	                // rename if
	                // 1) name already exists in hoistScope, or
	                // 2) name is already propagated (passed) through hoistScope or manually tainted
	                var rename = (origScope !== hoistScope &&
	                    (hoistScope.hasOwn(name) || hoistScope.doesPropagate(name)));

	                var newName = (rename ? unique(name) : name);

	                origScope.remove(name);
	                hoistScope.add(newName, "var", declarator.id, declarator.range[1]);

	                origScope.moves = origScope.moves || stringmap();
	                origScope.moves.set(name, {
	                    name: newName,
	                    scope: hoistScope,
	                });

	                allIdentifiers.add(newName);

	                if (newName !== name) {
	                    stats.rename(name, newName, getline(declarator));

	                    declarator.id.originalName = name;
	                    declarator.id.name = newName;

	                    // textchange var x => var x$1
	                    changes.push({
	                        start: declarator.id.range[0],
	                        end: declarator.id.range[1],
	                        str: newName,
	                    });
	                }
	            });

	            // ast change const|let => var
	            node.kind = "var";
	        }
	    }

	    function renameReferences(node) {
	        if (!node.$refToScope) {
	            return;
	        }
	        var move = node.$refToScope.moves && node.$refToScope.moves.get(node.name);
	        if (!move) {
	            return;
	        }
	        node.$refToScope = move.scope;

	        if (node.name !== move.name) {
	            node.originalName = node.name;
	            node.name = move.name;

	            if (node.alterop) {
	                // node has no range because it is the result of another alter operation
	                var existingOp = null;
	                for (var i = 0; i < changes.length; i++) {
	                    var op = changes[i];
	                    if (op.node === node) {
	                        existingOp = op;
	                        break;
	                    }
	                }
	                assert(existingOp);

	                // modify op
	                existingOp.str = move.name;
	            } else {
	                changes.push({
	                    start: node.range[0],
	                    end: node.range[1],
	                    str: move.name,
	                });
	            }
	        }
	    }

	    traverse(ast, {pre: renameDeclarations});
	    traverse(ast, {pre: renameReferences});
	    ast.$scope.traverse({pre: function(scope) {
	        delete scope.moves;
	    }});
	}


	function detectLoopClosures(ast) {
	    traverse(ast, {pre: visit});

	    function detectIifyBodyBlockers(body, node) {
	        return breakable(function(brk) {
	            traverse(body, {pre: function(n) {
	                // if we hit an inner function of the loop body, don't traverse further
	                if (isFunction(n)) {
	                    return false;
	                }

	                var err = true; // reset to false in else-statement below
	                var msg = "loop-variable {0} is captured by a loop-closure that can't be transformed due to use of {1} at line {2}";
	                if (n.type === "BreakStatement") {
	                    error(getline(node), msg, node.name, "break", getline(n));
	                } else if (n.type === "ContinueStatement") {
	                    error(getline(node), msg, node.name, "continue", getline(n));
	                } else if (n.type === "ReturnStatement") {
	                    error(getline(node), msg, node.name, "return", getline(n));
	                } else if (n.type === "YieldExpression") {
	                    error(getline(node), msg, node.name, "yield", getline(n));
	                } else if (n.type === "Identifier" && n.name === "arguments") {
	                    error(getline(node), msg, node.name, "arguments", getline(n));
	                } else if (n.type === "VariableDeclaration" && n.kind === "var") {
	                    error(getline(node), msg, node.name, "var", getline(n));
	                } else {
	                    err = false;
	                }
	                if (err) {
	                    brk(true); // break traversal
	                }
	            }});
	            return false;
	        });
	    }

	    function visit(node) {
	        // forbidden pattern:
	        // <any>* <loop> <non-fn>* <constlet-def> <any>* <fn> <any>* <constlet-ref>
	        var loopNode = null;
	        if (isReference(node) && node.$refToScope && isConstLet(node.$refToScope.getKind(node.name))) {
	            // traverse nodes up towards root from constlet-def
	            // if we hit a function (before a loop) - ok!
	            // if we hit a loop - maybe-ouch
	            // if we reach root - ok!
	            for (var n = node.$refToScope.node; ; ) {
	                if (isFunction(n)) {
	                    // we're ok (function-local)
	                    return;
	                } else if (isLoop(n)) {
	                    loopNode = n;
	                    // maybe not ok (between loop and function)
	                    break;
	                }
	                n = n.$parent;
	                if (!n) {
	                    // ok (reached root)
	                    return;
	                }
	            }

	            assert(isLoop(loopNode));

	            // traverse scopes from reference-scope up towards definition-scope
	            // if we hit a function, ouch!
	            var defScope = node.$refToScope;
	            var generateIIFE = (options.loopClosures === "iife");

	            for (var s = node.$scope; s; s = s.parent) {
	                if (s === defScope) {
	                    // we're ok
	                    return;
	                } else if (isFunction(s.node)) {
	                    // not ok (there's a function between the reference and definition)
	                    // may be transformable via IIFE

	                    if (!generateIIFE) {
	                        var msg = "loop-variable {0} is captured by a loop-closure. Tried \"loopClosures\": \"iife\" in defs-config.json?";
	                        return error(getline(node), msg, node.name);
	                    }

	                    // here be dragons
	                    // for (let x = ..; .. ; ..) { (function(){x})() } is forbidden because of current
	                    // spec and VM status
	                    if (loopNode.type === "ForStatement" && defScope.node === loopNode) {
	                        var declarationNode = defScope.getNode(node.name);
	                        return error(getline(declarationNode), "Not yet specced ES6 feature. {0} is declared in for-loop header and then captured in loop closure", declarationNode.name);
	                    }

	                    // speak now or forever hold your peace
	                    if (detectIifyBodyBlockers(loopNode.body, node)) {
	                        // error already generated
	                        return;
	                    }

	                    // mark loop for IIFE-insertion
	                    loopNode.$iify = true;
	                }
	            }
	        }
	    }
	}

	function transformLoopClosures(root, ops, options) {
	    function insertOp(pos, str, node) {
	        var op = {
	            start: pos,
	            end: pos,
	            str: str,
	        }
	        if (node) {
	            op.node = node;
	        }
	        ops.push(op);
	    }

	    traverse(root, {pre: function(node) {
	        if (!node.$iify) {
	            return;
	        }

	        var hasBlock = (node.body.type === "BlockStatement");

	        var insertHead = (hasBlock ?
	            node.body.range[0] + 1 : // just after body {
	            node.body.range[0]); // just before existing expression
	        var insertFoot = (hasBlock ?
	            node.body.range[1] - 1 : // just before body }
	            node.body.range[1]);  // just after existing expression

	        var forInName = (isForInOf(node) && node.left.declarations[0].id.name);;
	        var iifeHead = fmt("(function({0}){", forInName ? forInName : "");
	        var iifeTail = fmt("}).call(this{0});", forInName ? ", " + forInName : "");

	        // modify AST
	        var iifeFragment = options.parse(iifeHead + iifeTail);
	        var iifeExpressionStatement = iifeFragment.body[0];
	        var iifeBlockStatement = iifeExpressionStatement.expression.callee.object.body;

	        if (hasBlock) {
	            var forBlockStatement = node.body;
	            var tmp = forBlockStatement.body;
	            forBlockStatement.body = [iifeExpressionStatement];
	            iifeBlockStatement.body = tmp;
	        } else {
	            var tmp$0 = node.body;
	            node.body = iifeExpressionStatement;
	            iifeBlockStatement.body[0] = tmp$0;
	        }

	        // create ops
	        insertOp(insertHead, iifeHead);

	        if (forInName) {
	            insertOp(insertFoot, "}).call(this, ");

	            var args = iifeExpressionStatement.expression.arguments;
	            var iifeArgumentIdentifier = args[1];
	            iifeArgumentIdentifier.alterop = true;
	            insertOp(insertFoot, forInName, iifeArgumentIdentifier);

	            insertOp(insertFoot, ");");
	        } else {
	            insertOp(insertFoot, iifeTail);
	        }
	    }});
	}

	function detectConstAssignment(ast) {
	    traverse(ast, {pre: function(node) {
	        if (isLvalue(node)) {
	            var scope = node.$scope.lookup(node.name);
	            if (scope && scope.getKind(node.name) === "const") {
	                error(getline(node), "can't assign to const variable {0}", node.name);
	            }
	        }
	    }});
	}

	function detectConstantLets(ast) {
	    traverse(ast, {pre: function(node) {
	        if (isLvalue(node)) {
	            var scope = node.$scope.lookup(node.name);
	            if (scope) {
	                scope.markWrite(node.name);
	            }
	        }
	    }});

	    ast.$scope.detectUnmodifiedLets();
	}

	function setupScopeAndReferences(root, opts) {
	    // setup scopes
	    traverse(root, {pre: createScopes});
	    var topScope = createTopScope(root.$scope, options.environments, options.globals);

	    // allIdentifiers contains all declared and referenced vars
	    // collect all declaration names (including those in topScope)
	    var allIdentifiers = stringset();
	    topScope.traverse({pre: function(scope) {
	        allIdentifiers.addMany(scope.decls.keys());
	    }});

	    // setup node.$refToScope, check for errors.
	    // also collects all referenced names to allIdentifiers
	    setupReferences(root, allIdentifiers, opts);
	    return allIdentifiers;
	}

	function cleanupTree(root) {
	    traverse(root, {pre: function(node) {
	        for (var prop in node) {
	            if (prop[0] === "$") {
	                delete node[prop];
	            }
	        }
	    }});
	}

	function run(src, config) {
	    // alter the options singleton with user configuration
	    for (var key in config) {
	        options[key] = config[key];
	    }

	    var parsed;

	    if (is.object(src)) {
	        if (!options.ast) {
	            return {
	                errors: [
	                    "Can't produce string output when input is an AST. " +
	                    "Did you forget to set options.ast = true?"
	                ],
	            };
	        }

	        // Received an AST object as src, so no need to parse it.
	        parsed = src;

	    } else if (is.string(src)) {
	        try {
	            parsed = options.parse(src, {
	                loc: true,
	                range: true,
	            });
	        } catch (e) {
	            return {
	                errors: [
	                    fmt("line {0} column {1}: Error during input file parsing\n{2}\n{3}",
	                        e.lineNumber,
	                        e.column,
	                        src.split("\n")[e.lineNumber - 1],
	                        fmt.repeat(" ", e.column - 1) + "^")
	                ],
	            };
	        }

	    } else {
	        return {
	            errors: ["Input was neither an AST object nor a string."],
	        };
	    }

	    var ast = parsed;

	    // TODO detect unused variables (never read)
	    error.reset();

	    var allIdentifiers = setupScopeAndReferences(ast, {});

	    // static analysis passes
	    detectLoopClosures(ast);
	    detectConstAssignment(ast);
	    //detectConstantLets(ast);

	    var changes = [];
	    transformLoopClosures(ast, changes, options);

	    //ast.$scope.print(); process.exit(-1);

	    if (error.errors.length >= 1) {
	        return {
	            errors: error.errors,
	        };
	    }

	    if (changes.length > 0) {
	        cleanupTree(ast);
	        allIdentifiers = setupScopeAndReferences(ast, {analyze: false});
	    }
	    assert(error.errors.length === 0);

	    // change constlet declarations to var, renamed if needed
	    // varify modifies the scopes and AST accordingly and
	    // returns a list of change fragments (to use with alter)
	    var stats = new Stats();
	    varify(ast, stats, allIdentifiers, changes);

	    if (options.ast) {
	        // return the modified AST instead of src code
	        // get rid of all added $ properties first, such as $parent and $scope
	        cleanupTree(ast);
	        return {
	            stats: stats,
	            ast: ast,
	        };
	    } else {
	        // apply changes produced by varify and return the transformed src
	        var transformedSrc = alter(src, changes);
	        return {
	            stats: stats,
	            src: transformedSrc,
	        };
	    }
	}

	module.exports = run;

	},{"./error":465,"./jshint_globals/vars.js":466,"./options":467,"./scope":468,"./stats":469,"alter":470,"assert":1,"ast-traverse":472,"breakable":473,"simple-fmt":474,"simple-is":475,"stringmap":476,"stringset":477}],465:[function(require,module,exports){
	"use strict";

	var fmt = require("simple-fmt");
	var assert = require("assert");

	function error(line, var_args) {
	    assert(arguments.length >= 2);

	    var msg = (arguments.length === 2 ?
	        String(var_args) : fmt.apply(fmt, Array.prototype.slice.call(arguments, 1)));

	    error.errors.push(line === -1 ? msg : fmt("line {0}: {1}", line, msg));
	}

	error.reset = function() {
	    error.errors = [];
	};

	error.getline = function(node) {
	    if (node && node.loc && node.loc.start) {
	        return node.loc.start.line;
	    }
	    return -1;
	};

	error.reset();

	module.exports = error;

	},{"assert":1,"simple-fmt":474}],466:[function(require,module,exports){
	// jshint -W001

	"use strict";

	// Identifiers provided by the ECMAScript standard.

	exports.reservedVars = {
		arguments : false,
		NaN       : false
	};

	exports.ecmaIdentifiers = {
		Array              : false,
		Boolean            : false,
		Date               : false,
		decodeURI          : false,
		decodeURIComponent : false,
		encodeURI          : false,
		encodeURIComponent : false,
		Error              : false,
		"eval"             : false,
		EvalError          : false,
		Function           : false,
		hasOwnProperty     : false,
		isFinite           : false,
		isNaN              : false,
		JSON               : false,
		Math               : false,
		Map                : false,
		Number             : false,
		Object             : false,
		parseInt           : false,
		parseFloat         : false,
		RangeError         : false,
		ReferenceError     : false,
		RegExp             : false,
		Set                : false,
		String             : false,
		SyntaxError        : false,
		TypeError          : false,
		URIError           : false,
		WeakMap            : false
	};

	// Global variables commonly provided by a web browser environment.

	exports.browser = {
		ArrayBuffer          : false,
		ArrayBufferView      : false,
		Audio                : false,
		Blob                 : false,
		addEventListener     : false,
		applicationCache     : false,
		atob                 : false,
		blur                 : false,
		btoa                 : false,
		clearInterval        : false,
		clearTimeout         : false,
		close                : false,
		closed               : false,
		DataView             : false,
		DOMParser            : false,
		defaultStatus        : false,
		document             : false,
		Element              : false,
		event                : false,
		FileReader           : false,
		Float32Array         : false,
		Float64Array         : false,
		FormData             : false,
		focus                : false,
		frames               : false,
		getComputedStyle     : false,
		HTMLElement          : false,
		HTMLAnchorElement    : false,
		HTMLBaseElement      : false,
		HTMLBlockquoteElement: false,
		HTMLBodyElement      : false,
		HTMLBRElement        : false,
		HTMLButtonElement    : false,
		HTMLCanvasElement    : false,
		HTMLDirectoryElement : false,
		HTMLDivElement       : false,
		HTMLDListElement     : false,
		HTMLFieldSetElement  : false,
		HTMLFontElement      : false,
		HTMLFormElement      : false,
		HTMLFrameElement     : false,
		HTMLFrameSetElement  : false,
		HTMLHeadElement      : false,
		HTMLHeadingElement   : false,
		HTMLHRElement        : false,
		HTMLHtmlElement      : false,
		HTMLIFrameElement    : false,
		HTMLImageElement     : false,
		HTMLInputElement     : false,
		HTMLIsIndexElement   : false,
		HTMLLabelElement     : false,
		HTMLLayerElement     : false,
		HTMLLegendElement    : false,
		HTMLLIElement        : false,
		HTMLLinkElement      : false,
		HTMLMapElement       : false,
		HTMLMenuElement      : false,
		HTMLMetaElement      : false,
		HTMLModElement       : false,
		HTMLObjectElement    : false,
		HTMLOListElement     : false,
		HTMLOptGroupElement  : false,
		HTMLOptionElement    : false,
		HTMLParagraphElement : false,
		HTMLParamElement     : false,
		HTMLPreElement       : false,
		HTMLQuoteElement     : false,
		HTMLScriptElement    : false,
		HTMLSelectElement    : false,
		HTMLStyleElement     : false,
		HTMLTableCaptionElement: false,
		HTMLTableCellElement : false,
		HTMLTableColElement  : false,
		HTMLTableElement     : false,
		HTMLTableRowElement  : false,
		HTMLTableSectionElement: false,
		HTMLTextAreaElement  : false,
		HTMLTitleElement     : false,
		HTMLUListElement     : false,
		HTMLVideoElement     : false,
		history              : false,
		Int16Array           : false,
		Int32Array           : false,
		Int8Array            : false,
		Image                : false,
		length               : false,
		localStorage         : false,
		location             : false,
		MessageChannel       : false,
		MessageEvent         : false,
		MessagePort          : false,
		moveBy               : false,
		moveTo               : false,
		MutationObserver     : false,
		name                 : false,
		Node                 : false,
		NodeFilter           : false,
		navigator            : false,
		onbeforeunload       : true,
		onblur               : true,
		onerror              : true,
		onfocus              : true,
		onload               : true,
		onresize             : true,
		onunload             : true,
		open                 : false,
		openDatabase         : false,
		opener               : false,
		Option               : false,
		parent               : false,
		print                : false,
		removeEventListener  : false,
		resizeBy             : false,
		resizeTo             : false,
		screen               : false,
		scroll               : false,
		scrollBy             : false,
		scrollTo             : false,
		sessionStorage       : false,
		setInterval          : false,
		setTimeout           : false,
		SharedWorker         : false,
		status               : false,
		top                  : false,
		Uint16Array          : false,
		Uint32Array          : false,
		Uint8Array           : false,
		Uint8ClampedArray    : false,
		WebSocket            : false,
		window               : false,
		Worker               : false,
		XMLHttpRequest       : false,
		XMLSerializer        : false,
		XPathEvaluator       : false,
		XPathException       : false,
		XPathExpression      : false,
		XPathNamespace       : false,
		XPathNSResolver      : false,
		XPathResult          : false
	};

	exports.devel = {
		alert  : false,
		confirm: false,
		console: false,
		Debug  : false,
		opera  : false,
		prompt : false
	};

	exports.worker = {
		importScripts: true,
		postMessage  : true,
		self         : true
	};

	// Widely adopted global names that are not part of ECMAScript standard
	exports.nonstandard = {
		escape  : false,
		unescape: false
	};

	// Globals provided by popular JavaScript environments.

	exports.couch = {
		"require" : false,
		respond   : false,
		getRow    : false,
		emit      : false,
		send      : false,
		start     : false,
		sum       : false,
		log       : false,
		exports   : false,
		module    : false,
		provides  : false
	};

	exports.node = {
		__filename   : false,
		__dirname    : false,
		Buffer       : false,
		DataView     : false,
		console      : false,
		exports      : true,  // In Node it is ok to exports = module.exports = foo();
		GLOBAL       : false,
		global       : false,
		module       : false,
		process      : false,
		require      : false,
		setTimeout   : false,
		clearTimeout : false,
		setInterval  : false,
		clearInterval: false
	};

	exports.phantom = {
		phantom      : true,
		require      : true,
		WebPage      : true
	};

	exports.rhino = {
		defineClass  : false,
		deserialize  : false,
		gc           : false,
		help         : false,
		importPackage: false,
		"java"       : false,
		load         : false,
		loadClass    : false,
		print        : false,
		quit         : false,
		readFile     : false,
		readUrl      : false,
		runCommand   : false,
		seal         : false,
		serialize    : false,
		spawn        : false,
		sync         : false,
		toint32      : false,
		version      : false
	};

	exports.wsh = {
		ActiveXObject            : true,
		Enumerator               : true,
		GetObject                : true,
		ScriptEngine             : true,
		ScriptEngineBuildVersion : true,
		ScriptEngineMajorVersion : true,
		ScriptEngineMinorVersion : true,
		VBArray                  : true,
		WSH                      : true,
		WScript                  : true,
		XDomainRequest           : true
	};

	// Globals provided by popular JavaScript libraries.

	exports.dojo = {
		dojo     : false,
		dijit    : false,
		dojox    : false,
		define	 : false,
		"require": false
	};

	exports.jquery = {
		"$"    : false,
		jQuery : false
	};

	exports.mootools = {
		"$"           : false,
		"$$"          : false,
		Asset         : false,
		Browser       : false,
		Chain         : false,
		Class         : false,
		Color         : false,
		Cookie        : false,
		Core          : false,
		Document      : false,
		DomReady      : false,
		DOMEvent      : false,
		DOMReady      : false,
		Drag          : false,
		Element       : false,
		Elements      : false,
		Event         : false,
		Events        : false,
		Fx            : false,
		Group         : false,
		Hash          : false,
		HtmlTable     : false,
		Iframe        : false,
		IframeShim    : false,
		InputValidator: false,
		instanceOf    : false,
		Keyboard      : false,
		Locale        : false,
		Mask          : false,
		MooTools      : false,
		Native        : false,
		Options       : false,
		OverText      : false,
		Request       : false,
		Scroller      : false,
		Slick         : false,
		Slider        : false,
		Sortables     : false,
		Spinner       : false,
		Swiff         : false,
		Tips          : false,
		Type          : false,
		typeOf        : false,
		URI           : false,
		Window        : false
	};

	exports.prototypejs = {
		"$"               : false,
		"$$"              : false,
		"$A"              : false,
		"$F"              : false,
		"$H"              : false,
		"$R"              : false,
		"$break"          : false,
		"$continue"       : false,
		"$w"              : false,
		Abstract          : false,
		Ajax              : false,
		Class             : false,
		Enumerable        : false,
		Element           : false,
		Event             : false,
		Field             : false,
		Form              : false,
		Hash              : false,
		Insertion         : false,
		ObjectRange       : false,
		PeriodicalExecuter: false,
		Position          : false,
		Prototype         : false,
		Selector          : false,
		Template          : false,
		Toggle            : false,
		Try               : false,
		Autocompleter     : false,
		Builder           : false,
		Control           : false,
		Draggable         : false,
		Draggables        : false,
		Droppables        : false,
		Effect            : false,
		Sortable          : false,
		SortableObserver  : false,
		Sound             : false,
		Scriptaculous     : false
	};

	exports.yui = {
		YUI       : false,
		Y         : false,
		YUI_config: false
	};


	},{}],467:[function(require,module,exports){
	// default configuration

	module.exports = {
	    disallowVars: false,
	    disallowDuplicated: true,
	    disallowUnknownReferences: true,
	    parse: require("esprima-fb").parse,
	};

	},{"esprima-fb":4}],468:[function(require,module,exports){
	"use strict";

	var assert = require("assert");
	var stringmap = require("stringmap");
	var stringset = require("stringset");
	var is = require("simple-is");
	var fmt = require("simple-fmt");
	var error = require("./error");
	var getline = error.getline;
	var options = require("./options");

	function Scope(args) {
	    assert(is.someof(args.kind, ["hoist", "block", "catch-block"]));
	    assert(is.object(args.node));
	    assert(args.parent === null || is.object(args.parent));

	    // kind === "hoist": function scopes, program scope, injected globals
	    // kind === "block": ES6 block scopes
	    // kind === "catch-block": catch block scopes
	    this.kind = args.kind;

	    // the AST node the block corresponds to
	    this.node = args.node;

	    // parent scope
	    this.parent = args.parent;

	    // children scopes for easier traversal (populated internally)
	    this.children = [];

	    // scope declarations. decls[variable_name] = {
	    //     kind: "fun" for functions,
	    //           "param" for function parameters,
	    //           "caught" for catch parameter
	    //           "var",
	    //           "const",
	    //           "let"
	    //     node: the AST node the declaration corresponds to
	    //     from: source code index from which it is visible at earliest
	    //           (only stored for "const", "let" [and "var"] nodes)
	    // }
	    this.decls = stringmap();

	    // names of all declarations within this scope that was ever written
	    // TODO move to decls.w?
	    // TODO create corresponding read?
	    this.written = stringset();

	    // names of all variables declared outside this hoist scope but
	    // referenced in this scope (immediately or in child).
	    // only stored on hoist scopes for efficiency
	    // (because we currently generate lots of empty block scopes)
	    this.propagates = (this.kind === "hoist" ? stringset() : null);

	    // scopes register themselves with their parents for easier traversal
	    if (this.parent) {
	        this.parent.children.push(this);
	    }
	}

	Scope.prototype.print = function(indent) {
	    indent = indent || 0;
	    var scope = this;
	    var names = this.decls.keys().map(function(name) {
	        return fmt("{0} [{1}]", name, scope.decls.get(name).kind);
	    }).join(", ");
	    var propagates = this.propagates ? this.propagates.items().join(", ") : "";
	    console.log(fmt("{0}{1}: {2}. propagates: {3}", fmt.repeat(" ", indent), this.node.type, names, propagates));
	    this.children.forEach(function(c) {
	        c.print(indent + 2);
	    });
	};

	Scope.prototype.add = function(name, kind, node, referableFromPos) {
	    assert(is.someof(kind, ["fun", "param", "var", "caught", "const", "let"]));

	    function isConstLet(kind) {
	        return is.someof(kind, ["const", "let"]);
	    }

	    var scope = this;

	    // search nearest hoist-scope for fun, param and var's
	    // const, let and caught variables go directly in the scope (which may be hoist, block or catch-block)
	    if (is.someof(kind, ["fun", "param", "var"])) {
	        while (scope.kind !== "hoist") {
	            if (scope.decls.has(name) && isConstLet(scope.decls.get(name).kind)) { // could be caught
	                return error(getline(node), "{0} is already declared", name);
	            }
	            scope = scope.parent;
	        }
	    }
	    // name exists in scope and either new or existing kind is const|let => error
	    if (scope.decls.has(name) && (options.disallowDuplicated || isConstLet(scope.decls.get(name).kind) || isConstLet(kind))) {
	        return error(getline(node), "{0} is already declared", name);
	    }

	    var declaration = {
	        kind: kind,
	        node: node,
	    };
	    if (referableFromPos) {
	        assert(is.someof(kind, ["var", "const", "let"]));
	        declaration.from = referableFromPos;
	    }
	    scope.decls.set(name, declaration);
	};

	Scope.prototype.getKind = function(name) {
	    assert(is.string(name));
	    var decl = this.decls.get(name);
	    return decl ? decl.kind : null;
	};

	Scope.prototype.getNode = function(name) {
	    assert(is.string(name));
	    var decl = this.decls.get(name);
	    return decl ? decl.node : null;
	};

	Scope.prototype.getFromPos = function(name) {
	    assert(is.string(name));
	    var decl = this.decls.get(name);
	    return decl ? decl.from : null;
	};

	Scope.prototype.hasOwn = function(name) {
	    return this.decls.has(name);
	};

	Scope.prototype.remove = function(name) {
	    return this.decls.remove(name);
	};

	Scope.prototype.doesPropagate = function(name) {
	    return this.propagates.has(name);
	};

	Scope.prototype.markPropagates = function(name) {
	    this.propagates.add(name);
	};

	Scope.prototype.closestHoistScope = function() {
	    var scope = this;
	    while (scope.kind !== "hoist") {
	        scope = scope.parent;
	    }
	    return scope;
	};

	Scope.prototype.hasFunctionScopeBetween = function(outer) {
	    function isFunction(node) {
	        return is.someof(node.type, ["FunctionDeclaration", "FunctionExpression"]);
	    }

	    for (var scope = this; scope; scope = scope.parent) {
	        if (scope === outer) {
	            return false;
	        }
	        if (isFunction(scope.node)) {
	            return true;
	        }
	    }

	    throw new Error("wasn't inner scope of outer");
	};

	Scope.prototype.lookup = function(name) {
	    for (var scope = this; scope; scope = scope.parent) {
	        if (scope.decls.has(name)) {
	            return scope;
	        } else if (scope.kind === "hoist") {
	            scope.propagates.add(name);
	        }
	    }
	    return null;
	};

	Scope.prototype.markWrite = function(name) {
	    assert(is.string(name));
	    this.written.add(name);
	};

	// detects let variables that are never modified (ignores top-level)
	Scope.prototype.detectUnmodifiedLets = function() {
	    var outmost = this;

	    function detect(scope) {
	        if (scope !== outmost) {
	            scope.decls.keys().forEach(function(name) {
	                if (scope.getKind(name) === "let" && !scope.written.has(name)) {
	                    return error(getline(scope.getNode(name)), "{0} is declared as let but never modified so could be const", name);
	                }
	            });
	        }

	        scope.children.forEach(function(childScope) {
	            detect(childScope);
	        });
	    }
	    detect(this);
	};

	Scope.prototype.traverse = function(options) {
	    options = options || {};
	    var pre = options.pre;
	    var post = options.post;

	    function visit(scope) {
	        if (pre) {
	            pre(scope);
	        }
	        scope.children.forEach(function(childScope) {
	            visit(childScope);
	        });
	        if (post) {
	            post(scope);
	        }
	    }

	    visit(this);
	};

	module.exports = Scope;

	},{"./error":465,"./options":467,"assert":1,"simple-fmt":474,"simple-is":475,"stringmap":476,"stringset":477}],469:[function(require,module,exports){
	var fmt = require("simple-fmt");
	var is = require("simple-is");
	var assert = require("assert");

	function Stats() {
	    this.lets = 0;
	    this.consts = 0;
	    this.renames = [];
	}

	Stats.prototype.declarator = function(kind) {
	    assert(is.someof(kind, ["const", "let"]));
	    if (kind === "const") {
	        this.consts++;
	    } else {
	        this.lets++;
	    }
	};

	Stats.prototype.rename = function(oldName, newName, line) {
	    this.renames.push({
	        oldName: oldName,
	        newName: newName,
	        line: line,
	    });
	};

	Stats.prototype.toString = function() {
	//    console.log("defs.js stats for file {0}:", filename)

	    var renames = this.renames.map(function(r) {
	        return r;
	    }).sort(function(a, b) {
	            return a.line - b.line;
	        }); // sort a copy of renames

	    var renameStr = renames.map(function(rename) {
	        return fmt("\nline {0}: {1} => {2}", rename.line, rename.oldName, rename.newName);
	    }).join("");

	    var sum = this.consts + this.lets;
	    var constlets = (sum === 0 ?
	        "can't calculate const coverage (0 consts, 0 lets)" :
	        fmt("{0}% const coverage ({1} consts, {2} lets)",
	            Math.floor(100 * this.consts / sum), this.consts, this.lets));

	    return constlets + renameStr + "\n";
	};

	module.exports = Stats;

	},{"assert":1,"simple-fmt":474,"simple-is":475}],470:[function(require,module,exports){
	// alter.js
	// MIT licensed, see LICENSE file
	// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>

	var assert = require("assert");
	var stableSort = require("stable");

	// fragments is a list of {start: index, end: index, str: string to replace with}
	function alter(str, fragments) {
	    "use strict";

	    var isArray = Array.isArray || function(v) {
	        return Object.prototype.toString.call(v) === "[object Array]";
	    };;

	    assert(typeof str === "string");
	    assert(isArray(fragments));

	    // stableSort isn't in-place so no need to copy array first
	    var sortedFragments = stableSort(fragments, function(a, b) {
	        return a.start - b.start;
	    });

	    var outs = [];

	    var pos = 0;
	    for (var i = 0; i < sortedFragments.length; i++) {
	        var frag = sortedFragments[i];

	        assert(pos <= frag.start);
	        assert(frag.start <= frag.end);
	        outs.push(str.slice(pos, frag.start));
	        outs.push(frag.str);
	        pos = frag.end;
	    }
	    if (pos < str.length) {
	        outs.push(str.slice(pos));
	    }

	    return outs.join("");
	}

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = alter;
	}

	},{"assert":1,"stable":471}],471:[function(require,module,exports){
	//! stable.js 0.1.5, https://github.com/Two-Screen/stable
	//! © 2014 Angry Bytes and contributors. MIT licensed.

	(function() {

	// A stable array sort, because `Array#sort()` is not guaranteed stable.
	// This is an implementation of merge sort, without recursion.

	var stable = function(arr, comp) {
	    return exec(arr.slice(), comp);
	};

	stable.inplace = function(arr, comp) {
	    var result = exec(arr, comp);

	    // This simply copies back if the result isn't in the original array,
	    // which happens on an odd number of passes.
	    if (result !== arr) {
	        pass(result, null, arr.length, arr);
	    }

	    return arr;
	};

	// Execute the sort using the input array and a second buffer as work space.
	// Returns one of those two, containing the final result.
	function exec(arr, comp) {
	    if (typeof(comp) !== 'function') {
	        comp = function(a, b) {
	            return String(a).localeCompare(b);
	        };
	    }

	    // Short-circuit when there's nothing to sort.
	    var len = arr.length;
	    if (len <= 1) {
	        return arr;
	    }

	    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.
	    // Chunks are the size of the left or right hand in merge sort.
	    // Stop when the left-hand covers all of the array.
	    var buffer = new Array(len);
	    for (var chk = 1; chk < len; chk *= 2) {
	        pass(arr, comp, chk, buffer);

	        var tmp = arr;
	        arr = buffer;
	        buffer = tmp;
	    }

	    return arr;
	}

	// Run a single pass with the given chunk size.
	var pass = function(arr, comp, chk, result) {
	    var len = arr.length;
	    var i = 0;
	    // Step size / double chunk size.
	    var dbl = chk * 2;
	    // Bounds of the left and right chunks.
	    var l, r, e;
	    // Iterators over the left and right chunk.
	    var li, ri;

	    // Iterate over pairs of chunks.
	    for (l = 0; l < len; l += dbl) {
	        r = l + chk;
	        e = r + chk;
	        if (r > len) r = len;
	        if (e > len) e = len;

	        // Iterate both chunks in parallel.
	        li = l;
	        ri = r;
	        while (true) {
	            // Compare the chunks.
	            if (li < r && ri < e) {
	                // This works for a regular `sort()` compatible comparator,
	                // but also for a simple comparator like: `a > b`
	                if (comp(arr[li], arr[ri]) <= 0) {
	                    result[i++] = arr[li++];
	                }
	                else {
	                    result[i++] = arr[ri++];
	                }
	            }
	            // Nothing to compare, just flush what's left.
	            else if (li < r) {
	                result[i++] = arr[li++];
	            }
	            else if (ri < e) {
	                result[i++] = arr[ri++];
	            }
	            // Both iterators are at the chunk ends.
	            else {
	                break;
	            }
	        }
	    }
	};

	// Export using CommonJS or to the window.
	if (typeof(module) !== 'undefined') {
	    module.exports = stable;
	}
	else {
	    window.stable = stable;
	}

	})();

	},{}],472:[function(require,module,exports){
	function traverse(root, options) {
	    "use strict";

	    options = options || {};
	    var pre = options.pre;
	    var post = options.post;
	    var skipProperty = options.skipProperty;

	    function visit(node, parent, prop, idx) {
	        if (!node || typeof node.type !== "string") {
	            return;
	        }

	        var res = undefined;
	        if (pre) {
	            res = pre(node, parent, prop, idx);
	        }

	        if (res !== false) {
	            for (var prop in node) {
	                if (skipProperty ? skipProperty(prop, node) : prop[0] === "$") {
	                    continue;
	                }

	                var child = node[prop];

	                if (Array.isArray(child)) {
	                    for (var i = 0; i < child.length; i++) {
	                        visit(child[i], node, prop, i);
	                    }
	                } else {
	                    visit(child, node, prop);
	                }
	            }
	        }

	        if (post) {
	            post(node, parent, prop, idx);
	        }
	    }

	    visit(root, null);
	};

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = traverse;
	}

	},{}],473:[function(require,module,exports){
	// breakable.js
	// MIT licensed, see LICENSE file
	// Copyright (c) 2013-2014 Olov Lassus <olov.lassus@gmail.com>

	var breakable = (function() {
	    "use strict";

	    function Val(val, brk) {
	        this.val = val;
	        this.brk = brk;
	    }

	    function make_brk() {
	        return function brk(val) {
	            throw new Val(val, brk);
	        };
	    }

	    function breakable(fn) {
	        var brk = make_brk();
	        try {
	            return fn(brk);
	        } catch (e) {
	            if (e instanceof Val && e.brk === brk) {
	                return e.val;
	            }
	            throw e;
	        }
	    }

	    return breakable;
	})();

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = breakable;
	}

	},{}],474:[function(require,module,exports){
	// simple-fmt.js
	// MIT licensed, see LICENSE file
	// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>

	var fmt = (function() {
	    "use strict";

	    function fmt(str, var_args) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return str.replace(/\{(\d+)\}/g, function(s, match) {
	            return (match in args ? args[match] : s);
	        });
	    }

	    function obj(str, obj) {
	        return str.replace(/\{([_$a-zA-Z0-9][_$a-zA-Z0-9]*)\}/g, function(s, match) {
	            return (match in obj ? obj[match] : s);
	        });
	    }

	    function repeat(str, n) {
	        return (new Array(n + 1)).join(str);
	    }

	    fmt.fmt = fmt;
	    fmt.obj = obj;
	    fmt.repeat = repeat;
	    return fmt;
	})();

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = fmt;
	}

	},{}],475:[function(require,module,exports){
	// simple-is.js
	// MIT licensed, see LICENSE file
	// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>

	var is = (function() {
	    "use strict";

	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    var toString = Object.prototype.toString;
	    var _undefined = void 0;

	    return {
	        nan: function(v) {
	            return v !== v;
	        },
	        boolean: function(v) {
	            return typeof v === "boolean";
	        },
	        number: function(v) {
	            return typeof v === "number";
	        },
	        string: function(v) {
	            return typeof v === "string";
	        },
	        fn: function(v) {
	            return typeof v === "function";
	        },
	        object: function(v) {
	            return v !== null && typeof v === "object";
	        },
	        primitive: function(v) {
	            var t = typeof v;
	            return v === null || v === _undefined ||
	                t === "boolean" || t === "number" || t === "string";
	        },
	        array: Array.isArray || function(v) {
	            return toString.call(v) === "[object Array]";
	        },
	        finitenumber: function(v) {
	            return typeof v === "number" && isFinite(v);
	        },
	        someof: function(v, values) {
	            return values.indexOf(v) >= 0;
	        },
	        noneof: function(v, values) {
	            return values.indexOf(v) === -1;
	        },
	        own: function(obj, prop) {
	            return hasOwnProperty.call(obj, prop);
	        },
	    };
	})();

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = is;
	}

	},{}],476:[function(require,module,exports){
	// stringmap.js
	// MIT licensed, see LICENSE file
	// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>

	var StringMap = (function() {
	    "use strict";

	    // to save us a few characters
	    var hasOwnProperty = Object.prototype.hasOwnProperty;

	    var create = (function() {
	        function hasOwnEnumerableProps(obj) {
	            for (var prop in obj) {
	                if (hasOwnProperty.call(obj, prop)) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        // FF <= 3.6:
	        // o = {}; o.hasOwnProperty("__proto__" or "__count__" or "__parent__") => true
	        // o = {"__proto__": null}; Object.prototype.hasOwnProperty.call(o, "__proto__" or "__count__" or "__parent__") => false
	        function hasOwnPollutedProps(obj) {
	            return hasOwnProperty.call(obj, "__count__") || hasOwnProperty.call(obj, "__parent__");
	        }

	        var useObjectCreate = false;
	        if (typeof Object.create === "function") {
	            if (!hasOwnEnumerableProps(Object.create(null))) {
	                useObjectCreate = true;
	            }
	        }
	        if (useObjectCreate === false) {
	            if (hasOwnEnumerableProps({})) {
	                throw new Error("StringMap environment error 0, please file a bug at https://github.com/olov/stringmap/issues");
	            }
	        }
	        // no throw yet means we can create objects without own enumerable props (safe-guard against VMs and shims)

	        var o = (useObjectCreate ? Object.create(null) : {});
	        var useProtoClear = false;
	        if (hasOwnPollutedProps(o)) {
	            o.__proto__ = null;
	            if (hasOwnEnumerableProps(o) || hasOwnPollutedProps(o)) {
	                throw new Error("StringMap environment error 1, please file a bug at https://github.com/olov/stringmap/issues");
	            }
	            useProtoClear = true;
	        }
	        // no throw yet means we can create objects without own polluted props (safe-guard against VMs and shims)

	        return function() {
	            var o = (useObjectCreate ? Object.create(null) : {});
	            if (useProtoClear) {
	                o.__proto__ = null;
	            }
	            return o;
	        };
	    })();

	    // stringmap ctor
	    function stringmap(optional_object) {
	        // use with or without new
	        if (!(this instanceof stringmap)) {
	            return new stringmap(optional_object);
	        }
	        this.obj = create();
	        this.hasProto = false; // false (no __proto__ key) or true (has __proto__ key)
	        this.proto = undefined; // value for __proto__ key when hasProto is true, undefined otherwise

	        if (optional_object) {
	            this.setMany(optional_object);
	        }
	    };

	    // primitive methods that deals with data representation
	    stringmap.prototype.has = function(key) {
	        // The type-check of key in has, get, set and delete is important because otherwise an object
	        // {toString: function() { return "__proto__"; }} can avoid the key === "__proto__" test.
	        // The alternative to type-checking would be to force string conversion, i.e. key = String(key);
	        if (typeof key !== "string") {
	            throw new Error("StringMap expected string key");
	        }
	        return (key === "__proto__" ?
	            this.hasProto :
	            hasOwnProperty.call(this.obj, key));
	    };

	    stringmap.prototype.get = function(key) {
	        if (typeof key !== "string") {
	            throw new Error("StringMap expected string key");
	        }
	        return (key === "__proto__" ?
	            this.proto :
	            (hasOwnProperty.call(this.obj, key) ? this.obj[key] : undefined));
	    };

	    stringmap.prototype.set = function(key, value) {
	        if (typeof key !== "string") {
	            throw new Error("StringMap expected string key");
	        }
	        if (key === "__proto__") {
	            this.hasProto = true;
	            this.proto = value;
	        } else {
	            this.obj[key] = value;
	        }
	    };

	    stringmap.prototype.remove = function(key) {
	        if (typeof key !== "string") {
	            throw new Error("StringMap expected string key");
	        }
	        var didExist = this.has(key);
	        if (key === "__proto__") {
	            this.hasProto = false;
	            this.proto = undefined;
	        } else {
	            delete this.obj[key];
	        }
	        return didExist;
	    };

	    // alias remove to delete but beware:
	    // sm.delete("key"); // OK in ES5 and later
	    // sm['delete']("key"); // OK in all ES versions
	    // sm.remove("key"); // OK in all ES versions
	    stringmap.prototype['delete'] = stringmap.prototype.remove;

	    stringmap.prototype.isEmpty = function() {
	        for (var key in this.obj) {
	            if (hasOwnProperty.call(this.obj, key)) {
	                return false;
	            }
	        }
	        return !this.hasProto;
	    };

	    stringmap.prototype.size = function() {
	        var len = 0;
	        for (var key in this.obj) {
	            if (hasOwnProperty.call(this.obj, key)) {
	                ++len;
	            }
	        }
	        return (this.hasProto ? len + 1 : len);
	    };

	    stringmap.prototype.keys = function() {
	        var keys = [];
	        for (var key in this.obj) {
	            if (hasOwnProperty.call(this.obj, key)) {
	                keys.push(key);
	            }
	        }
	        if (this.hasProto) {
	            keys.push("__proto__");
	        }
	        return keys;
	    };

	    stringmap.prototype.values = function() {
	        var values = [];
	        for (var key in this.obj) {
	            if (hasOwnProperty.call(this.obj, key)) {
	                values.push(this.obj[key]);
	            }
	        }
	        if (this.hasProto) {
	            values.push(this.proto);
	        }
	        return values;
	    };

	    stringmap.prototype.items = function() {
	        var items = [];
	        for (var key in this.obj) {
	            if (hasOwnProperty.call(this.obj, key)) {
	                items.push([key, this.obj[key]]);
	            }
	        }
	        if (this.hasProto) {
	            items.push(["__proto__", this.proto]);
	        }
	        return items;
	    };


	    // methods that rely on the above primitives
	    stringmap.prototype.setMany = function(object) {
	        if (object === null || (typeof object !== "object" && typeof object !== "function")) {
	            throw new Error("StringMap expected Object");
	        }
	        for (var key in object) {
	            if (hasOwnProperty.call(object, key)) {
	                this.set(key, object[key]);
	            }
	        }
	        return this;
	    };

	    stringmap.prototype.merge = function(other) {
	        var keys = other.keys();
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            this.set(key, other.get(key));
	        }
	        return this;
	    };

	    stringmap.prototype.map = function(fn) {
	        var keys = this.keys();
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            keys[i] = fn(this.get(key), key); // re-use keys array for results
	        }
	        return keys;
	    };

	    stringmap.prototype.forEach = function(fn) {
	        var keys = this.keys();
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            fn(this.get(key), key);
	        }
	    };

	    stringmap.prototype.clone = function() {
	        var other = stringmap();
	        return other.merge(this);
	    };

	    stringmap.prototype.toString = function() {
	        var self = this;
	        return "{" + this.keys().map(function(key) {
	            return JSON.stringify(key) + ":" + JSON.stringify(self.get(key));
	        }).join(",") + "}";
	    };

	    return stringmap;
	})();

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = StringMap;
	}

	},{}],477:[function(require,module,exports){
	// stringset.js
	// MIT licensed, see LICENSE file
	// Copyright (c) 2013 Olov Lassus <olov.lassus@gmail.com>

	var StringSet = (function() {
	    "use strict";

	    // to save us a few characters
	    var hasOwnProperty = Object.prototype.hasOwnProperty;

	    var create = (function() {
	        function hasOwnEnumerableProps(obj) {
	            for (var prop in obj) {
	                if (hasOwnProperty.call(obj, prop)) {
	                    return true;
	                }
	            }
	            return false;
	        }

	        // FF <= 3.6:
	        // o = {}; o.hasOwnProperty("__proto__" or "__count__" or "__parent__") => true
	        // o = {"__proto__": null}; Object.prototype.hasOwnProperty.call(o, "__proto__" or "__count__" or "__parent__") => false
	        function hasOwnPollutedProps(obj) {
	            return hasOwnProperty.call(obj, "__count__") || hasOwnProperty.call(obj, "__parent__");
	        }

	        var useObjectCreate = false;
	        if (typeof Object.create === "function") {
	            if (!hasOwnEnumerableProps(Object.create(null))) {
	                useObjectCreate = true;
	            }
	        }
	        if (useObjectCreate === false) {
	            if (hasOwnEnumerableProps({})) {
	                throw new Error("StringSet environment error 0, please file a bug at https://github.com/olov/stringset/issues");
	            }
	        }
	        // no throw yet means we can create objects without own enumerable props (safe-guard against VMs and shims)

	        var o = (useObjectCreate ? Object.create(null) : {});
	        var useProtoClear = false;
	        if (hasOwnPollutedProps(o)) {
	            o.__proto__ = null;
	            if (hasOwnEnumerableProps(o) || hasOwnPollutedProps(o)) {
	                throw new Error("StringSet environment error 1, please file a bug at https://github.com/olov/stringset/issues");
	            }
	            useProtoClear = true;
	        }
	        // no throw yet means we can create objects without own polluted props (safe-guard against VMs and shims)

	        return function() {
	            var o = (useObjectCreate ? Object.create(null) : {});
	            if (useProtoClear) {
	                o.__proto__ = null;
	            }
	            return o;
	        };
	    })();

	    // stringset ctor
	    function stringset(optional_array) {
	        // use with or without new
	        if (!(this instanceof stringset)) {
	            return new stringset(optional_array);
	        }
	        this.obj = create();
	        this.hasProto = false; // false (no __proto__ item) or true (has __proto__ item)

	        if (optional_array) {
	            this.addMany(optional_array);
	        }
	    };

	    // primitive methods that deals with data representation
	    stringset.prototype.has = function(item) {
	        // The type-check of item in has, get, set and delete is important because otherwise an object
	        // {toString: function() { return "__proto__"; }} can avoid the item === "__proto__" test.
	        // The alternative to type-checking would be to force string conversion, i.e. item = String(item);
	        if (typeof item !== "string") {
	            throw new Error("StringSet expected string item");
	        }
	        return (item === "__proto__" ?
	            this.hasProto :
	            hasOwnProperty.call(this.obj, item));
	    };

	    stringset.prototype.add = function(item) {
	        if (typeof item !== "string") {
	            throw new Error("StringSet expected string item");
	        }
	        if (item === "__proto__") {
	            this.hasProto = true;
	        } else {
	            this.obj[item] = true;
	        }
	    };

	    stringset.prototype.remove = function(item) {
	        if (typeof item !== "string") {
	            throw new Error("StringSet expected string item");
	        }
	        var didExist = this.has(item);
	        if (item === "__proto__") {
	            this.hasProto = false;
	        } else {
	            delete this.obj[item];
	        }
	        return didExist;
	    };

	    // alias remove to delete but beware:
	    // ss.delete("key"); // OK in ES5 and later
	    // ss['delete']("key"); // OK in all ES versions
	    // ss.remove("key"); // OK in all ES versions
	    stringset.prototype['delete'] = stringset.prototype.remove;

	    stringset.prototype.isEmpty = function() {
	        for (var item in this.obj) {
	            if (hasOwnProperty.call(this.obj, item)) {
	                return false;
	            }
	        }
	        return !this.hasProto;
	    };

	    stringset.prototype.size = function() {
	        var len = 0;
	        for (var item in this.obj) {
	            if (hasOwnProperty.call(this.obj, item)) {
	                ++len;
	            }
	        }
	        return (this.hasProto ? len + 1 : len);
	    };

	    stringset.prototype.items = function() {
	        var items = [];
	        for (var item in this.obj) {
	            if (hasOwnProperty.call(this.obj, item)) {
	                items.push(item);
	            }
	        }
	        if (this.hasProto) {
	            items.push("__proto__");
	        }
	        return items;
	    };


	    // methods that rely on the above primitives
	    stringset.prototype.addMany = function(items) {
	        if (!Array.isArray(items)) {
	            throw new Error("StringSet expected array");
	        }
	        for (var i = 0; i < items.length; i++) {
	            this.add(items[i]);
	        }
	        return this;
	    };

	    stringset.prototype.merge = function(other) {
	        this.addMany(other.items());
	        return this;
	    };

	    stringset.prototype.clone = function() {
	        var other = stringset();
	        return other.merge(this);
	    };

	    stringset.prototype.toString = function() {
	        return "{" + this.items().map(JSON.stringify).join(",") + "}";
	    };

	    return stringset;
	})();

	if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
	    module.exports = StringSet;
	}

	},{}],478:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var n = types.namedTypes;
	var isArray = types.builtInTypes.array;
	var isObject = types.builtInTypes.object;
	var linesModule = require("./lines");
	var fromString = linesModule.fromString;
	var Lines = linesModule.Lines;
	var concat = linesModule.concat;
	var util = require("./util");
	var comparePos = util.comparePos;
	var childNodesCacheKey = require("private").makeUniqueKey();

	// TODO Move a non-caching implementation of this function into ast-types,
	// and implement a caching wrapper function here.
	function getSortedChildNodes(node, resultArray) {
	    if (!node) {
	        return;
	    }

	    // The .loc checks below are sensitive to some of the problems that
	    // are fixed by this utility function. Specifically, if it decides to
	    // set node.loc to null, indicating that the node's .loc information
	    // is unreliable, then we don't want to add node to the resultArray.
	    util.fixFaultyLocations(node);

	    if (resultArray) {
	        if (n.Node.check(node) &&
	            n.SourceLocation.check(node.loc)) {
	            // This reverse insertion sort almost always takes constant
	            // time because we almost always (maybe always?) append the
	            // nodes in order anyway.
	            for (var i = resultArray.length - 1; i >= 0; --i) {
	                if (comparePos(resultArray[i].loc.end,
	                               node.loc.start) <= 0) {
	                    break;
	                }
	            }
	            resultArray.splice(i + 1, 0, node);
	            return;
	        }
	    } else if (node[childNodesCacheKey]) {
	        return node[childNodesCacheKey];
	    }

	    var names;
	    if (isArray.check(node)) {
	        names = Object.keys(node);
	    } else if (isObject.check(node)) {
	        names = types.getFieldNames(node);
	    } else {
	        return;
	    }

	    if (!resultArray) {
	        Object.defineProperty(node, childNodesCacheKey, {
	            value: resultArray = [],
	            enumerable: false
	        });
	    }

	    for (var i = 0, nameCount = names.length; i < nameCount; ++i) {
	        getSortedChildNodes(node[names[i]], resultArray);
	    }

	    return resultArray;
	}

	// As efficiently as possible, decorate the comment object with
	// .precedingNode, .enclosingNode, and/or .followingNode properties, at
	// least one of which is guaranteed to be defined.
	function decorateComment(node, comment) {
	    var childNodes = getSortedChildNodes(node);

	    // Time to dust off the old binary search robes and wizard hat.
	    var left = 0, right = childNodes.length;
	    while (left < right) {
	        var middle = (left + right) >> 1;
	        var child = childNodes[middle];

	        if (comparePos(child.loc.start, comment.loc.start) <= 0 &&
	            comparePos(comment.loc.end, child.loc.end) <= 0) {
	            // The comment is completely contained by this child node.
	            decorateComment(comment.enclosingNode = child, comment);
	            return; // Abandon the binary search at this level.
	        }

	        if (comparePos(child.loc.end, comment.loc.start) <= 0) {
	            // This child node falls completely before the comment.
	            // Because we will never consider this node or any nodes
	            // before it again, this node must be the closest preceding
	            // node we have encountered so far.
	            var precedingNode = child;
	            left = middle + 1;
	            continue;
	        }

	        if (comparePos(comment.loc.end, child.loc.start) <= 0) {
	            // This child node falls completely after the comment.
	            // Because we will never consider this node or any nodes after
	            // it again, this node must be the closest following node we
	            // have encountered so far.
	            var followingNode = child;
	            right = middle;
	            continue;
	        }

	        throw new Error("Comment location overlaps with node location");
	    }

	    if (precedingNode) {
	        comment.precedingNode = precedingNode;
	    }

	    if (followingNode) {
	        comment.followingNode = followingNode;
	    }
	}

	exports.attach = function(comments, ast, lines) {
	    if (!isArray.check(comments)) {
	        return;
	    }

	    var tiesToBreak = [];

	    comments.forEach(function(comment) {
	        comment.loc.lines = lines;
	        decorateComment(ast, comment);

	        var pn = comment.precedingNode;
	        var en = comment.enclosingNode;
	        var fn = comment.followingNode;

	        if (pn && fn) {
	            var tieCount = tiesToBreak.length;
	            if (tieCount > 0) {
	                var lastTie = tiesToBreak[tieCount - 1];

	                assert.strictEqual(
	                    lastTie.precedingNode === comment.precedingNode,
	                    lastTie.followingNode === comment.followingNode
	                );

	                if (lastTie.followingNode !== comment.followingNode) {
	                    breakTies(tiesToBreak, lines);
	                }
	            }

	            tiesToBreak.push(comment);

	        } else if (pn) {
	            // No contest: we have a trailing comment.
	            breakTies(tiesToBreak, lines);
	            addTrailingComment(pn, comment);

	        } else if (fn) {
	            // No contest: we have a leading comment.
	            breakTies(tiesToBreak, lines);
	            addLeadingComment(fn, comment);

	        } else if (en) {
	            // The enclosing node has no child nodes at all, so what we
	            // have here is a dangling comment, e.g. [/* crickets */].
	            breakTies(tiesToBreak, lines);
	            addDanglingComment(en, comment);

	        } else {
	            throw new Error("AST contains no nodes at all?");
	        }
	    });

	    breakTies(tiesToBreak, lines);

	    comments.forEach(function(comment) {
	        // These node references were useful for breaking ties, but we
	        // don't need them anymore, and they create cycles in the AST that
	        // may lead to infinite recursion if we don't delete them here.
	        delete comment.precedingNode;
	        delete comment.enclosingNode;
	        delete comment.followingNode;
	    });
	};

	function breakTies(tiesToBreak, lines) {
	    var tieCount = tiesToBreak.length;
	    if (tieCount === 0) {
	        return;
	    }

	    var pn = tiesToBreak[0].precedingNode;
	    var fn = tiesToBreak[0].followingNode;
	    var gapEndPos = fn.loc.start;

	    // Iterate backwards through tiesToBreak, examining the gaps
	    // between the tied comments. In order to qualify as leading, a
	    // comment must be separated from fn by an unbroken series of
	    // whitespace-only gaps (or other comments).
	    for (var indexOfFirstLeadingComment = tieCount;
	         indexOfFirstLeadingComment > 0;
	         --indexOfFirstLeadingComment) {
	        var comment = tiesToBreak[indexOfFirstLeadingComment - 1];
	        assert.strictEqual(comment.precedingNode, pn);
	        assert.strictEqual(comment.followingNode, fn);

	        var gap = lines.sliceString(comment.loc.end, gapEndPos);
	        if (/\S/.test(gap)) {
	            // The gap string contained something other than whitespace.
	            break;
	        }

	        gapEndPos = comment.loc.start;
	    }

	    while (indexOfFirstLeadingComment <= tieCount &&
	           (comment = tiesToBreak[indexOfFirstLeadingComment]) &&
	           // If the comment is a //-style comment and indented more
	           // deeply than the node itself, reconsider it as trailing.
	           comment.type === "Line" &&
	           comment.loc.start.column > fn.loc.start.column) {
	        ++indexOfFirstLeadingComment;
	    }

	    tiesToBreak.forEach(function(comment, i) {
	        if (i < indexOfFirstLeadingComment) {
	            addTrailingComment(pn, comment);
	        } else {
	            addLeadingComment(fn, comment);
	        }
	    });

	    tiesToBreak.length = 0;
	}

	function addCommentHelper(node, comment) {
	    var comments = node.comments || (node.comments = []);
	    comments.push(comment);
	}

	function addLeadingComment(node, comment) {
	    comment.leading = true;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}

	function addDanglingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = false;
	    addCommentHelper(node, comment);
	}

	function addTrailingComment(node, comment) {
	    comment.leading = false;
	    comment.trailing = true;
	    addCommentHelper(node, comment);
	}

	function printLeadingComment(commentPath, print) {
	    var comment = commentPath.getValue();
	    n.Comment.assert(comment);

	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [print(commentPath)];

	    if (comment.trailing) {
	        // When we print trailing comments as leading comments, we don't
	        // want to bring any trailing spaces along.
	        parts.push("\n");

	    } else if (lines instanceof Lines) {
	        var trailingSpace = lines.slice(
	            loc.end,
	            lines.skipSpaces(loc.end)
	        );

	        if (trailingSpace.length === 1) {
	            // If the trailing space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(trailingSpace);
	        } else {
	            // If the trailing space contains newlines, then replace it
	            // with just that many newlines, with all other spaces removed.
	            parts.push(new Array(trailingSpace.length).join("\n"));
	        }

	    } else {
	        parts.push("\n");
	    }

	    return concat(parts);
	}

	function printTrailingComment(commentPath, print) {
	    var comment = commentPath.getValue(commentPath);
	    n.Comment.assert(comment);

	    var loc = comment.loc;
	    var lines = loc && loc.lines;
	    var parts = [];

	    if (lines instanceof Lines) {
	        var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
	        var leadingSpace = lines.slice(fromPos, loc.start);

	        if (leadingSpace.length === 1) {
	            // If the leading space contains no newlines, then we want to
	            // preserve it exactly as we found it.
	            parts.push(leadingSpace);
	        } else {
	            // If the leading space contains newlines, then replace it
	            // with just that many newlines, sans all other spaces.
	            parts.push(new Array(leadingSpace.length).join("\n"));
	        }
	    }

	    parts.push(print(commentPath));

	    return concat(parts);
	}

	exports.printComments = function(path, print) {
	    var value = path.getValue();
	    var innerLines = print(path);
	    var comments = n.Node.check(value) &&
	        types.getFieldValue(value, "comments");

	    if (!comments || comments.length === 0) {
	        return innerLines;
	    }

	    var leadingParts = [];
	    var trailingParts = [innerLines];

	    path.each(function(commentPath) {
	        var comment = commentPath.getValue();
	        var leading = types.getFieldValue(comment, "leading");
	        var trailing = types.getFieldValue(comment, "trailing");

	        if (leading || (trailing && comment.type !== "Block")) {
	            leadingParts.push(printLeadingComment(commentPath, print));
	        } else if (trailing) {
	            assert.strictEqual(comment.type, "Block");
	            trailingParts.push(printTrailingComment(commentPath, print));
	        }
	    }, "comments");

	    leadingParts.push.apply(leadingParts, trailingParts);
	    return concat(leadingParts);
	};

	},{"./lines":480,"./types":486,"./util":487,"assert":1,"private":456}],479:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var n = types.namedTypes;
	var Node = n.Node;
	var isArray = types.builtInTypes.array;
	var isNumber = types.builtInTypes.number;

	function FastPath(value) {
	    assert.ok(this instanceof FastPath);
	    this.stack = [value];
	}

	var FPp = FastPath.prototype;
	module.exports = FastPath;

	// Static convenience function for coercing a value to a FastPath.
	FastPath.from = function(obj) {
	    if (obj instanceof FastPath) {
	        // Return a defensive copy of any existing FastPath instances.
	        return obj.copy();
	    }

	    if (obj instanceof types.NodePath) {
	        // For backwards compatibility, unroll NodePath instances into
	        // lightweight FastPath [..., name, value] stacks.
	        var copy = Object.create(FastPath.prototype);
	        var stack = [obj.value];
	        for (var pp; (pp = obj.parentPath); obj = pp)
	            stack.push(obj.name, pp.value);
	        copy.stack = stack.reverse();
	        return copy;
	    }

	    // Otherwise use obj as the value of the new FastPath instance.
	    return new FastPath(obj);
	};

	FPp.copy = function copy() {
	    var copy = Object.create(FastPath.prototype);
	    copy.stack = this.stack.slice(0);
	    return copy;
	};

	// The name of the current property is always the penultimate element of
	// this.stack, and always a String.
	FPp.getName = function getName() {
	    var s = this.stack;
	    var len = s.length;
	    if (len > 1) {
	        return s[len - 2];
	    }
	    // Since the name is always a string, null is a safe sentinel value to
	    // return if we do not know the name of the (root) value.
	    return null;
	};

	// The value of the current property is always the final element of
	// this.stack.
	FPp.getValue = function getValue() {
	    var s = this.stack;
	    return s[s.length - 1];
	};

	function getNodeHelper(path, count) {
	    var s = path.stack;

	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        var value = s[i];
	        if (n.Node.check(value) && --count < 0) {
	            return value;
	        }
	    }

	    return null;
	}

	FPp.getNode = function getNode(count) {
	    return getNodeHelper(this, ~~count);
	};

	FPp.getParentNode = function getParentNode(count) {
	    return getNodeHelper(this, ~~count + 1);
	};

	// The length of the stack can be either even or odd, depending on whether
	// or not we have a name for the root value. The difference between the
	// index of the root value and the index of the final value is always
	// even, though, which allows us to return the root value in constant time
	// (i.e. without iterating backwards through the stack).
	FPp.getRootValue = function getRootValue() {
	    var s = this.stack;
	    if (s.length % 2 === 0) {
	        return s[1];
	    }
	    return s[0];
	};

	// Temporarily push properties named by string arguments given after the
	// callback function onto this.stack, then call the callback with a
	// reference to this (modified) FastPath object. Note that the stack will
	// be restored to its original state after the callback is finished, so it
	// is probably a mistake to retain a reference to the path.
	FPp.call = function call(callback/*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;
	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }
	    var result = callback(this);
	    s.length = origLen;
	    return result;
	};

	// Similar to FastPath.prototype.call, except that the value obtained by
	// accessing this.getValue()[name1][name2]... should be array-like. The
	// callback will be called with a reference to this path object for each
	// element of the array.
	FPp.each = function each(callback/*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;

	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }

	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            // If the callback needs to know the value of i, call
	            // path.getName(), assuming path is the parameter name.
	            callback(this);
	            s.length -= 2;
	        }
	    }

	    s.length = origLen;
	};

	// Similar to FastPath.prototype.each, except that the results of the
	// callback function invocations are stored in an array and returned at
	// the end of the iteration.
	FPp.map = function map(callback/*, name1, name2, ... */) {
	    var s = this.stack;
	    var origLen = s.length;
	    var value = s[origLen - 1];
	    var argc = arguments.length;

	    for (var i = 1; i < argc; ++i) {
	        var name = arguments[i];
	        value = value[name];
	        s.push(name, value);
	    }

	    var result = new Array(value.length);

	    for (var i = 0; i < value.length; ++i) {
	        if (i in value) {
	            s.push(i, value[i]);
	            result[i] = callback(this, i);
	            s.length -= 2;
	        }
	    }

	    s.length = origLen;

	    return result;
	};

	// Inspired by require("ast-types").NodePath.prototype.needsParens, but
	// more efficient because we're iterating backwards through a stack.
	FPp.needsParens = function(assumeExpressionContext) {
	    var parent = this.getParentNode();
	    if (!parent) {
	        return false;
	    }

	    var name = this.getName();
	    var node = this.getNode();

	    // If the value of this path is some child of a Node and not a Node
	    // itself, then it doesn't need parentheses. Only Node objects (in
	    // fact, only Expression nodes) need parentheses.
	    if (this.getValue() !== node) {
	        return false;
	    }

	    // Only expressions need parentheses.
	    if (!n.Expression.check(node)) {
	        return false;
	    }

	    // Identifiers never need parentheses.
	    if (node.type === "Identifier") {
	        return false;
	    }

	    if (parent.type === "ParenthesizedExpression") {
	        return false;
	    }

	    switch (node.type) {
	    case "UnaryExpression":
	    case "SpreadElement":
	    case "SpreadProperty":
	        return parent.type === "MemberExpression"
	            && name === "object"
	            && parent.object === node;

	    case "BinaryExpression":
	    case "LogicalExpression":
	        switch (parent.type) {
	        case "CallExpression":
	            return name === "callee"
	                && parent.callee === node;

	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	            return true;

	        case "MemberExpression":
	            return name === "object"
	                && parent.object === node;

	        case "BinaryExpression":
	        case "LogicalExpression":
	            var po = parent.operator;
	            var pp = PRECEDENCE[po];
	            var no = node.operator;
	            var np = PRECEDENCE[no];

	            if (pp > np) {
	                return true;
	            }

	            if (pp === np && name === "right") {
	                assert.strictEqual(parent.right, node);
	                return true;
	            }

	        default:
	            return false;
	        }

	    case "SequenceExpression":
	        switch (parent.type) {
	        case "ForStatement":
	            // Although parentheses wouldn't hurt around sequence
	            // expressions in the head of for loops, traditional style
	            // dictates that e.g. i++, j++ should not be wrapped with
	            // parentheses.
	            return false;

	        case "ExpressionStatement":
	            return name !== "expression";

	        default:
	            // Otherwise err on the side of overparenthesization, adding
	            // explicit exceptions above if this proves overzealous.
	            return true;
	        }

	    case "YieldExpression":
	        switch (parent.type) {
	        case "BinaryExpression":
	        case "LogicalExpression":
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	        case "CallExpression":
	        case "MemberExpression":
	        case "NewExpression":
	        case "ConditionalExpression":
	        case "YieldExpression":
	            return true;

	        default:
	            return false;
	        }

	    case "Literal":
	        return parent.type === "MemberExpression"
	            && isNumber.check(node.value)
	            && name === "object"
	            && parent.object === node;

	    case "AssignmentExpression":
	    case "ConditionalExpression":
	        switch (parent.type) {
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	        case "BinaryExpression":
	        case "LogicalExpression":
	            return true;

	        case "CallExpression":
	            return name === "callee"
	                && parent.callee === node;

	        case "ConditionalExpression":
	            return name === "test"
	                && parent.test === node;

	        case "MemberExpression":
	            return name === "object"
	                && parent.object === node;

	        default:
	            return false;
	        }

	    case "ArrowFunctionExpression":
	        return isBinary(parent);

	    case "ObjectExpression":
	        if (parent.type === "ArrowFunctionExpression" &&
	            name === "body") {
	            return true;
	        }

	    default:
	        if (parent.type === "NewExpression" &&
	            name === "callee" &&
	            parent.callee === node) {
	            return containsCallExpression(node);
	        }
	    }

	    if (assumeExpressionContext !== true &&
	        !this.canBeFirstInStatement() &&
	        this.firstInStatement())
	        return true;

	    return false;
	};

	function isBinary(node) {
	    return n.BinaryExpression.check(node)
	        || n.LogicalExpression.check(node);
	}

	function isUnaryLike(node) {
	    return n.UnaryExpression.check(node)
	        // I considered making SpreadElement and SpreadProperty subtypes
	        // of UnaryExpression, but they're not really Expression nodes.
	        || (n.SpreadElement && n.SpreadElement.check(node))
	        || (n.SpreadProperty && n.SpreadProperty.check(node));
	}

	var PRECEDENCE = {};
	[["||"],
	 ["&&"],
	 ["|"],
	 ["^"],
	 ["&"],
	 ["==", "===", "!=", "!=="],
	 ["<", ">", "<=", ">=", "in", "instanceof"],
	 [">>", "<<", ">>>"],
	 ["+", "-"],
	 ["*", "/", "%"]
	].forEach(function(tier, i) {
	    tier.forEach(function(op) {
	        PRECEDENCE[op] = i;
	    });
	});

	function containsCallExpression(node) {
	    if (n.CallExpression.check(node)) {
	        return true;
	    }

	    if (isArray.check(node)) {
	        return node.some(containsCallExpression);
	    }

	    if (n.Node.check(node)) {
	        return types.someField(node, function(name, child) {
	            return containsCallExpression(child);
	        });
	    }

	    return false;
	}

	FPp.canBeFirstInStatement = function() {
	    var node = this.getNode();
	    return !n.FunctionExpression.check(node)
	        && !n.ObjectExpression.check(node);
	};

	FPp.firstInStatement = function() {
	    var s = this.stack;
	    var parentName, parent;
	    var childName, child;

	    for (var i = s.length - 1; i >= 0; i -= 2) {
	        if (n.Node.check(s[i])) {
	            childName = parentName;
	            child = parent;
	            parentName = s[i - 1];
	            parent = s[i];
	        }

	        if (!parent || !child) {
	            continue;
	        }

	        if (n.BlockStatement.check(parent) &&
	            parentName === "body" &&
	            childName === 0) {
	            assert.strictEqual(parent.body[0], child);
	            return true;
	        }

	        if (n.ExpressionStatement.check(parent) &&
	            childName === "expression") {
	            assert.strictEqual(parent.expression, child);
	            return true;
	        }

	        if (n.SequenceExpression.check(parent) &&
	            parentName === "expressions" &&
	            childName === 0) {
	            assert.strictEqual(parent.expressions[0], child);
	            continue;
	        }

	        if (n.CallExpression.check(parent) &&
	            childName === "callee") {
	            assert.strictEqual(parent.callee, child);
	            continue;
	        }

	        if (n.MemberExpression.check(parent) &&
	            childName === "object") {
	            assert.strictEqual(parent.object, child);
	            continue;
	        }

	        if (n.ConditionalExpression.check(parent) &&
	            childName === "test") {
	            assert.strictEqual(parent.test, child);
	            continue;
	        }

	        if (isBinary(parent) &&
	            childName === "left") {
	            assert.strictEqual(parent.left, child);
	            continue;
	        }

	        if (n.UnaryExpression.check(parent) &&
	            !parent.prefix &&
	            childName === "argument") {
	            assert.strictEqual(parent.argument, child);
	            continue;
	        }

	        return false;
	    }

	    return true;
	};

	},{"./types":486,"assert":1}],480:[function(require,module,exports){
	var assert = require("assert");
	var sourceMap = require("source-map");
	var normalizeOptions = require("./options").normalize;
	var secretKey = require("private").makeUniqueKey();
	var types = require("./types");
	var isString = types.builtInTypes.string;
	var comparePos = require("./util").comparePos;
	var Mapping = require("./mapping");

	// Goals:
	// 1. Minimize new string creation.
	// 2. Keep (de)identation O(lines) time.
	// 3. Permit negative indentations.
	// 4. Enforce immutability.
	// 5. No newline characters.

	function getSecret(lines) {
	    return lines[secretKey];
	}

	function Lines(infos, sourceFileName) {
	    assert.ok(this instanceof Lines);
	    assert.ok(infos.length > 0);

	    if (sourceFileName) {
	        isString.assert(sourceFileName);
	    } else {
	        sourceFileName = null;
	    }

	    Object.defineProperty(this, secretKey, {
	        value: {
	            infos: infos,
	            mappings: [],
	            name: sourceFileName,
	            cachedSourceMap: null
	        }
	    });

	    if (sourceFileName) {
	        getSecret(this).mappings.push(new Mapping(this, {
	            start: this.firstPos(),
	            end: this.lastPos()
	        }));
	    }
	}

	// Exposed for instanceof checks. The fromString function should be used
	// to create new Lines objects.
	exports.Lines = Lines;
	var Lp = Lines.prototype;

	// These properties used to be assigned to each new object in the Lines
	// constructor, but we can more efficiently stuff them into the secret and
	// let these lazy accessors compute their values on-the-fly.
	Object.defineProperties(Lp, {
	    length: {
	        get: function() {
	            return getSecret(this).infos.length;
	        }
	    },

	    name: {
	        get: function() {
	            return getSecret(this).name;
	        }
	    }
	});

	function copyLineInfo(info) {
	    return {
	        line: info.line,
	        indent: info.indent,
	        sliceStart: info.sliceStart,
	        sliceEnd: info.sliceEnd
	    };
	}

	var fromStringCache = {};
	var hasOwn = fromStringCache.hasOwnProperty;
	var maxCacheKeyLen = 10;

	function countSpaces(spaces, tabWidth) {
	    var count = 0;
	    var len = spaces.length;

	    for (var i = 0; i < len; ++i) {
	        switch (spaces.charCodeAt(i)) {
	        case 9: // '\t'
	            assert.strictEqual(typeof tabWidth, "number");
	            assert.ok(tabWidth > 0);

	            var next = Math.ceil(count / tabWidth) * tabWidth;
	            if (next === count) {
	                count += tabWidth;
	            } else {
	                count = next;
	            }

	            break;

	        case 11: // '\v'
	        case 12: // '\f'
	        case 13: // '\r'
	        case 0xfeff: // zero-width non-breaking space
	            // These characters contribute nothing to indentation.
	            break;

	        case 32: // ' '
	        default: // Treat all other whitespace like ' '.
	            count += 1;
	            break;
	        }
	    }

	    return count;
	}
	exports.countSpaces = countSpaces;

	var leadingSpaceExp = /^\s*/;

	/**
	 * @param {Object} options - Options object that configures printing.
	 */
	function fromString(string, options) {
	    if (string instanceof Lines)
	        return string;

	    string += "";

	    var tabWidth = options && options.tabWidth;
	    var tabless = string.indexOf("\t") < 0;
	    var cacheable = !options && tabless && (string.length <= maxCacheKeyLen);

	    assert.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);

	    if (cacheable && hasOwn.call(fromStringCache, string))
	        return fromStringCache[string];

	    var lines = new Lines(string.split("\n").map(function(line) {
	        var spaces = leadingSpaceExp.exec(line)[0];
	        return {
	            line: line,
	            indent: countSpaces(spaces, tabWidth),
	            sliceStart: spaces.length,
	            sliceEnd: line.length
	        };
	    }), normalizeOptions(options).sourceFileName);

	    if (cacheable)
	        fromStringCache[string] = lines;

	    return lines;
	}
	exports.fromString = fromString;

	function isOnlyWhitespace(string) {
	    return !/\S/.test(string);
	}

	Lp.toString = function(options) {
	    return this.sliceString(this.firstPos(), this.lastPos(), options);
	};

	Lp.getSourceMap = function(sourceMapName, sourceRoot) {
	    if (!sourceMapName) {
	        // Although we could make up a name or generate an anonymous
	        // source map, instead we assume that any consumer who does not
	        // provide a name does not actually want a source map.
	        return null;
	    }

	    var targetLines = this;

	    function updateJSON(json) {
	        json = json || {};

	        isString.assert(sourceMapName);
	        json.file = sourceMapName;

	        if (sourceRoot) {
	            isString.assert(sourceRoot);
	            json.sourceRoot = sourceRoot;
	        }

	        return json;
	    }

	    var secret = getSecret(targetLines);
	    if (secret.cachedSourceMap) {
	        // Since Lines objects are immutable, we can reuse any source map
	        // that was previously generated. Nevertheless, we return a new
	        // JSON object here to protect the cached source map from outside
	        // modification.
	        return updateJSON(secret.cachedSourceMap.toJSON());
	    }

	    var smg = new sourceMap.SourceMapGenerator(updateJSON());
	    var sourcesToContents = {};

	    secret.mappings.forEach(function(mapping) {
	        var sourceCursor = mapping.sourceLines.skipSpaces(
	            mapping.sourceLoc.start
	        ) || mapping.sourceLines.lastPos();

	        var targetCursor = targetLines.skipSpaces(
	            mapping.targetLoc.start
	        ) || targetLines.lastPos();

	        while (comparePos(sourceCursor, mapping.sourceLoc.end) < 0 &&
	               comparePos(targetCursor, mapping.targetLoc.end) < 0) {

	            var sourceChar = mapping.sourceLines.charAt(sourceCursor);
	            var targetChar = targetLines.charAt(targetCursor);
	            assert.strictEqual(sourceChar, targetChar);

	            var sourceName = mapping.sourceLines.name;

	            // Add mappings one character at a time for maximum resolution.
	            smg.addMapping({
	                source: sourceName,
	                original: { line: sourceCursor.line,
	                            column: sourceCursor.column },
	                generated: { line: targetCursor.line,
	                             column: targetCursor.column }
	            });

	            if (!hasOwn.call(sourcesToContents, sourceName)) {
	                var sourceContent = mapping.sourceLines.toString();
	                smg.setSourceContent(sourceName, sourceContent);
	                sourcesToContents[sourceName] = sourceContent;
	            }

	            targetLines.nextPos(targetCursor, true);
	            mapping.sourceLines.nextPos(sourceCursor, true);
	        }
	    });

	    secret.cachedSourceMap = smg;

	    return smg.toJSON();
	};

	Lp.bootstrapCharAt = function(pos) {
	    assert.strictEqual(typeof pos, "object");
	    assert.strictEqual(typeof pos.line, "number");
	    assert.strictEqual(typeof pos.column, "number");

	    var line = pos.line,
	        column = pos.column,
	        strings = this.toString().split("\n"),
	        string = strings[line - 1];

	    if (typeof string === "undefined")
	        return "";

	    if (column === string.length &&
	        line < strings.length)
	        return "\n";

	    if (column >= string.length)
	        return "";

	    return string.charAt(column);
	};

	Lp.charAt = function(pos) {
	    assert.strictEqual(typeof pos, "object");
	    assert.strictEqual(typeof pos.line, "number");
	    assert.strictEqual(typeof pos.column, "number");

	    var line = pos.line,
	        column = pos.column,
	        secret = getSecret(this),
	        infos = secret.infos,
	        info = infos[line - 1],
	        c = column;

	    if (typeof info === "undefined" || c < 0)
	        return "";

	    var indent = this.getIndentAt(line);
	    if (c < indent)
	        return " ";

	    c += info.sliceStart - indent;

	    if (c === info.sliceEnd &&
	        line < this.length)
	        return "\n";

	    if (c >= info.sliceEnd)
	        return "";

	    return info.line.charAt(c);
	};

	Lp.stripMargin = function(width, skipFirstLine) {
	    if (width === 0)
	        return this;

	    assert.ok(width > 0, "negative margin: " + width);

	    if (skipFirstLine && this.length === 1)
	        return this;

	    var secret = getSecret(this);

	    var lines = new Lines(secret.infos.map(function(info, i) {
	        if (info.line && (i > 0 || !skipFirstLine)) {
	            info = copyLineInfo(info);
	            info.indent = Math.max(0, info.indent - width);
	        }
	        return info;
	    }));

	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            newMappings.push(mapping.indent(width, skipFirstLine, true));
	        });
	    }

	    return lines;
	};

	Lp.indent = function(by) {
	    if (by === 0)
	        return this;

	    var secret = getSecret(this);

	    var lines = new Lines(secret.infos.map(function(info) {
	        if (info.line) {
	            info = copyLineInfo(info);
	            info.indent += by;
	        }
	        return info
	    }));

	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            newMappings.push(mapping.indent(by));
	        });
	    }

	    return lines;
	};

	Lp.indentTail = function(by) {
	    if (by === 0)
	        return this;

	    if (this.length < 2)
	        return this;

	    var secret = getSecret(this);

	    var lines = new Lines(secret.infos.map(function(info, i) {
	        if (i > 0 && info.line) {
	            info = copyLineInfo(info);
	            info.indent += by;
	        }

	        return info;
	    }));

	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            newMappings.push(mapping.indent(by, true));
	        });
	    }

	    return lines;
	};

	Lp.getIndentAt = function(line) {
	    assert.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
	    var secret = getSecret(this),
	        info = secret.infos[line - 1];
	    return Math.max(info.indent, 0);
	};

	Lp.guessTabWidth = function() {
	    var secret = getSecret(this);
	    if (hasOwn.call(secret, "cachedTabWidth")) {
	        return secret.cachedTabWidth;
	    }

	    var counts = []; // Sparse array.
	    var lastIndent = 0;

	    for (var line = 1, last = this.length; line <= last; ++line) {
	        var info = secret.infos[line - 1];
	        var sliced = info.line.slice(info.sliceStart, info.sliceEnd);

	        // Whitespace-only lines don't tell us much about the likely tab
	        // width of this code.
	        if (isOnlyWhitespace(sliced)) {
	            continue;
	        }

	        var diff = Math.abs(info.indent - lastIndent);
	        counts[diff] = ~~counts[diff] + 1;
	        lastIndent = info.indent;
	    }

	    var maxCount = -1;
	    var result = 2;

	    for (var tabWidth = 1;
	         tabWidth < counts.length;
	         tabWidth += 1) {
	        if (hasOwn.call(counts, tabWidth) &&
	            counts[tabWidth] > maxCount) {
	            maxCount = counts[tabWidth];
	            result = tabWidth;
	        }
	    }

	    return secret.cachedTabWidth = result;
	};

	Lp.isOnlyWhitespace = function() {
	    return isOnlyWhitespace(this.toString());
	};

	Lp.isPrecededOnlyByWhitespace = function(pos) {
	    var secret = getSecret(this);
	    var info = secret.infos[pos.line - 1];
	    var indent = Math.max(info.indent, 0);

	    var diff = pos.column - indent;
	    if (diff <= 0) {
	        // If pos.column does not exceed the indentation amount, then
	        // there must be only whitespace before it.
	        return true;
	    }

	    var start = info.sliceStart;
	    var end = Math.min(start + diff, info.sliceEnd);
	    var prefix = info.line.slice(start, end);

	    return isOnlyWhitespace(prefix);
	};

	Lp.getLineLength = function(line) {
	    var secret = getSecret(this),
	        info = secret.infos[line - 1];
	    return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
	};

	Lp.nextPos = function(pos, skipSpaces) {
	    var l = Math.max(pos.line, 0),
	        c = Math.max(pos.column, 0);

	    if (c < this.getLineLength(l)) {
	        pos.column += 1;

	        return skipSpaces
	            ? !!this.skipSpaces(pos, false, true)
	            : true;
	    }

	    if (l < this.length) {
	        pos.line += 1;
	        pos.column = 0;

	        return skipSpaces
	            ? !!this.skipSpaces(pos, false, true)
	            : true;
	    }

	    return false;
	};

	Lp.prevPos = function(pos, skipSpaces) {
	    var l = pos.line,
	        c = pos.column;

	    if (c < 1) {
	        l -= 1;

	        if (l < 1)
	            return false;

	        c = this.getLineLength(l);

	    } else {
	        c = Math.min(c - 1, this.getLineLength(l));
	    }

	    pos.line = l;
	    pos.column = c;

	    return skipSpaces
	        ? !!this.skipSpaces(pos, true, true)
	        : true;
	};

	Lp.firstPos = function() {
	    // Trivial, but provided for completeness.
	    return { line: 1, column: 0 };
	};

	Lp.lastPos = function() {
	    return {
	        line: this.length,
	        column: this.getLineLength(this.length)
	    };
	};

	Lp.skipSpaces = function(pos, backward, modifyInPlace) {
	    if (pos) {
	        pos = modifyInPlace ? pos : {
	            line: pos.line,
	            column: pos.column
	        };
	    } else if (backward) {
	        pos = this.lastPos();
	    } else {
	        pos = this.firstPos();
	    }

	    if (backward) {
	        while (this.prevPos(pos)) {
	            if (!isOnlyWhitespace(this.charAt(pos)) &&
	                this.nextPos(pos)) {
	                return pos;
	            }
	        }

	        return null;

	    } else {
	        while (isOnlyWhitespace(this.charAt(pos))) {
	            if (!this.nextPos(pos)) {
	                return null;
	            }
	        }

	        return pos;
	    }
	};

	Lp.trimLeft = function() {
	    var pos = this.skipSpaces(this.firstPos(), false, true);
	    return pos ? this.slice(pos) : emptyLines;
	};

	Lp.trimRight = function() {
	    var pos = this.skipSpaces(this.lastPos(), true, true);
	    return pos ? this.slice(this.firstPos(), pos) : emptyLines;
	};

	Lp.trim = function() {
	    var start = this.skipSpaces(this.firstPos(), false, true);
	    if (start === null)
	        return emptyLines;

	    var end = this.skipSpaces(this.lastPos(), true, true);
	    assert.notStrictEqual(end, null);

	    return this.slice(start, end);
	};

	Lp.eachPos = function(callback, startPos, skipSpaces) {
	    var pos = this.firstPos();

	    if (startPos) {
	        pos.line = startPos.line,
	        pos.column = startPos.column
	    }

	    if (skipSpaces && !this.skipSpaces(pos, false, true)) {
	        return; // Encountered nothing but spaces.
	    }

	    do callback.call(this, pos);
	    while (this.nextPos(pos, skipSpaces));
	};

	Lp.bootstrapSlice = function(start, end) {
	    var strings = this.toString().split("\n").slice(
	            start.line - 1, end.line);

	    strings.push(strings.pop().slice(0, end.column));
	    strings[0] = strings[0].slice(start.column);

	    return fromString(strings.join("\n"));
	};

	Lp.slice = function(start, end) {
	    if (!end) {
	        if (!start) {
	            // The client seems to want a copy of this Lines object, but
	            // Lines objects are immutable, so it's perfectly adequate to
	            // return the same object.
	            return this;
	        }

	        // Slice to the end if no end position was provided.
	        end = this.lastPos();
	    }

	    var secret = getSecret(this);
	    var sliced = secret.infos.slice(start.line - 1, end.line);

	    if (start.line === end.line) {
	        sliced[0] = sliceInfo(sliced[0], start.column, end.column);
	    } else {
	        assert.ok(start.line < end.line);
	        sliced[0] = sliceInfo(sliced[0], start.column);
	        sliced.push(sliceInfo(sliced.pop(), 0, end.column));
	    }

	    var lines = new Lines(sliced);

	    if (secret.mappings.length > 0) {
	        var newMappings = getSecret(lines).mappings;
	        assert.strictEqual(newMappings.length, 0);
	        secret.mappings.forEach(function(mapping) {
	            var sliced = mapping.slice(this, start, end);
	            if (sliced) {
	                newMappings.push(sliced);
	            }
	        }, this);
	    }

	    return lines;
	};

	function sliceInfo(info, startCol, endCol) {
	    var sliceStart = info.sliceStart;
	    var sliceEnd = info.sliceEnd;
	    var indent = Math.max(info.indent, 0);
	    var lineLength = indent + sliceEnd - sliceStart;

	    if (typeof endCol === "undefined") {
	        endCol = lineLength;
	    }

	    startCol = Math.max(startCol, 0);
	    endCol = Math.min(endCol, lineLength);
	    endCol = Math.max(endCol, startCol);

	    if (endCol < indent) {
	        indent = endCol;
	        sliceEnd = sliceStart;
	    } else {
	        sliceEnd -= lineLength - endCol;
	    }

	    lineLength = endCol;
	    lineLength -= startCol;

	    if (startCol < indent) {
	        indent -= startCol;
	    } else {
	        startCol -= indent;
	        indent = 0;
	        sliceStart += startCol;
	    }

	    assert.ok(indent >= 0);
	    assert.ok(sliceStart <= sliceEnd);
	    assert.strictEqual(lineLength, indent + sliceEnd - sliceStart);

	    if (info.indent === indent &&
	        info.sliceStart === sliceStart &&
	        info.sliceEnd === sliceEnd) {
	        return info;
	    }

	    return {
	        line: info.line,
	        indent: indent,
	        sliceStart: sliceStart,
	        sliceEnd: sliceEnd
	    };
	}

	Lp.bootstrapSliceString = function(start, end, options) {
	    return this.slice(start, end).toString(options);
	};

	Lp.sliceString = function(start, end, options) {
	    if (!end) {
	        if (!start) {
	            // The client seems to want a copy of this Lines object, but
	            // Lines objects are immutable, so it's perfectly adequate to
	            // return the same object.
	            return this;
	        }

	        // Slice to the end if no end position was provided.
	        end = this.lastPos();
	    }

	    options = normalizeOptions(options);

	    var infos = getSecret(this).infos;
	    var parts = [];
	    var tabWidth = options.tabWidth;

	    for (var line = start.line; line <= end.line; ++line) {
	        var info = infos[line - 1];

	        if (line === start.line) {
	            if (line === end.line) {
	                info = sliceInfo(info, start.column, end.column);
	            } else {
	                info = sliceInfo(info, start.column);
	            }
	        } else if (line === end.line) {
	            info = sliceInfo(info, 0, end.column);
	        }

	        var indent = Math.max(info.indent, 0);

	        var before = info.line.slice(0, info.sliceStart);
	        if (options.reuseWhitespace &&
	            isOnlyWhitespace(before) &&
	            countSpaces(before, options.tabWidth) === indent) {
	            // Reuse original spaces if the indentation is correct.
	            parts.push(info.line.slice(0, info.sliceEnd));
	            continue;
	        }

	        var tabs = 0;
	        var spaces = indent;

	        if (options.useTabs) {
	            tabs = Math.floor(indent / tabWidth);
	            spaces -= tabs * tabWidth;
	        }

	        var result = "";

	        if (tabs > 0) {
	            result += new Array(tabs + 1).join("\t");
	        }

	        if (spaces > 0) {
	            result += new Array(spaces + 1).join(" ");
	        }

	        result += info.line.slice(info.sliceStart, info.sliceEnd);

	        parts.push(result);
	    }

	    return parts.join("\n");
	};

	Lp.isEmpty = function() {
	    return this.length < 2 && this.getLineLength(1) < 1;
	};

	Lp.join = function(elements) {
	    var separator = this;
	    var separatorSecret = getSecret(separator);
	    var infos = [];
	    var mappings = [];
	    var prevInfo;

	    function appendSecret(secret) {
	        if (secret === null)
	            return;

	        if (prevInfo) {
	            var info = secret.infos[0];
	            var indent = new Array(info.indent + 1).join(" ");
	            var prevLine = infos.length;
	            var prevColumn = Math.max(prevInfo.indent, 0) +
	                prevInfo.sliceEnd - prevInfo.sliceStart;

	            prevInfo.line = prevInfo.line.slice(
	                0, prevInfo.sliceEnd) + indent + info.line.slice(
	                    info.sliceStart, info.sliceEnd);

	            prevInfo.sliceEnd = prevInfo.line.length;

	            if (secret.mappings.length > 0) {
	                secret.mappings.forEach(function(mapping) {
	                    mappings.push(mapping.add(prevLine, prevColumn));
	                });
	            }

	        } else if (secret.mappings.length > 0) {
	            mappings.push.apply(mappings, secret.mappings);
	        }

	        secret.infos.forEach(function(info, i) {
	            if (!prevInfo || i > 0) {
	                prevInfo = copyLineInfo(info);
	                infos.push(prevInfo);
	            }
	        });
	    }

	    function appendWithSeparator(secret, i) {
	        if (i > 0)
	            appendSecret(separatorSecret);
	        appendSecret(secret);
	    }

	    elements.map(function(elem) {
	        var lines = fromString(elem);
	        if (lines.isEmpty())
	            return null;
	        return getSecret(lines);
	    }).forEach(separator.isEmpty()
	               ? appendSecret
	               : appendWithSeparator);

	    if (infos.length < 1)
	        return emptyLines;

	    var lines = new Lines(infos);

	    getSecret(lines).mappings = mappings;

	    return lines;
	};

	exports.concat = function(elements) {
	    return emptyLines.join(elements);
	};

	Lp.concat = function(other) {
	    var args = arguments,
	        list = [this];
	    list.push.apply(list, args);
	    assert.strictEqual(list.length, args.length + 1);
	    return emptyLines.join(list);
	};

	// The emptyLines object needs to be created all the way down here so that
	// Lines.prototype will be fully populated.
	var emptyLines = fromString("");

	},{"./mapping":481,"./options":482,"./types":486,"./util":487,"assert":1,"private":456,"source-map":518}],481:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var isString = types.builtInTypes.string;
	var isNumber = types.builtInTypes.number;
	var SourceLocation = types.namedTypes.SourceLocation;
	var Position = types.namedTypes.Position;
	var linesModule = require("./lines");
	var comparePos = require("./util").comparePos;

	function Mapping(sourceLines, sourceLoc, targetLoc) {
	    assert.ok(this instanceof Mapping);
	    assert.ok(sourceLines instanceof linesModule.Lines);
	    SourceLocation.assert(sourceLoc);

	    if (targetLoc) {
	        // In certain cases it's possible for targetLoc.{start,end}.column
	        // values to be negative, which technically makes them no longer
	        // valid SourceLocation nodes, so we need to be more forgiving.
	        assert.ok(
	            isNumber.check(targetLoc.start.line) &&
	            isNumber.check(targetLoc.start.column) &&
	            isNumber.check(targetLoc.end.line) &&
	            isNumber.check(targetLoc.end.column)
	        );
	    } else {
	        // Assume identity mapping if no targetLoc specified.
	        targetLoc = sourceLoc;
	    }

	    Object.defineProperties(this, {
	        sourceLines: { value: sourceLines },
	        sourceLoc: { value: sourceLoc },
	        targetLoc: { value: targetLoc }
	    });
	}

	var Mp = Mapping.prototype;
	module.exports = Mapping;

	Mp.slice = function(lines, start, end) {
	    assert.ok(lines instanceof linesModule.Lines);
	    Position.assert(start);

	    if (end) {
	        Position.assert(end);
	    } else {
	        end = lines.lastPos();
	    }

	    var sourceLines = this.sourceLines;
	    var sourceLoc = this.sourceLoc;
	    var targetLoc = this.targetLoc;

	    function skip(name) {
	        var sourceFromPos = sourceLoc[name];
	        var targetFromPos = targetLoc[name];
	        var targetToPos = start;

	        if (name === "end") {
	            targetToPos = end;
	        } else {
	            assert.strictEqual(name, "start");
	        }

	        return skipChars(
	            sourceLines, sourceFromPos,
	            lines, targetFromPos, targetToPos
	        );
	    }

	    if (comparePos(start, targetLoc.start) <= 0) {
	        if (comparePos(targetLoc.end, end) <= 0) {
	            targetLoc = {
	                start: subtractPos(targetLoc.start, start.line, start.column),
	                end: subtractPos(targetLoc.end, start.line, start.column)
	            };

	            // The sourceLoc can stay the same because the contents of the
	            // targetLoc have not changed.

	        } else if (comparePos(end, targetLoc.start) <= 0) {
	            return null;

	        } else {
	            sourceLoc = {
	                start: sourceLoc.start,
	                end: skip("end")
	            };

	            targetLoc = {
	                start: subtractPos(targetLoc.start, start.line, start.column),
	                end: subtractPos(end, start.line, start.column)
	            };
	        }

	    } else {
	        if (comparePos(targetLoc.end, start) <= 0) {
	            return null;
	        }

	        if (comparePos(targetLoc.end, end) <= 0) {
	            sourceLoc = {
	                start: skip("start"),
	                end: sourceLoc.end
	            };

	            targetLoc = {
	                // Same as subtractPos(start, start.line, start.column):
	                start: { line: 1, column: 0 },
	                end: subtractPos(targetLoc.end, start.line, start.column)
	            };

	        } else {
	            sourceLoc = {
	                start: skip("start"),
	                end: skip("end")
	            };

	            targetLoc = {
	                // Same as subtractPos(start, start.line, start.column):
	                start: { line: 1, column: 0 },
	                end: subtractPos(end, start.line, start.column)
	            };
	        }
	    }

	    return new Mapping(this.sourceLines, sourceLoc, targetLoc);
	};

	Mp.add = function(line, column) {
	    return new Mapping(this.sourceLines, this.sourceLoc, {
	        start: addPos(this.targetLoc.start, line, column),
	        end: addPos(this.targetLoc.end, line, column)
	    });
	};

	function addPos(toPos, line, column) {
	    return {
	        line: toPos.line + line - 1,
	        column: (toPos.line === 1)
	            ? toPos.column + column
	            : toPos.column
	    };
	}

	Mp.subtract = function(line, column) {
	    return new Mapping(this.sourceLines, this.sourceLoc, {
	        start: subtractPos(this.targetLoc.start, line, column),
	        end: subtractPos(this.targetLoc.end, line, column)
	    });
	};

	function subtractPos(fromPos, line, column) {
	    return {
	        line: fromPos.line - line + 1,
	        column: (fromPos.line === line)
	            ? fromPos.column - column
	            : fromPos.column
	    };
	}

	Mp.indent = function(by, skipFirstLine, noNegativeColumns) {
	    if (by === 0) {
	        return this;
	    }

	    var targetLoc = this.targetLoc;
	    var startLine = targetLoc.start.line;
	    var endLine = targetLoc.end.line;

	    if (skipFirstLine && startLine === 1 && endLine === 1) {
	        return this;
	    }

	    targetLoc = {
	        start: targetLoc.start,
	        end: targetLoc.end
	    };

	    if (!skipFirstLine || startLine > 1) {
	        var startColumn = targetLoc.start.column + by;
	        targetLoc.start = {
	            line: startLine,
	            column: noNegativeColumns
	                ? Math.max(0, startColumn)
	                : startColumn
	        };
	    }

	    if (!skipFirstLine || endLine > 1) {
	        var endColumn = targetLoc.end.column + by;
	        targetLoc.end = {
	            line: endLine,
	            column: noNegativeColumns
	                ? Math.max(0, endColumn)
	                : endColumn
	        };
	    }

	    return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
	};

	function skipChars(
	    sourceLines, sourceFromPos,
	    targetLines, targetFromPos, targetToPos
	) {
	    assert.ok(sourceLines instanceof linesModule.Lines);
	    assert.ok(targetLines instanceof linesModule.Lines);
	    Position.assert(sourceFromPos);
	    Position.assert(targetFromPos);
	    Position.assert(targetToPos);

	    var targetComparison = comparePos(targetFromPos, targetToPos);
	    if (targetComparison === 0) {
	        // Trivial case: no characters to skip.
	        return sourceFromPos;
	    }

	    if (targetComparison < 0) {
	        // Skipping forward.

	        var sourceCursor = sourceLines.skipSpaces(sourceFromPos);
	        var targetCursor = targetLines.skipSpaces(targetFromPos);

	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;

	        if (lineDiff > 0) {
	            // If jumping to later lines, reset columns to the beginnings
	            // of those lines.
	            sourceCursor.column = 0;
	            targetCursor.column = 0;
	        } else {
	            assert.strictEqual(lineDiff, 0);
	        }

	        while (comparePos(targetCursor, targetToPos) < 0 &&
	               targetLines.nextPos(targetCursor, true)) {
	            assert.ok(sourceLines.nextPos(sourceCursor, true));
	            assert.strictEqual(
	                sourceLines.charAt(sourceCursor),
	                targetLines.charAt(targetCursor)
	            );
	        }

	    } else {
	        // Skipping backward.

	        var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true);
	        var targetCursor = targetLines.skipSpaces(targetFromPos, true);

	        var lineDiff = targetToPos.line - targetCursor.line;
	        sourceCursor.line += lineDiff;
	        targetCursor.line += lineDiff;

	        if (lineDiff < 0) {
	            // If jumping to earlier lines, reset columns to the ends of
	            // those lines.
	            sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
	            targetCursor.column = targetLines.getLineLength(targetCursor.line);
	        } else {
	            assert.strictEqual(lineDiff, 0);
	        }

	        while (comparePos(targetToPos, targetCursor) < 0 &&
	               targetLines.prevPos(targetCursor, true)) {
	            assert.ok(sourceLines.prevPos(sourceCursor, true));
	            assert.strictEqual(
	                sourceLines.charAt(sourceCursor),
	                targetLines.charAt(targetCursor)
	            );
	        }
	    }

	    return sourceCursor;
	}

	},{"./lines":480,"./types":486,"./util":487,"assert":1}],482:[function(require,module,exports){
	var defaults = {
	    // If you want to use a different branch of esprima, or any other
	    // module that supports a .parse function, pass that module object to
	    // recast.parse as options.esprima.
	    esprima: require("esprima-fb"),

	    // Number of spaces the pretty-printer should use per tab for
	    // indentation. If you do not pass this option explicitly, it will be
	    // (quite reliably!) inferred from the original code.
	    tabWidth: 4,

	    // If you really want the pretty-printer to use tabs instead of
	    // spaces, make this option true.
	    useTabs: false,

	    // The reprinting code leaves leading whitespace untouched unless it
	    // has to reindent a line, or you pass false for this option.
	    reuseWhitespace: true,

	    // Some of the pretty-printer code (such as that for printing function
	    // parameter lists) makes a valiant attempt to prevent really long
	    // lines. You can adjust the limit by changing this option; however,
	    // there is no guarantee that line length will fit inside this limit.
	    wrapColumn: 74, // Aspirational for now.

	    // Pass a string as options.sourceFileName to recast.parse to tell the
	    // reprinter to keep track of reused code so that it can construct a
	    // source map automatically.
	    sourceFileName: null,

	    // Pass a string as options.sourceMapName to recast.print, and
	    // (provided you passed options.sourceFileName earlier) the
	    // PrintResult of recast.print will have a .map property for the
	    // generated source map.
	    sourceMapName: null,

	    // If provided, this option will be passed along to the source map
	    // generator as a root directory for relative source file paths.
	    sourceRoot: null,

	    // If you provide a source map that was generated from a previous call
	    // to recast.print as options.inputSourceMap, the old source map will
	    // be composed with the new source map.
	    inputSourceMap: null,

	    // If you want esprima to generate .range information (recast only
	    // uses .loc internally), pass true for this option.
	    range: false,

	    // If you want esprima not to throw exceptions when it encounters
	    // non-fatal errors, keep this option true.
	    tolerant: true,

	    // If you want to override the quotes used in string literals, specify
	    // either "single", "double", or "auto" here ("auto" will select the one
	    // which results in the shorter literal)
	    // Otherwise, the input marks will be preserved
	    quote: null,

	    // If you want to print trailing commas in object literals,
	    // array expressions, functions calls and function definitions pass true
	    // for this option.
	    trailingComma: false,
	}, hasOwn = defaults.hasOwnProperty;

	// Copy options and fill in default values.
	exports.normalize = function(options) {
	    options = options || defaults;

	    function get(key) {
	        return hasOwn.call(options, key)
	            ? options[key]
	            : defaults[key];
	    }

	    return {
	        tabWidth: +get("tabWidth"),
	        useTabs: !!get("useTabs"),
	        reuseWhitespace: !!get("reuseWhitespace"),
	        wrapColumn: Math.max(get("wrapColumn"), 0),
	        sourceFileName: get("sourceFileName"),
	        sourceMapName: get("sourceMapName"),
	        sourceRoot: get("sourceRoot"),
	        inputSourceMap: get("inputSourceMap"),
	        esprima: get("esprima"),
	        range: get("range"),
	        tolerant: get("tolerant"),
	        quote: get("quote"),
	        trailingComma: get("trailingComma"),
	    };
	};

	},{"esprima-fb":4}],483:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var n = types.namedTypes;
	var b = types.builders;
	var isObject = types.builtInTypes.object;
	var isArray = types.builtInTypes.array;
	var isFunction = types.builtInTypes.function;
	var Patcher = require("./patcher").Patcher;
	var normalizeOptions = require("./options").normalize;
	var fromString = require("./lines").fromString;
	var attachComments = require("./comments").attach;
	var util = require("./util");

	exports.parse = function parse(source, options) {
	    options = normalizeOptions(options);

	    var lines = fromString(source, options);

	    var sourceWithoutTabs = lines.toString({
	        tabWidth: options.tabWidth,
	        reuseWhitespace: false,
	        useTabs: false
	    });

	    var comments = [];
	    var program = options.esprima.parse(sourceWithoutTabs, {
	        loc: true,
	        locations: true,
	        range: options.range,
	        comment: true,
	        onComment: comments,
	        tolerant: options.tolerant,
	        ecmaVersion: 6,
	        sourceType: 'module'
	    });

	    // Expand the Program node's .loc to include all comments, since
	    // typically its .loc.start and .loc.end will coincide with those of
	    // the first and last statements, respectively, excluding any comments
	    // that fall outside that region.
	    program.loc = util.getTrueLoc(program);

	    if (program.comments) {
	        comments = program.comments;
	        delete program.comments;
	    }

	    // In order to ensure we reprint leading and trailing program
	    // comments, wrap the original Program node with a File node.
	    var file = b.file(program);
	    file.loc = {
	        lines: lines,
	        indent: 0,
	        start: lines.firstPos(),
	        end: lines.lastPos()
	    };

	    // Passing file.program here instead of just file means that initial
	    // comments will be attached to program.body[0] instead of program.
	    attachComments(
	        comments,
	        program.body.length ? file.program : file,
	        lines
	    );

	    // Return a copy of the original AST so that any changes made may be
	    // compared to the original.
	    return new TreeCopier(lines).copy(file);
	};

	function TreeCopier(lines) {
	    assert.ok(this instanceof TreeCopier);
	    this.lines = lines;
	    this.indent = 0;
	}

	var TCp = TreeCopier.prototype;

	TCp.copy = function(node) {
	    if (isArray.check(node)) {
	        return node.map(this.copy, this);
	    }

	    if (!isObject.check(node)) {
	        return node;
	    }

	    util.fixFaultyLocations(node);

	    var copy = Object.create(Object.getPrototypeOf(node), {
	        original: { // Provide a link from the copy to the original.
	            value: node,
	            configurable: false,
	            enumerable: false,
	            writable: true
	        }
	    });

	    var loc = node.loc;
	    var oldIndent = this.indent;
	    var newIndent = oldIndent;

	    if (loc) {
	        // When node is a comment, we set node.loc.indent to
	        // node.loc.start.column so that, when/if we print the comment by
	        // itself, we can strip that much whitespace from the left margin
	        // of the comment. This only really matters for multiline Block
	        // comments, but it doesn't hurt for Line comments.
	        if (node.type === "Block" || node.type === "Line" ||
	            this.lines.isPrecededOnlyByWhitespace(loc.start)) {
	            newIndent = this.indent = loc.start.column;
	        }

	        loc.lines = this.lines;
	        loc.indent = newIndent;
	    }

	    var keys = Object.keys(node);
	    var keyCount = keys.length;
	    for (var i = 0; i < keyCount; ++i) {
	        var key = keys[i];
	        if (key === "loc") {
	            copy[key] = node[key];
	        } else {
	            copy[key] = this.copy(node[key]);
	        }
	    }

	    this.indent = oldIndent;

	    return copy;
	};

	},{"./comments":478,"./lines":480,"./options":482,"./patcher":484,"./types":486,"./util":487,"assert":1}],484:[function(require,module,exports){
	var assert = require("assert");
	var linesModule = require("./lines");
	var types = require("./types");
	var getFieldValue = types.getFieldValue;
	var Printable = types.namedTypes.Printable;
	var Expression = types.namedTypes.Expression;
	var SourceLocation = types.namedTypes.SourceLocation;
	var util = require("./util");
	var comparePos = util.comparePos;
	var FastPath = require("./fast-path");
	var isObject = types.builtInTypes.object;
	var isArray = types.builtInTypes.array;
	var isString = types.builtInTypes.string;
	var riskyAdjoiningCharExp = /[0-9a-z_$]/i;

	function Patcher(lines) {
	    assert.ok(this instanceof Patcher);
	    assert.ok(lines instanceof linesModule.Lines);

	    var self = this,
	        replacements = [];

	    self.replace = function(loc, lines) {
	        if (isString.check(lines))
	            lines = linesModule.fromString(lines);

	        replacements.push({
	            lines: lines,
	            start: loc.start,
	            end: loc.end
	        });
	    };

	    self.get = function(loc) {
	        // If no location is provided, return the complete Lines object.
	        loc = loc || {
	            start: { line: 1, column: 0 },
	            end: { line: lines.length,
	                   column: lines.getLineLength(lines.length) }
	        };

	        var sliceFrom = loc.start,
	            toConcat = [];

	        function pushSlice(from, to) {
	            assert.ok(comparePos(from, to) <= 0);
	            toConcat.push(lines.slice(from, to));
	        }

	        replacements.sort(function(a, b) {
	            return comparePos(a.start, b.start);
	        }).forEach(function(rep) {
	            if (comparePos(sliceFrom, rep.start) > 0) {
	                // Ignore nested replacement ranges.
	            } else {
	                pushSlice(sliceFrom, rep.start);
	                toConcat.push(rep.lines);
	                sliceFrom = rep.end;
	            }
	        });

	        pushSlice(sliceFrom, loc.end);

	        return linesModule.concat(toConcat);
	    };
	}
	exports.Patcher = Patcher;

	var Pp = Patcher.prototype;

	Pp.tryToReprintComments = function(newNode, oldNode, print) {
	    var patcher = this;

	    if (!newNode.comments &&
	        !oldNode.comments) {
	        // We were (vacuously) able to reprint all the comments!
	        return true;
	    }

	    var newPath = FastPath.from(newNode);
	    var oldPath = FastPath.from(oldNode);

	    newPath.stack.push("comments", getSurroundingComments(newNode));
	    oldPath.stack.push("comments", getSurroundingComments(oldNode));

	    var reprints = [];
	    var ableToReprintComments =
	        findArrayReprints(newPath, oldPath, reprints);

	    // No need to pop anything from newPath.stack or oldPath.stack, since
	    // newPath and oldPath are fresh local variables.

	    if (ableToReprintComments && reprints.length > 0) {
	        reprints.forEach(function(reprint) {
	            var oldComment = reprint.oldPath.getValue();
	            assert.ok(oldComment.leading || oldComment.trailing);
	            patcher.replace(
	                oldComment.loc,
	                // Comments can't have .comments, so it doesn't matter
	                // whether we print with comments or without.
	                print(reprint.newPath).indentTail(oldComment.loc.indent)
	            );
	        });
	    }

	    return ableToReprintComments;
	};

	// Get all comments that are either leading or trailing, ignoring any
	// comments that occur inside node.loc. Returns an empty array for nodes
	// with no leading or trailing comments.
	function getSurroundingComments(node) {
	    var result = [];
	    if (node.comments &&
	        node.comments.length > 0) {
	        node.comments.forEach(function(comment) {
	            if (comment.leading || comment.trailing) {
	                result.push(comment);
	            }
	        });
	    }
	    return result;
	}

	Pp.deleteComments = function(node) {
	    if (!node.comments) {
	        return;
	    }

	    var patcher = this;

	    node.comments.forEach(function(comment) {
	        if (comment.leading) {
	            // Delete leading comments along with any trailing whitespace
	            // they might have.
	            patcher.replace({
	                start: comment.loc.start,
	                end: node.loc.lines.skipSpaces(
	                    comment.loc.end, false, false)
	            }, "");

	        } else if (comment.trailing) {
	            // Delete trailing comments along with any leading whitespace
	            // they might have.
	            patcher.replace({
	                start: node.loc.lines.skipSpaces(
	                    comment.loc.start, true, false),
	                end: comment.loc.end
	            }, "");
	        }
	    });
	};

	exports.getReprinter = function(path) {
	    assert.ok(path instanceof FastPath);

	    // Make sure that this path refers specifically to a Node, rather than
	    // some non-Node subproperty of a Node.
	    var node = path.getValue();
	    if (!Printable.check(node))
	        return;

	    var orig = node.original;
	    var origLoc = orig && orig.loc;
	    var lines = origLoc && origLoc.lines;
	    var reprints = [];

	    if (!lines || !findReprints(path, reprints))
	        return;

	    return function(print) {
	        var patcher = new Patcher(lines);

	        reprints.forEach(function(reprint) {
	            var newNode = reprint.newPath.getValue();
	            var oldNode = reprint.oldPath.getValue();

	            SourceLocation.assert(oldNode.loc, true);

	            var needToPrintNewPathWithComments =
	                !patcher.tryToReprintComments(newNode, oldNode, print)

	            if (needToPrintNewPathWithComments) {
	                // Since we were not able to preserve all leading/trailing
	                // comments, we delete oldNode's comments, print newPath
	                // with comments, and then patch the resulting lines where
	                // oldNode used to be.
	                patcher.deleteComments(oldNode);
	            }

	            var pos = util.copyPos(oldNode.loc.start);
	            var needsLeadingSpace = lines.prevPos(pos) &&
	                riskyAdjoiningCharExp.test(lines.charAt(pos));

	            var newLines = print(
	                reprint.newPath,
	                needToPrintNewPathWithComments
	            ).indentTail(oldNode.loc.indent);

	            var needsTrailingSpace =
	                riskyAdjoiningCharExp.test(lines.charAt(oldNode.loc.end));

	            // If we try to replace the argument of a ReturnStatement like
	            // return"asdf" with e.g. a literal null expression, we run
	            // the risk of ending up with returnnull, so we need to add an
	            // extra leading space in situations where that might
	            // happen. Likewise for "asdf"in obj. See #170.
	            if (needsLeadingSpace || needsTrailingSpace) {
	                var newParts = [];
	                needsLeadingSpace && newParts.push(" ");
	                newParts.push(newLines);
	                needsTrailingSpace && newParts.push(" ");
	                newLines = linesModule.concat(newParts);
	            }

	            patcher.replace(oldNode.loc, newLines);
	        });

	        // Recall that origLoc is the .loc of an ancestor node that is
	        // guaranteed to contain all the reprinted nodes and comments.
	        return patcher.get(origLoc).indentTail(-orig.loc.indent);
	    };
	};

	function findReprints(newPath, reprints) {
	    var newNode = newPath.getValue();
	    Printable.assert(newNode);

	    var oldNode = newNode.original;
	    Printable.assert(oldNode);

	    assert.deepEqual(reprints, []);

	    if (newNode.type !== oldNode.type) {
	        return false;
	    }

	    var oldPath = new FastPath(oldNode);
	    var canReprint = findChildReprints(newPath, oldPath, reprints);

	    if (!canReprint) {
	        // Make absolutely sure the calling code does not attempt to reprint
	        // any nodes.
	        reprints.length = 0;
	    }

	    return canReprint;
	}

	function findAnyReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();

	    if (newNode === oldNode)
	        return true;

	    if (isArray.check(newNode))
	        return findArrayReprints(newPath, oldPath, reprints);

	    if (isObject.check(newNode))
	        return findObjectReprints(newPath, oldPath, reprints);

	    return false;
	}

	function findArrayReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();
	    isArray.assert(newNode);
	    var len = newNode.length;

	    if (!(isArray.check(oldNode) &&
	          oldNode.length === len))
	        return false;

	    for (var i = 0; i < len; ++i) {
	        newPath.stack.push(i, newNode[i]);
	        oldPath.stack.push(i, oldNode[i]);
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;
	        if (!canReprint) {
	            return false;
	        }
	    }

	    return true;
	}

	function findObjectReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    isObject.assert(newNode);

	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }

	    var oldNode = oldPath.getValue();
	    if (!isObject.check(oldNode))
	        return false;

	    if (Printable.check(newNode)) {
	        if (!Printable.check(oldNode)) {
	            return false;
	        }

	        // Here we need to decide whether the reprinted code for newNode
	        // is appropriate for patching into the location of oldNode.

	        if (newNode.type === oldNode.type) {
	            var childReprints = [];

	            if (findChildReprints(newPath, oldPath, childReprints)) {
	                reprints.push.apply(reprints, childReprints);
	            } else if (oldNode.loc) {
	                // If we have no .loc information for oldNode, then we
	                // won't be able to reprint it.
	                reprints.push({
	                    oldPath: oldPath.copy(),
	                    newPath: newPath.copy()
	                });
	            } else {
	                return false;
	            }

	            return true;
	        }

	        if (Expression.check(newNode) &&
	            Expression.check(oldNode) &&
	            // If we have no .loc information for oldNode, then we won't
	            // be able to reprint it.
	            oldNode.loc) {

	            // If both nodes are subtypes of Expression, then we should be
	            // able to fill the location occupied by the old node with
	            // code printed for the new node with no ill consequences.
	            reprints.push({
	                oldPath: oldPath.copy(),
	                newPath: newPath.copy()
	            });

	            return true;
	        }

	        // The nodes have different types, and at least one of the types
	        // is not a subtype of the Expression type, so we cannot safely
	        // assume the nodes are syntactically interchangeable.
	        return false;
	    }

	    return findChildReprints(newPath, oldPath, reprints);
	}

	// This object is reused in hasOpeningParen and hasClosingParen to avoid
	// having to allocate a temporary object.
	var reusablePos = { line: 1, column: 0 };
	var nonSpaceExp = /\S/;

	function hasOpeningParen(oldPath) {
	    var oldNode = oldPath.getValue();
	    var loc = oldNode.loc;
	    var lines = loc && loc.lines;

	    if (lines) {
	        var pos = reusablePos;
	        pos.line = loc.start.line;
	        pos.column = loc.start.column;

	        while (lines.prevPos(pos)) {
	            var ch = lines.charAt(pos);

	            if (ch === "(") {
	                // If we found an opening parenthesis but it occurred before
	                // the start of the original subtree for this reprinting, then
	                // we must not return true for hasOpeningParen(oldPath).
	                return comparePos(oldPath.getRootValue().loc.start, pos) <= 0;
	            }

	            if (nonSpaceExp.test(ch)) {
	                return false;
	            }
	        }
	    }

	    return false;
	}

	function hasClosingParen(oldPath) {
	    var oldNode = oldPath.getValue();
	    var loc = oldNode.loc;
	    var lines = loc && loc.lines;

	    if (lines) {
	        var pos = reusablePos;
	        pos.line = loc.end.line;
	        pos.column = loc.end.column;

	        do {
	            var ch = lines.charAt(pos);

	            if (ch === ")") {
	                // If we found a closing parenthesis but it occurred after the
	                // end of the original subtree for this reprinting, then we
	                // must not return true for hasClosingParen(oldPath).
	                return comparePos(pos, oldPath.getRootValue().loc.end) <= 0;
	            }

	            if (nonSpaceExp.test(ch)) {
	                return false;
	            }

	        } while (lines.nextPos(pos));
	    }

	    return false;
	}

	function hasParens(oldPath) {
	    // This logic can technically be fooled if the node has parentheses
	    // but there are comments intervening between the parentheses and the
	    // node. In such cases the node will be harmlessly wrapped in an
	    // additional layer of parentheses.
	    return hasOpeningParen(oldPath) && hasClosingParen(oldPath);
	}

	function findChildReprints(newPath, oldPath, reprints) {
	    var newNode = newPath.getValue();
	    var oldNode = oldPath.getValue();

	    isObject.assert(newNode);
	    isObject.assert(oldNode);

	    if (newNode.original === null) {
	        // If newNode.original node was set to null, reprint the node.
	        return false;
	    }

	    // If this type of node cannot come lexically first in its enclosing
	    // statement (e.g. a function expression or object literal), and it
	    // seems to be doing so, then the only way we can ignore this problem
	    // and save ourselves from falling back to the pretty printer is if an
	    // opening parenthesis happens to precede the node.  For example,
	    // (function(){ ... }()); does not need to be reprinted, even though
	    // the FunctionExpression comes lexically first in the enclosing
	    // ExpressionStatement and fails the hasParens test, because the
	    // parent CallExpression passes the hasParens test. If we relied on
	    // the path.needsParens() && !hasParens(oldNode) check below, the
	    // absence of a closing parenthesis after the FunctionExpression would
	    // trigger pretty-printing unnecessarily.
	    if (!newPath.canBeFirstInStatement() &&
	        newPath.firstInStatement() &&
	        !hasOpeningParen(oldPath))
	        return false;

	    // If this node needs parentheses and will not be wrapped with
	    // parentheses when reprinted, then return false to skip reprinting
	    // and let it be printed generically.
	    if (newPath.needsParens(true) && !hasParens(oldPath)) {
	        return false;
	    }

	    for (var k in util.getUnionOfKeys(newNode, oldNode)) {
	        if (k === "loc")
	            continue;

	        newPath.stack.push(k, types.getFieldValue(newNode, k));
	        oldPath.stack.push(k, types.getFieldValue(oldNode, k));
	        var canReprint = findAnyReprints(newPath, oldPath, reprints);
	        newPath.stack.length -= 2;
	        oldPath.stack.length -= 2;

	        if (!canReprint) {
	            return false;
	        }
	    }

	    return true;
	}

	},{"./fast-path":479,"./lines":480,"./types":486,"./util":487,"assert":1}],485:[function(require,module,exports){
	var assert = require("assert");
	var sourceMap = require("source-map");
	var printComments = require("./comments").printComments;
	var linesModule = require("./lines");
	var fromString = linesModule.fromString;
	var concat = linesModule.concat;
	var normalizeOptions = require("./options").normalize;
	var getReprinter = require("./patcher").getReprinter;
	var types = require("./types");
	var namedTypes = types.namedTypes;
	var isString = types.builtInTypes.string;
	var isObject = types.builtInTypes.object;
	var FastPath = require("./fast-path");
	var util = require("./util");

	function PrintResult(code, sourceMap) {
	    assert.ok(this instanceof PrintResult);

	    isString.assert(code);
	    this.code = code;

	    if (sourceMap) {
	        isObject.assert(sourceMap);
	        this.map = sourceMap;
	    }
	}

	var PRp = PrintResult.prototype;
	var warnedAboutToString = false;

	PRp.toString = function() {
	    if (!warnedAboutToString) {
	        console.warn(
	            "Deprecation warning: recast.print now returns an object with " +
	            "a .code property. You appear to be treating the object as a " +
	            "string, which might still work but is strongly discouraged."
	        );

	        warnedAboutToString = true;
	    }

	    return this.code;
	};

	var emptyPrintResult = new PrintResult("");

	function Printer(originalOptions) {
	    assert.ok(this instanceof Printer);

	    var explicitTabWidth = originalOptions && originalOptions.tabWidth;
	    var options = normalizeOptions(originalOptions);
	    assert.notStrictEqual(options, originalOptions);

	    // It's common for client code to pass the same options into both
	    // recast.parse and recast.print, but the Printer doesn't need (and
	    // can be confused by) options.sourceFileName, so we null it out.
	    options.sourceFileName = null;

	    function printWithComments(path) {
	        assert.ok(path instanceof FastPath);
	        return printComments(path, print);
	    }

	    function print(path, includeComments) {
	        if (includeComments)
	            return printWithComments(path);

	        assert.ok(path instanceof FastPath);

	        if (!explicitTabWidth) {
	            var oldTabWidth = options.tabWidth;
	            var loc = path.getNode().loc;
	            if (loc && loc.lines && loc.lines.guessTabWidth) {
	                options.tabWidth = loc.lines.guessTabWidth();
	                var lines = maybeReprint(path);
	                options.tabWidth = oldTabWidth;
	                return lines;
	            }
	        }

	        return maybeReprint(path);
	    }

	    function maybeReprint(path) {
	        var reprinter = getReprinter(path);
	        if (reprinter)
	            return maybeAddParens(path, reprinter(print));
	        return printRootGenerically(path);
	    }

	    // Print the root node generically, but then resume reprinting its
	    // children non-generically.
	    function printRootGenerically(path) {
	        return genericPrint(path, options, printWithComments);
	    }

	    // Print the entire AST generically.
	    function printGenerically(path) {
	        return genericPrint(path, options, printGenerically);
	    }

	    this.print = function(ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }

	        var lines = print(FastPath.from(ast), true);

	        return new PrintResult(
	            lines.toString(options),
	            util.composeSourceMaps(
	                options.inputSourceMap,
	                lines.getSourceMap(
	                    options.sourceMapName,
	                    options.sourceRoot
	                )
	            )
	        );
	    };

	    this.printGenerically = function(ast) {
	        if (!ast) {
	            return emptyPrintResult;
	        }

	        var path = FastPath.from(ast);
	        var oldReuseWhitespace = options.reuseWhitespace;

	        // Do not reuse whitespace (or anything else, for that matter)
	        // when printing generically.
	        options.reuseWhitespace = false;

	        // TODO Allow printing of comments?
	        var pr = new PrintResult(printGenerically(path).toString(options));
	        options.reuseWhitespace = oldReuseWhitespace;
	        return pr;
	    };
	}

	exports.Printer = Printer;

	function maybeAddParens(path, lines) {
	    return path.needsParens() ? concat(["(", lines, ")"]) : lines;
	}

	function genericPrint(path, options, printPath) {
	    assert.ok(path instanceof FastPath);
	    return maybeAddParens(path, genericPrintNoParens(path, options, printPath));
	}

	function genericPrintNoParens(path, options, print) {
	    var n = path.getValue();

	    if (!n) {
	        return fromString("");
	    }

	    if (typeof n === "string") {
	        return fromString(n, options);
	    }

	    namedTypes.Printable.assert(n);

	    switch (n.type) {
	    case "File":
	        return path.call(print, "program");

	    case "Program":
	        return path.call(function(bodyPath) {
	            return printStatementSequence(bodyPath, options, print);
	        }, "body");

	    case "Noop": // Babel extension.
	    case "EmptyStatement":
	        return fromString("");

	    case "ExpressionStatement":
	        return concat([path.call(print, "expression"), ";"]);

	    case "ParenthesizedExpression": // Babel extension.
	        return concat(["(", path.call(print, "expression"), ")"]);

	    case "BinaryExpression":
	    case "LogicalExpression":
	    case "AssignmentExpression":
	        return fromString(" ").join([
	            path.call(print, "left"),
	            n.operator,
	            path.call(print, "right")
	        ]);

	    case "AssignmentPattern":
	        return concat([
	            path.call(print, "left"),
	            "=",
	            path.call(print, "right")
	        ]);

	    case "MemberExpression":
	        var parts = [path.call(print, "object")];

	        var property = path.call(print, "property");
	        if (n.computed) {
	            parts.push("[", property, "]");
	        } else {
	            parts.push(".", property);
	        }

	        return concat(parts);

	    case "MetaProperty":
	        return concat([
	            path.call(print, "meta"),
	            ".",
	            path.call(print, "property")
	        ]);

	    case "BindExpression":
	        var parts = [];

	        if (n.object) {
	            parts.push(path.call(print, "object"));
	        }

	        parts.push("::", path.call(print, "callee"));

	        return concat(parts);

	    case "Path":
	        return fromString(".").join(n.body);

	    case "Identifier":
	        return concat([
	            fromString(n.name, options),
	            path.call(print, "typeAnnotation")
	        ]);

	    case "SpreadElement":
	    case "SpreadElementPattern":
	    case "SpreadProperty":
	    case "SpreadPropertyPattern":
	    case "RestElement":
	        return concat(["...", path.call(print, "argument")]);

	    case "FunctionDeclaration":
	    case "FunctionExpression":
	        var parts = [];

	        if (n.async)
	            parts.push("async ");

	        parts.push("function");

	        if (n.generator)
	            parts.push("*");

	        if (n.id) {
	            parts.push(
	                " ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters")
	            );
	        }

	        parts.push(
	            "(",
	            printFunctionParams(path, options, print),
	            ")",
	            path.call(print, "returnType"),
	            " ",
	            path.call(print, "body")
	        );

	        return concat(parts);

	    case "ArrowFunctionExpression":
	        var parts = [];

	        if (n.async)
	            parts.push("async ");

	        if (n.params.length === 1 && !n.rest) {
	            parts.push(path.call(print, "params", 0));
	        } else {
	            parts.push(
	                "(",
	                printFunctionParams(path, options, print),
	                ")"
	            );
	        }

	        parts.push(" => ", path.call(print, "body"));

	        return concat(parts);

	    case "MethodDefinition":
	        var parts = [];

	        if (n.static) {
	            parts.push("static ");
	        }

	        parts.push(printMethod(path, options, print));

	        return concat(parts);

	    case "YieldExpression":
	        var parts = ["yield"];

	        if (n.delegate)
	            parts.push("*");

	        if (n.argument)
	            parts.push(" ", path.call(print, "argument"));

	        return concat(parts);

	    case "AwaitExpression":
	        var parts = ["await"];

	        if (n.all)
	            parts.push("*");

	        if (n.argument)
	            parts.push(" ", path.call(print, "argument"));

	        return concat(parts);

	    case "ModuleDeclaration":
	        var parts = ["module", path.call(print, "id")];

	        if (n.source) {
	            assert.ok(!n.body);
	            parts.push("from", path.call(print, "source"));
	        } else {
	            parts.push(path.call(print, "body"));
	        }

	        return fromString(" ").join(parts);

	    case "ImportSpecifier":
	        var parts = [];

	        if (n.imported) {
	            parts.push(path.call(print, "imported"));
	            if (n.local &&
	                n.local.name !== n.imported.name) {
	                parts.push(" as ", path.call(print, "local"));
	            }
	        } else if (n.id) {
	            parts.push(path.call(print, "id"));
	            if (n.name) {
	                parts.push(" as ", path.call(print, "name"));
	            }
	        }

	        return concat(parts);

	    case "ExportSpecifier":
	        var parts = [];

	        if (n.local) {
	            parts.push(path.call(print, "local"));
	            if (n.exported &&
	                n.exported.name !== n.local.name) {
	                parts.push(" as ", path.call(print, "exported"));
	            }
	        } else if (n.id) {
	            parts.push(path.call(print, "id"));
	            if (n.name) {
	                parts.push(" as ", path.call(print, "name"));
	            }
	        }

	        return concat(parts);

	    case "ExportBatchSpecifier":
	        return fromString("*");

	    case "ImportNamespaceSpecifier":
	        return concat(["* as ", path.call(print, "id")]);

	    case "ImportDefaultSpecifier":
	        return path.call(print, "id");

	    case "ExportDeclaration":
	        var parts = ["export"];

	        if (n["default"]) {
	            parts.push(" default");

	        } else if (n.specifiers &&
	                   n.specifiers.length > 0) {

	            if (n.specifiers.length === 1 &&
	                n.specifiers[0].type === "ExportBatchSpecifier") {
	                parts.push(" *");
	            } else {
	                parts.push(
	                    " { ",
	                    fromString(", ").join(path.map(print, "specifiers")),
	                    " }"
	                );
	            }

	            if (n.source)
	                parts.push(" from ", path.call(print, "source"));

	            parts.push(";");

	            return concat(parts);
	        }

	        if (n.declaration) {
	            var decLines = path.call(print, "declaration");
	            parts.push(" ", decLines);
	            if (lastNonSpaceCharacter(decLines) !== ";") {
	                parts.push(";");
	            }
	        }

	        return concat(parts);

	    case "ExportDefaultDeclaration":
	        return concat([
	            "export default ",
	            path.call(print, "declaration")
	        ]);

	    case "ExportNamedDeclaration":
	        var parts = ["export "];

	        if (n.declaration) {
	            parts.push(path.call(print, "declaration"));
	        }

	        if (n.specifiers &&
	            n.specifiers.length > 0) {
	            parts.push(
	                n.declaration ? ", {" : "{",
	                fromString(", ").join(path.map(print, "specifiers")),
	                "}"
	            );
	        }

	        if (n.source) {
	            parts.push(" from ", path.call(print, "source"));
	        }

	        return concat(parts);

	    case "ExportAllDeclaration":
	        var parts = ["export *"];

	        if (n.exported) {
	            parts.push(" as ", path.call(print, "exported"));
	        }

	        return concat([
	            " from ",
	            path.call(print, "source")
	        ]);

	    case "ExportNamespaceSpecifier":
	        return concat(["* as ", path.call(print, "exported")]);

	    case "ExportDefaultSpecifier":
	        return path.call(print, "exported");

	    case "ImportDeclaration":
	        var parts = ["import "];

	        if (n.specifiers &&
	            n.specifiers.length > 0) {

	            var foundImportSpecifier = false;

	            path.each(function(specifierPath) {
	                var i = specifierPath.getName();
	                if (i > 0) {
	                    parts.push(", ");
	                }

	                var value = specifierPath.getValue();

	                if (namedTypes.ImportDefaultSpecifier.check(value) ||
	                    namedTypes.ImportNamespaceSpecifier.check(value)) {
	                    assert.strictEqual(foundImportSpecifier, false);
	                } else {
	                    namedTypes.ImportSpecifier.assert(value);
	                    if (!foundImportSpecifier) {
	                        foundImportSpecifier = true;
	                        parts.push("{");
	                    }
	                }

	                parts.push(print(specifierPath));
	            }, "specifiers");

	            if (foundImportSpecifier) {
	                parts.push("}");
	            }

	            parts.push(" from ");
	        }

	        parts.push(path.call(print, "source"), ";");

	        return concat(parts);

	    case "BlockStatement":
	        var naked = path.call(function(bodyPath) {
	            return printStatementSequence(bodyPath, options, print);
	        }, "body");

	        if (naked.isEmpty()) {
	            return fromString("{}");
	        }

	        return concat([
	            "{\n",
	            naked.indent(options.tabWidth),
	            "\n}"
	        ]);

	    case "ReturnStatement":
	        var parts = ["return"];

	        if (n.argument) {
	            var argLines = path.call(print, "argument");
	            if (argLines.length > 1 &&
	                (namedTypes.XJSElement &&
	                 namedTypes.XJSElement.check(n.argument) ||
	                 namedTypes.JSXElement &&
	                 namedTypes.JSXElement.check(n.argument))) {
	                parts.push(
	                    " (\n",
	                    argLines.indent(options.tabWidth),
	                    "\n)"
	                );
	            } else {
	                parts.push(" ", argLines);
	            }
	        }

	        parts.push(";");

	        return concat(parts);

	    case "CallExpression":
	        return concat([
	            path.call(print, "callee"),
	            printArgumentsList(path, options, print)
	        ]);

	    case "ObjectExpression":
	    case "ObjectPattern":
	    case "ObjectTypeAnnotation":
	        var allowBreak = false;
	        var isTypeAnnotation = n.type === "ObjectTypeAnnotation";
	        var separator = isTypeAnnotation ? ';' : ',';
	        var fields = [];

	        if (isTypeAnnotation) {
	            fields.push("indexers", "callProperties");
	        }

	        fields.push("properties");

	        var len = 0;
	        fields.forEach(function(field) {
	            len += n[field].length;
	        });

	        var oneLine = (isTypeAnnotation && len === 1) || len === 0;
	        var parts = [oneLine ? "{" : "{\n"];

	        fields.forEach(function(field) {
	            path.map(function(childPath) {
	                var i = childPath.getName();
	                var lines = print(childPath);

	                if (!oneLine) {
	                    lines = lines.indent(options.tabWidth);
	                }

	                var multiLine = !isTypeAnnotation && lines.length > 1;
	                if (multiLine && allowBreak) {
	                    // Similar to the logic for BlockStatement.
	                    parts.push("\n");
	                }

	                parts.push(lines);

	                if (i < len - 1) {
	                    // Add an extra line break if the previous object property
	                    // had a multi-line value.
	                    parts.push(separator + (multiLine ? "\n\n" : "\n"));
	                    allowBreak = !multiLine;
	                } else if (len !== 1 && isTypeAnnotation) {
	                    parts.push(separator);
	                } else if (options.trailingComma) {
	                    parts.push(separator);
	                }
	            }, field);
	        });

	        parts.push(oneLine ? "}" : "\n}");

	        return concat(parts);

	    case "PropertyPattern":
	        return concat([
	            path.call(print, "key"),
	            ": ",
	            path.call(print, "pattern")
	        ]);

	    case "Property": // Non-standard AST node type.
	        if (n.method || n.kind === "get" || n.kind === "set") {
	            return printMethod(path, options, print);
	        }

	        var parts = [];

	        if (n.decorators) {
	            path.each(function(decoratorPath) {
	                parts.push(print(decoratorPath), "\n");
	            }, "decorators");
	        }

	        var key = path.call(print, "key");
	        if (n.computed) {
	            parts.push("[", key, "]");
	        } else {
	            parts.push(key);
	        }

	        if (! n.shorthand) {
	            parts.push(": ", path.call(print, "value"));
	        }

	        return concat(parts);

	    case "Decorator":
	        return concat(["@", path.call(print, "expression")]);

	    case "ArrayExpression":
	    case "ArrayPattern":
	        var elems = n.elements,
	            len = elems.length;

	        var printed = path.map(print, "elements");
	        var joined = fromString(", ").join(printed);
	        var oneLine = joined.getLineLength(1) <= options.wrapColumn;
	        var parts = [oneLine ? "[" : "[\n"];

	        path.each(function(elemPath) {
	            var i = elemPath.getName();
	            var elem = elemPath.getValue();
	            if (!elem) {
	                // If the array expression ends with a hole, that hole
	                // will be ignored by the interpreter, but if it ends with
	                // two (or more) holes, we need to write out two (or more)
	                // commas so that the resulting code is interpreted with
	                // both (all) of the holes.
	                parts.push(",");
	            } else {
	                var lines = printed[i];
	                if (oneLine) {
	                    if (i > 0)
	                        parts.push(" ");
	                } else {
	                    lines = lines.indent(options.tabWidth);
	                }
	                parts.push(lines);
	                if (i < len - 1 || (!oneLine && options.trailingComma))
	                    parts.push(",");
	                if (!oneLine)
	                    parts.push("\n");
	            }
	        }, "elements");

	        parts.push("]");

	        return concat(parts);

	    case "SequenceExpression":
	        return fromString(", ").join(path.map(print, "expressions"));

	    case "ThisExpression":
	        return fromString("this");

	    case "Super":
	        return fromString("super");

	    case "Literal":
	        if (typeof n.value !== "string")
	            return fromString(n.value, options);

	        return fromString(nodeStr(n.value, options), options);

	    case "ModuleSpecifier":
	        if (n.local) {
	            throw new Error(
	                "The ESTree ModuleSpecifier type should be abstract"
	            );
	        }

	        // The Esprima ModuleSpecifier type is just a string-valued
	        // Literal identifying the imported-from module.
	        return fromString(nodeStr(n.value, options), options);

	    case "UnaryExpression":
	        var parts = [n.operator];
	        if (/[a-z]$/.test(n.operator))
	            parts.push(" ");
	        parts.push(path.call(print, "argument"));
	        return concat(parts);

	    case "UpdateExpression":
	        var parts = [path.call(print, "argument"), n.operator];

	        if (n.prefix)
	            parts.reverse();

	        return concat(parts);

	    case "ConditionalExpression":
	        return concat([
	            "(", path.call(print, "test"),
	            " ? ", path.call(print, "consequent"),
	            " : ", path.call(print, "alternate"), ")"
	        ]);

	    case "NewExpression":
	        var parts = ["new ", path.call(print, "callee")];
	        var args = n.arguments;
	        if (args) {
	            parts.push(printArgumentsList(path, options, print));
	        }

	        return concat(parts);

	    case "VariableDeclaration":
	        var parts = [n.kind, " "];
	        var maxLen = 0;
	        var printed = path.map(function(childPath) {
	            var lines = print(childPath);
	            maxLen = Math.max(lines.length, maxLen);
	            return lines;
	        }, "declarations");

	        if (maxLen === 1) {
	            parts.push(fromString(", ").join(printed));
	        } else if (printed.length > 1 ) {
	            parts.push(
	                fromString(",\n").join(printed)
	                    .indentTail(n.kind.length + 1)
	            );
	        } else {
	            parts.push(printed[0]);
	        }

	        // We generally want to terminate all variable declarations with a
	        // semicolon, except when they are children of for loops.
	        var parentNode = path.getParentNode();
	        if (!namedTypes.ForStatement.check(parentNode) &&
	            !namedTypes.ForInStatement.check(parentNode) &&
	            !(namedTypes.ForOfStatement &&
	              namedTypes.ForOfStatement.check(parentNode))) {
	            parts.push(";");
	        }

	        return concat(parts);

	    case "VariableDeclarator":
	        return n.init ? fromString(" = ").join([
	            path.call(print, "id"),
	            path.call(print, "init")
	        ]) : path.call(print, "id");

	    case "WithStatement":
	        return concat([
	            "with (",
	            path.call(print, "object"),
	            ") ",
	            path.call(print, "body")
	        ]);

	    case "IfStatement":
	        var con = adjustClause(path.call(print, "consequent"), options),
	            parts = ["if (", path.call(print, "test"), ")", con];

	        if (n.alternate)
	            parts.push(
	                endsWithBrace(con) ? " else" : "\nelse",
	                adjustClause(path.call(print, "alternate"), options));

	        return concat(parts);

	    case "ForStatement":
	        // TODO Get the for (;;) case right.
	        var init = path.call(print, "init"),
	            sep = init.length > 1 ? ";\n" : "; ",
	            forParen = "for (",
	            indented = fromString(sep).join([
	                init,
	                path.call(print, "test"),
	                path.call(print, "update")
	            ]).indentTail(forParen.length),
	            head = concat([forParen, indented, ")"]),
	            clause = adjustClause(path.call(print, "body"), options),
	            parts = [head];

	        if (head.length > 1) {
	            parts.push("\n");
	            clause = clause.trimLeft();
	        }

	        parts.push(clause);

	        return concat(parts);

	    case "WhileStatement":
	        return concat([
	            "while (",
	            path.call(print, "test"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);

	    case "ForInStatement":
	        // Note: esprima can't actually parse "for each (".
	        return concat([
	            n.each ? "for each (" : "for (",
	            path.call(print, "left"),
	            " in ",
	            path.call(print, "right"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);

	    case "ForOfStatement":
	        return concat([
	            "for (",
	            path.call(print, "left"),
	            " of ",
	            path.call(print, "right"),
	            ")",
	            adjustClause(path.call(print, "body"), options)
	        ]);

	    case "DoWhileStatement":
	        var doBody = concat([
	            "do",
	            adjustClause(path.call(print, "body"), options)
	        ]), parts = [doBody];

	        if (endsWithBrace(doBody))
	            parts.push(" while");
	        else
	            parts.push("\nwhile");

	        parts.push(" (", path.call(print, "test"), ");");

	        return concat(parts);

	    case "DoExpression":
	        var statements = path.call(function(bodyPath) {
	            return printStatementSequence(bodyPath, options, print);
	        }, "body");

	        return concat([
	            "do {\n",
	            statements.indent(options.tabWidth),
	            "\n}"
	        ]);

	    case "BreakStatement":
	        var parts = ["break"];
	        if (n.label)
	            parts.push(" ", path.call(print, "label"));
	        parts.push(";");
	        return concat(parts);

	    case "ContinueStatement":
	        var parts = ["continue"];
	        if (n.label)
	            parts.push(" ", path.call(print, "label"));
	        parts.push(";");
	        return concat(parts);

	    case "LabeledStatement":
	        return concat([
	            path.call(print, "label"),
	            ":\n",
	            path.call(print, "body")
	        ]);

	    case "TryStatement":
	        var parts = [
	            "try ",
	            path.call(print, "block")
	        ];

	        if (n.handler) {
	            parts.push(" ", path.call(print, "handler"));
	        } else if (n.handlers) {
	            path.each(function(handlerPath) {
	                parts.push(" ", print(handlerPath));
	            }, "handlers");
	        }

	        if (n.finalizer) {
	            parts.push(" finally ", path.call(print, "finalizer"));
	        }

	        return concat(parts);

	    case "CatchClause":
	        var parts = ["catch (", path.call(print, "param")];

	        if (n.guard)
	            // Note: esprima does not recognize conditional catch clauses.
	            parts.push(" if ", path.call(print, "guard"));

	        parts.push(") ", path.call(print, "body"));

	        return concat(parts);

	    case "ThrowStatement":
	        return concat(["throw ", path.call(print, "argument"), ";"]);

	    case "SwitchStatement":
	        return concat([
	            "switch (",
	            path.call(print, "discriminant"),
	            ") {\n",
	            fromString("\n").join(path.map(print, "cases")),
	            "\n}"
	        ]);

	        // Note: ignoring n.lexical because it has no printing consequences.

	    case "SwitchCase":
	        var parts = [];

	        if (n.test)
	            parts.push("case ", path.call(print, "test"), ":");
	        else
	            parts.push("default:");

	        if (n.consequent.length > 0) {
	            parts.push("\n", path.call(function(consequentPath) {
	                return printStatementSequence(consequentPath, options, print);
	            }, "consequent").indent(options.tabWidth));
	        }

	        return concat(parts);

	    case "DebuggerStatement":
	        return fromString("debugger;");

	    // JSX extensions below.

	    case "XJSAttribute":
	    case "JSXAttribute":
	        var parts = [path.call(print, "name")];
	        if (n.value)
	            parts.push("=", path.call(print, "value"));
	        return concat(parts);

	    case "XJSIdentifier":
	    case "JSXIdentifier":
	        return fromString(n.name, options);

	    case "XJSNamespacedName":
	    case "JSXNamespacedName":
	        return fromString(":").join([
	            path.call(print, "namespace"),
	            path.call(print, "name")
	        ]);

	    case "XJSMemberExpression":
	    case "JSXMemberExpression":
	        return fromString(".").join([
	            path.call(print, "object"),
	            path.call(print, "property")
	        ]);

	    case "XJSSpreadAttribute":
	    case "JSXSpreadAttribute":
	        return concat(["{...", path.call(print, "argument"), "}"]);

	    case "XJSExpressionContainer":
	    case "JSXExpressionContainer":
	        return concat(["{", path.call(print, "expression"), "}"]);

	    case "XJSElement":
	    case "JSXElement":
	        var openingLines = path.call(print, "openingElement");

	        if (n.openingElement.selfClosing) {
	            assert.ok(!n.closingElement);
	            return openingLines;
	        }

	        var childLines = concat(
	            path.map(function(childPath) {
	                var child = childPath.getValue();

	                if (namedTypes.Literal.check(child) &&
	                    typeof child.value === "string") {
	                    if (/\S/.test(child.value)) {
	                        return child.value.replace(/^\s+|\s+$/g, "");
	                    } else if (/\n/.test(child.value)) {
	                        return "\n";
	                    }
	                }

	                return print(childPath);
	            }, "children")
	        ).indentTail(options.tabWidth);

	        var closingLines = path.call(print, "closingElement");

	        return concat([
	            openingLines,
	            childLines,
	            closingLines
	        ]);

	    case "XJSOpeningElement":
	    case "JSXOpeningElement":
	        var parts = ["<", path.call(print, "name")];
	        var attrParts = [];

	        path.each(function(attrPath) {
	            attrParts.push(" ", print(attrPath));
	        }, "attributes");

	        var attrLines = concat(attrParts);

	        var needLineWrap = (
	            attrLines.length > 1 ||
	            attrLines.getLineLength(1) > options.wrapColumn
	        );

	        if (needLineWrap) {
	            attrParts.forEach(function(part, i) {
	                if (part === " ") {
	                    assert.strictEqual(i % 2, 0);
	                    attrParts[i] = "\n";
	                }
	            });

	            attrLines = concat(attrParts).indentTail(options.tabWidth);
	        }

	        parts.push(attrLines, n.selfClosing ? " />" : ">");

	        return concat(parts);

	    case "XJSClosingElement":
	    case "JSXClosingElement":
	        return concat(["</", path.call(print, "name"), ">"]);

	    case "XJSText":
	    case "JSXText":
	        return fromString(n.value, options);

	    case "XJSEmptyExpression":
	    case "JSXEmptyExpression":
	        return fromString("");

	    case "TypeAnnotatedIdentifier":
	        return concat([
	            path.call(print, "annotation"),
	            " ",
	            path.call(print, "identifier")
	        ]);

	    case "ClassBody":
	        if (n.body.length === 0) {
	            return fromString("{}");
	        }

	        return concat([
	            "{\n",
	            path.call(function(bodyPath) {
	                return printStatementSequence(bodyPath, options, print);
	            }, "body").indent(options.tabWidth),
	            "\n}"
	        ]);

	    case "ClassPropertyDefinition":
	        var parts = ["static ", path.call(print, "definition")];
	        if (!namedTypes.MethodDefinition.check(n.definition))
	            parts.push(";");
	        return concat(parts);

	    case "ClassProperty":
	        return concat([
	            path.call(print, "key"),
	            path.call(print, "typeAnnotation"),
	            ";"
	        ]);

	    case "ClassDeclaration":
	    case "ClassExpression":
	        var parts = ["class"];

	        if (n.id) {
	            parts.push(
	                " ",
	                path.call(print, "id"),
	                path.call(print, "typeParameters")
	            );
	        }

	        if (n.superClass) {
	            parts.push(
	                " extends ",
	                path.call(print, "superClass"),
	                path.call(print, "superTypeParameters")
	            );
	        }

	        if (n["implements"]) {
	            parts.push(
	                " implements ",
	                fromString(", ").join(path.map(print, "implements"))
	            );
	        }

	        parts.push(" ", path.call(print, "body"));

	        return concat(parts);

	    // These types are unprintable because they serve as abstract
	    // supertypes for other (printable) types.
	    case "Node":
	    case "Printable":
	    case "SourceLocation":
	    case "Position":
	    case "Statement":
	    case "Function":
	    case "Pattern":
	    case "Expression":
	    case "Declaration":
	    case "Specifier":
	    case "NamedSpecifier":
	    case "Comment": // Supertype of Block and Line.
	    case "MemberTypeAnnotation": // Flow
	    case "TupleTypeAnnotation": // Flow
	    case "Type": // Flow
	        throw new Error("unprintable type: " + JSON.stringify(n.type));

	    case "Block": // Block comment.
	        return concat(["/*", fromString(n.value, options), "*/"]);

	    case "Line": // Line comment.
	        return concat(["//", fromString(n.value, options)]);

	    // Type Annotations for Facebook Flow, typically stripped out or
	    // transformed away before printing.
	    case "TypeAnnotation":
	        var parts = [];

	        if (n.typeAnnotation) {
	            if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
	                parts.push(": ");
	            }
	            parts.push(path.call(print, "typeAnnotation"));
	            return concat(parts);
	        }

	        return fromString("");

	    case "AnyTypeAnnotation":
	        return fromString("any", options);

	    case "MixedTypeAnnotation":
	        return fromString("mixed", options);

	    case "ArrayTypeAnnotation":
	        return concat([
	            path.call(print, "elementType"),
	            "[]"
	        ]);

	    case "BooleanTypeAnnotation":
	        return fromString("boolean", options);

	    case "BooleanLiteralTypeAnnotation":
	        assert.strictEqual(typeof n.value, "boolean");
	        return fromString("" + n.value, options);

	    case "DeclareClass":
	        return concat([
	            fromString("declare class ", options),
	            path.call(print, "id"),
	            " ",
	            path.call(print, "body"),
	        ]);

	    case "DeclareFunction":
	        return concat([
	            fromString("declare function ", options),
	            path.call(print, "id")
	        ]);

	    case "DeclareModule":
	        return concat([
	            fromString("declare module ", options),
	            path.call(print, "id"),
	            " ",
	            path.call(print, "body"),
	        ]);

	    case "DeclareVariable":
	        return concat([
	            fromString("declare var ", options),
	            path.call(print, "id")
	        ]);

	    case "FunctionTypeAnnotation":
	        // FunctionTypeAnnotation is ambiguous:
	        // declare function(a: B): void; OR
	        // var A: (a: B) => void;
	        var parts = [];
	        var parent = path.getParentNode(0);
	        var isArrowFunctionTypeAnnotation = !(
	            namedTypes.ObjectTypeCallProperty.check(parent) ||
	            namedTypes.DeclareFunction.check(path.getParentNode(2))
	        );

	        var needsColon =
	            isArrowFunctionTypeAnnotation &&
	            !namedTypes.FunctionTypeParam.check(parent);

	        if (needsColon) {
	            parts.push(": ");
	        }

	        parts.push(
	            "(",
	            fromString(", ").join(path.map(print, "params")),
	            ")"
	        );

	        // The returnType is not wrapped in a TypeAnnotation, so the colon
	        // needs to be added separately.
	        if (n.returnType) {
	            parts.push(
	                isArrowFunctionTypeAnnotation ? " => " : ": ",
	                path.call(print, "returnType")
	            );
	        }

	        return concat(parts);

	    case "FunctionTypeParam":
	        return concat([
	            path.call(print, "name"),
	            ": ",
	            path.call(print, "typeAnnotation"),
	        ]);

	    case "GenericTypeAnnotation":
	        return concat([
	            path.call(print, "id"),
	            path.call(print, "typeParameters")
	        ]);

	    case "InterfaceDeclaration":
	        var parts = [
	            fromString("interface ", options),
	            path.call(print, "id"),
	            path.call(print, "typeParameters"),
	            " "
	        ];

	        if (n["extends"]) {
	            parts.push(
	                "extends ",
	                fromString(", ").join(path.map(print, "extends"))
	            );
	        }

	        parts.push(path.call(print, "body"));

	        return concat(parts);

	    case "ClassImplements":
	    case "InterfaceExtends":
	        return concat([
	            path.call(print, "id"),
	            path.call(print, "typeParameters")
	        ]);

	    case "IntersectionTypeAnnotation":
	        return fromString(" & ").join(path.map(print, "types"));

	    case "NullableTypeAnnotation":
	        return concat([
	            "?",
	            path.call(print, "typeAnnotation")
	        ]);

	    case "NumberTypeAnnotation":
	        return fromString("number", options);

	    case "ObjectTypeCallProperty":
	        return path.call(print, "value");

	    case "ObjectTypeIndexer":
	        return concat([
	            "[",
	            path.call(print, "id"),
	            ": ",
	            path.call(print, "key"),
	            "]: ",
	            path.call(print, "value")
	        ]);

	    case "ObjectTypeProperty":
	        return concat([
	            path.call(print, "key"),
	            ": ",
	            path.call(print, "value")
	        ]);

	    case "QualifiedTypeIdentifier":
	        return concat([
	            path.call(print, "qualification"),
	            ".",
	            path.call(print, "id")
	        ]);

	    case "StringLiteralTypeAnnotation":
	        return fromString(nodeStr(n.value, options), options);

	    case "NumberLiteralTypeAnnotation":
	        assert.strictEqual(typeof n.value, "number");
	        return fromString("" + n.value, options);

	    case "StringTypeAnnotation":
	        return fromString("string", options);

	    case "TypeAlias":
	        return concat([
	            "type ",
	            path.call(print, "id"),
	            " = ",
	            path.call(print, "right")
	        ]);

	    case "TypeCastExpression":
	        return concat([
	            "(",
	            path.call(print, "expression"),
	            path.call(print, "typeAnnotation"),
	            ")"
	        ]);

	    case "TypeParameterDeclaration":
	    case "TypeParameterInstantiation":
	        return concat([
	            "<",
	            fromString(", ").join(path.map(print, "params")),
	            ">"
	        ]);

	    case "TypeofTypeAnnotation":
	        return concat([
	            fromString("typeof ", options),
	            path.call(print, "argument")
	        ]);

	    case "UnionTypeAnnotation":
	        return fromString(" | ").join(path.map(print, "types"));

	    case "VoidTypeAnnotation":
	        return fromString("void", options);

	    // Unhandled types below. If encountered, nodes of these types should
	    // be either left alone or desugared into AST types that are fully
	    // supported by the pretty-printer.
	    case "ClassHeritage": // TODO
	    case "ComprehensionBlock": // TODO
	    case "ComprehensionExpression": // TODO
	    case "Glob": // TODO
	    case "TaggedTemplateExpression": // TODO
	    case "TemplateElement": // TODO
	    case "TemplateLiteral": // TODO
	    case "GeneratorExpression": // TODO
	    case "LetStatement": // TODO
	    case "LetExpression": // TODO
	    case "GraphExpression": // TODO
	    case "GraphIndexExpression": // TODO

	    // XML types that nobody cares about or needs to print.
	    case "XMLDefaultDeclaration":
	    case "XMLAnyName":
	    case "XMLQualifiedIdentifier":
	    case "XMLFunctionQualifiedIdentifier":
	    case "XMLAttributeSelector":
	    case "XMLFilterExpression":
	    case "XML":
	    case "XMLElement":
	    case "XMLList":
	    case "XMLEscape":
	    case "XMLText":
	    case "XMLStartTag":
	    case "XMLEndTag":
	    case "XMLPointTag":
	    case "XMLName":
	    case "XMLAttribute":
	    case "XMLCdata":
	    case "XMLComment":
	    case "XMLProcessingInstruction":
	    default:
	        debugger;
	        throw new Error("unknown type: " + JSON.stringify(n.type));
	    }

	    return p;
	}

	function printStatementSequence(path, options, print) {
	    var inClassBody =
	        namedTypes.ClassBody &&
	        namedTypes.ClassBody.check(path.getParentNode());

	    var filtered = [];
	    var sawComment = false;
	    var sawStatement = false;

	    path.each(function(stmtPath) {
	        var i = stmtPath.getName();
	        var stmt = stmtPath.getValue();

	        // Just in case the AST has been modified to contain falsy
	        // "statements," it's safer simply to skip them.
	        if (!stmt) {
	            return;
	        }

	        // Skip printing EmptyStatement nodes to avoid leaving stray
	        // semicolons lying around.
	        if (stmt.type === "EmptyStatement") {
	            return;
	        }

	        if (namedTypes.Comment.check(stmt)) {
	            // The pretty printer allows a dangling Comment node to act as
	            // a Statement when the Comment can't be attached to any other
	            // non-Comment node in the tree.
	            sawComment = true;
	        } else if (!inClassBody) {
	            namedTypes.Statement.assert(stmt);
	            sawStatement = true;
	        }

	        // We can't hang onto stmtPath outside of this function, because
	        // it's just a reference to a mutable FastPath object, so we have
	        // to go ahead and print it here.
	        filtered.push({
	            node: stmt,
	            printed: print(stmtPath)
	        });
	    });

	    if (sawComment) {
	        assert.strictEqual(
	            sawStatement, false,
	            "Comments may appear as statements in otherwise empty statement " +
	                "lists, but may not coexist with non-Comment nodes."
	        );
	    }

	    var prevTrailingSpace = null;
	    var len = filtered.length;
	    var parts = [];

	    filtered.forEach(function(info, i) {
	        var printed = info.printed;
	        var stmt = info.node;
	        var multiLine = printed.length > 1;
	        var notFirst = i > 0;
	        var notLast = i < len - 1;
	        var leadingSpace;
	        var trailingSpace;

	        var trueLoc = options.reuseWhitespace && util.getTrueLoc(stmt);
	        var lines = trueLoc && trueLoc.lines;

	        if (notFirst) {
	            if (lines) {
	                var beforeStart = lines.skipSpaces(trueLoc.start, true);
	                var beforeStartLine = beforeStart ? beforeStart.line : 1;
	                var leadingGap = trueLoc.start.line - beforeStartLine;
	                leadingSpace = Array(leadingGap + 1).join("\n");
	            } else {
	                leadingSpace = multiLine ? "\n\n" : "\n";
	            }
	        } else {
	            leadingSpace = "";
	        }

	        if (notLast) {
	            if (lines) {
	                var afterEnd = lines.skipSpaces(trueLoc.end);
	                var afterEndLine = afterEnd ? afterEnd.line : lines.length;
	                var trailingGap = afterEndLine - trueLoc.end.line;
	                trailingSpace = Array(trailingGap + 1).join("\n");
	            } else {
	                trailingSpace = multiLine ? "\n\n" : "\n";
	            }
	        } else {
	            trailingSpace = "";
	        }

	        parts.push(
	            maxSpace(prevTrailingSpace, leadingSpace),
	            printed
	        );

	        if (notLast) {
	            prevTrailingSpace = trailingSpace;
	        } else if (trailingSpace) {
	            parts.push(trailingSpace);
	        }
	    });

	    return concat(parts);
	}

	function maxSpace(s1, s2) {
	    if (!s1 && !s2) {
	        return fromString("");
	    }

	    if (!s1) {
	        return fromString(s2);
	    }

	    if (!s2) {
	        return fromString(s1);
	    }

	    var spaceLines1 = fromString(s1);
	    var spaceLines2 = fromString(s2);

	    if (spaceLines2.length > spaceLines1.length) {
	        return spaceLines2;
	    }

	    return spaceLines1;
	}

	function printMethod(path, options, print) {
	    var node = path.getNode();
	    var kind = node.kind;
	    var parts = [];

	    namedTypes.FunctionExpression.assert(node.value);

	    if (node.decorators) {
	        path.each(function(decoratorPath) {
	            parts.push(print(decoratorPath), "\n");
	        }, "decorators");
	    }

	    if (node.value.async) {
	        parts.push("async ");
	    }

	    if (!kind || kind === "init") {
	        if (node.value.generator) {
	            parts.push("*");
	        }
	    } else {
	        assert.ok(kind === "get" || kind === "set");
	        parts.push(kind, " ");
	    }

	    var key = path.call(print, "key");
	    if (node.computed) {
	        key = concat(["[", key, "]"]);
	    }

	    parts.push(
	        key,
	        path.call(print, "value", "typeParameters"),
	        "(",
	        path.call(function(valuePath) {
	            return printFunctionParams(valuePath, options, print);
	        }, "value"),
	        ")",
	        path.call(print, "value", "returnType"),
	        " ",
	        path.call(print, "value", "body")
	    );

	    return concat(parts);
	}

	function printArgumentsList(path, options, print) {
	    var printed = path.map(print, "arguments");

	    var joined = fromString(", ").join(printed);
	    if (joined.getLineLength(1) > options.wrapColumn) {
	        joined = fromString(",\n").join(printed);
	        return concat([
	            "(\n",
	            joined.indent(options.tabWidth),
	            options.trailingComma ? ",\n)" : "\n)"
	        ]);
	    }

	    return concat(["(", joined, ")"]);
	}

	function printFunctionParams(path, options, print) {
	    var fun = path.getValue();
	    namedTypes.Function.assert(fun);

	    var printed = path.map(print, "params");

	    if (fun.defaults) {
	        path.each(function(defExprPath) {
	            var i = defExprPath.getName();
	            var p = printed[i];
	            if (p && defExprPath.getValue()) {
	                printed[i] = concat([p, "=", print(defExprPath)]);
	            }
	        }, "defaults");
	    }

	    if (fun.rest) {
	        printed.push(concat(["...", path.call(print, "rest")]));
	    }

	    var joined = fromString(", ").join(printed);
	    if (joined.length > 1 ||
	        joined.getLineLength(1) > options.wrapColumn) {
	        joined = fromString(",\n").join(printed);
	        if (options.trailingComma && !fun.rest) {
	            joined = concat([joined, ",\n"]);
	        }
	        return concat(["\n", joined.indent(options.tabWidth)]);
	    }

	    return joined;
	}

	function adjustClause(clause, options) {
	    if (clause.length > 1)
	        return concat([" ", clause]);

	    return concat([
	        "\n",
	        maybeAddSemicolon(clause).indent(options.tabWidth)
	    ]);
	}

	function lastNonSpaceCharacter(lines) {
	    var pos = lines.lastPos();
	    do {
	        var ch = lines.charAt(pos);
	        if (/\S/.test(ch))
	            return ch;
	    } while (lines.prevPos(pos));
	}

	function endsWithBrace(lines) {
	    return lastNonSpaceCharacter(lines) === "}";
	}

	function swapQuotes(str) {
	    return str.replace(/['"]/g, function(m) {
	        return m === '"' ? '\'' : '"';
	    });
	}

	function nodeStr(str, options) {
	    isString.assert(str);
	    switch (options.quote) {
	    case "auto":
	        var double = JSON.stringify(str);
	        var single = swapQuotes(JSON.stringify(swapQuotes(str)));
	        return double.length > single.length ? single : double;
	    case "single":
	        return swapQuotes(JSON.stringify(swapQuotes(str)));
	    case "double":
	    default:
	        return JSON.stringify(str);
	    }
	}

	function maybeAddSemicolon(lines) {
	    var eoc = lastNonSpaceCharacter(lines);
	    if (!eoc || "\n};".indexOf(eoc) < 0)
	        return concat([lines, ";"]);
	    return lines;
	}

	},{"./comments":478,"./fast-path":479,"./lines":480,"./options":482,"./patcher":484,"./types":486,"./util":487,"assert":1,"source-map":518}],486:[function(require,module,exports){
	// This module was originally created so that Recast could add its own
	// custom types to the AST type system (in particular, the File type), but
	// those types are now incorporated into ast-types, so this module doesn't
	// have much to do anymore. Still, it might prove useful in the future.
	module.exports = require("ast-types");

	},{"ast-types":504}],487:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var getFieldValue = types.getFieldValue;
	var n = types.namedTypes;
	var sourceMap = require("source-map");
	var SourceMapConsumer = sourceMap.SourceMapConsumer;
	var SourceMapGenerator = sourceMap.SourceMapGenerator;
	var hasOwn = Object.prototype.hasOwnProperty;

	function getUnionOfKeys() {
	    var result = {};
	    var argc = arguments.length;
	    for (var i = 0; i < argc; ++i) {
	        var keys = Object.keys(arguments[i]);
	        var keyCount = keys.length;
	        for (var j = 0; j < keyCount; ++j) {
	            result[keys[j]] = true;
	        }
	    }
	    return result;
	}
	exports.getUnionOfKeys = getUnionOfKeys;

	function comparePos(pos1, pos2) {
	    return (pos1.line - pos2.line) || (pos1.column - pos2.column);
	}
	exports.comparePos = comparePos;

	function copyPos(pos) {
	    return {
	        line: pos.line,
	        column: pos.column
	    };
	}
	exports.copyPos = copyPos;

	exports.composeSourceMaps = function(formerMap, latterMap) {
	    if (formerMap) {
	        if (!latterMap) {
	            return formerMap;
	        }
	    } else {
	        return latterMap || null;
	    }

	    var smcFormer = new SourceMapConsumer(formerMap);
	    var smcLatter = new SourceMapConsumer(latterMap);
	    var smg = new SourceMapGenerator({
	        file: latterMap.file,
	        sourceRoot: latterMap.sourceRoot
	    });

	    var sourcesToContents = {};

	    smcLatter.eachMapping(function(mapping) {
	        var origPos = smcFormer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	        });

	        var sourceName = origPos.source;
	        if (sourceName === null) {
	            return;
	        }

	        smg.addMapping({
	            source: sourceName,
	            original: copyPos(origPos),
	            generated: {
	                line: mapping.generatedLine,
	                column: mapping.generatedColumn
	            },
	            name: mapping.name
	        });

	        var sourceContent = smcFormer.sourceContentFor(sourceName);
	        if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {
	            sourcesToContents[sourceName] = sourceContent;
	            smg.setSourceContent(sourceName, sourceContent);
	        }
	    });

	    return smg.toJSON();
	};

	exports.getTrueLoc = function(node) {
	    // It's possible that node is newly-created (not parsed by Esprima),
	    // in which case it probably won't have a .loc property (or an
	    // .original property for that matter). That's fine; we'll just
	    // pretty-print it as usual.
	    if (!node.loc) {
	        return null;
	    }

	    if (!node.comments) {
	        // If the node has no comments, regard node.loc as true.
	        return node.loc;
	    }

	    var start = node.loc.start;
	    var end = node.loc.end;

	    // If the node has any comments, their locations might contribute to
	    // the true start/end positions of the node.
	    node.comments.forEach(function(comment) {
	        if (comment.loc) {
	            if (comparePos(comment.loc.start, start) < 0) {
	                start = comment.loc.start;
	            }

	            if (comparePos(end, comment.loc.end) < 0) {
	                end = comment.loc.end;
	            }
	        }
	    });

	    return {
	        lines: node.loc.lines,
	        start: start,
	        end: end
	    };
	};

	exports.fixFaultyLocations = function(node) {
	    if ((n.MethodDefinition && n.MethodDefinition.check(node)) ||
	        (n.Property.check(node) && (node.method || node.shorthand))) {
	        // If the node is a MethodDefinition or a .method or .shorthand
	        // Property, then the location information stored in
	        // node.value.loc is very likely untrustworthy (just the {body}
	        // part of a method, or nothing in the case of shorthand
	        // properties), so we null out that information to prevent
	        // accidental reuse of bogus source code during reprinting.
	        node.value.loc = null;

	        if (n.FunctionExpression.check(node.value)) {
	            // FunctionExpression method values should be anonymous,
	            // because their .id fields are ignored anyway.
	            node.value.id = null;
	        }
	    }

	    var loc = node.loc;
	    if (loc) {
	        if (loc.start.line < 1) {
	            loc.start.line = 1;
	        }

	        if (loc.end.line < 1) {
	            loc.end.line = 1;
	        }
	    }
	};

	},{"./types":486,"assert":1,"source-map":518}],488:[function(require,module,exports){
	(function (process){
	var types = require("./lib/types");
	var parse = require("./lib/parser").parse;
	var Printer = require("./lib/printer").Printer;

	function print(node, options) {
	    return new Printer(options).print(node);
	}

	function prettyPrint(node, options) {
	    return new Printer(options).printGenerically(node);
	}

	function run(transformer, options) {
	    return runFile(process.argv[2], transformer, options);
	}

	function runFile(path, transformer, options) {
	    require("fs").readFile(path, "utf-8", function(err, code) {
	        if (err) {
	            console.error(err);
	            return;
	        }

	        runString(code, transformer, options);
	    });
	}

	function defaultWriteback(output) {
	    process.stdout.write(output);
	}

	function runString(code, transformer, options) {
	    var writeback = options && options.writeback || defaultWriteback;
	    transformer(parse(code, options), function(node) {
	        writeback(print(node, options).code);
	    });
	}

	Object.defineProperties(exports, {
	    /**
	     * Parse a string of code into an augmented syntax tree suitable for
	     * arbitrary modification and reprinting.
	     */
	    parse: {
	        enumerable: true,
	        value: parse
	    },

	    /**
	     * Traverse and potentially modify an abstract syntax tree using a
	     * convenient visitor syntax:
	     *
	     *   recast.visit(ast, {
	     *     names: [],
	     *     visitIdentifier: function(path) {
	     *       var node = path.value;
	     *       this.visitor.names.push(node.name);
	     *       this.traverse(path);
	     *     }
	     *   });
	     */
	    visit: {
	        enumerable: true,
	        value: types.visit
	    },

	    /**
	     * Reprint a modified syntax tree using as much of the original source
	     * code as possible.
	     */
	    print: {
	        enumerable: true,
	        value: print
	    },

	    /**
	     * Print without attempting to reuse any original source code.
	     */
	    prettyPrint: {
	        enumerable: false,
	        value: prettyPrint
	    },

	    /**
	     * Customized version of require("ast-types").
	     */
	    types: {
	        enumerable: false,
	        value: types
	    },

	    /**
	     * Convenient command-line interface (see e.g. example/add-braces).
	     */
	    run: {
	        enumerable: false,
	        value: run
	    }
	});

	}).call(this,require('_process'))
	},{"./lib/parser":483,"./lib/printer":485,"./lib/types":486,"_process":14,"fs":4}],489:[function(require,module,exports){
	require("./es7");

	var types = require("../lib/types");
	var defaults = require("../lib/shared").defaults;
	var def = types.Type.def;
	var or = types.Type.or;

	def("Noop")
	  .bases("Node")
	  .build();

	def("DoExpression")
	  .bases("Expression")
	  .build("body")
	  .field("body", [def("Statement")]);

	def("Super")
	  .bases("Expression")
	  .build();

	def("BindExpression")
	  .bases("Expression")
	  .build("object", "callee")
	  .field("object", or(def("Expression"), null))
	  .field("callee", def("Expression"));

	def("Decorator")
	  .bases("Node")
	  .build("expression")
	  .field("expression", def("Expression"));

	def("Property")
	  .field("decorators",
	         or([def("Decorator")], null),
	         defaults["null"]);

	def("MethodDefinition")
	  .field("decorators",
	         or([def("Decorator")], null),
	         defaults["null"]);

	def("MetaProperty")
	  .bases("Expression")
	  .build("meta", "property")
	  .field("meta", def("Identifier"))
	  .field("property", def("Identifier"));

	def("ParenthesizedExpression")
	  .bases("Expression")
	  .build("expression")
	  .field("expression", def("Expression"));

	def("ModuleSpecifier")
	  .bases("Specifier")
	  .field("local", def("Identifier"));

	def("ImportSpecifier")
	  .bases("ModuleSpecifier")
	  .build("imported", "local")
	  .field("imported", def("Identifier"));

	def("ImportDefaultSpecifier")
	  .bases("ModuleSpecifier")
	  .build("local");

	def("ImportNamespaceSpecifier")
	  .bases("ModuleSpecifier")
	  .build("local");

	def("ExportDefaultDeclaration")
	  .bases("Declaration")
	  .build("declaration")
	  .field("declaration", or(def("Declaration"), def("Expression")));

	def("ExportNamedDeclaration")
	  .bases("Declaration")
	  .build("declaration", "specifiers", "source")
	  .field("declaration", or(def("Declaration"), null))
	  .field("specifiers", [def("ExportSpecifier")], defaults.emptyArray)
	  .field("source", or(def("Literal"), null), defaults["null"]);

	def("ExportSpecifier")
	  .bases("ModuleSpecifier")
	  .build("local", "exported")
	  .field("exported", def("Identifier"));

	def("ExportNamespaceSpecifier")
	  .bases("Specifier")
	  .build("exported")
	  .field("exported", def("Identifier"));

	def("ExportDefaultSpecifier")
	  .bases("Specifier")
	  .build("exported")
	  .field("exported", def("Identifier"));

	def("ExportAllDeclaration")
	  .bases("Declaration")
	  .build("exported", "source")
	  .field("exported", or(def("Identifier"), null))
	  .field("source", def("Literal"));

	},{"../lib/shared":502,"../lib/types":503,"./es7":493}],490:[function(require,module,exports){
	var types = require("../lib/types");
	var Type = types.Type;
	var def = Type.def;
	var or = Type.or;
	var shared = require("../lib/shared");
	var defaults = shared.defaults;
	var geq = shared.geq;

	// Abstract supertype of all syntactic entities that are allowed to have a
	// .loc field.
	def("Printable")
	    .field("loc", or(
	        def("SourceLocation"),
	        null
	    ), defaults["null"], true);

	def("Node")
	    .bases("Printable")
	    .field("type", String)
	    .field("comments", or(
	        [def("Comment")],
	        null
	    ), defaults["null"], true);

	def("SourceLocation")
	    .build("start", "end", "source")
	    .field("start", def("Position"))
	    .field("end", def("Position"))
	    .field("source", or(String, null), defaults["null"]);

	def("Position")
	    .build("line", "column")
	    .field("line", geq(1))
	    .field("column", geq(0));

	def("File")
	    .bases("Node")
	    .build("program")
	    .field("program", def("Program"));

	def("Program")
	    .bases("Node")
	    .build("body")
	    .field("body", [def("Statement")]);

	def("Function")
	    .bases("Node")
	    .field("id", or(def("Identifier"), null), defaults["null"])
	    .field("params", [def("Pattern")])
	    .field("body", def("BlockStatement"));

	def("Statement").bases("Node");

	// The empty .build() here means that an EmptyStatement can be constructed
	// (i.e. it's not abstract) but that it needs no arguments.
	def("EmptyStatement").bases("Statement").build();

	def("BlockStatement")
	    .bases("Statement")
	    .build("body")
	    .field("body", [def("Statement")]);

	// TODO Figure out how to silently coerce Expressions to
	// ExpressionStatements where a Statement was expected.
	def("ExpressionStatement")
	    .bases("Statement")
	    .build("expression")
	    .field("expression", def("Expression"));

	def("IfStatement")
	    .bases("Statement")
	    .build("test", "consequent", "alternate")
	    .field("test", def("Expression"))
	    .field("consequent", def("Statement"))
	    .field("alternate", or(def("Statement"), null), defaults["null"]);

	def("LabeledStatement")
	    .bases("Statement")
	    .build("label", "body")
	    .field("label", def("Identifier"))
	    .field("body", def("Statement"));

	def("BreakStatement")
	    .bases("Statement")
	    .build("label")
	    .field("label", or(def("Identifier"), null), defaults["null"]);

	def("ContinueStatement")
	    .bases("Statement")
	    .build("label")
	    .field("label", or(def("Identifier"), null), defaults["null"]);

	def("WithStatement")
	    .bases("Statement")
	    .build("object", "body")
	    .field("object", def("Expression"))
	    .field("body", def("Statement"));

	def("SwitchStatement")
	    .bases("Statement")
	    .build("discriminant", "cases", "lexical")
	    .field("discriminant", def("Expression"))
	    .field("cases", [def("SwitchCase")])
	    .field("lexical", Boolean, defaults["false"]);

	def("ReturnStatement")
	    .bases("Statement")
	    .build("argument")
	    .field("argument", or(def("Expression"), null));

	def("ThrowStatement")
	    .bases("Statement")
	    .build("argument")
	    .field("argument", def("Expression"));

	def("TryStatement")
	    .bases("Statement")
	    .build("block", "handler", "finalizer")
	    .field("block", def("BlockStatement"))
	    .field("handler", or(def("CatchClause"), null), function() {
	        return this.handlers && this.handlers[0] || null;
	    })
	    .field("handlers", [def("CatchClause")], function() {
	        return this.handler ? [this.handler] : [];
	    }, true) // Indicates this field is hidden from eachField iteration.
	    .field("guardedHandlers", [def("CatchClause")], defaults.emptyArray)
	    .field("finalizer", or(def("BlockStatement"), null), defaults["null"]);

	def("CatchClause")
	    .bases("Node")
	    .build("param", "guard", "body")
	    .field("param", def("Pattern"))
	    .field("guard", or(def("Expression"), null), defaults["null"])
	    .field("body", def("BlockStatement"));

	def("WhileStatement")
	    .bases("Statement")
	    .build("test", "body")
	    .field("test", def("Expression"))
	    .field("body", def("Statement"));

	def("DoWhileStatement")
	    .bases("Statement")
	    .build("body", "test")
	    .field("body", def("Statement"))
	    .field("test", def("Expression"));

	def("ForStatement")
	    .bases("Statement")
	    .build("init", "test", "update", "body")
	    .field("init", or(
	        def("VariableDeclaration"),
	        def("Expression"),
	        null))
	    .field("test", or(def("Expression"), null))
	    .field("update", or(def("Expression"), null))
	    .field("body", def("Statement"));

	def("ForInStatement")
	    .bases("Statement")
	    .build("left", "right", "body")
	    .field("left", or(
	        def("VariableDeclaration"),
	        def("Expression")))
	    .field("right", def("Expression"))
	    .field("body", def("Statement"));

	def("DebuggerStatement").bases("Statement").build();

	def("Declaration").bases("Statement");

	def("FunctionDeclaration")
	    .bases("Function", "Declaration")
	    .build("id", "params", "body")
	    .field("id", def("Identifier"));

	def("FunctionExpression")
	    .bases("Function", "Expression")
	    .build("id", "params", "body");

	def("VariableDeclaration")
	    .bases("Declaration")
	    .build("kind", "declarations")
	    .field("kind", or("var", "let", "const"))
	    .field("declarations", [def("VariableDeclarator")]);

	def("VariableDeclarator")
	    .bases("Node")
	    .build("id", "init")
	    .field("id", def("Pattern"))
	    .field("init", or(def("Expression"), null));

	// TODO Are all Expressions really Patterns?
	def("Expression").bases("Node", "Pattern");

	def("ThisExpression").bases("Expression").build();

	def("ArrayExpression")
	    .bases("Expression")
	    .build("elements")
	    .field("elements", [or(def("Expression"), null)]);

	def("ObjectExpression")
	    .bases("Expression")
	    .build("properties")
	    .field("properties", [def("Property")]);

	// TODO Not in the Mozilla Parser API, but used by Esprima.
	def("Property")
	    .bases("Node") // Want to be able to visit Property Nodes.
	    .build("kind", "key", "value")
	    .field("kind", or("init", "get", "set"))
	    .field("key", or(def("Literal"), def("Identifier")))
	    .field("value", def("Expression"));

	def("SequenceExpression")
	    .bases("Expression")
	    .build("expressions")
	    .field("expressions", [def("Expression")]);

	var UnaryOperator = or(
	    "-", "+", "!", "~",
	    "typeof", "void", "delete");

	def("UnaryExpression")
	    .bases("Expression")
	    .build("operator", "argument", "prefix")
	    .field("operator", UnaryOperator)
	    .field("argument", def("Expression"))
	    // Esprima doesn't bother with this field, presumably because it's
	    // always true for unary operators.
	    .field("prefix", Boolean, defaults["true"]);

	var BinaryOperator = or(
	    "==", "!=", "===", "!==",
	    "<", "<=", ">", ">=",
	    "<<", ">>", ">>>",
	    "+", "-", "*", "/", "%",
	    "&", // TODO Missing from the Parser API.
	    "|", "^", "in",
	    "instanceof", "..");

	def("BinaryExpression")
	    .bases("Expression")
	    .build("operator", "left", "right")
	    .field("operator", BinaryOperator)
	    .field("left", def("Expression"))
	    .field("right", def("Expression"));

	var AssignmentOperator = or(
	    "=", "+=", "-=", "*=", "/=", "%=",
	    "<<=", ">>=", ">>>=",
	    "|=", "^=", "&=");

	def("AssignmentExpression")
	    .bases("Expression")
	    .build("operator", "left", "right")
	    .field("operator", AssignmentOperator)
	    .field("left", def("Pattern"))
	    .field("right", def("Expression"));

	var UpdateOperator = or("++", "--");

	def("UpdateExpression")
	    .bases("Expression")
	    .build("operator", "argument", "prefix")
	    .field("operator", UpdateOperator)
	    .field("argument", def("Expression"))
	    .field("prefix", Boolean);

	var LogicalOperator = or("||", "&&");

	def("LogicalExpression")
	    .bases("Expression")
	    .build("operator", "left", "right")
	    .field("operator", LogicalOperator)
	    .field("left", def("Expression"))
	    .field("right", def("Expression"));

	def("ConditionalExpression")
	    .bases("Expression")
	    .build("test", "consequent", "alternate")
	    .field("test", def("Expression"))
	    .field("consequent", def("Expression"))
	    .field("alternate", def("Expression"));

	def("NewExpression")
	    .bases("Expression")
	    .build("callee", "arguments")
	    .field("callee", def("Expression"))
	    // The Mozilla Parser API gives this type as [or(def("Expression"),
	    // null)], but null values don't really make sense at the call site.
	    // TODO Report this nonsense.
	    .field("arguments", [def("Expression")]);

	def("CallExpression")
	    .bases("Expression")
	    .build("callee", "arguments")
	    .field("callee", def("Expression"))
	    // See comment for NewExpression above.
	    .field("arguments", [def("Expression")]);

	def("MemberExpression")
	    .bases("Expression")
	    .build("object", "property", "computed")
	    .field("object", def("Expression"))
	    .field("property", or(def("Identifier"), def("Expression")))
	    .field("computed", Boolean, defaults["false"]);

	def("Pattern").bases("Node");

	def("SwitchCase")
	    .bases("Node")
	    .build("test", "consequent")
	    .field("test", or(def("Expression"), null))
	    .field("consequent", [def("Statement")]);

	def("Identifier")
	    // But aren't Expressions and Patterns already Nodes? TODO Report this.
	    .bases("Node", "Expression", "Pattern")
	    .build("name")
	    .field("name", String);

	def("Literal")
	    // But aren't Expressions already Nodes? TODO Report this.
	    .bases("Node", "Expression")
	    .build("value")
	    .field("value", or(String, Boolean, null, Number, RegExp))
	    .field("regex", or({
	        pattern: String,
	        flags: String
	    }, null), function() {
	        if (this.value instanceof RegExp) {
	            var flags = "";

	            if (this.value.ignoreCase) flags += "i";
	            if (this.value.multiline) flags += "m";
	            if (this.value.global) flags += "g";

	            return {
	                pattern: this.value.source,
	                flags: flags
	            };
	        }

	        return null;
	    });

	// Abstract (non-buildable) comment supertype. Not a Node.
	def("Comment")
	    .bases("Printable")
	    .field("value", String)
	    // A .leading comment comes before the node, whereas a .trailing
	    // comment comes after it. These two fields should not both be true,
	    // but they might both be false when the comment falls inside a node
	    // and the node has no children for the comment to lead or trail,
	    // e.g. { /*dangling*/ }.
	    .field("leading", Boolean, defaults["true"])
	    .field("trailing", Boolean, defaults["false"]);

	// Block comment. The .type really should be BlockComment rather than
	// Block, but that's what we're stuck with for now.
	def("Block")
	    .bases("Comment")
	    .build("value", /*optional:*/ "leading", "trailing");

	// Single line comment. The .type really should be LineComment rather than
	// Line, but that's what we're stuck with for now.
	def("Line")
	    .bases("Comment")
	    .build("value", /*optional:*/ "leading", "trailing");

	},{"../lib/shared":502,"../lib/types":503}],491:[function(require,module,exports){
	require("./core");
	var types = require("../lib/types");
	var def = types.Type.def;
	var or = types.Type.or;

	// Note that none of these types are buildable because the Mozilla Parser
	// API doesn't specify any builder functions, and nobody uses E4X anymore.

	def("XMLDefaultDeclaration")
	    .bases("Declaration")
	    .field("namespace", def("Expression"));

	def("XMLAnyName").bases("Expression");

	def("XMLQualifiedIdentifier")
	    .bases("Expression")
	    .field("left", or(def("Identifier"), def("XMLAnyName")))
	    .field("right", or(def("Identifier"), def("Expression")))
	    .field("computed", Boolean);

	def("XMLFunctionQualifiedIdentifier")
	    .bases("Expression")
	    .field("right", or(def("Identifier"), def("Expression")))
	    .field("computed", Boolean);

	def("XMLAttributeSelector")
	    .bases("Expression")
	    .field("attribute", def("Expression"));

	def("XMLFilterExpression")
	    .bases("Expression")
	    .field("left", def("Expression"))
	    .field("right", def("Expression"));

	def("XMLElement")
	    .bases("XML", "Expression")
	    .field("contents", [def("XML")]);

	def("XMLList")
	    .bases("XML", "Expression")
	    .field("contents", [def("XML")]);

	def("XML").bases("Node");

	def("XMLEscape")
	    .bases("XML")
	    .field("expression", def("Expression"));

	def("XMLText")
	    .bases("XML")
	    .field("text", String);

	def("XMLStartTag")
	    .bases("XML")
	    .field("contents", [def("XML")]);

	def("XMLEndTag")
	    .bases("XML")
	    .field("contents", [def("XML")]);

	def("XMLPointTag")
	    .bases("XML")
	    .field("contents", [def("XML")]);

	def("XMLName")
	    .bases("XML")
	    .field("contents", or(String, [def("XML")]));

	def("XMLAttribute")
	    .bases("XML")
	    .field("value", String);

	def("XMLCdata")
	    .bases("XML")
	    .field("contents", String);

	def("XMLComment")
	    .bases("XML")
	    .field("contents", String);

	def("XMLProcessingInstruction")
	    .bases("XML")
	    .field("target", String)
	    .field("contents", or(String, null));

	},{"../lib/types":503,"./core":490}],492:[function(require,module,exports){
	require("./core");
	var types = require("../lib/types");
	var def = types.Type.def;
	var or = types.Type.or;
	var defaults = require("../lib/shared").defaults;

	def("Function")
	    .field("generator", Boolean, defaults["false"])
	    .field("expression", Boolean, defaults["false"])
	    .field("defaults", [or(def("Expression"), null)], defaults.emptyArray)
	    // TODO This could be represented as a RestElement in .params.
	    .field("rest", or(def("Identifier"), null), defaults["null"]);

	// The ESTree way of representing a ...rest parameter.
	def("RestElement")
	    .bases("Pattern")
	    .build("argument")
	    .field("argument", def("Pattern"));

	def("SpreadElementPattern")
	    .bases("Pattern")
	    .build("argument")
	    .field("argument", def("Pattern"));

	def("FunctionDeclaration")
	    .build("id", "params", "body", "generator", "expression");

	def("FunctionExpression")
	    .build("id", "params", "body", "generator", "expression");

	// The Parser API calls this ArrowExpression, but Esprima and all other
	// actual parsers use ArrowFunctionExpression.
	def("ArrowFunctionExpression")
	    .bases("Function", "Expression")
	    .build("params", "body", "expression")
	    // The forced null value here is compatible with the overridden
	    // definition of the "id" field in the Function interface.
	    .field("id", null, defaults["null"])
	    // Arrow function bodies are allowed to be expressions.
	    .field("body", or(def("BlockStatement"), def("Expression")))
	    // The current spec forbids arrow generators, so I have taken the
	    // liberty of enforcing that. TODO Report this.
	    .field("generator", false, defaults["false"]);

	def("YieldExpression")
	    .bases("Expression")
	    .build("argument", "delegate")
	    .field("argument", or(def("Expression"), null))
	    .field("delegate", Boolean, defaults["false"]);

	def("GeneratorExpression")
	    .bases("Expression")
	    .build("body", "blocks", "filter")
	    .field("body", def("Expression"))
	    .field("blocks", [def("ComprehensionBlock")])
	    .field("filter", or(def("Expression"), null));

	def("ComprehensionExpression")
	    .bases("Expression")
	    .build("body", "blocks", "filter")
	    .field("body", def("Expression"))
	    .field("blocks", [def("ComprehensionBlock")])
	    .field("filter", or(def("Expression"), null));

	def("ComprehensionBlock")
	    .bases("Node")
	    .build("left", "right", "each")
	    .field("left", def("Pattern"))
	    .field("right", def("Expression"))
	    .field("each", Boolean);

	def("Property")
	    .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	    .field("value", or(def("Expression"), def("Pattern")))
	    .field("method", Boolean, defaults["false"])
	    .field("shorthand", Boolean, defaults["false"])
	    .field("computed", Boolean, defaults["false"]);

	def("PropertyPattern")
	    .bases("Pattern")
	    .build("key", "pattern")
	    .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	    .field("pattern", def("Pattern"))
	    .field("computed", Boolean, defaults["false"]);

	def("ObjectPattern")
	    .bases("Pattern")
	    .build("properties")
	    .field("properties", [or(def("PropertyPattern"), def("Property"))]);

	def("ArrayPattern")
	    .bases("Pattern")
	    .build("elements")
	    .field("elements", [or(def("Pattern"), null)]);

	def("MethodDefinition")
	    .bases("Declaration")
	    .build("kind", "key", "value", "static")
	    .field("kind", or("constructor", "method", "get", "set"))
	    .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	    .field("value", def("Function"))
	    .field("computed", Boolean, defaults["false"])
	    .field("static", Boolean, defaults["false"]);

	def("SpreadElement")
	    .bases("Node")
	    .build("argument")
	    .field("argument", def("Expression"));

	def("ArrayExpression")
	    .field("elements", [or(def("Expression"), def("SpreadElement"), null)]);

	def("NewExpression")
	    .field("arguments", [or(def("Expression"), def("SpreadElement"))]);

	def("CallExpression")
	    .field("arguments", [or(def("Expression"), def("SpreadElement"))]);

	// Note: this node type is *not* an AssignmentExpression with a Pattern on
	// the left-hand side! The existing AssignmentExpression type already
	// supports destructuring assignments. AssignmentPattern nodes may appear
	// wherever a Pattern is allowed, and the right-hand side represents a
	// default value to be destructured against the left-hand side, if no
	// value is otherwise provided. For example: default parameter values.
	def("AssignmentPattern")
	    .bases("Pattern")
	    .build("left", "right")
	    .field("left", def("Pattern"))
	    .field("right", def("Expression"));

	var ClassBodyElement = or(
	    def("MethodDefinition"),
	    def("VariableDeclarator"),
	    def("ClassPropertyDefinition"),
	    def("ClassProperty")
	);

	def("ClassProperty")
	  .bases("Declaration")
	  .build("key")
	  .field("key", or(def("Literal"), def("Identifier"), def("Expression")))
	  .field("computed", Boolean, defaults["false"]);

	def("ClassPropertyDefinition") // static property
	    .bases("Declaration")
	    .build("definition")
	    // Yes, Virginia, circular definitions are permitted.
	    .field("definition", ClassBodyElement);

	def("ClassBody")
	    .bases("Declaration")
	    .build("body")
	    .field("body", [ClassBodyElement]);

	def("ClassDeclaration")
	    .bases("Declaration")
	    .build("id", "body", "superClass")
	    .field("id", or(def("Identifier"), null))
	    .field("body", def("ClassBody"))
	    .field("superClass", or(def("Expression"), null), defaults["null"]);

	def("ClassExpression")
	    .bases("Expression")
	    .build("id", "body", "superClass")
	    .field("id", or(def("Identifier"), null), defaults["null"])
	    .field("body", def("ClassBody"))
	    .field("superClass", or(def("Expression"), null), defaults["null"])
	    .field("implements", [def("ClassImplements")], defaults.emptyArray);

	def("ClassImplements")
	    .bases("Node")
	    .build("id")
	    .field("id", def("Identifier"))
	    .field("superClass", or(def("Expression"), null), defaults["null"]);

	// Specifier and NamedSpecifier are abstract non-standard types that I
	// introduced for definitional convenience.
	def("Specifier").bases("Node");

	def("TaggedTemplateExpression")
	    .bases("Expression")
	    .build("tag", "quasi")
	    .field("tag", def("Expression"))
	    .field("quasi", def("TemplateLiteral"));

	def("TemplateLiteral")
	    .bases("Expression")
	    .build("quasis", "expressions")
	    .field("quasis", [def("TemplateElement")])
	    .field("expressions", [def("Expression")]);

	def("TemplateElement")
	    .bases("Node")
	    .build("value", "tail")
	    .field("value", {"cooked": String, "raw": String})
	    .field("tail", Boolean);

	},{"../lib/shared":502,"../lib/types":503,"./core":490}],493:[function(require,module,exports){
	require("./es6");

	var types = require("../lib/types");
	var def = types.Type.def;
	var or = types.Type.or;
	var builtin = types.builtInTypes;
	var defaults = require("../lib/shared").defaults;

	def("Function")
	    .field("async", Boolean, defaults["false"]);

	def("SpreadProperty")
	    .bases("Node")
	    .build("argument")
	    .field("argument", def("Expression"));

	def("ObjectExpression")
	    .field("properties", [or(def("Property"), def("SpreadProperty"))]);

	def("SpreadPropertyPattern")
	    .bases("Pattern")
	    .build("argument")
	    .field("argument", def("Pattern"));

	def("ObjectPattern")
	    .field("properties", [or(
	        def("Property"),
	        def("PropertyPattern"),
	        def("SpreadPropertyPattern")
	    )]);

	def("AwaitExpression")
	    .bases("Expression")
	    .build("argument", "all")
	    .field("argument", or(def("Expression"), null))
	    .field("all", Boolean, defaults["false"]);

	},{"../lib/shared":502,"../lib/types":503,"./es6":492}],494:[function(require,module,exports){
	require("./es7");

	var types = require("../lib/types");
	var defaults = require("../lib/shared").defaults;
	var def = types.Type.def;
	var or = types.Type.or;

	def("VariableDeclaration")
	    .field("declarations", [or(
	        def("VariableDeclarator"),
	        def("Identifier") // Esprima deviation.
	    )]);

	def("Property")
	    .field("value", or(
	        def("Expression"),
	        def("Pattern") // Esprima deviation.
	    ));

	def("ArrayPattern")
	    .field("elements", [or(
	        def("Pattern"),
	        def("SpreadElement"),
	        null
	    )]);

	def("ObjectPattern")
	    .field("properties", [or(
	        def("Property"),
	        def("PropertyPattern"),
	        def("SpreadPropertyPattern"),
	        def("SpreadProperty") // Used by Esprima.
	    )]);

	def("NamedSpecifier")
	    .bases("Specifier")
	    // Note: this abstract type is intentionally not buildable.
	    .field("id", def("Identifier"))
	    .field("name", or(def("Identifier"), null), defaults["null"]);

	// Like NamedSpecifier, except type:"ExportSpecifier" and buildable.
	// export {<id [as name]>} [from ...];
	def("ExportSpecifier")
	    .bases("NamedSpecifier")
	    .build("id", "name");

	// export <*> from ...;
	def("ExportBatchSpecifier")
	    .bases("Specifier")
	    .build();

	// Like NamedSpecifier, except type:"ImportSpecifier" and buildable.
	// import {<id [as name]>} from ...;
	def("ImportSpecifier")
	    .bases("NamedSpecifier")
	    .build("id", "name");

	// import <* as id> from ...;
	def("ImportNamespaceSpecifier")
	    .bases("Specifier")
	    .build("id")
	    .field("id", def("Identifier"));

	// import <id> from ...;
	def("ImportDefaultSpecifier")
	    .bases("Specifier")
	    .build("id")
	    .field("id", def("Identifier"));

	def("ExportDeclaration")
	    .bases("Declaration")
	    .build("default", "declaration", "specifiers", "source")
	    .field("default", Boolean)
	    .field("declaration", or(
	        def("Declaration"),
	        def("Expression"), // Implies default.
	        null
	    ))
	    .field("specifiers", [or(
	        def("ExportSpecifier"),
	        def("ExportBatchSpecifier")
	    )], defaults.emptyArray)
	    .field("source", or(
	        def("Literal"),
	        null
	    ), defaults["null"]);

	def("ImportDeclaration")
	    .bases("Declaration")
	    .build("specifiers", "source")
	    .field("specifiers", [or(
	        def("ImportSpecifier"),
	        def("ImportNamespaceSpecifier"),
	        def("ImportDefaultSpecifier")
	    )], defaults.emptyArray)
	    .field("source", def("Literal"));

	},{"../lib/shared":502,"../lib/types":503,"./es7":493}],495:[function(require,module,exports){
	require("./es7");

	var types = require("../lib/types");
	var def = types.Type.def;
	var or = types.Type.or;
	var defaults = require("../lib/shared").defaults;

	def("JSXAttribute")
	    .bases("Node")
	    .build("name", "value")
	    .field("name", or(def("JSXIdentifier"), def("JSXNamespacedName")))
	    .field("value", or(
	        def("Literal"), // attr="value"
	        def("JSXExpressionContainer"), // attr={value}
	        null // attr= or just attr
	    ), defaults["null"]);

	def("JSXIdentifier")
	    .bases("Identifier")
	    .build("name")
	    .field("name", String);

	def("JSXNamespacedName")
	    .bases("Node")
	    .build("namespace", "name")
	    .field("namespace", def("JSXIdentifier"))
	    .field("name", def("JSXIdentifier"));

	def("JSXMemberExpression")
	    .bases("MemberExpression")
	    .build("object", "property")
	    .field("object", or(def("JSXIdentifier"), def("JSXMemberExpression")))
	    .field("property", def("JSXIdentifier"))
	    .field("computed", Boolean, defaults.false);

	var JSXElementName = or(
	    def("JSXIdentifier"),
	    def("JSXNamespacedName"),
	    def("JSXMemberExpression")
	);

	def("JSXSpreadAttribute")
	    .bases("Node")
	    .build("argument")
	    .field("argument", def("Expression"));

	var JSXAttributes = [or(
	    def("JSXAttribute"),
	    def("JSXSpreadAttribute")
	)];

	def("JSXExpressionContainer")
	    .bases("Expression")
	    .build("expression")
	    .field("expression", def("Expression"));

	def("JSXElement")
	    .bases("Expression")
	    .build("openingElement", "closingElement", "children")
	    .field("openingElement", def("JSXOpeningElement"))
	    .field("closingElement", or(def("JSXClosingElement"), null), defaults["null"])
	    .field("children", [or(
	        def("JSXElement"),
	        def("JSXExpressionContainer"),
	        def("JSXText"),
	        def("Literal") // TODO Esprima should return JSXText instead.
	    )], defaults.emptyArray)
	    .field("name", JSXElementName, function() {
	        // Little-known fact: the `this` object inside a default function
	        // is none other than the partially-built object itself, and any
	        // fields initialized directly from builder function arguments
	        // (like openingElement, closingElement, and children) are
	        // guaranteed to be available.
	        return this.openingElement.name;
	    })
	    .field("selfClosing", Boolean, function() {
	        return this.openingElement.selfClosing;
	    })
	    .field("attributes", JSXAttributes, function() {
	        return this.openingElement.attributes;
	    });

	def("JSXOpeningElement")
	    .bases("Node") // TODO Does this make sense? Can't really be an JSXElement.
	    .build("name", "attributes", "selfClosing")
	    .field("name", JSXElementName)
	    .field("attributes", JSXAttributes, defaults.emptyArray)
	    .field("selfClosing", Boolean, defaults["false"]);

	def("JSXClosingElement")
	    .bases("Node") // TODO Same concern.
	    .build("name")
	    .field("name", JSXElementName);

	def("JSXText")
	    .bases("Literal")
	    .build("value")
	    .field("value", String);

	def("JSXEmptyExpression").bases("Expression").build();

	// Type Annotations
	def("Type").bases("Node");

	def("AnyTypeAnnotation")
	  .bases("Type")
	  .build();

	def("MixedTypeAnnotation")
	  .bases("Type")
	  .build();

	def("VoidTypeAnnotation")
	  .bases("Type")
	  .build();

	def("NumberTypeAnnotation")
	  .bases("Type")
	  .build();

	def("NumberLiteralTypeAnnotation")
	  .bases("Type")
	  .build("value", "raw")
	  .field("value", Number)
	  .field("raw", String);

	def("StringTypeAnnotation")
	  .bases("Type")
	  .build();

	def("StringLiteralTypeAnnotation")
	  .bases("Type")
	  .build("value", "raw")
	  .field("value", String)
	  .field("raw", String);

	def("BooleanTypeAnnotation")
	  .bases("Type")
	  .build();

	def("BooleanLiteralTypeAnnotation")
	  .bases("Type")
	  .build("value", "raw")
	  .field("value", Boolean)
	  .field("raw", String);

	def("TypeAnnotation")
	  .bases("Node")
	  .build("typeAnnotation")
	  .field("typeAnnotation", def("Type"));

	def("NullableTypeAnnotation")
	  .bases("Type")
	  .build("typeAnnotation")
	  .field("typeAnnotation", def("Type"));

	def("FunctionTypeAnnotation")
	  .bases("Type")
	  .build("params", "returnType", "rest", "typeParameters")
	  .field("params", [def("FunctionTypeParam")])
	  .field("returnType", def("Type"))
	  .field("rest", or(def("FunctionTypeParam"), null))
	  .field("typeParameters", or(def("TypeParameterDeclaration"), null));

	def("FunctionTypeParam")
	  .bases("Node")
	  .build("name", "typeAnnotation", "optional")
	  .field("name", def("Identifier"))
	  .field("typeAnnotation", def("Type"))
	  .field("optional", Boolean);

	def("ArrayTypeAnnotation")
	  .bases("Type")
	  .build("elementType")
	  .field("elementType", def("Type"));

	def("ObjectTypeAnnotation")
	  .bases("Type")
	  .build("properties")
	  .field("properties", [def("ObjectTypeProperty")])
	  .field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray)
	  .field("callProperties",
	         [def("ObjectTypeCallProperty")],
	         defaults.emptyArray);

	def("ObjectTypeProperty")
	  .bases("Node")
	  .build("key", "value", "optional")
	  .field("key", or(def("Literal"), def("Identifier")))
	  .field("value", def("Type"))
	  .field("optional", Boolean);

	def("ObjectTypeIndexer")
	  .bases("Node")
	  .build("id", "key", "value")
	  .field("id", def("Identifier"))
	  .field("key", def("Type"))
	  .field("value", def("Type"));

	def("ObjectTypeCallProperty")
	  .bases("Node")
	  .build("value")
	  .field("value", def("FunctionTypeAnnotation"))
	  .field("static", Boolean, false);

	def("QualifiedTypeIdentifier")
	  .bases("Node")
	  .build("qualification", "id")
	  .field("qualification",
	         or(def("Identifier"),
	            def("QualifiedTypeIdentifier")))
	  .field("id", def("Identifier"));

	def("GenericTypeAnnotation")
	  .bases("Type")
	  .build("id", "typeParameters")
	  .field("id", or(def("Identifier"), def("QualifiedTypeIdentifier")))
	  .field("typeParameters", or(def("TypeParameterInstantiation"), null));

	def("MemberTypeAnnotation")
	  .bases("Type")
	  .build("object", "property")
	  .field("object", def("Identifier"))
	  .field("property",
	         or(def("MemberTypeAnnotation"),
	            def("GenericTypeAnnotation")));

	def("UnionTypeAnnotation")
	  .bases("Type")
	  .build("types")
	  .field("types", [def("Type")]);

	def("IntersectionTypeAnnotation")
	  .bases("Type")
	  .build("types")
	  .field("types", [def("Type")]);

	def("TypeofTypeAnnotation")
	  .bases("Type")
	  .build("argument")
	  .field("argument", def("Type"));

	def("Identifier")
	  .field("typeAnnotation", or(def("TypeAnnotation"), null), defaults["null"]);

	def("TypeParameterDeclaration")
	  .bases("Node")
	  .build("params")
	  .field("params", [def("Identifier")]);

	def("TypeParameterInstantiation")
	  .bases("Node")
	  .build("params")
	  .field("params", [def("Type")]);

	def("Function")
	  .field("returnType",
	         or(def("TypeAnnotation"), null),
	         defaults["null"])
	  .field("typeParameters",
	         or(def("TypeParameterDeclaration"), null),
	         defaults["null"]);

	def("ClassProperty")
	  .build("key", "typeAnnotation")
	  .field("typeAnnotation", def("TypeAnnotation"))
	  .field("static", Boolean, false);

	def("ClassImplements")
	  .field("typeParameters",
	         or(def("TypeParameterInstantiation"), null),
	         defaults["null"]);

	def("InterfaceDeclaration")
	  .bases("Statement")
	  .build("id", "body", "extends")
	  .field("id", def("Identifier"))
	  .field("typeParameters",
	         or(def("TypeParameterDeclaration"), null),
	         defaults["null"])
	  .field("body", def("ObjectTypeAnnotation"))
	  .field("extends", [def("InterfaceExtends")]);

	def("InterfaceExtends")
	  .bases("Node")
	  .build("id")
	  .field("id", def("Identifier"))
	  .field("typeParameters", or(def("TypeParameterInstantiation"), null));

	def("TypeAlias")
	  .bases("Statement")
	  .build("id", "typeParameters", "right")
	  .field("id", def("Identifier"))
	  .field("typeParameters", or(def("TypeParameterDeclaration"), null))
	  .field("right", def("Type"));

	def("TypeCastExpression")
	  .bases("Expression")
	  .build("expression", "typeAnnotation")
	  .field("expression", def("Expression"))
	  .field("typeAnnotation", def("TypeAnnotation"));

	def("TupleTypeAnnotation")
	  .bases("Type")
	  .build("types")
	  .field("types", [def("Type")]);

	def("DeclareVariable")
	  .bases("Statement")
	  .build("id")
	  .field("id", def("Identifier"));

	def("DeclareFunction")
	  .bases("Statement")
	  .build("id")
	  .field("id", def("Identifier"));

	def("DeclareClass")
	  .bases("InterfaceDeclaration")
	  .build("id");

	def("DeclareModule")
	  .bases("Statement")
	  .build("id", "body")
	  .field("id", or(def("Identifier"), def("Literal")))
	  .field("body", def("BlockStatement"));

	},{"../lib/shared":502,"../lib/types":503,"./es7":493}],496:[function(require,module,exports){
	require("./core");
	var types = require("../lib/types");
	var def = types.Type.def;
	var or = types.Type.or;
	var shared = require("../lib/shared");
	var geq = shared.geq;
	var defaults = shared.defaults;

	def("Function")
	    // SpiderMonkey allows expression closures: function(x) x+1
	    .field("body", or(def("BlockStatement"), def("Expression")));

	def("ForInStatement")
	    .build("left", "right", "body", "each")
	    .field("each", Boolean, defaults["false"]);

	def("ForOfStatement")
	    .bases("Statement")
	    .build("left", "right", "body")
	    .field("left", or(
	        def("VariableDeclaration"),
	        def("Expression")))
	    .field("right", def("Expression"))
	    .field("body", def("Statement"));

	def("LetStatement")
	    .bases("Statement")
	    .build("head", "body")
	    // TODO Deviating from the spec by reusing VariableDeclarator here.
	    .field("head", [def("VariableDeclarator")])
	    .field("body", def("Statement"));

	def("LetExpression")
	    .bases("Expression")
	    .build("head", "body")
	    // TODO Deviating from the spec by reusing VariableDeclarator here.
	    .field("head", [def("VariableDeclarator")])
	    .field("body", def("Expression"));

	def("GraphExpression")
	    .bases("Expression")
	    .build("index", "expression")
	    .field("index", geq(0))
	    .field("expression", def("Literal"));

	def("GraphIndexExpression")
	    .bases("Expression")
	    .build("index")
	    .field("index", geq(0));

	},{"../lib/shared":502,"../lib/types":503,"./core":490}],497:[function(require,module,exports){
	var assert = require("assert");
	var types = require("../main");
	var getFieldNames = types.getFieldNames;
	var getFieldValue = types.getFieldValue;
	var isArray = types.builtInTypes.array;
	var isObject = types.builtInTypes.object;
	var isDate = types.builtInTypes.Date;
	var isRegExp = types.builtInTypes.RegExp;
	var hasOwn = Object.prototype.hasOwnProperty;

	function astNodesAreEquivalent(a, b, problemPath) {
	    if (isArray.check(problemPath)) {
	        problemPath.length = 0;
	    } else {
	        problemPath = null;
	    }

	    return areEquivalent(a, b, problemPath);
	}

	astNodesAreEquivalent.assert = function(a, b) {
	    var problemPath = [];
	    if (!astNodesAreEquivalent(a, b, problemPath)) {
	        if (problemPath.length === 0) {
	            assert.strictEqual(a, b);
	        } else {
	            assert.ok(
	                false,
	                "Nodes differ in the following path: " +
	                    problemPath.map(subscriptForProperty).join("")
	            );
	        }
	    }
	};

	function subscriptForProperty(property) {
	    if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
	        return "." + property;
	    }
	    return "[" + JSON.stringify(property) + "]";
	}

	function areEquivalent(a, b, problemPath) {
	    if (a === b) {
	        return true;
	    }

	    if (isArray.check(a)) {
	        return arraysAreEquivalent(a, b, problemPath);
	    }

	    if (isObject.check(a)) {
	        return objectsAreEquivalent(a, b, problemPath);
	    }

	    if (isDate.check(a)) {
	        return isDate.check(b) && (+a === +b);
	    }

	    if (isRegExp.check(a)) {
	        return isRegExp.check(b) && (
	            a.source === b.source &&
	            a.global === b.global &&
	            a.multiline === b.multiline &&
	            a.ignoreCase === b.ignoreCase
	        );
	    }

	    return a == b;
	}

	function arraysAreEquivalent(a, b, problemPath) {
	    isArray.assert(a);
	    var aLength = a.length;

	    if (!isArray.check(b) || b.length !== aLength) {
	        if (problemPath) {
	            problemPath.push("length");
	        }
	        return false;
	    }

	    for (var i = 0; i < aLength; ++i) {
	        if (problemPath) {
	            problemPath.push(i);
	        }

	        if (i in a !== i in b) {
	            return false;
	        }

	        if (!areEquivalent(a[i], b[i], problemPath)) {
	            return false;
	        }

	        if (problemPath) {
	            assert.strictEqual(problemPath.pop(), i);
	        }
	    }

	    return true;
	}

	function objectsAreEquivalent(a, b, problemPath) {
	    isObject.assert(a);
	    if (!isObject.check(b)) {
	        return false;
	    }

	    // Fast path for a common property of AST nodes.
	    if (a.type !== b.type) {
	        if (problemPath) {
	            problemPath.push("type");
	        }
	        return false;
	    }

	    var aNames = getFieldNames(a);
	    var aNameCount = aNames.length;

	    var bNames = getFieldNames(b);
	    var bNameCount = bNames.length;

	    if (aNameCount === bNameCount) {
	        for (var i = 0; i < aNameCount; ++i) {
	            var name = aNames[i];
	            var aChild = getFieldValue(a, name);
	            var bChild = getFieldValue(b, name);

	            if (problemPath) {
	                problemPath.push(name);
	            }

	            if (!areEquivalent(aChild, bChild, problemPath)) {
	                return false;
	            }

	            if (problemPath) {
	                assert.strictEqual(problemPath.pop(), name);
	            }
	        }

	        return true;
	    }

	    if (!problemPath) {
	        return false;
	    }

	    // Since aNameCount !== bNameCount, we need to find some name that's
	    // missing in aNames but present in bNames, or vice-versa.

	    var seenNames = Object.create(null);

	    for (i = 0; i < aNameCount; ++i) {
	        seenNames[aNames[i]] = true;
	    }

	    for (i = 0; i < bNameCount; ++i) {
	        name = bNames[i];

	        if (!hasOwn.call(seenNames, name)) {
	            problemPath.push(name);
	            return false;
	        }

	        delete seenNames[name];
	    }

	    for (name in seenNames) {
	        problemPath.push(name);
	        break;
	    }

	    return false;
	}

	module.exports = astNodesAreEquivalent;

	},{"../main":504,"assert":1}],498:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var n = types.namedTypes;
	var b = types.builders;
	var isNumber = types.builtInTypes.number;
	var isArray = types.builtInTypes.array;
	var Path = require("./path");
	var Scope = require("./scope");

	function NodePath(value, parentPath, name) {
	    assert.ok(this instanceof NodePath);
	    Path.call(this, value, parentPath, name);
	}

	require("util").inherits(NodePath, Path);
	var NPp = NodePath.prototype;

	Object.defineProperties(NPp, {
	    node: {
	        get: function() {
	            Object.defineProperty(this, "node", {
	                configurable: true, // Enable deletion.
	                value: this._computeNode()
	            });

	            return this.node;
	        }
	    },

	    parent: {
	        get: function() {
	            Object.defineProperty(this, "parent", {
	                configurable: true, // Enable deletion.
	                value: this._computeParent()
	            });

	            return this.parent;
	        }
	    },

	    scope: {
	        get: function() {
	            Object.defineProperty(this, "scope", {
	                configurable: true, // Enable deletion.
	                value: this._computeScope()
	            });

	            return this.scope;
	        }
	    }
	});

	NPp.replace = function() {
	    delete this.node;
	    delete this.parent;
	    delete this.scope;
	    return Path.prototype.replace.apply(this, arguments);
	};

	NPp.prune = function() {
	    var remainingNodePath = this.parent;

	    this.replace();

	    return cleanUpNodesAfterPrune(remainingNodePath);
	};

	// The value of the first ancestor Path whose value is a Node.
	NPp._computeNode = function() {
	    var value = this.value;
	    if (n.Node.check(value)) {
	        return value;
	    }

	    var pp = this.parentPath;
	    return pp && pp.node || null;
	};

	// The first ancestor Path whose value is a Node distinct from this.node.
	NPp._computeParent = function() {
	    var value = this.value;
	    var pp = this.parentPath;

	    if (!n.Node.check(value)) {
	        while (pp && !n.Node.check(pp.value)) {
	            pp = pp.parentPath;
	        }

	        if (pp) {
	            pp = pp.parentPath;
	        }
	    }

	    while (pp && !n.Node.check(pp.value)) {
	        pp = pp.parentPath;
	    }

	    return pp || null;
	};

	// The closest enclosing scope that governs this node.
	NPp._computeScope = function() {
	    var value = this.value;
	    var pp = this.parentPath;
	    var scope = pp && pp.scope;

	    if (n.Node.check(value) &&
	        Scope.isEstablishedBy(value)) {
	        scope = new Scope(this, scope);
	    }

	    return scope || null;
	};

	NPp.getValueProperty = function(name) {
	    return types.getFieldValue(this.value, name);
	};

	/**
	 * Determine whether this.node needs to be wrapped in parentheses in order
	 * for a parser to reproduce the same local AST structure.
	 *
	 * For instance, in the expression `(1 + 2) * 3`, the BinaryExpression
	 * whose operator is "+" needs parentheses, because `1 + 2 * 3` would
	 * parse differently.
	 *
	 * If assumeExpressionContext === true, we don't worry about edge cases
	 * like an anonymous FunctionExpression appearing lexically first in its
	 * enclosing statement and thus needing parentheses to avoid being parsed
	 * as a FunctionDeclaration with a missing name.
	 */
	NPp.needsParens = function(assumeExpressionContext) {
	    var pp = this.parentPath;
	    if (!pp) {
	        return false;
	    }

	    var node = this.value;

	    // Only expressions need parentheses.
	    if (!n.Expression.check(node)) {
	        return false;
	    }

	    // Identifiers never need parentheses.
	    if (node.type === "Identifier") {
	        return false;
	    }

	    while (!n.Node.check(pp.value)) {
	        pp = pp.parentPath;
	        if (!pp) {
	            return false;
	        }
	    }

	    var parent = pp.value;

	    switch (node.type) {
	    case "UnaryExpression":
	    case "SpreadElement":
	    case "SpreadProperty":
	        return parent.type === "MemberExpression"
	            && this.name === "object"
	            && parent.object === node;

	    case "BinaryExpression":
	    case "LogicalExpression":
	        switch (parent.type) {
	        case "CallExpression":
	            return this.name === "callee"
	                && parent.callee === node;

	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	            return true;

	        case "MemberExpression":
	            return this.name === "object"
	                && parent.object === node;

	        case "BinaryExpression":
	        case "LogicalExpression":
	            var po = parent.operator;
	            var pp = PRECEDENCE[po];
	            var no = node.operator;
	            var np = PRECEDENCE[no];

	            if (pp > np) {
	                return true;
	            }

	            if (pp === np && this.name === "right") {
	                assert.strictEqual(parent.right, node);
	                return true;
	            }

	        default:
	            return false;
	        }

	    case "SequenceExpression":
	        switch (parent.type) {
	        case "ForStatement":
	            // Although parentheses wouldn't hurt around sequence
	            // expressions in the head of for loops, traditional style
	            // dictates that e.g. i++, j++ should not be wrapped with
	            // parentheses.
	            return false;

	        case "ExpressionStatement":
	            return this.name !== "expression";

	        default:
	            // Otherwise err on the side of overparenthesization, adding
	            // explicit exceptions above if this proves overzealous.
	            return true;
	        }

	    case "YieldExpression":
	        switch (parent.type) {
	        case "BinaryExpression":
	        case "LogicalExpression":
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	        case "CallExpression":
	        case "MemberExpression":
	        case "NewExpression":
	        case "ConditionalExpression":
	        case "YieldExpression":
	            return true;

	        default:
	            return false;
	        }

	    case "Literal":
	        return parent.type === "MemberExpression"
	            && isNumber.check(node.value)
	            && this.name === "object"
	            && parent.object === node;

	    case "AssignmentExpression":
	    case "ConditionalExpression":
	        switch (parent.type) {
	        case "UnaryExpression":
	        case "SpreadElement":
	        case "SpreadProperty":
	        case "BinaryExpression":
	        case "LogicalExpression":
	            return true;

	        case "CallExpression":
	            return this.name === "callee"
	                && parent.callee === node;

	        case "ConditionalExpression":
	            return this.name === "test"
	                && parent.test === node;

	        case "MemberExpression":
	            return this.name === "object"
	                && parent.object === node;

	        default:
	            return false;
	        }

	    default:
	        if (parent.type === "NewExpression" &&
	            this.name === "callee" &&
	            parent.callee === node) {
	            return containsCallExpression(node);
	        }
	    }

	    if (assumeExpressionContext !== true &&
	        !this.canBeFirstInStatement() &&
	        this.firstInStatement())
	        return true;

	    return false;
	};

	function isBinary(node) {
	    return n.BinaryExpression.check(node)
	        || n.LogicalExpression.check(node);
	}

	function isUnaryLike(node) {
	    return n.UnaryExpression.check(node)
	        // I considered making SpreadElement and SpreadProperty subtypes
	        // of UnaryExpression, but they're not really Expression nodes.
	        || (n.SpreadElement && n.SpreadElement.check(node))
	        || (n.SpreadProperty && n.SpreadProperty.check(node));
	}

	var PRECEDENCE = {};
	[["||"],
	 ["&&"],
	 ["|"],
	 ["^"],
	 ["&"],
	 ["==", "===", "!=", "!=="],
	 ["<", ">", "<=", ">=", "in", "instanceof"],
	 [">>", "<<", ">>>"],
	 ["+", "-"],
	 ["*", "/", "%"]
	].forEach(function(tier, i) {
	    tier.forEach(function(op) {
	        PRECEDENCE[op] = i;
	    });
	});

	function containsCallExpression(node) {
	    if (n.CallExpression.check(node)) {
	        return true;
	    }

	    if (isArray.check(node)) {
	        return node.some(containsCallExpression);
	    }

	    if (n.Node.check(node)) {
	        return types.someField(node, function(name, child) {
	            return containsCallExpression(child);
	        });
	    }

	    return false;
	}

	NPp.canBeFirstInStatement = function() {
	    var node = this.node;
	    return !n.FunctionExpression.check(node)
	        && !n.ObjectExpression.check(node);
	};

	NPp.firstInStatement = function() {
	    return firstInStatement(this);
	};

	function firstInStatement(path) {
	    for (var node, parent; path.parent; path = path.parent) {
	        node = path.node;
	        parent = path.parent.node;

	        if (n.BlockStatement.check(parent) &&
	            path.parent.name === "body" &&
	            path.name === 0) {
	            assert.strictEqual(parent.body[0], node);
	            return true;
	        }

	        if (n.ExpressionStatement.check(parent) &&
	            path.name === "expression") {
	            assert.strictEqual(parent.expression, node);
	            return true;
	        }

	        if (n.SequenceExpression.check(parent) &&
	            path.parent.name === "expressions" &&
	            path.name === 0) {
	            assert.strictEqual(parent.expressions[0], node);
	            continue;
	        }

	        if (n.CallExpression.check(parent) &&
	            path.name === "callee") {
	            assert.strictEqual(parent.callee, node);
	            continue;
	        }

	        if (n.MemberExpression.check(parent) &&
	            path.name === "object") {
	            assert.strictEqual(parent.object, node);
	            continue;
	        }

	        if (n.ConditionalExpression.check(parent) &&
	            path.name === "test") {
	            assert.strictEqual(parent.test, node);
	            continue;
	        }

	        if (isBinary(parent) &&
	            path.name === "left") {
	            assert.strictEqual(parent.left, node);
	            continue;
	        }

	        if (n.UnaryExpression.check(parent) &&
	            !parent.prefix &&
	            path.name === "argument") {
	            assert.strictEqual(parent.argument, node);
	            continue;
	        }

	        return false;
	    }

	    return true;
	}

	/**
	 * Pruning certain nodes will result in empty or incomplete nodes, here we clean those nodes up.
	 */
	function cleanUpNodesAfterPrune(remainingNodePath) {
	    if (n.VariableDeclaration.check(remainingNodePath.node)) {
	        var declarations = remainingNodePath.get('declarations').value;
	        if (!declarations || declarations.length === 0) {
	            return remainingNodePath.prune();
	        }
	    } else if (n.ExpressionStatement.check(remainingNodePath.node)) {
	        if (!remainingNodePath.get('expression').value) {
	            return remainingNodePath.prune();
	        }
	    } else if (n.IfStatement.check(remainingNodePath.node)) {
	        cleanUpIfStatementAfterPrune(remainingNodePath);
	    }

	    return remainingNodePath;
	}

	function cleanUpIfStatementAfterPrune(ifStatement) {
	    var testExpression = ifStatement.get('test').value;
	    var alternate = ifStatement.get('alternate').value;
	    var consequent = ifStatement.get('consequent').value;

	    if (!consequent && !alternate) {
	        var testExpressionStatement = b.expressionStatement(testExpression);

	        ifStatement.replace(testExpressionStatement);
	    } else if (!consequent && alternate) {
	        var negatedTestExpression = b.unaryExpression('!', testExpression, true);

	        if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
	            negatedTestExpression = testExpression.argument;
	        }

	        ifStatement.get("test").replace(negatedTestExpression);
	        ifStatement.get("consequent").replace(alternate);
	        ifStatement.get("alternate").replace();
	    }
	}

	module.exports = NodePath;

	},{"./path":500,"./scope":501,"./types":503,"assert":1,"util":30}],499:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var NodePath = require("./node-path");
	var Printable = types.namedTypes.Printable;
	var isArray = types.builtInTypes.array;
	var isObject = types.builtInTypes.object;
	var isFunction = types.builtInTypes.function;
	var hasOwn = Object.prototype.hasOwnProperty;
	var undefined;

	function PathVisitor() {
	    assert.ok(this instanceof PathVisitor);

	    // Permanent state.
	    this._reusableContextStack = [];

	    this._methodNameTable = computeMethodNameTable(this);
	    this._shouldVisitComments =
	        hasOwn.call(this._methodNameTable, "Block") ||
	        hasOwn.call(this._methodNameTable, "Line");

	    this.Context = makeContextConstructor(this);

	    // State reset every time PathVisitor.prototype.visit is called.
	    this._visiting = false;
	    this._changeReported = false;
	}

	function computeMethodNameTable(visitor) {
	    var typeNames = Object.create(null);

	    for (var methodName in visitor) {
	        if (/^visit[A-Z]/.test(methodName)) {
	            typeNames[methodName.slice("visit".length)] = true;
	        }
	    }

	    var supertypeTable = types.computeSupertypeLookupTable(typeNames);
	    var methodNameTable = Object.create(null);

	    var typeNames = Object.keys(supertypeTable);
	    var typeNameCount = typeNames.length;
	    for (var i = 0; i < typeNameCount; ++i) {
	        var typeName = typeNames[i];
	        methodName = "visit" + supertypeTable[typeName];
	        if (isFunction.check(visitor[methodName])) {
	            methodNameTable[typeName] = methodName;
	        }
	    }

	    return methodNameTable;
	}

	PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
	    if (methods instanceof PathVisitor) {
	        return methods;
	    }

	    if (!isObject.check(methods)) {
	        // An empty visitor?
	        return new PathVisitor;
	    }

	    function Visitor() {
	        assert.ok(this instanceof Visitor);
	        PathVisitor.call(this);
	    }

	    var Vp = Visitor.prototype = Object.create(PVp);
	    Vp.constructor = Visitor;

	    extend(Vp, methods);
	    extend(Visitor, PathVisitor);

	    isFunction.assert(Visitor.fromMethodsObject);
	    isFunction.assert(Visitor.visit);

	    return new Visitor;
	};

	function extend(target, source) {
	    for (var property in source) {
	        if (hasOwn.call(source, property)) {
	            target[property] = source[property];
	        }
	    }

	    return target;
	}

	PathVisitor.visit = function visit(node, methods) {
	    return PathVisitor.fromMethodsObject(methods).visit(node);
	};

	var PVp = PathVisitor.prototype;

	var recursiveVisitWarning = [
	    "Recursively calling visitor.visit(path) resets visitor state.",
	    "Try this.visit(path) or this.traverse(path) instead."
	].join(" ");

	PVp.visit = function() {
	    assert.ok(!this._visiting, recursiveVisitWarning);

	    // Private state that needs to be reset before every traversal.
	    this._visiting = true;
	    this._changeReported = false;
	    this._abortRequested = false;

	    var argc = arguments.length;
	    var args = new Array(argc)
	    for (var i = 0; i < argc; ++i) {
	        args[i] = arguments[i];
	    }

	    if (!(args[0] instanceof NodePath)) {
	        args[0] = new NodePath({ root: args[0] }).get("root");
	    }

	    // Called with the same arguments as .visit.
	    this.reset.apply(this, args);

	    try {
	        var root = this.visitWithoutReset(args[0]);
	        var didNotThrow = true;
	    } finally {
	        this._visiting = false;

	        if (!didNotThrow && this._abortRequested) {
	            // If this.visitWithoutReset threw an exception and
	            // this._abortRequested was set to true, return the root of
	            // the AST instead of letting the exception propagate, so that
	            // client code does not have to provide a try-catch block to
	            // intercept the AbortRequest exception.  Other kinds of
	            // exceptions will propagate without being intercepted and
	            // rethrown by a catch block, so their stacks will accurately
	            // reflect the original throwing context.
	            return args[0].value;
	        }
	    }

	    return root;
	};

	PVp.AbortRequest = function AbortRequest() {};
	PVp.abort = function() {
	    var visitor = this;
	    visitor._abortRequested = true;
	    var request = new visitor.AbortRequest();

	    // If you decide to catch this exception and stop it from propagating,
	    // make sure to call its cancel method to avoid silencing other
	    // exceptions that might be thrown later in the traversal.
	    request.cancel = function() {
	        visitor._abortRequested = false;
	    };

	    throw request;
	};

	PVp.reset = function(path/*, additional arguments */) {
	    // Empty stub; may be reassigned or overridden by subclasses.
	};

	PVp.visitWithoutReset = function(path) {
	    if (this instanceof this.Context) {
	        // Since this.Context.prototype === this, there's a chance we
	        // might accidentally call context.visitWithoutReset. If that
	        // happens, re-invoke the method against context.visitor.
	        return this.visitor.visitWithoutReset(path);
	    }

	    assert.ok(path instanceof NodePath);
	    var value = path.value;

	    var methodName = Printable.check(value) && this._methodNameTable[value.type];
	    if (methodName) {
	        var context = this.acquireContext(path);
	        try {
	            return context.invokeVisitorMethod(methodName);
	        } finally {
	            this.releaseContext(context);
	        }

	    } else {
	        // If there was no visitor method to call, visit the children of
	        // this node generically.
	        return visitChildren(path, this);
	    }
	};

	function visitChildren(path, visitor) {
	    assert.ok(path instanceof NodePath);
	    assert.ok(visitor instanceof PathVisitor);

	    var value = path.value;

	    if (isArray.check(value)) {
	        path.each(visitor.visitWithoutReset, visitor);
	    } else if (!isObject.check(value)) {
	        // No children to visit.
	    } else {
	        var childNames = types.getFieldNames(value);

	        // The .comments field of the Node type is hidden, so we only
	        // visit it if the visitor defines visitBlock or visitLine, and
	        // value.comments is defined.
	        if (visitor._shouldVisitComments &&
	            value.comments &&
	            childNames.indexOf("comments") < 0) {
	            childNames.push("comments");
	        }

	        var childCount = childNames.length;
	        var childPaths = [];

	        for (var i = 0; i < childCount; ++i) {
	            var childName = childNames[i];
	            if (!hasOwn.call(value, childName)) {
	                value[childName] = types.getFieldValue(value, childName);
	            }
	            childPaths.push(path.get(childName));
	        }

	        for (var i = 0; i < childCount; ++i) {
	            visitor.visitWithoutReset(childPaths[i]);
	        }
	    }

	    return path.value;
	}

	PVp.acquireContext = function(path) {
	    if (this._reusableContextStack.length === 0) {
	        return new this.Context(path);
	    }
	    return this._reusableContextStack.pop().reset(path);
	};

	PVp.releaseContext = function(context) {
	    assert.ok(context instanceof this.Context);
	    this._reusableContextStack.push(context);
	    context.currentPath = null;
	};

	PVp.reportChanged = function() {
	    this._changeReported = true;
	};

	PVp.wasChangeReported = function() {
	    return this._changeReported;
	};

	function makeContextConstructor(visitor) {
	    function Context(path) {
	        assert.ok(this instanceof Context);
	        assert.ok(this instanceof PathVisitor);
	        assert.ok(path instanceof NodePath);

	        Object.defineProperty(this, "visitor", {
	            value: visitor,
	            writable: false,
	            enumerable: true,
	            configurable: false
	        });

	        this.currentPath = path;
	        this.needToCallTraverse = true;

	        Object.seal(this);
	    }

	    assert.ok(visitor instanceof PathVisitor);

	    // Note that the visitor object is the prototype of Context.prototype,
	    // so all visitor methods are inherited by context objects.
	    var Cp = Context.prototype = Object.create(visitor);

	    Cp.constructor = Context;
	    extend(Cp, sharedContextProtoMethods);

	    return Context;
	}

	// Every PathVisitor has a different this.Context constructor and
	// this.Context.prototype object, but those prototypes can all use the
	// same reset, invokeVisitorMethod, and traverse function objects.
	var sharedContextProtoMethods = Object.create(null);

	sharedContextProtoMethods.reset =
	function reset(path) {
	    assert.ok(this instanceof this.Context);
	    assert.ok(path instanceof NodePath);

	    this.currentPath = path;
	    this.needToCallTraverse = true;

	    return this;
	};

	sharedContextProtoMethods.invokeVisitorMethod =
	function invokeVisitorMethod(methodName) {
	    assert.ok(this instanceof this.Context);
	    assert.ok(this.currentPath instanceof NodePath);

	    var result = this.visitor[methodName].call(this, this.currentPath);

	    if (result === false) {
	        // Visitor methods return false to indicate that they have handled
	        // their own traversal needs, and we should not complain if
	        // this.needToCallTraverse is still true.
	        this.needToCallTraverse = false;

	    } else if (result !== undefined) {
	        // Any other non-undefined value returned from the visitor method
	        // is interpreted as a replacement value.
	        this.currentPath = this.currentPath.replace(result)[0];

	        if (this.needToCallTraverse) {
	            // If this.traverse still hasn't been called, visit the
	            // children of the replacement node.
	            this.traverse(this.currentPath);
	        }
	    }

	    assert.strictEqual(
	        this.needToCallTraverse, false,
	        "Must either call this.traverse or return false in " + methodName
	    );

	    var path = this.currentPath;
	    return path && path.value;
	};

	sharedContextProtoMethods.traverse =
	function traverse(path, newVisitor) {
	    assert.ok(this instanceof this.Context);
	    assert.ok(path instanceof NodePath);
	    assert.ok(this.currentPath instanceof NodePath);

	    this.needToCallTraverse = false;

	    return visitChildren(path, PathVisitor.fromMethodsObject(
	        newVisitor || this.visitor
	    ));
	};

	sharedContextProtoMethods.visit =
	function visit(path, newVisitor) {
	    assert.ok(this instanceof this.Context);
	    assert.ok(path instanceof NodePath);
	    assert.ok(this.currentPath instanceof NodePath);

	    this.needToCallTraverse = false;

	    return PathVisitor.fromMethodsObject(
	        newVisitor || this.visitor
	    ).visitWithoutReset(path);
	};

	sharedContextProtoMethods.reportChanged = function reportChanged() {
	    this.visitor.reportChanged();
	};

	sharedContextProtoMethods.abort = function abort() {
	    this.needToCallTraverse = false;
	    this.visitor.abort();
	};

	module.exports = PathVisitor;

	},{"./node-path":498,"./types":503,"assert":1}],500:[function(require,module,exports){
	var assert = require("assert");
	var Op = Object.prototype;
	var hasOwn = Op.hasOwnProperty;
	var types = require("./types");
	var isArray = types.builtInTypes.array;
	var isNumber = types.builtInTypes.number;
	var Ap = Array.prototype;
	var slice = Ap.slice;
	var map = Ap.map;

	function Path(value, parentPath, name) {
	    assert.ok(this instanceof Path);

	    if (parentPath) {
	        assert.ok(parentPath instanceof Path);
	    } else {
	        parentPath = null;
	        name = null;
	    }

	    // The value encapsulated by this Path, generally equal to
	    // parentPath.value[name] if we have a parentPath.
	    this.value = value;

	    // The immediate parent Path of this Path.
	    this.parentPath = parentPath;

	    // The name of the property of parentPath.value through which this
	    // Path's value was reached.
	    this.name = name;

	    // Calling path.get("child") multiple times always returns the same
	    // child Path object, for both performance and consistency reasons.
	    this.__childCache = null;
	}

	var Pp = Path.prototype;

	function getChildCache(path) {
	    // Lazily create the child cache. This also cheapens cache
	    // invalidation, since you can just reset path.__childCache to null.
	    return path.__childCache || (path.__childCache = Object.create(null));
	}

	function getChildPath(path, name) {
	    var cache = getChildCache(path);
	    var actualChildValue = path.getValueProperty(name);
	    var childPath = cache[name];
	    if (!hasOwn.call(cache, name) ||
	        // Ensure consistency between cache and reality.
	        childPath.value !== actualChildValue) {
	        childPath = cache[name] = new path.constructor(
	            actualChildValue, path, name
	        );
	    }
	    return childPath;
	}

	// This method is designed to be overridden by subclasses that need to
	// handle missing properties, etc.
	Pp.getValueProperty = function getValueProperty(name) {
	    return this.value[name];
	};

	Pp.get = function get(name) {
	    var path = this;
	    var names = arguments;
	    var count = names.length;

	    for (var i = 0; i < count; ++i) {
	        path = getChildPath(path, names[i]);
	    }

	    return path;
	};

	Pp.each = function each(callback, context) {
	    var childPaths = [];
	    var len = this.value.length;
	    var i = 0;

	    // Collect all the original child paths before invoking the callback.
	    for (var i = 0; i < len; ++i) {
	        if (hasOwn.call(this.value, i)) {
	            childPaths[i] = this.get(i);
	        }
	    }

	    // Invoke the callback on just the original child paths, regardless of
	    // any modifications made to the array by the callback. I chose these
	    // semantics over cleverly invoking the callback on new elements because
	    // this way is much easier to reason about.
	    context = context || this;
	    for (i = 0; i < len; ++i) {
	        if (hasOwn.call(childPaths, i)) {
	            callback.call(context, childPaths[i]);
	        }
	    }
	};

	Pp.map = function map(callback, context) {
	    var result = [];

	    this.each(function(childPath) {
	        result.push(callback.call(this, childPath));
	    }, context);

	    return result;
	};

	Pp.filter = function filter(callback, context) {
	    var result = [];

	    this.each(function(childPath) {
	        if (callback.call(this, childPath)) {
	            result.push(childPath);
	        }
	    }, context);

	    return result;
	};

	function emptyMoves() {}
	function getMoves(path, offset, start, end) {
	    isArray.assert(path.value);

	    if (offset === 0) {
	        return emptyMoves;
	    }

	    var length = path.value.length;
	    if (length < 1) {
	        return emptyMoves;
	    }

	    var argc = arguments.length;
	    if (argc === 2) {
	        start = 0;
	        end = length;
	    } else if (argc === 3) {
	        start = Math.max(start, 0);
	        end = length;
	    } else {
	        start = Math.max(start, 0);
	        end = Math.min(end, length);
	    }

	    isNumber.assert(start);
	    isNumber.assert(end);

	    var moves = Object.create(null);
	    var cache = getChildCache(path);

	    for (var i = start; i < end; ++i) {
	        if (hasOwn.call(path.value, i)) {
	            var childPath = path.get(i);
	            assert.strictEqual(childPath.name, i);
	            var newIndex = i + offset;
	            childPath.name = newIndex;
	            moves[newIndex] = childPath;
	            delete cache[i];
	        }
	    }

	    delete cache.length;

	    return function() {
	        for (var newIndex in moves) {
	            var childPath = moves[newIndex];
	            assert.strictEqual(childPath.name, +newIndex);
	            cache[newIndex] = childPath;
	            path.value[newIndex] = childPath.value;
	        }
	    };
	}

	Pp.shift = function shift() {
	    var move = getMoves(this, -1);
	    var result = this.value.shift();
	    move();
	    return result;
	};

	Pp.unshift = function unshift(node) {
	    var move = getMoves(this, arguments.length);
	    var result = this.value.unshift.apply(this.value, arguments);
	    move();
	    return result;
	};

	Pp.push = function push(node) {
	    isArray.assert(this.value);
	    delete getChildCache(this).length
	    return this.value.push.apply(this.value, arguments);
	};

	Pp.pop = function pop() {
	    isArray.assert(this.value);
	    var cache = getChildCache(this);
	    delete cache[this.value.length - 1];
	    delete cache.length;
	    return this.value.pop();
	};

	Pp.insertAt = function insertAt(index, node) {
	    var argc = arguments.length;
	    var move = getMoves(this, argc - 1, index);
	    if (move === emptyMoves) {
	        return this;
	    }

	    index = Math.max(index, 0);

	    for (var i = 1; i < argc; ++i) {
	        this.value[index + i - 1] = arguments[i];
	    }

	    move();

	    return this;
	};

	Pp.insertBefore = function insertBefore(node) {
	    var pp = this.parentPath;
	    var argc = arguments.length;
	    var insertAtArgs = [this.name];
	    for (var i = 0; i < argc; ++i) {
	        insertAtArgs.push(arguments[i]);
	    }
	    return pp.insertAt.apply(pp, insertAtArgs);
	};

	Pp.insertAfter = function insertAfter(node) {
	    var pp = this.parentPath;
	    var argc = arguments.length;
	    var insertAtArgs = [this.name + 1];
	    for (var i = 0; i < argc; ++i) {
	        insertAtArgs.push(arguments[i]);
	    }
	    return pp.insertAt.apply(pp, insertAtArgs);
	};

	function repairRelationshipWithParent(path) {
	    assert.ok(path instanceof Path);

	    var pp = path.parentPath;
	    if (!pp) {
	        // Orphan paths have no relationship to repair.
	        return path;
	    }

	    var parentValue = pp.value;
	    var parentCache = getChildCache(pp);

	    // Make sure parentCache[path.name] is populated.
	    if (parentValue[path.name] === path.value) {
	        parentCache[path.name] = path;
	    } else if (isArray.check(parentValue)) {
	        // Something caused path.name to become out of date, so attempt to
	        // recover by searching for path.value in parentValue.
	        var i = parentValue.indexOf(path.value);
	        if (i >= 0) {
	            parentCache[path.name = i] = path;
	        }
	    } else {
	        // If path.value disagrees with parentValue[path.name], and
	        // path.name is not an array index, let path.value become the new
	        // parentValue[path.name] and update parentCache accordingly.
	        parentValue[path.name] = path.value;
	        parentCache[path.name] = path;
	    }

	    assert.strictEqual(parentValue[path.name], path.value);
	    assert.strictEqual(path.parentPath.get(path.name), path);

	    return path;
	}

	Pp.replace = function replace(replacement) {
	    var results = [];
	    var parentValue = this.parentPath.value;
	    var parentCache = getChildCache(this.parentPath);
	    var count = arguments.length;

	    repairRelationshipWithParent(this);

	    if (isArray.check(parentValue)) {
	        var originalLength = parentValue.length;
	        var move = getMoves(this.parentPath, count - 1, this.name + 1);

	        var spliceArgs = [this.name, 1];
	        for (var i = 0; i < count; ++i) {
	            spliceArgs.push(arguments[i]);
	        }

	        var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);

	        assert.strictEqual(splicedOut[0], this.value);
	        assert.strictEqual(
	            parentValue.length,
	            originalLength - 1 + count
	        );

	        move();

	        if (count === 0) {
	            delete this.value;
	            delete parentCache[this.name];
	            this.__childCache = null;

	        } else {
	            assert.strictEqual(parentValue[this.name], replacement);

	            if (this.value !== replacement) {
	                this.value = replacement;
	                this.__childCache = null;
	            }

	            for (i = 0; i < count; ++i) {
	                results.push(this.parentPath.get(this.name + i));
	            }

	            assert.strictEqual(results[0], this);
	        }

	    } else if (count === 1) {
	        if (this.value !== replacement) {
	            this.__childCache = null;
	        }
	        this.value = parentValue[this.name] = replacement;
	        results.push(this);

	    } else if (count === 0) {
	        delete parentValue[this.name];
	        delete this.value;
	        this.__childCache = null;

	        // Leave this path cached as parentCache[this.name], even though
	        // it no longer has a value defined.

	    } else {
	        assert.ok(false, "Could not replace path");
	    }

	    return results;
	};

	module.exports = Path;

	},{"./types":503,"assert":1}],501:[function(require,module,exports){
	var assert = require("assert");
	var types = require("./types");
	var Type = types.Type;
	var namedTypes = types.namedTypes;
	var Node = namedTypes.Node;
	var Expression = namedTypes.Expression;
	var isArray = types.builtInTypes.array;
	var hasOwn = Object.prototype.hasOwnProperty;
	var b = types.builders;

	function Scope(path, parentScope) {
	    assert.ok(this instanceof Scope);
	    assert.ok(path instanceof require("./node-path"));
	    ScopeType.assert(path.value);

	    var depth;

	    if (parentScope) {
	        assert.ok(parentScope instanceof Scope);
	        depth = parentScope.depth + 1;
	    } else {
	        parentScope = null;
	        depth = 0;
	    }

	    Object.defineProperties(this, {
	        path: { value: path },
	        node: { value: path.value },
	        isGlobal: { value: !parentScope, enumerable: true },
	        depth: { value: depth },
	        parent: { value: parentScope },
	        bindings: { value: {} }
	    });
	}

	var scopeTypes = [
	    // Program nodes introduce global scopes.
	    namedTypes.Program,

	    // Function is the supertype of FunctionExpression,
	    // FunctionDeclaration, ArrowExpression, etc.
	    namedTypes.Function,

	    // In case you didn't know, the caught parameter shadows any variable
	    // of the same name in an outer scope.
	    namedTypes.CatchClause
	];

	var ScopeType = Type.or.apply(Type, scopeTypes);

	Scope.isEstablishedBy = function(node) {
	    return ScopeType.check(node);
	};

	var Sp = Scope.prototype;

	// Will be overridden after an instance lazily calls scanScope.
	Sp.didScan = false;

	Sp.declares = function(name) {
	    this.scan();
	    return hasOwn.call(this.bindings, name);
	};

	Sp.declareTemporary = function(prefix) {
	    if (prefix) {
	        assert.ok(/^[a-z$_]/i.test(prefix), prefix);
	    } else {
	        prefix = "t$";
	    }

	    // Include this.depth in the name to make sure the name does not
	    // collide with any variables in nested/enclosing scopes.
	    prefix += this.depth.toString(36) + "$";

	    this.scan();

	    var index = 0;
	    while (this.declares(prefix + index)) {
	        ++index;
	    }

	    var name = prefix + index;
	    return this.bindings[name] = types.builders.identifier(name);
	};

	Sp.injectTemporary = function(identifier, init) {
	    identifier || (identifier = this.declareTemporary());

	    var bodyPath = this.path.get("body");
	    if (namedTypes.BlockStatement.check(bodyPath.value)) {
	        bodyPath = bodyPath.get("body");
	    }

	    bodyPath.unshift(
	        b.variableDeclaration(
	            "var",
	            [b.variableDeclarator(identifier, init || null)]
	        )
	    );

	    return identifier;
	};

	Sp.scan = function(force) {
	    if (force || !this.didScan) {
	        for (var name in this.bindings) {
	            // Empty out this.bindings, just in cases.
	            delete this.bindings[name];
	        }
	        scanScope(this.path, this.bindings);
	        this.didScan = true;
	    }
	};

	Sp.getBindings = function () {
	    this.scan();
	    return this.bindings;
	};

	function scanScope(path, bindings) {
	    var node = path.value;
	    ScopeType.assert(node);

	    if (namedTypes.CatchClause.check(node)) {
	        // A catch clause establishes a new scope but the only variable
	        // bound in that scope is the catch parameter. Any other
	        // declarations create bindings in the outer scope.
	        addPattern(path.get("param"), bindings);

	    } else {
	        recursiveScanScope(path, bindings);
	    }
	}

	function recursiveScanScope(path, bindings) {
	    var node = path.value;

	    if (path.parent &&
	        namedTypes.FunctionExpression.check(path.parent.node) &&
	        path.parent.node.id) {
	        addPattern(path.parent.get("id"), bindings);
	    }

	    if (!node) {
	        // None of the remaining cases matter if node is falsy.

	    } else if (isArray.check(node)) {
	        path.each(function(childPath) {
	            recursiveScanChild(childPath, bindings);
	        });

	    } else if (namedTypes.Function.check(node)) {
	        path.get("params").each(function(paramPath) {
	            addPattern(paramPath, bindings);
	        });

	        recursiveScanChild(path.get("body"), bindings);

	    } else if (namedTypes.VariableDeclarator.check(node)) {
	        addPattern(path.get("id"), bindings);
	        recursiveScanChild(path.get("init"), bindings);

	    } else if (node.type === "ImportSpecifier" ||
	               node.type === "ImportNamespaceSpecifier" ||
	               node.type === "ImportDefaultSpecifier") {
	        addPattern(
	            // Esprima used to use the .name field to refer to the local
	            // binding identifier for ImportSpecifier nodes, but .id for
	            // ImportNamespaceSpecifier and ImportDefaultSpecifier nodes.
	            // ESTree/Acorn/ESpree use .local for all three node types.
	            path.get(node.local ? "local" :
	                     node.name ? "name" : "id"),
	            bindings
	        );

	    } else if (Node.check(node) && !Expression.check(node)) {
	        types.eachField(node, function(name, child) {
	            var childPath = path.get(name);
	            assert.strictEqual(childPath.value, child);
	            recursiveScanChild(childPath, bindings);
	        });
	    }
	}

	function recursiveScanChild(path, bindings) {
	    var node = path.value;

	    if (!node || Expression.check(node)) {
	        // Ignore falsy values and Expressions.

	    } else if (namedTypes.FunctionDeclaration.check(node)) {
	        addPattern(path.get("id"), bindings);

	    } else if (namedTypes.ClassDeclaration &&
	               namedTypes.ClassDeclaration.check(node)) {
	        addPattern(path.get("id"), bindings);

	    } else if (ScopeType.check(node)) {
	        if (namedTypes.CatchClause.check(node)) {
	            var catchParamName = node.param.name;
	            var hadBinding = hasOwn.call(bindings, catchParamName);

	            // Any declarations that occur inside the catch body that do
	            // not have the same name as the catch parameter should count
	            // as bindings in the outer scope.
	            recursiveScanScope(path.get("body"), bindings);

	            // If a new binding matching the catch parameter name was
	            // created while scanning the catch body, ignore it because it
	            // actually refers to the catch parameter and not the outer
	            // scope that we're currently scanning.
	            if (!hadBinding) {
	                delete bindings[catchParamName];
	            }
	        }

	    } else {
	        recursiveScanScope(path, bindings);
	    }
	}

	function addPattern(patternPath, bindings) {
	    var pattern = patternPath.value;
	    namedTypes.Pattern.assert(pattern);

	    if (namedTypes.Identifier.check(pattern)) {
	        if (hasOwn.call(bindings, pattern.name)) {
	            bindings[pattern.name].push(patternPath);
	        } else {
	            bindings[pattern.name] = [patternPath];
	        }

	    } else if (namedTypes.ObjectPattern &&
	               namedTypes.ObjectPattern.check(pattern)) {
	        patternPath.get('properties').each(function(propertyPath) {
	            var property = propertyPath.value;
	            if (namedTypes.Pattern.check(property)) {
	                addPattern(propertyPath, bindings);
	            } else  if (namedTypes.Property.check(property)) {
	                addPattern(propertyPath.get('value'), bindings);
	            } else if (namedTypes.SpreadProperty &&
	                       namedTypes.SpreadProperty.check(property)) {
	                addPattern(propertyPath.get('argument'), bindings);
	            }
	        });

	    } else if (namedTypes.ArrayPattern &&
	               namedTypes.ArrayPattern.check(pattern)) {
	        patternPath.get('elements').each(function(elementPath) {
	            var element = elementPath.value;
	            if (namedTypes.Pattern.check(element)) {
	                addPattern(elementPath, bindings);
	            } else if (namedTypes.SpreadElement &&
	                       namedTypes.SpreadElement.check(element)) {
	                addPattern(elementPath.get("argument"), bindings);
	            }
	        });

	    } else if (namedTypes.PropertyPattern &&
	               namedTypes.PropertyPattern.check(pattern)) {
	        addPattern(patternPath.get('pattern'), bindings);

	    } else if ((namedTypes.SpreadElementPattern &&
	                namedTypes.SpreadElementPattern.check(pattern)) ||
	               (namedTypes.SpreadPropertyPattern &&
	                namedTypes.SpreadPropertyPattern.check(pattern))) {
	        addPattern(patternPath.get('argument'), bindings);
	    }
	}

	Sp.lookup = function(name) {
	    for (var scope = this; scope; scope = scope.parent)
	        if (scope.declares(name))
	            break;
	    return scope;
	};

	Sp.getGlobalScope = function() {
	    var scope = this;
	    while (!scope.isGlobal)
	        scope = scope.parent;
	    return scope;
	};

	module.exports = Scope;

	},{"./node-path":498,"./types":503,"assert":1}],502:[function(require,module,exports){
	var types = require("../lib/types");
	var Type = types.Type;
	var builtin = types.builtInTypes;
	var isNumber = builtin.number;

	// An example of constructing a new type with arbitrary constraints from
	// an existing type.
	exports.geq = function(than) {
	    return new Type(function(value) {
	        return isNumber.check(value) && value >= than;
	    }, isNumber + " >= " + than);
	};

	// Default value-returning functions that may optionally be passed as a
	// third argument to Def.prototype.field.
	exports.defaults = {
	    // Functions were used because (among other reasons) that's the most
	    // elegant way to allow for the emptyArray one always to give a new
	    // array instance.
	    "null": function() { return null },
	    "emptyArray": function() { return [] },
	    "false": function() { return false },
	    "true": function() { return true },
	    "undefined": function() {}
	};

	var naiveIsPrimitive = Type.or(
	    builtin.string,
	    builtin.number,
	    builtin.boolean,
	    builtin.null,
	    builtin.undefined
	);

	exports.isPrimitive = new Type(function(value) {
	    if (value === null)
	        return true;
	    var type = typeof value;
	    return !(type === "object" ||
	             type === "function");
	}, naiveIsPrimitive.toString());

	},{"../lib/types":503}],503:[function(require,module,exports){
	var assert = require("assert");
	var Ap = Array.prototype;
	var slice = Ap.slice;
	var map = Ap.map;
	var each = Ap.forEach;
	var Op = Object.prototype;
	var objToStr = Op.toString;
	var funObjStr = objToStr.call(function(){});
	var strObjStr = objToStr.call("");
	var hasOwn = Op.hasOwnProperty;

	// A type is an object with a .check method that takes a value and returns
	// true or false according to whether the value matches the type.

	function Type(check, name) {
	    var self = this;
	    assert.ok(self instanceof Type, self);

	    // Unfortunately we can't elegantly reuse isFunction and isString,
	    // here, because this code is executed while defining those types.
	    assert.strictEqual(objToStr.call(check), funObjStr,
	                       check + " is not a function");

	    // The `name` parameter can be either a function or a string.
	    var nameObjStr = objToStr.call(name);
	    assert.ok(nameObjStr === funObjStr ||
	              nameObjStr === strObjStr,
	              name + " is neither a function nor a string");

	    Object.defineProperties(self, {
	        name: { value: name },
	        check: {
	            value: function(value, deep) {
	                var result = check.call(self, value, deep);
	                if (!result && deep && objToStr.call(deep) === funObjStr)
	                    deep(self, value);
	                return result;
	            }
	        }
	    });
	}

	var Tp = Type.prototype;

	// Throughout this file we use Object.defineProperty to prevent
	// redefinition of exported properties.
	exports.Type = Type;

	// Like .check, except that failure triggers an AssertionError.
	Tp.assert = function(value, deep) {
	    if (!this.check(value, deep)) {
	        var str = shallowStringify(value);
	        assert.ok(false, str + " does not match type " + this);
	        return false;
	    }
	    return true;
	};

	function shallowStringify(value) {
	    if (isObject.check(value))
	        return "{" + Object.keys(value).map(function(key) {
	            return key + ": " + value[key];
	        }).join(", ") + "}";

	    if (isArray.check(value))
	        return "[" + value.map(shallowStringify).join(", ") + "]";

	    return JSON.stringify(value);
	}

	Tp.toString = function() {
	    var name = this.name;

	    if (isString.check(name))
	        return name;

	    if (isFunction.check(name))
	        return name.call(this) + "";

	    return name + " type";
	};

	var builtInCtorFns = [];
	var builtInCtorTypes = [];
	var builtInTypes = {};
	exports.builtInTypes = builtInTypes;

	function defBuiltInType(example, name) {
	    var objStr = objToStr.call(example);

	    var type = new Type(function(value) {
	        return objToStr.call(value) === objStr;
	    }, name);

	    builtInTypes[name] = type;

	    if (example && typeof example.constructor === "function") {
	        builtInCtorFns.push(example.constructor);
	        builtInCtorTypes.push(type);
	    }

	    return type;
	}

	// These types check the underlying [[Class]] attribute of the given
	// value, rather than using the problematic typeof operator. Note however
	// that no subtyping is considered; so, for instance, isObject.check
	// returns false for [], /./, new Date, and null.
	var isString = defBuiltInType("truthy", "string");
	var isFunction = defBuiltInType(function(){}, "function");
	var isArray = defBuiltInType([], "array");
	var isObject = defBuiltInType({}, "object");
	var isRegExp = defBuiltInType(/./, "RegExp");
	var isDate = defBuiltInType(new Date, "Date");
	var isNumber = defBuiltInType(3, "number");
	var isBoolean = defBuiltInType(true, "boolean");
	var isNull = defBuiltInType(null, "null");
	var isUndefined = defBuiltInType(void 0, "undefined");

	// There are a number of idiomatic ways of expressing types, so this
	// function serves to coerce them all to actual Type objects. Note that
	// providing the name argument is not necessary in most cases.
	function toType(from, name) {
	    // The toType function should of course be idempotent.
	    if (from instanceof Type)
	        return from;

	    // The Def type is used as a helper for constructing compound
	    // interface types for AST nodes.
	    if (from instanceof Def)
	        return from.type;

	    // Support [ElemType] syntax.
	    if (isArray.check(from))
	        return Type.fromArray(from);

	    // Support { someField: FieldType, ... } syntax.
	    if (isObject.check(from))
	        return Type.fromObject(from);

	    if (isFunction.check(from)) {
	        var bicfIndex = builtInCtorFns.indexOf(from);
	        if (bicfIndex >= 0) {
	            return builtInCtorTypes[bicfIndex];
	        }

	        // If isFunction.check(from), and from is not a built-in
	        // constructor, assume from is a binary predicate function we can
	        // use to define the type.
	        return new Type(from, name);
	    }

	    // As a last resort, toType returns a type that matches any value that
	    // is === from. This is primarily useful for literal values like
	    // toType(null), but it has the additional advantage of allowing
	    // toType to be a total function.
	    return new Type(function(value) {
	        return value === from;
	    }, isUndefined.check(name) ? function() {
	        return from + "";
	    } : name);
	}

	// Returns a type that matches the given value iff any of type1, type2,
	// etc. match the value.
	Type.or = function(/* type1, type2, ... */) {
	    var types = [];
	    var len = arguments.length;
	    for (var i = 0; i < len; ++i)
	        types.push(toType(arguments[i]));

	    return new Type(function(value, deep) {
	        for (var i = 0; i < len; ++i)
	            if (types[i].check(value, deep))
	                return true;
	        return false;
	    }, function() {
	        return types.join(" | ");
	    });
	};

	Type.fromArray = function(arr) {
	    assert.ok(isArray.check(arr));
	    assert.strictEqual(
	        arr.length, 1,
	        "only one element type is permitted for typed arrays");
	    return toType(arr[0]).arrayOf();
	};

	Tp.arrayOf = function() {
	    var elemType = this;
	    return new Type(function(value, deep) {
	        return isArray.check(value) && value.every(function(elem) {
	            return elemType.check(elem, deep);
	        });
	    }, function() {
	        return "[" + elemType + "]";
	    });
	};

	Type.fromObject = function(obj) {
	    var fields = Object.keys(obj).map(function(name) {
	        return new Field(name, obj[name]);
	    });

	    return new Type(function(value, deep) {
	        return isObject.check(value) && fields.every(function(field) {
	            return field.type.check(value[field.name], deep);
	        });
	    }, function() {
	        return "{ " + fields.join(", ") + " }";
	    });
	};

	function Field(name, type, defaultFn, hidden) {
	    var self = this;

	    assert.ok(self instanceof Field);
	    isString.assert(name);

	    type = toType(type);

	    var properties = {
	        name: { value: name },
	        type: { value: type },
	        hidden: { value: !!hidden }
	    };

	    if (isFunction.check(defaultFn)) {
	        properties.defaultFn = { value: defaultFn };
	    }

	    Object.defineProperties(self, properties);
	}

	var Fp = Field.prototype;

	Fp.toString = function() {
	    return JSON.stringify(this.name) + ": " + this.type;
	};

	Fp.getValue = function(obj) {
	    var value = obj[this.name];

	    if (!isUndefined.check(value))
	        return value;

	    if (this.defaultFn)
	        value = this.defaultFn.call(obj);

	    return value;
	};

	// Define a type whose name is registered in a namespace (the defCache) so
	// that future definitions will return the same type given the same name.
	// In particular, this system allows for circular and forward definitions.
	// The Def object d returned from Type.def may be used to configure the
	// type d.type by calling methods such as d.bases, d.build, and d.field.
	Type.def = function(typeName) {
	    isString.assert(typeName);
	    return hasOwn.call(defCache, typeName)
	        ? defCache[typeName]
	        : defCache[typeName] = new Def(typeName);
	};

	// In order to return the same Def instance every time Type.def is called
	// with a particular name, those instances need to be stored in a cache.
	var defCache = Object.create(null);

	function Def(typeName) {
	    var self = this;
	    assert.ok(self instanceof Def);

	    Object.defineProperties(self, {
	        typeName: { value: typeName },
	        baseNames: { value: [] },
	        ownFields: { value: Object.create(null) },

	        // These two are populated during finalization.
	        allSupertypes: { value: Object.create(null) }, // Includes own typeName.
	        supertypeList: { value: [] }, // Linear inheritance hierarchy.
	        allFields: { value: Object.create(null) }, // Includes inherited fields.
	        fieldNames: { value: [] }, // Non-hidden keys of allFields.

	        type: {
	            value: new Type(function(value, deep) {
	                return self.check(value, deep);
	            }, typeName)
	        }
	    });
	}

	Def.fromValue = function(value) {
	    if (value && typeof value === "object") {
	        var type = value.type;
	        if (typeof type === "string" &&
	            hasOwn.call(defCache, type)) {
	            var d = defCache[type];
	            if (d.finalized) {
	                return d;
	            }
	        }
	    }

	    return null;
	};

	var Dp = Def.prototype;

	Dp.isSupertypeOf = function(that) {
	    if (that instanceof Def) {
	        assert.strictEqual(this.finalized, true);
	        assert.strictEqual(that.finalized, true);
	        return hasOwn.call(that.allSupertypes, this.typeName);
	    } else {
	        assert.ok(false, that + " is not a Def");
	    }
	};

	// Note that the list returned by this function is a copy of the internal
	// supertypeList, *without* the typeName itself as the first element.
	exports.getSupertypeNames = function(typeName) {
	    assert.ok(hasOwn.call(defCache, typeName));
	    var d = defCache[typeName];
	    assert.strictEqual(d.finalized, true);
	    return d.supertypeList.slice(1);
	};

	// Returns an object mapping from every known type in the defCache to the
	// most specific supertype whose name is an own property of the candidates
	// object.
	exports.computeSupertypeLookupTable = function(candidates) {
	    var table = {};
	    var typeNames = Object.keys(defCache);
	    var typeNameCount = typeNames.length;

	    for (var i = 0; i < typeNameCount; ++i) {
	        var typeName = typeNames[i];
	        var d = defCache[typeName];
	        assert.strictEqual(d.finalized, true, typeName);
	        for (var j = 0; j < d.supertypeList.length; ++j) {
	            var superTypeName = d.supertypeList[j];
	            if (hasOwn.call(candidates, superTypeName)) {
	                table[typeName] = superTypeName;
	                break;
	            }
	        }
	    }

	    return table;
	};

	Dp.checkAllFields = function(value, deep) {
	    var allFields = this.allFields;
	    assert.strictEqual(this.finalized, true, this.typeName);

	    function checkFieldByName(name) {
	        var field = allFields[name];
	        var type = field.type;
	        var child = field.getValue(value);
	        return type.check(child, deep);
	    }

	    return isObject.check(value)
	        && Object.keys(allFields).every(checkFieldByName);
	};

	Dp.check = function(value, deep) {
	    assert.strictEqual(
	        this.finalized, true,
	        "prematurely checking unfinalized type " + this.typeName);

	    // A Def type can only match an object value.
	    if (!isObject.check(value))
	        return false;

	    var vDef = Def.fromValue(value);
	    if (!vDef) {
	        // If we couldn't infer the Def associated with the given value,
	        // and we expected it to be a SourceLocation or a Position, it was
	        // probably just missing a "type" field (because Esprima does not
	        // assign a type property to such nodes). Be optimistic and let
	        // this.checkAllFields make the final decision.
	        if (this.typeName === "SourceLocation" ||
	            this.typeName === "Position") {
	            return this.checkAllFields(value, deep);
	        }

	        // Calling this.checkAllFields for any other type of node is both
	        // bad for performance and way too forgiving.
	        return false;
	    }

	    // If checking deeply and vDef === this, then we only need to call
	    // checkAllFields once. Calling checkAllFields is too strict when deep
	    // is false, because then we only care about this.isSupertypeOf(vDef).
	    if (deep && vDef === this)
	        return this.checkAllFields(value, deep);

	    // In most cases we rely exclusively on isSupertypeOf to make O(1)
	    // subtyping determinations. This suffices in most situations outside
	    // of unit tests, since interface conformance is checked whenever new
	    // instances are created using builder functions.
	    if (!this.isSupertypeOf(vDef))
	        return false;

	    // The exception is when deep is true; then, we recursively check all
	    // fields.
	    if (!deep)
	        return true;

	    // Use the more specific Def (vDef) to perform the deep check, but
	    // shallow-check fields defined by the less specific Def (this).
	    return vDef.checkAllFields(value, deep)
	        && this.checkAllFields(value, false);
	};

	Dp.bases = function() {
	    var args = slice.call(arguments);
	    var bases = this.baseNames;

	    if (this.finalized) {
	        assert.deepEqual(args, bases);
	        return this;
	    }

	    args.forEach(function(baseName) {
	        isString.assert(baseName);

	        // This indexOf lookup may be O(n), but the typical number of base
	        // names is very small, and indexOf is a native Array method.
	        if (bases.indexOf(baseName) < 0)
	            bases.push(baseName);
	    });

	    return this; // For chaining.
	};

	// False by default until .build(...) is called on an instance.
	Object.defineProperty(Dp, "buildable", { value: false });

	var builders = {};
	exports.builders = builders;

	// This object is used as prototype for any node created by a builder.
	var nodePrototype = {};

	// Call this function to define a new method to be shared by all AST
	// nodes. The replaced method (if any) is returned for easy wrapping.
	exports.defineMethod = function(name, func) {
	    var old = nodePrototype[name];

	    // Pass undefined as func to delete nodePrototype[name].
	    if (isUndefined.check(func)) {
	        delete nodePrototype[name];

	    } else {
	        isFunction.assert(func);

	        Object.defineProperty(nodePrototype, name, {
	            enumerable: true, // For discoverability.
	            configurable: true, // For delete proto[name].
	            value: func
	        });
	    }

	    return old;
	};

	var isArrayOfString = isString.arrayOf();

	// Calling the .build method of a Def simultaneously marks the type as
	// buildable (by defining builders[getBuilderName(typeName)]) and
	// specifies the order of arguments that should be passed to the builder
	// function to create an instance of the type.
	Dp.build = function(/* param1, param2, ... */) {
	    var self = this;

	    var newBuildParams = slice.call(arguments);
	    isArrayOfString.assert(newBuildParams);

	    // Calling Def.prototype.build multiple times has the effect of merely
	    // redefining this property.
	    Object.defineProperty(self, "buildParams", {
	        value: newBuildParams,
	        writable: false,
	        enumerable: false,
	        configurable: true
	    });

	    if (self.buildable) {
	        // If this Def is already buildable, update self.buildParams and
	        // continue using the old builder function.
	        return self;
	    }

	    // Every buildable type will have its "type" field filled in
	    // automatically. This includes types that are not subtypes of Node,
	    // like SourceLocation, but that seems harmless (TODO?).
	    self.field("type", String, function() { return self.typeName });

	    // Override Dp.buildable for this Def instance.
	    Object.defineProperty(self, "buildable", { value: true });

	    Object.defineProperty(builders, getBuilderName(self.typeName), {
	        enumerable: true,

	        value: function() {
	            var args = arguments;
	            var argc = args.length;
	            var built = Object.create(nodePrototype);

	            assert.ok(
	                self.finalized,
	                "attempting to instantiate unfinalized type " + self.typeName);

	            function add(param, i) {
	                if (hasOwn.call(built, param))
	                    return;

	                var all = self.allFields;
	                assert.ok(hasOwn.call(all, param), param);

	                var field = all[param];
	                var type = field.type;
	                var value;

	                if (isNumber.check(i) && i < argc) {
	                    value = args[i];
	                } else if (field.defaultFn) {
	                    // Expose the partially-built object to the default
	                    // function as its `this` object.
	                    value = field.defaultFn.call(built);
	                } else {
	                    var message = "no value or default function given for field " +
	                        JSON.stringify(param) + " of " + self.typeName + "(" +
	                            self.buildParams.map(function(name) {
	                                return all[name];
	                            }).join(", ") + ")";
	                    assert.ok(false, message);
	                }

	                if (!type.check(value)) {
	                    assert.ok(
	                        false,
	                        shallowStringify(value) +
	                            " does not match field " + field +
	                            " of type " + self.typeName
	                    );
	                }

	                // TODO Could attach getters and setters here to enforce
	                // dynamic type safety.
	                built[param] = value;
	            }

	            self.buildParams.forEach(function(param, i) {
	                add(param, i);
	            });

	            Object.keys(self.allFields).forEach(function(param) {
	                add(param); // Use the default value.
	            });

	            // Make sure that the "type" field was filled automatically.
	            assert.strictEqual(built.type, self.typeName);

	            return built;
	        }
	    });

	    return self; // For chaining.
	};

	function getBuilderName(typeName) {
	    return typeName.replace(/^[A-Z]+/, function(upperCasePrefix) {
	        var len = upperCasePrefix.length;
	        switch (len) {
	        case 0: return "";
	        // If there's only one initial capital letter, just lower-case it.
	        case 1: return upperCasePrefix.toLowerCase();
	        default:
	            // If there's more than one initial capital letter, lower-case
	            // all but the last one, so that XMLDefaultDeclaration (for
	            // example) becomes xmlDefaultDeclaration.
	            return upperCasePrefix.slice(
	                0, len - 1).toLowerCase() +
	                upperCasePrefix.charAt(len - 1);
	        }
	    });
	}
	exports.getBuilderName = getBuilderName;

	function getStatementBuilderName(typeName) {
	    typeName = getBuilderName(typeName);
	    return typeName.replace(/(Expression)?$/, "Statement");
	}
	exports.getStatementBuilderName = getStatementBuilderName;

	// The reason fields are specified using .field(...) instead of an object
	// literal syntax is somewhat subtle: the object literal syntax would
	// support only one key and one value, but with .field(...) we can pass
	// any number of arguments to specify the field.
	Dp.field = function(name, type, defaultFn, hidden) {
	    if (this.finalized) {
	        console.error("Ignoring attempt to redefine field " +
	                      JSON.stringify(name) + " of finalized type " +
	                      JSON.stringify(this.typeName));
	        return this;
	    }
	    this.ownFields[name] = new Field(name, type, defaultFn, hidden);
	    return this; // For chaining.
	};

	var namedTypes = {};
	exports.namedTypes = namedTypes;

	// Like Object.keys, but aware of what fields each AST type should have.
	function getFieldNames(object) {
	    var d = Def.fromValue(object);
	    if (d) {
	        return d.fieldNames.slice(0);
	    }

	    if ("type" in object) {
	        assert.ok(
	            false,
	            "did not recognize object of type " +
	                JSON.stringify(object.type)
	        );
	    }

	    return Object.keys(object);
	}
	exports.getFieldNames = getFieldNames;

	// Get the value of an object property, taking object.type and default
	// functions into account.
	function getFieldValue(object, fieldName) {
	    var d = Def.fromValue(object);
	    if (d) {
	        var field = d.allFields[fieldName];
	        if (field) {
	            return field.getValue(object);
	        }
	    }

	    return object[fieldName];
	}
	exports.getFieldValue = getFieldValue;

	// Iterate over all defined fields of an object, including those missing
	// or undefined, passing each field name and effective value (as returned
	// by getFieldValue) to the callback. If the object has no corresponding
	// Def, the callback will never be called.
	exports.eachField = function(object, callback, context) {
	    getFieldNames(object).forEach(function(name) {
	        callback.call(this, name, getFieldValue(object, name));
	    }, context);
	};

	// Similar to eachField, except that iteration stops as soon as the
	// callback returns a truthy value. Like Array.prototype.some, the final
	// result is either true or false to indicates whether the callback
	// returned true for any element or not.
	exports.someField = function(object, callback, context) {
	    return getFieldNames(object).some(function(name) {
	        return callback.call(this, name, getFieldValue(object, name));
	    }, context);
	};

	// This property will be overridden as true by individual Def instances
	// when they are finalized.
	Object.defineProperty(Dp, "finalized", { value: false });

	Dp.finalize = function() {
	    var self = this;

	    // It's not an error to finalize a type more than once, but only the
	    // first call to .finalize does anything.
	    if (!self.finalized) {
	        var allFields = self.allFields;
	        var allSupertypes = self.allSupertypes;

	        self.baseNames.forEach(function(name) {
	            var def = defCache[name];
	            if (def instanceof Def) {
	                def.finalize();
	                extend(allFields, def.allFields);
	                extend(allSupertypes, def.allSupertypes);
	            } else {
	                var message = "unknown supertype name " +
	                    JSON.stringify(name) +
	                    " for subtype " +
	                    JSON.stringify(self.typeName);
	                assert.ok(false, message);
	            }
	        });

	        // TODO Warn if fields are overridden with incompatible types.
	        extend(allFields, self.ownFields);
	        allSupertypes[self.typeName] = self;

	        self.fieldNames.length = 0;
	        for (var fieldName in allFields) {
	            if (hasOwn.call(allFields, fieldName) &&
	                !allFields[fieldName].hidden) {
	                self.fieldNames.push(fieldName);
	            }
	        }

	        // Types are exported only once they have been finalized.
	        Object.defineProperty(namedTypes, self.typeName, {
	            enumerable: true,
	            value: self.type
	        });

	        Object.defineProperty(self, "finalized", { value: true });

	        // A linearization of the inheritance hierarchy.
	        populateSupertypeList(self.typeName, self.supertypeList);

	        if (self.buildable && self.supertypeList.lastIndexOf("Expression") >= 0) {
	            wrapExpressionBuilderWithStatement(self.typeName);
	        }
	    }
	};

	// Adds an additional builder for Expression subtypes
	// that wraps the built Expression in an ExpressionStatements.
	function wrapExpressionBuilderWithStatement(typeName) {
	    var wrapperName = getStatementBuilderName(typeName);

	    // skip if the builder already exists
	    if (builders[wrapperName]) return;

	    // the builder function to wrap with builders.ExpressionStatement
	    var wrapped = builders[getBuilderName(typeName)];

	    // skip if there is nothing to wrap
	    if (!wrapped) return;

	    builders[wrapperName] = function() {
	        return builders.expressionStatement(wrapped.apply(builders, arguments));
	    };
	}

	function populateSupertypeList(typeName, list) {
	    list.length = 0;
	    list.push(typeName);

	    var lastSeen = Object.create(null);

	    for (var pos = 0; pos < list.length; ++pos) {
	        typeName = list[pos];
	        var d = defCache[typeName];
	        assert.strictEqual(d.finalized, true);

	        // If we saw typeName earlier in the breadth-first traversal,
	        // delete the last-seen occurrence.
	        if (hasOwn.call(lastSeen, typeName)) {
	            delete list[lastSeen[typeName]];
	        }

	        // Record the new index of the last-seen occurrence of typeName.
	        lastSeen[typeName] = pos;

	        // Enqueue the base names of this type.
	        list.push.apply(list, d.baseNames);
	    }

	    // Compaction loop to remove array holes.
	    for (var to = 0, from = to, len = list.length; from < len; ++from) {
	        if (hasOwn.call(list, from)) {
	            list[to++] = list[from];
	        }
	    }

	    list.length = to;
	}

	function extend(into, from) {
	    Object.keys(from).forEach(function(name) {
	        into[name] = from[name];
	    });

	    return into;
	};

	exports.finalize = function() {
	    Object.keys(defCache).forEach(function(name) {
	        defCache[name].finalize();
	    });
	};

	},{"assert":1}],504:[function(require,module,exports){
	var types = require("./lib/types");

	// This core module of AST types captures ES5 as it is parsed today by
	// git://github.com/ariya/esprima.git#master.
	require("./def/core");

	// Feel free to add to or remove from this list of extension modules to
	// configure the precise type hierarchy that you need.
	require("./def/es6");
	require("./def/es7");
	require("./def/mozilla");
	require("./def/e4x");
	require("./def/fb-harmony");
	require("./def/esprima");
	require("./def/babel");

	types.finalize();

	exports.Type = types.Type;
	exports.builtInTypes = types.builtInTypes;
	exports.namedTypes = types.namedTypes;
	exports.builders = types.builders;
	exports.defineMethod = types.defineMethod;
	exports.getFieldNames = types.getFieldNames;
	exports.getFieldValue = types.getFieldValue;
	exports.eachField = types.eachField;
	exports.someField = types.someField;
	exports.getSupertypeNames = types.getSupertypeNames;
	exports.astNodesAreEquivalent = require("./lib/equiv");
	exports.finalize = types.finalize;
	exports.NodePath = require("./lib/node-path");
	exports.PathVisitor = require("./lib/path-visitor");
	exports.visit = exports.PathVisitor.visit;

	},{"./def/babel":489,"./def/core":490,"./def/e4x":491,"./def/es6":492,"./def/es7":493,"./def/esprima":494,"./def/fb-harmony":495,"./def/mozilla":496,"./lib/equiv":497,"./lib/node-path":498,"./lib/path-visitor":499,"./lib/types":503}],505:[function(require,module,exports){
	(function (process){
	var Stream = require('stream')

	// through
	//
	// a stream that does nothing but re-emit the input.
	// useful for aggregating a series of changing but not ending streams into one stream)

	exports = module.exports = through
	through.through = through

	//create a readable writable stream.

	function through (write, end, opts) {
	  write = write || function (data) { this.queue(data) }
	  end = end || function () { this.queue(null) }

	  var ended = false, destroyed = false, buffer = [], _ended = false
	  var stream = new Stream()
	  stream.readable = stream.writable = true
	  stream.paused = false

	//  stream.autoPause   = !(opts && opts.autoPause   === false)
	  stream.autoDestroy = !(opts && opts.autoDestroy === false)

	  stream.write = function (data) {
	    write.call(this, data)
	    return !stream.paused
	  }

	  function drain() {
	    while(buffer.length && !stream.paused) {
	      var data = buffer.shift()
	      if(null === data)
	        return stream.emit('end')
	      else
	        stream.emit('data', data)
	    }
	  }

	  stream.queue = stream.push = function (data) {
	//    console.error(ended)
	    if(_ended) return stream
	    if(data === null) _ended = true
	    buffer.push(data)
	    drain()
	    return stream
	  }

	  //this will be registered as the first 'end' listener
	  //must call destroy next tick, to make sure we're after any
	  //stream piped from here.
	  //this is only a problem if end is not emitted synchronously.
	  //a nicer way to do this is to make sure this is the last listener for 'end'

	  stream.on('end', function () {
	    stream.readable = false
	    if(!stream.writable && stream.autoDestroy)
	      process.nextTick(function () {
	        stream.destroy()
	      })
	  })

	  function _end () {
	    stream.writable = false
	    end.call(stream)
	    if(!stream.readable && stream.autoDestroy)
	      stream.destroy()
	  }

	  stream.end = function (data) {
	    if(ended) return
	    ended = true
	    if(arguments.length) stream.write(data)
	    _end() // will emit or queue
	    return stream
	  }

	  stream.destroy = function () {
	    if(destroyed) return
	    destroyed = true
	    ended = true
	    buffer.length = 0
	    stream.writable = stream.readable = false
	    stream.emit('close')
	    return stream
	  }

	  stream.pause = function () {
	    if(stream.paused) return
	    stream.paused = true
	    return stream
	  }

	  stream.resume = function () {
	    if(stream.paused) {
	      stream.paused = false
	      stream.emit('resume')
	    }
	    drain()
	    //may have become paused again,
	    //as drain emits 'data'.
	    if(!stream.paused)
	      stream.emit('drain')
	    return stream
	  }
	  return stream
	}


	}).call(this,require('_process'))
	},{"_process":14,"stream":15}],506:[function(require,module,exports){
	(function (process,global){
	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function(global) {
	  "use strict";

	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var iteratorSymbol =
	    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);

	    generator._invoke = makeInvokeMethod(
	      innerFn, self || null,
	      new Context(tryLocsList || [])
	    );

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    genFun.__proto__ = GeneratorFunctionPrototype;
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };

	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }

	  function AsyncIterator(generator) {
	    // This invoke function is written in a style that assumes some
	    // calling function (or Promise) will handle exceptions.
	    function invoke(method, arg) {
	      var result = generator[method](arg);
	      var value = result.value;
	      return value instanceof AwaitArgument
	        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
	        : Promise.resolve(value).then(function(unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration. If the Promise is rejected, however, the
	            // result for this iteration will be rejected with the same
	            // reason. Note that rejections of yielded Promises are not
	            // thrown back into the generator function, as is the case
	            // when an awaited Promise is rejected. This difference in
	            // behavior between yield and await is important, because it
	            // allows the consumer to decide what to do with the yielded
	            // rejection (swallow it and continue, manually .throw it back
	            // into the generator, abandon iteration, whatever). With
	            // await, by contrast, there is no opportunity to examine the
	            // rejection reason outside the generator function, so the
	            // only option is to throw it from the await expression, and
	            // let the generator function handle the exception.
	            result.value = unwrapped;
	            return result;
	          });
	    }

	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }

	    var invokeNext = invoke.bind(generator, "next");
	    var invokeThrow = invoke.bind(generator, "throw");
	    var invokeReturn = invoke.bind(generator, "return");
	    var previousPromise;

	    function enqueue(method, arg) {
	      var enqueueResult =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(function() {
	          return invoke(method, arg);
	        }) : new Promise(function(resolve) {
	          resolve(invoke(method, arg));
	        });

	      // Avoid propagating enqueueResult failures to Promises returned by
	      // later invocations of the iterator.
	      previousPromise = enqueueResult["catch"](function(ignored){});

	      return enqueueResult;
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;

	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }

	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }

	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );

	          if (record.type === "throw") {
	            context.delegate = null;

	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }

	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;

	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }

	          context.delegate = null;
	        }

	        if (method === "next") {
	          if (state === GenStateSuspendedYield) {
	            context.sent = arg;
	          } else {
	            context.sent = undefined;
	          }

	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }

	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }

	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          var info = {
	            value: record.arg,
	            done: context.done
	          };

	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      this.sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }

	      return ContinueSentinel;
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);

	}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"_process":14}],507:[function(require,module,exports){
	// Generated by `/scripts/character-class-escape-sets.js`. Do not edit.
	var regenerate = require('regenerate');

	exports.REGULAR = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0xFFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0xFFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0xFFFF)
	};

	exports.UNICODE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};

	exports.UNICODE_IGNORE_CASE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F, 0x17F, 0x212A)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x4B, 0x53, 0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};

	},{"regenerate":509}],508:[function(require,module,exports){
	module.exports={
		"75": 8490,
		"83": 383,
		"107": 8490,
		"115": 383,
		"181": 924,
		"197": 8491,
		"383": 83,
		"452": 453,
		"453": 452,
		"455": 456,
		"456": 455,
		"458": 459,
		"459": 458,
		"497": 498,
		"498": 497,
		"837": 8126,
		"914": 976,
		"917": 1013,
		"920": 1012,
		"921": 8126,
		"922": 1008,
		"924": 181,
		"928": 982,
		"929": 1009,
		"931": 962,
		"934": 981,
		"937": 8486,
		"962": 931,
		"976": 914,
		"977": 1012,
		"981": 934,
		"982": 928,
		"1008": 922,
		"1009": 929,
		"1012": [
			920,
			977
		],
		"1013": 917,
		"7776": 7835,
		"7835": 7776,
		"8126": [
			837,
			921
		],
		"8486": 937,
		"8490": 75,
		"8491": 197,
		"66560": 66600,
		"66561": 66601,
		"66562": 66602,
		"66563": 66603,
		"66564": 66604,
		"66565": 66605,
		"66566": 66606,
		"66567": 66607,
		"66568": 66608,
		"66569": 66609,
		"66570": 66610,
		"66571": 66611,
		"66572": 66612,
		"66573": 66613,
		"66574": 66614,
		"66575": 66615,
		"66576": 66616,
		"66577": 66617,
		"66578": 66618,
		"66579": 66619,
		"66580": 66620,
		"66581": 66621,
		"66582": 66622,
		"66583": 66623,
		"66584": 66624,
		"66585": 66625,
		"66586": 66626,
		"66587": 66627,
		"66588": 66628,
		"66589": 66629,
		"66590": 66630,
		"66591": 66631,
		"66592": 66632,
		"66593": 66633,
		"66594": 66634,
		"66595": 66635,
		"66596": 66636,
		"66597": 66637,
		"66598": 66638,
		"66599": 66639,
		"66600": 66560,
		"66601": 66561,
		"66602": 66562,
		"66603": 66563,
		"66604": 66564,
		"66605": 66565,
		"66606": 66566,
		"66607": 66567,
		"66608": 66568,
		"66609": 66569,
		"66610": 66570,
		"66611": 66571,
		"66612": 66572,
		"66613": 66573,
		"66614": 66574,
		"66615": 66575,
		"66616": 66576,
		"66617": 66577,
		"66618": 66578,
		"66619": 66579,
		"66620": 66580,
		"66621": 66581,
		"66622": 66582,
		"66623": 66583,
		"66624": 66584,
		"66625": 66585,
		"66626": 66586,
		"66627": 66587,
		"66628": 66588,
		"66629": 66589,
		"66630": 66590,
		"66631": 66591,
		"66632": 66592,
		"66633": 66593,
		"66634": 66594,
		"66635": 66595,
		"66636": 66596,
		"66637": 66597,
		"66638": 66598,
		"66639": 66599,
		"68736": 68800,
		"68737": 68801,
		"68738": 68802,
		"68739": 68803,
		"68740": 68804,
		"68741": 68805,
		"68742": 68806,
		"68743": 68807,
		"68744": 68808,
		"68745": 68809,
		"68746": 68810,
		"68747": 68811,
		"68748": 68812,
		"68749": 68813,
		"68750": 68814,
		"68751": 68815,
		"68752": 68816,
		"68753": 68817,
		"68754": 68818,
		"68755": 68819,
		"68756": 68820,
		"68757": 68821,
		"68758": 68822,
		"68759": 68823,
		"68760": 68824,
		"68761": 68825,
		"68762": 68826,
		"68763": 68827,
		"68764": 68828,
		"68765": 68829,
		"68766": 68830,
		"68767": 68831,
		"68768": 68832,
		"68769": 68833,
		"68770": 68834,
		"68771": 68835,
		"68772": 68836,
		"68773": 68837,
		"68774": 68838,
		"68775": 68839,
		"68776": 68840,
		"68777": 68841,
		"68778": 68842,
		"68779": 68843,
		"68780": 68844,
		"68781": 68845,
		"68782": 68846,
		"68783": 68847,
		"68784": 68848,
		"68785": 68849,
		"68786": 68850,
		"68800": 68736,
		"68801": 68737,
		"68802": 68738,
		"68803": 68739,
		"68804": 68740,
		"68805": 68741,
		"68806": 68742,
		"68807": 68743,
		"68808": 68744,
		"68809": 68745,
		"68810": 68746,
		"68811": 68747,
		"68812": 68748,
		"68813": 68749,
		"68814": 68750,
		"68815": 68751,
		"68816": 68752,
		"68817": 68753,
		"68818": 68754,
		"68819": 68755,
		"68820": 68756,
		"68821": 68757,
		"68822": 68758,
		"68823": 68759,
		"68824": 68760,
		"68825": 68761,
		"68826": 68762,
		"68827": 68763,
		"68828": 68764,
		"68829": 68765,
		"68830": 68766,
		"68831": 68767,
		"68832": 68768,
		"68833": 68769,
		"68834": 68770,
		"68835": 68771,
		"68836": 68772,
		"68837": 68773,
		"68838": 68774,
		"68839": 68775,
		"68840": 68776,
		"68841": 68777,
		"68842": 68778,
		"68843": 68779,
		"68844": 68780,
		"68845": 68781,
		"68846": 68782,
		"68847": 68783,
		"68848": 68784,
		"68849": 68785,
		"68850": 68786,
		"71840": 71872,
		"71841": 71873,
		"71842": 71874,
		"71843": 71875,
		"71844": 71876,
		"71845": 71877,
		"71846": 71878,
		"71847": 71879,
		"71848": 71880,
		"71849": 71881,
		"71850": 71882,
		"71851": 71883,
		"71852": 71884,
		"71853": 71885,
		"71854": 71886,
		"71855": 71887,
		"71856": 71888,
		"71857": 71889,
		"71858": 71890,
		"71859": 71891,
		"71860": 71892,
		"71861": 71893,
		"71862": 71894,
		"71863": 71895,
		"71864": 71896,
		"71865": 71897,
		"71866": 71898,
		"71867": 71899,
		"71868": 71900,
		"71869": 71901,
		"71870": 71902,
		"71871": 71903,
		"71872": 71840,
		"71873": 71841,
		"71874": 71842,
		"71875": 71843,
		"71876": 71844,
		"71877": 71845,
		"71878": 71846,
		"71879": 71847,
		"71880": 71848,
		"71881": 71849,
		"71882": 71850,
		"71883": 71851,
		"71884": 71852,
		"71885": 71853,
		"71886": 71854,
		"71887": 71855,
		"71888": 71856,
		"71889": 71857,
		"71890": 71858,
		"71891": 71859,
		"71892": 71860,
		"71893": 71861,
		"71894": 71862,
		"71895": 71863,
		"71896": 71864,
		"71897": 71865,
		"71898": 71866,
		"71899": 71867,
		"71900": 71868,
		"71901": 71869,
		"71902": 71870,
		"71903": 71871
	}

	},{}],509:[function(require,module,exports){
	(function (global){
	/*! https://mths.be/regenerate v1.2.0 by @mathias | MIT license */
	;(function(root) {

		// Detect free variables `exports`.
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`.
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`.
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var ERRORS = {
			'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' +
				'to the `start` value.',
			'codePointRange': 'Invalid code point value. Code points range from ' +
				'U+000000 to U+10FFFF.'
		};

		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs
		var HIGH_SURROGATE_MIN = 0xD800;
		var HIGH_SURROGATE_MAX = 0xDBFF;
		var LOW_SURROGATE_MIN = 0xDC00;
		var LOW_SURROGATE_MAX = 0xDFFF;

		// In Regenerate output, `\0` will never be preceded by `\` because we sort
		// by code point value, so let’s keep this regular expression simple.
		var regexNull = /\\x00([^0123456789]|$)/g;

		var object = {};
		var hasOwnProperty = object.hasOwnProperty;
		var extend = function(destination, source) {
			var key;
			for (key in source) {
				if (hasOwnProperty.call(source, key)) {
					destination[key] = source[key];
				}
			}
			return destination;
		};

		var forEach = function(array, callback) {
			var index = -1;
			var length = array.length;
			while (++index < length) {
				callback(array[index], index);
			}
		};

		var toString = object.toString;
		var isArray = function(value) {
			return toString.call(value) == '[object Array]';
		};
		var isNumber = function(value) {
			return typeof value == 'number' ||
				toString.call(value) == '[object Number]';
		};

		// This assumes that `number` is a positive integer that `toString()`s nicely
		// (which is the case for all code point values).
		var zeroes = '0000';
		var pad = function(number, totalCharacters) {
			var string = String(number);
			return string.length < totalCharacters
				? (zeroes + string).slice(-totalCharacters)
				: string;
		};

		var hex = function(number) {
			return Number(number).toString(16).toUpperCase();
		};

		var slice = [].slice;

		/*--------------------------------------------------------------------------*/

		var dataFromCodePoints = function(codePoints) {
			var index = -1;
			var length = codePoints.length;
			var max = length - 1;
			var result = [];
			var isStart = true;
			var tmp;
			var previous = 0;
			while (++index < length) {
				tmp = codePoints[index];
				if (isStart) {
					result.push(tmp);
					previous = tmp;
					isStart = false;
				} else {
					if (tmp == previous + 1) {
						if (index != max) {
							previous = tmp;
							continue;
						} else {
							isStart = true;
							result.push(tmp + 1);
						}
					} else {
						// End the previous range and start a new one.
						result.push(previous + 1, tmp);
						previous = tmp;
					}
				}
			}
			if (!isStart) {
				result.push(tmp + 1);
			}
			return result;
		};

		var dataRemove = function(data, codePoint) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				if (codePoint >= start && codePoint < end) {
					// Modify this pair.
					if (codePoint == start) {
						if (end == start + 1) {
							// Just remove `start` and `end`.
							data.splice(index, 2);
							return data;
						} else {
							// Just replace `start` with a new value.
							data[index] = codePoint + 1;
							return data;
						}
					} else if (codePoint == end - 1) {
						// Just replace `end` with a new value.
						data[index + 1] = codePoint;
						return data;
					} else {
						// Replace `[start, end]` with `[startA, endA, startB, endB]`.
						data.splice(index, 2, start, codePoint, codePoint + 1, end);
						return data;
					}
				}
				index += 2;
			}
			return data;
		};

		var dataRemoveRange = function(data, rangeStart, rangeEnd) {
			if (rangeEnd < rangeStart) {
				throw Error(ERRORS.rangeOrder);
			}
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			while (index < data.length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

				// Exit as soon as no more matching pairs can be found.
				if (start > rangeEnd) {
					return data;
				}

				// Check if this range pair is equal to, or forms a subset of, the range
				// to be removed.
				// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.
				// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.
				if (rangeStart <= start && rangeEnd >= end) {
					// Remove this pair.
					data.splice(index, 2);
					continue;
				}

				// Check if both `rangeStart` and `rangeEnd` are within the bounds of
				// this pair.
				// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.
				if (rangeStart >= start && rangeEnd < end) {
					if (rangeStart == start) {
						// Replace `[start, end]` with `[startB, endB]`.
						data[index] = rangeEnd + 1;
						data[index + 1] = end + 1;
						return data;
					}
					// Replace `[start, end]` with `[startA, endA, startB, endB]`.
					data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
					return data;
				}

				// Check if only `rangeStart` is within the bounds of this pair.
				// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.
				if (rangeStart >= start && rangeStart <= end) {
					// Replace `end` with `rangeStart`.
					data[index + 1] = rangeStart;
					// Note: we cannot `return` just yet, in case any following pairs still
					// contain matching code points.
					// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20
					// → `[0, 4, 21, 31]`.
				}

				// Check if only `rangeEnd` is within the bounds of this pair.
				// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.
				else if (rangeEnd >= start && rangeEnd <= end) {
					// Just replace `start`.
					data[index] = rangeEnd + 1;
					return data;
				}

				index += 2;
			}
			return data;
		};

		 var dataAdd = function(data, codePoint) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var lastIndex = null;
			var length = data.length;
			if (codePoint < 0x0 || codePoint > 0x10FFFF) {
				throw RangeError(ERRORS.codePointRange);
			}
			while (index < length) {
				start = data[index];
				end = data[index + 1];

				// Check if the code point is already in the set.
				if (codePoint >= start && codePoint < end) {
					return data;
				}

				if (codePoint == start - 1) {
					// Just replace `start` with a new value.
					data[index] = codePoint;
					return data;
				}

				// At this point, if `start` is `greater` than `codePoint`, insert a new
				// `[start, end]` pair before the current pair, or after the current pair
				// if there is a known `lastIndex`.
				if (start > codePoint) {
					data.splice(
						lastIndex != null ? lastIndex + 2 : 0,
						0,
						codePoint,
						codePoint + 1
					);
					return data;
				}

				if (codePoint == end) {
					// Check if adding this code point causes two separate ranges to become
					// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.
					if (codePoint + 1 == data[index + 2]) {
						data.splice(index, 4, start, data[index + 3]);
						return data;
					}
					// Else, just replace `end` with a new value.
					data[index + 1] = codePoint + 1;
					return data;
				}
				lastIndex = index;
				index += 2;
			}
			// The loop has finished; add the new pair to the end of the data set.
			data.push(codePoint, codePoint + 1);
			return data;
		};

		var dataAddData = function(dataA, dataB) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var data = dataA.slice();
			var length = dataB.length;
			while (index < length) {
				start = dataB[index];
				end = dataB[index + 1] - 1;
				if (start == end) {
					data = dataAdd(data, start);
				} else {
					data = dataAddRange(data, start, end);
				}
				index += 2;
			}
			return data;
		};

		var dataRemoveData = function(dataA, dataB) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var data = dataA.slice();
			var length = dataB.length;
			while (index < length) {
				start = dataB[index];
				end = dataB[index + 1] - 1;
				if (start == end) {
					data = dataRemove(data, start);
				} else {
					data = dataRemoveRange(data, start, end);
				}
				index += 2;
			}
			return data;
		};

		var dataAddRange = function(data, rangeStart, rangeEnd) {
			if (rangeEnd < rangeStart) {
				throw Error(ERRORS.rangeOrder);
			}
			if (
				rangeStart < 0x0 || rangeStart > 0x10FFFF ||
				rangeEnd < 0x0 || rangeEnd > 0x10FFFF
			) {
				throw RangeError(ERRORS.codePointRange);
			}
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var added = false;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];

				if (added) {
					// The range has already been added to the set; at this point, we just
					// need to get rid of the following ranges in case they overlap.

					// Check if this range can be combined with the previous range.
					if (start == rangeEnd + 1) {
						data.splice(index - 1, 2);
						return data;
					}

					// Exit as soon as no more possibly overlapping pairs can be found.
					if (start > rangeEnd) {
						return data;
					}

					// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have
					// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the
					// `0,16` range that was previously added.
					if (start >= rangeStart && start <= rangeEnd) {
						// `start` lies within the range that was previously added.

						if (end > rangeStart && end - 1 <= rangeEnd) {
							// `end` lies within the range that was previously added as well,
							// so remove this pair.
							data.splice(index, 2);
							index -= 2;
							// Note: we cannot `return` just yet, as there may still be other
							// overlapping pairs.
						} else {
							// `start` lies within the range that was previously added, but
							// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so
							// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.
							// Remove the previously added `end` and the current `start`.
							data.splice(index - 1, 2);
							index -= 2;
						}

						// Note: we cannot return yet.
					}

				}

				else if (start == rangeEnd + 1) {
					data[index] = rangeStart;
					return data;
				}

				// Check if a new pair must be inserted *before* the current one.
				else if (start > rangeEnd) {
					data.splice(index, 0, rangeStart, rangeEnd + 1);
					return data;
				}

				else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
					// The new range lies entirely within an existing range pair. No action
					// needed.
					return data;
				}

				else if (
					// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.
					(rangeStart >= start && rangeStart < end) ||
					// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.
					end == rangeStart
				) {
					// Replace `end` with the new value.
					data[index + 1] = rangeEnd + 1;
					// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`
					// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.
					added = true;
					// Note: we cannot `return` just yet.
				}

				else if (rangeStart <= start && rangeEnd + 1 >= end) {
					// The new range is a superset of the old range.
					data[index] = rangeStart;
					data[index + 1] = rangeEnd + 1;
					added = true;
				}

				index += 2;
			}
			// The loop has finished without doing anything; add the new pair to the end
			// of the data set.
			if (!added) {
				data.push(rangeStart, rangeEnd + 1);
			}
			return data;
		};

		var dataContains = function(data, codePoint) {
			var index = 0;
			var length = data.length;
			// Exit early if `codePoint` is not within `data`’s overall range.
			var start = data[index];
			var end = data[length - 1];
			if (length >= 2) {
				if (codePoint < start || codePoint > end) {
					return false;
				}
			}
			// Iterate over the data per `(start, end)` pair.
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				if (codePoint >= start && codePoint < end) {
					return true;
				}
				index += 2;
			}
			return false;
		};

		var dataIntersection = function(data, codePoints) {
			var index = 0;
			var length = codePoints.length;
			var codePoint;
			var result = [];
			while (index < length) {
				codePoint = codePoints[index];
				if (dataContains(data, codePoint)) {
					result.push(codePoint);
				}
				++index;
			}
			return dataFromCodePoints(result);
		};

		var dataIsEmpty = function(data) {
			return !data.length;
		};

		var dataIsSingleton = function(data) {
			// Check if the set only represents a single code point.
			return data.length == 2 && data[0] + 1 == data[1];
		};

		var dataToArray = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var result = [];
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				while (start < end) {
					result.push(start);
					++start;
				}
				index += 2;
			}
			return result;
		};

		/*--------------------------------------------------------------------------*/

		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		var floor = Math.floor;
		var highSurrogate = function(codePoint) {
			return parseInt(
				floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,
				10
			);
		};

		var lowSurrogate = function(codePoint) {
			return parseInt(
				(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,
				10
			);
		};

		var stringFromCharCode = String.fromCharCode;
		var codePointToString = function(codePoint) {
			var string;
			// https://mathiasbynens.be/notes/javascript-escapes#single
			// Note: the `\b` escape sequence for U+0008 BACKSPACE in strings has a
			// different meaning in regular expressions (word boundary), so it cannot
			// be used here.
			if (codePoint == 0x09) {
				string = '\\t';
			}
			// Note: IE < 9 treats `'\v'` as `'v'`, so avoid using it.
			// else if (codePoint == 0x0B) {
			// 	string = '\\v';
			// }
			else if (codePoint == 0x0A) {
				string = '\\n';
			}
			else if (codePoint == 0x0C) {
				string = '\\f';
			}
			else if (codePoint == 0x0D) {
				string = '\\r';
			}
			else if (codePoint == 0x5C) {
				string = '\\\\';
			}
			else if (
				codePoint == 0x24 ||
				(codePoint >= 0x28 && codePoint <= 0x2B) ||
				codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F ||
				(codePoint >= 0x5B && codePoint <= 0x5E) ||
				(codePoint >= 0x7B && codePoint <= 0x7D)
			) {
				// The code point maps to an unsafe printable ASCII character;
				// backslash-escape it. Here’s the list of those symbols:
				//
				//     $()*+-.?[\]^{|}
				//
				// See #7 for more info.
				string = '\\' + stringFromCharCode(codePoint);
			}
			else if (codePoint >= 0x20 && codePoint <= 0x7E) {
				// The code point maps to one of these printable ASCII symbols
				// (including the space character):
				//
				//      !"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO
				//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~
				//
				// These can safely be used directly.
				string = stringFromCharCode(codePoint);
			}
			else if (codePoint <= 0xFF) {
				// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal
				string = '\\x' + pad(hex(codePoint), 2);
			}
			else { // `codePoint <= 0xFFFF` holds true.
				// https://mathiasbynens.be/notes/javascript-escapes#unicode
				string = '\\u' + pad(hex(codePoint), 4);
			}

			// There’s no need to account for astral symbols / surrogate pairs here,
			// since `codePointToString` is private and only used for BMP code points.
			// But if that’s what you need, just add an `else` block with this code:
			//
			//     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)
			//     	+ '\\u' + pad(hex(lowSurrogate(codePoint)), 4);

			return string;
		};

		var symbolToCodePoint = function(symbol) {
			var length = symbol.length;
			var first = symbol.charCodeAt(0);
			var second;
			if (
				first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&
				length > 1 // There is a next code unit.
			) {
				// `first` is a high surrogate, and there is a next character. Assume
				// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).
				second = symbol.charCodeAt(1);
				// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
				return (first - HIGH_SURROGATE_MIN) * 0x400 +
					second - LOW_SURROGATE_MIN + 0x10000;
			}
			return first;
		};

		var createBMPCharacterClasses = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var result = '';
			var index = 0;
			var start;
			var end;
			var length = data.length;
			if (dataIsSingleton(data)) {
				return codePointToString(data[0]);
			}
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
				if (start == end) {
					result += codePointToString(start);
				} else if (start + 1 == end) {
					result += codePointToString(start) + codePointToString(end);
				} else {
					result += codePointToString(start) + '-' + codePointToString(end);
				}
				index += 2;
			}
			return '[' + result + ']';
		};

		var splitAtBMP = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var loneHighSurrogates = [];
			var loneLowSurrogates = [];
			var bmp = [];
			var astral = [];
			var index = 0;
			var start;
			var end;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

				if (start < HIGH_SURROGATE_MIN) {

					// The range starts and ends before the high surrogate range.
					// E.g. (0, 0x10).
					if (end < HIGH_SURROGATE_MIN) {
						bmp.push(start, end + 1);
					}

					// The range starts before the high surrogate range and ends within it.
					// E.g. (0, 0xD855).
					if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
					}

					// The range starts before the high surrogate range and ends in the low
					// surrogate range. E.g. (0, 0xDCFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
					}

					// The range starts before the high surrogate range and ends after the
					// low surrogate range. E.g. (0, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {

					// The range starts and ends in the high surrogate range.
					// E.g. (0xD855, 0xD866).
					if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
						loneHighSurrogates.push(start, end + 1);
					}

					// The range starts in the high surrogate range and ends in the low
					// surrogate range. E.g. (0xD855, 0xDCFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
					}

					// The range starts in the high surrogate range and ends after the low
					// surrogate range. E.g. (0xD855, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {

					// The range starts and ends in the low surrogate range.
					// E.g. (0xDCFF, 0xDDFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						loneLowSurrogates.push(start, end + 1);
					}

					// The range starts in the low surrogate range and ends after the low
					// surrogate range. E.g. (0xDCFF, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {

					// The range starts and ends after the low surrogate range.
					// E.g. (0xFFAA, 0x10FFFF).
					if (end <= 0xFFFF) {
						bmp.push(start, end + 1);
					} else {
						bmp.push(start, 0xFFFF + 1);
						astral.push(0xFFFF + 1, end + 1);
					}

				} else {

					// The range starts and ends in the astral range.
					astral.push(start, end + 1);

				}

				index += 2;
			}
			return {
				'loneHighSurrogates': loneHighSurrogates,
				'loneLowSurrogates': loneLowSurrogates,
				'bmp': bmp,
				'astral': astral
			};
		};

		var optimizeSurrogateMappings = function(surrogateMappings) {
			var result = [];
			var tmpLow = [];
			var addLow = false;
			var mapping;
			var nextMapping;
			var highSurrogates;
			var lowSurrogates;
			var nextHighSurrogates;
			var nextLowSurrogates;
			var index = -1;
			var length = surrogateMappings.length;
			while (++index < length) {
				mapping = surrogateMappings[index];
				nextMapping = surrogateMappings[index + 1];
				if (!nextMapping) {
					result.push(mapping);
					continue;
				}
				highSurrogates = mapping[0];
				lowSurrogates = mapping[1];
				nextHighSurrogates = nextMapping[0];
				nextLowSurrogates = nextMapping[1];

				// Check for identical high surrogate ranges.
				tmpLow = lowSurrogates;
				while (
					nextHighSurrogates &&
					highSurrogates[0] == nextHighSurrogates[0] &&
					highSurrogates[1] == nextHighSurrogates[1]
				) {
					// Merge with the next item.
					if (dataIsSingleton(nextLowSurrogates)) {
						tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
					} else {
						tmpLow = dataAddRange(
							tmpLow,
							nextLowSurrogates[0],
							nextLowSurrogates[1] - 1
						);
					}
					++index;
					mapping = surrogateMappings[index];
					highSurrogates = mapping[0];
					lowSurrogates = mapping[1];
					nextMapping = surrogateMappings[index + 1];
					nextHighSurrogates = nextMapping && nextMapping[0];
					nextLowSurrogates = nextMapping && nextMapping[1];
					addLow = true;
				}
				result.push([
					highSurrogates,
					addLow ? tmpLow : lowSurrogates
				]);
				addLow = false;
			}
			return optimizeByLowSurrogates(result);
		};

		var optimizeByLowSurrogates = function(surrogateMappings) {
			if (surrogateMappings.length == 1) {
				return surrogateMappings;
			}
			var index = -1;
			var innerIndex = -1;
			while (++index < surrogateMappings.length) {
				var mapping = surrogateMappings[index];
				var lowSurrogates = mapping[1];
				var lowSurrogateStart = lowSurrogates[0];
				var lowSurrogateEnd = lowSurrogates[1];
				innerIndex = index; // Note: the loop starts at the next index.
				while (++innerIndex < surrogateMappings.length) {
					var otherMapping = surrogateMappings[innerIndex];
					var otherLowSurrogates = otherMapping[1];
					var otherLowSurrogateStart = otherLowSurrogates[0];
					var otherLowSurrogateEnd = otherLowSurrogates[1];
					if (
						lowSurrogateStart == otherLowSurrogateStart &&
						lowSurrogateEnd == otherLowSurrogateEnd
					) {
						// Add the code points in the other item to this one.
						if (dataIsSingleton(otherMapping[0])) {
							mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
						} else {
							mapping[0] = dataAddRange(
								mapping[0],
								otherMapping[0][0],
								otherMapping[0][1] - 1
							);
						}
						// Remove the other, now redundant, item.
						surrogateMappings.splice(innerIndex, 1);
						--innerIndex;
					}
				}
			}
			return surrogateMappings;
		};

		var surrogateSet = function(data) {
			// Exit early if `data` is an empty set.
			if (!data.length) {
				return [];
			}

			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var startHigh;
			var startLow;
			var prevStartHigh = 0;
			var prevEndHigh = 0;
			var tmpLow = [];
			var endHigh;
			var endLow;
			var surrogateMappings = [];
			var length = data.length;
			var dataHigh = [];
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1;

				startHigh = highSurrogate(start);
				startLow = lowSurrogate(start);
				endHigh = highSurrogate(end);
				endLow = lowSurrogate(end);

				var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
				var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
				var complete = false;

				// Append the previous high-surrogate-to-low-surrogate mappings.
				// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.
				if (
					startHigh == endHigh ||
					startsWithLowestLowSurrogate && endsWithHighestLowSurrogate
				) {
					surrogateMappings.push([
						[startHigh, endHigh + 1],
						[startLow, endLow + 1]
					]);
					complete = true;
				} else {
					surrogateMappings.push([
						[startHigh, startHigh + 1],
						[startLow, LOW_SURROGATE_MAX + 1]
					]);
				}

				// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to
				// `(endHigh - 1, LOW_SURROGATE_MAX)`.
				if (!complete && startHigh + 1 < endHigh) {
					if (endsWithHighestLowSurrogate) {
						// Combine step 2 and step 3.
						surrogateMappings.push([
							[startHigh + 1, endHigh + 1],
							[LOW_SURROGATE_MIN, endLow + 1]
						]);
						complete = true;
					} else {
						surrogateMappings.push([
							[startHigh + 1, endHigh],
							[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]
						]);
					}
				}

				// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.
				if (!complete) {
					surrogateMappings.push([
						[endHigh, endHigh + 1],
						[LOW_SURROGATE_MIN, endLow + 1]
					]);
				}

				prevStartHigh = startHigh;
				prevEndHigh = endHigh;

				index += 2;
			}

			// The format of `surrogateMappings` is as follows:
			//
			//     [ surrogateMapping1, surrogateMapping2 ]
			//
			// i.e.:
			//
			//     [
			//       [ highSurrogates1, lowSurrogates1 ],
			//       [ highSurrogates2, lowSurrogates2 ]
			//     ]
			return optimizeSurrogateMappings(surrogateMappings);
		};

		var createSurrogateCharacterClasses = function(surrogateMappings) {
			var result = [];
			forEach(surrogateMappings, function(surrogateMapping) {
				var highSurrogates = surrogateMapping[0];
				var lowSurrogates = surrogateMapping[1];
				result.push(
					createBMPCharacterClasses(highSurrogates) +
					createBMPCharacterClasses(lowSurrogates)
				);
			});
			return result.join('|');
		};

		var createCharacterClassesFromData = function(data, bmpOnly) {
			var result = [];

			var parts = splitAtBMP(data);
			var loneHighSurrogates = parts.loneHighSurrogates;
			var loneLowSurrogates = parts.loneLowSurrogates;
			var bmp = parts.bmp;
			var astral = parts.astral;
			var hasAstral = !dataIsEmpty(parts.astral);
			var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
			var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);

			var surrogateMappings = surrogateSet(astral);

			if (bmpOnly) {
				bmp = dataAddData(bmp, loneHighSurrogates);
				hasLoneHighSurrogates = false;
				bmp = dataAddData(bmp, loneLowSurrogates);
				hasLoneLowSurrogates = false;
			}

			if (!dataIsEmpty(bmp)) {
				// The data set contains BMP code points that are not high surrogates
				// needed for astral code points in the set.
				result.push(createBMPCharacterClasses(bmp));
			}
			if (surrogateMappings.length) {
				// The data set contains astral code points; append character classes
				// based on their surrogate pairs.
				result.push(createSurrogateCharacterClasses(surrogateMappings));
			}
			// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860
			if (hasLoneHighSurrogates) {
				result.push(
					createBMPCharacterClasses(loneHighSurrogates) +
					// Make sure the high surrogates aren’t part of a surrogate pair.
					'(?![\\uDC00-\\uDFFF])'
				);
			}
			if (hasLoneLowSurrogates) {
				result.push(
					// Make sure the low surrogates aren’t part of a surrogate pair.
					'(?:[^\\uD800-\\uDBFF]|^)' +
					createBMPCharacterClasses(loneLowSurrogates)
				);
			}
			return result.join('|');
		};

		/*--------------------------------------------------------------------------*/

		// `regenerate` can be used as a constructor (and new methods can be added to
		// its prototype) but also as a regular function, the latter of which is the
		// documented and most common usage. For that reason, it’s not capitalized.
		var regenerate = function(value) {
			if (arguments.length > 1) {
				value = slice.call(arguments);
			}
			if (this instanceof regenerate) {
				this.data = [];
				return value ? this.add(value) : this;
			}
			return (new regenerate).add(value);
		};

		regenerate.version = '1.2.0';

		var proto = regenerate.prototype;
		extend(proto, {
			'add': function(value) {
				var $this = this;
				if (value == null) {
					return $this;
				}
				if (value instanceof regenerate) {
					// Allow passing other Regenerate instances.
					$this.data = dataAddData($this.data, value.data);
					return $this;
				}
				if (arguments.length > 1) {
					value = slice.call(arguments);
				}
				if (isArray(value)) {
					forEach(value, function(item) {
						$this.add(item);
					});
					return $this;
				}
				$this.data = dataAdd(
					$this.data,
					isNumber(value) ? value : symbolToCodePoint(value)
				);
				return $this;
			},
			'remove': function(value) {
				var $this = this;
				if (value == null) {
					return $this;
				}
				if (value instanceof regenerate) {
					// Allow passing other Regenerate instances.
					$this.data = dataRemoveData($this.data, value.data);
					return $this;
				}
				if (arguments.length > 1) {
					value = slice.call(arguments);
				}
				if (isArray(value)) {
					forEach(value, function(item) {
						$this.remove(item);
					});
					return $this;
				}
				$this.data = dataRemove(
					$this.data,
					isNumber(value) ? value : symbolToCodePoint(value)
				);
				return $this;
			},
			'addRange': function(start, end) {
				var $this = this;
				$this.data = dataAddRange($this.data,
					isNumber(start) ? start : symbolToCodePoint(start),
					isNumber(end) ? end : symbolToCodePoint(end)
				);
				return $this;
			},
			'removeRange': function(start, end) {
				var $this = this;
				var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
				var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
				$this.data = dataRemoveRange(
					$this.data,
					startCodePoint,
					endCodePoint
				);
				return $this;
			},
			'intersection': function(argument) {
				var $this = this;
				// Allow passing other Regenerate instances.
				// TODO: Optimize this by writing and using `dataIntersectionData()`.
				var array = argument instanceof regenerate ?
					dataToArray(argument.data) :
					argument;
				$this.data = dataIntersection($this.data, array);
				return $this;
			},
			'contains': function(codePoint) {
				return dataContains(
					this.data,
					isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)
				);
			},
			'clone': function() {
				var set = new regenerate;
				set.data = this.data.slice(0);
				return set;
			},
			'toString': function(options) {
				var result = createCharacterClassesFromData(
					this.data,
					options ? options.bmpOnly : false
				);
				// Use `\0` instead of `\x00` where possible.
				return result.replace(regexNull, '\\0$1');
			},
			'toRegExp': function(flags) {
				return RegExp(this.toString(), flags || '');
			},
			'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.
				return dataToArray(this.data);
			}
		});

		proto.toArray = proto.valueOf;

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			typeof define == 'function' &&
			typeof define.amd == 'object' &&
			define.amd
		) {
			define(function() {
				return regenerate;
			});
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = regenerate;
			} else { // in Narwhal or RingoJS v0.7.0-
				freeExports.regenerate = regenerate;
			}
		} else { // in Rhino or a web browser
			root.regenerate = regenerate;
		}

	}(this));

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],510:[function(require,module,exports){
	(function (global){
	/*!
	 * RegJSGen
	 * Copyright 2014 Benjamin Tan <https://d10.github.io/>
	 * Available under MIT license <http://d10.mit-license.org/>
	 */
	;(function() {
	  'use strict';

	  /** Used to determine if values are of the language type `Object` */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used as a reference to the global object */
	  var root = (objectTypes[typeof window] && window) || this;

	  /** Backup possible global object */
	  var oldRoot = root;

	  /** Detect free variable `exports` */
	  var freeExports = objectTypes[typeof exports] && exports;

	  /** Detect free variable `module` */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	    root = freeGlobal;
	  }

	  /*--------------------------------------------------------------------------*/

	  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */

	  var stringFromCharCode = String.fromCharCode;
	  var floor = Math.floor;
	  function fromCodePoint() {
	    var MAX_SIZE = 0x4000;
	    var codeUnits = [];
	    var highSurrogate;
	    var lowSurrogate;
	    var index = -1;
	    var length = arguments.length;
	    if (!length) {
	      return '';
	    }
	    var result = '';
	    while (++index < length) {
	      var codePoint = Number(arguments[index]);
	      if (
	        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	        codePoint < 0 || // not a valid Unicode code point
	        codePoint > 0x10FFFF || // not a valid Unicode code point
	        floor(codePoint) != codePoint // not an integer
	      ) {
	        throw RangeError('Invalid code point: ' + codePoint);
	      }
	      if (codePoint <= 0xFFFF) {
	        // BMP code point
	        codeUnits.push(codePoint);
	      } else {
	        // Astral code point; split in surrogate halves
	        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        codePoint -= 0x10000;
	        highSurrogate = (codePoint >> 10) + 0xD800;
	        lowSurrogate = (codePoint % 0x400) + 0xDC00;
	        codeUnits.push(highSurrogate, lowSurrogate);
	      }
	      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
	        result += stringFromCharCode.apply(null, codeUnits);
	        codeUnits.length = 0;
	      }
	    }
	    return result;
	  }

	  function assertType(type, expected) {
	    if (expected.indexOf('|') == -1) {
	      if (type == expected) {
	        return;
	      }

	      throw Error('Invalid node type: ' + type);
	    }

	    expected = assertType.hasOwnProperty(expected)
	      ? assertType[expected]
	      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));

	    if (expected.test(type)) {
	      return;
	    }

	    throw Error('Invalid node type: ' + type);
	  }

	  /*--------------------------------------------------------------------------*/

	  function generate(node) {
	    var type = node.type;

	    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
	      return generate[type](node);
	    }

	    throw Error('Invalid node type: ' + type);
	  }

	  /*--------------------------------------------------------------------------*/

	  function generateAlternative(node) {
	    assertType(node.type, 'alternative');

	    var terms = node.body,
	        length = terms ? terms.length : 0;

	    if (length == 1) {
	      return generateTerm(terms[0]);
	    } else {
	      var i = -1,
	          result = '';

	      while (++i < length) {
	        result += generateTerm(terms[i]);
	      }

	      return result;
	    }
	  }

	  function generateAnchor(node) {
	    assertType(node.type, 'anchor');

	    switch (node.kind) {
	      case 'start':
	        return '^';
	      case 'end':
	        return '$';
	      case 'boundary':
	        return '\\b';
	      case 'not-boundary':
	        return '\\B';
	      default:
	        throw Error('Invalid assertion');
	    }
	  }

	  function generateAtom(node) {
	    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');

	    return generate(node);
	  }

	  function generateCharacterClass(node) {
	    assertType(node.type, 'characterClass');

	    var classRanges = node.body,
	        length = classRanges ? classRanges.length : 0;

	    var i = -1,
	        result = '[';

	    if (node.negative) {
	      result += '^';
	    }

	    while (++i < length) {
	      result += generateClassAtom(classRanges[i]);
	    }

	    result += ']';

	    return result;
	  }

	  function generateCharacterClassEscape(node) {
	    assertType(node.type, 'characterClassEscape');

	    return '\\' + node.value;
	  }

	  function generateCharacterClassRange(node) {
	    assertType(node.type, 'characterClassRange');

	    var min = node.min,
	        max = node.max;

	    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
	      throw Error('Invalid character class range');
	    }

	    return generateClassAtom(min) + '-' + generateClassAtom(max);
	  }

	  function generateClassAtom(node) {
	    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');

	    return generate(node);
	  }

	  function generateDisjunction(node) {
	    assertType(node.type, 'disjunction');

	    var body = node.body,
	        length = body ? body.length : 0;

	    if (length == 0) {
	      throw Error('No body');
	    } else if (length == 1) {
	      return generate(body[0]);
	    } else {
	      var i = -1,
	          result = '';

	      while (++i < length) {
	        if (i != 0) {
	          result += '|';
	        }
	        result += generate(body[i]);
	      }

	      return result;
	    }
	  }

	  function generateDot(node) {
	    assertType(node.type, 'dot');

	    return '.';
	  }

	  function generateGroup(node) {
	    assertType(node.type, 'group');

	    var result = '(';

	    switch (node.behavior) {
	      case 'normal':
	        break;
	      case 'ignore':
	        result += '?:';
	        break;
	      case 'lookahead':
	        result += '?=';
	        break;
	      case 'negativeLookahead':
	        result += '?!';
	        break;
	      default:
	        throw Error('Invalid behaviour: ' + node.behaviour);
	    }

	    var body = node.body,
	        length = body ? body.length : 0;

	    if (length == 1) {
	      result += generate(body[0]);
	    } else {
	      var i = -1;

	      while (++i < length) {
	        result += generate(body[i]);
	      }
	    }

	    result += ')';

	    return result;
	  }

	  function generateQuantifier(node) {
	    assertType(node.type, 'quantifier');

	    var quantifier = '',
	        min = node.min,
	        max = node.max;

	    switch (max) {
	      case undefined:
	      case null:
	        switch (min) {
	          case 0:
	            quantifier = '*'
	            break;
	          case 1:
	            quantifier = '+';
	            break;
	          default:
	            quantifier = '{' + min + ',}';
	            break;
	        }
	        break;
	      default:
	        if (min == max) {
	          quantifier = '{' + min + '}';
	        }
	        else if (min == 0 && max == 1) {
	          quantifier = '?';
	        } else {
	          quantifier = '{' + min + ',' + max + '}';
	        }
	        break;
	    }

	    if (!node.greedy) {
	      quantifier += '?';
	    }

	    return generateAtom(node.body[0]) + quantifier;
	  }

	  function generateReference(node) {
	    assertType(node.type, 'reference');

	    return '\\' + node.matchIndex;
	  }

	  function generateTerm(node) {
	    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');

	    return generate(node);
	  }

	  function generateValue(node) {
	    assertType(node.type, 'value');

	    var kind = node.kind,
	        codePoint = node.codePoint;

	    switch (kind) {
	      case 'controlLetter':
	        return '\\c' + fromCodePoint(codePoint + 64);
	      case 'hexadecimalEscape':
	        return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
	      case 'identifier':
	        return '\\' + fromCodePoint(codePoint);
	      case 'null':
	        return '\\' + codePoint;
	      case 'octal':
	        return '\\' + codePoint.toString(8);
	      case 'singleEscape':
	        switch (codePoint) {
	          case 0x0008:
	            return '\\b';
	          case 0x009:
	            return '\\t';
	          case 0x00A:
	            return '\\n';
	          case 0x00B:
	            return '\\v';
	          case 0x00C:
	            return '\\f';
	          case 0x00D:
	            return '\\r';
	          default:
	            throw Error('Invalid codepoint: ' + codePoint);
	        }
	      case 'symbol':
	        return fromCodePoint(codePoint);
	      case 'unicodeEscape':
	        return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
	      case 'unicodeCodePointEscape':
	        return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
	      default:
	        throw Error('Unsupported node kind: ' + kind);
	    }
	  }

	  /*--------------------------------------------------------------------------*/

	  generate.alternative = generateAlternative;
	  generate.anchor = generateAnchor;
	  generate.characterClass = generateCharacterClass;
	  generate.characterClassEscape = generateCharacterClassEscape;
	  generate.characterClassRange = generateCharacterClassRange;
	  generate.disjunction = generateDisjunction;
	  generate.dot = generateDot;
	  generate.group = generateGroup;
	  generate.quantifier = generateQuantifier;
	  generate.reference = generateReference;
	  generate.value = generateValue;

	  /*--------------------------------------------------------------------------*/

	  // export regjsgen
	  // some AMD build optimizers, like r.js, check for condition patterns like the following:
	  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
	    // define as an anonymous module so, through path mapping, it can be aliased
	    define(function() {
	      return {
	        'generate': generate
	      };
	    });
	  }
	  // check for `exports` after `define` in case a build optimizer adds an `exports` object
	  else if (freeExports && freeModule) {
	    // in Narwhal, Node.js, Rhino -require, or RingoJS
	    freeExports.generate = generate;
	  }
	  // in a browser or Rhino
	  else {
	    root.regjsgen = {
	      'generate': generate
	    };
	  }
	}.call(this));

	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],511:[function(require,module,exports){
	// regjsparser
	//
	// ==================================================================
	//
	// See ECMA-262 Standard: 15.10.1
	//
	// NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the
	//   term "Anchor" is used.
	//
	// Pattern ::
	//      Disjunction
	//
	// Disjunction ::
	//      Alternative
	//      Alternative | Disjunction
	//
	// Alternative ::
	//      [empty]
	//      Alternative Term
	//
	// Term ::
	//      Anchor
	//      Atom
	//      Atom Quantifier
	//
	// Anchor ::
	//      ^
	//      $
	//      \ b
	//      \ B
	//      ( ? = Disjunction )
	//      ( ? ! Disjunction )
	//
	// Quantifier ::
	//      QuantifierPrefix
	//      QuantifierPrefix ?
	//
	// QuantifierPrefix ::
	//      *
	//      +
	//      ?
	//      { DecimalDigits }
	//      { DecimalDigits , }
	//      { DecimalDigits , DecimalDigits }
	//
	// Atom ::
	//      PatternCharacter
	//      .
	//      \ AtomEscape
	//      CharacterClass
	//      ( Disjunction )
	//      ( ? : Disjunction )
	//
	// PatternCharacter ::
	//      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |
	//
	// AtomEscape ::
	//      DecimalEscape
	//      CharacterEscape
	//      CharacterClassEscape
	//
	// CharacterEscape[U] ::
	//      ControlEscape
	//      c ControlLetter
	//      HexEscapeSequence
	//      RegExpUnicodeEscapeSequence[?U] (ES6)
	//      IdentityEscape[?U]
	//
	// ControlEscape ::
	//      one of f n r t v
	// ControlLetter ::
	//      one of
	//          a b c d e f g h i j k l m n o p q r s t u v w x y z
	//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	//
	// IdentityEscape ::
	//      SourceCharacter but not IdentifierPart
	//      <ZWJ>
	//      <ZWNJ>
	//
	// DecimalEscape ::
	//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	//
	// CharacterClassEscape ::
	//      one of d D s S w W
	//
	// CharacterClass ::
	//      [ [lookahead ∉ {^}] ClassRanges ]
	//      [ ^ ClassRanges ]
	//
	// ClassRanges ::
	//      [empty]
	//      NonemptyClassRanges
	//
	// NonemptyClassRanges ::
	//      ClassAtom
	//      ClassAtom NonemptyClassRangesNoDash
	//      ClassAtom - ClassAtom ClassRanges
	//
	// NonemptyClassRangesNoDash ::
	//      ClassAtom
	//      ClassAtomNoDash NonemptyClassRangesNoDash
	//      ClassAtomNoDash - ClassAtom ClassRanges
	//
	// ClassAtom ::
	//      -
	//      ClassAtomNoDash
	//
	// ClassAtomNoDash ::
	//      SourceCharacter but not one of \ or ] or -
	//      \ ClassEscape
	//
	// ClassEscape ::
	//      DecimalEscape
	//      b
	//      CharacterEscape
	//      CharacterClassEscape

	(function() {

	  function parse(str, flags) {
	    function addRaw(node) {
	      node.raw = str.substring(node.range[0], node.range[1]);
	      return node;
	    }

	    function updateRawStart(node, start) {
	      node.range[0] = start;
	      return addRaw(node);
	    }

	    function createAnchor(kind, rawLength) {
	      return addRaw({
	        type: 'anchor',
	        kind: kind,
	        range: [
	          pos - rawLength,
	          pos
	        ]
	      });
	    }

	    function createValue(kind, codePoint, from, to) {
	      return addRaw({
	        type: 'value',
	        kind: kind,
	        codePoint: codePoint,
	        range: [from, to]
	      });
	    }

	    function createEscaped(kind, codePoint, value, fromOffset) {
	      fromOffset = fromOffset || 0;
	      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
	    }

	    function createCharacter(matches) {
	      var _char = matches[0];
	      var first = _char.charCodeAt(0);
	      if (hasUnicodeFlag) {
	        var second;
	        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
	          second = lookahead().charCodeAt(0);
	          if (second >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            pos++;
	            return createValue(
	                'symbol',
	                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,
	                pos - 2, pos);
	          }
	        }
	      }
	      return createValue('symbol', first, pos - 1, pos);
	    }

	    function createDisjunction(alternatives, from, to) {
	      return addRaw({
	        type: 'disjunction',
	        body: alternatives,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createDot() {
	      return addRaw({
	        type: 'dot',
	        range: [
	          pos - 1,
	          pos
	        ]
	      });
	    }

	    function createCharacterClassEscape(value) {
	      return addRaw({
	        type: 'characterClassEscape',
	        value: value,
	        range: [
	          pos - 2,
	          pos
	        ]
	      });
	    }

	    function createReference(matchIndex) {
	      return addRaw({
	        type: 'reference',
	        matchIndex: parseInt(matchIndex, 10),
	        range: [
	          pos - 1 - matchIndex.length,
	          pos
	        ]
	      });
	    }

	    function createGroup(behavior, disjunction, from, to) {
	      return addRaw({
	        type: 'group',
	        behavior: behavior,
	        body: disjunction,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createQuantifier(min, max, from, to) {
	      if (to == null) {
	        from = pos - 1;
	        to = pos;
	      }

	      return addRaw({
	        type: 'quantifier',
	        min: min,
	        max: max,
	        greedy: true,
	        body: null, // set later on,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createAlternative(terms, from, to) {
	      return addRaw({
	        type: 'alternative',
	        body: terms,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createCharacterClass(classRanges, negative, from, to) {
	      return addRaw({
	        type: 'characterClass',
	        body: classRanges,
	        negative: negative,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createClassRange(min, max, from, to) {
	      // See 15.10.2.15:
	      if (min.codePoint > max.codePoint) {
	        throw SyntaxError('invalid range in character class');
	      }

	      return addRaw({
	        type: 'characterClassRange',
	        min: min,
	        max: max,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function flattenBody(body) {
	      if (body.type === 'alternative') {
	        return body.body;
	      } else {
	        return [body];
	      }
	    }

	    function isEmpty(obj) {
	      return obj.type === 'empty';
	    }

	    function incr(amount) {
	      amount = (amount || 1);
	      var res = str.substring(pos, pos + amount);
	      pos += (amount || 1);
	      return res;
	    }

	    function skip(value) {
	      if (!match(value)) {
	        throw SyntaxError('character: ' + value);
	      }
	    }

	    function match(value) {
	      if (str.indexOf(value, pos) === pos) {
	        return incr(value.length);
	      }
	    }

	    function lookahead() {
	      return str[pos];
	    }

	    function current(value) {
	      return str.indexOf(value, pos) === pos;
	    }

	    function next(value) {
	      return str[pos + 1] === value;
	    }

	    function matchReg(regExp) {
	      var subStr = str.substring(pos);
	      var res = subStr.match(regExp);
	      if (res) {
	        res.range = [];
	        res.range[0] = pos;
	        incr(res[0].length);
	        res.range[1] = pos;
	      }
	      return res;
	    }

	    function parseDisjunction() {
	      // Disjunction ::
	      //      Alternative
	      //      Alternative | Disjunction
	      var res = [], from = pos;
	      res.push(parseAlternative());

	      while (match('|')) {
	        res.push(parseAlternative());
	      }

	      if (res.length === 1) {
	        return res[0];
	      }

	      return createDisjunction(res, from, pos);
	    }

	    function parseAlternative() {
	      var res = [], from = pos;
	      var term;

	      // Alternative ::
	      //      [empty]
	      //      Alternative Term
	      while (term = parseTerm()) {
	        res.push(term);
	      }

	      if (res.length === 1) {
	        return res[0];
	      }

	      return createAlternative(res, from, pos);
	    }

	    function parseTerm() {
	      // Term ::
	      //      Anchor
	      //      Atom
	      //      Atom Quantifier

	      if (pos >= str.length || current('|') || current(')')) {
	        return null; /* Means: The term is empty */
	      }

	      var anchor = parseAnchor();

	      if (anchor) {
	        return anchor;
	      }

	      var atom = parseAtom();
	      if (!atom) {
	        throw SyntaxError('Expected atom')
	      }
	      var quantifier = parseQuantifier() || false;
	      if (quantifier) {
	        quantifier.body = flattenBody(atom);
	        // The quantifier contains the atom. Therefore, the beginning of the
	        // quantifier range is given by the beginning of the atom.
	        updateRawStart(quantifier, atom.range[0]);
	        return quantifier;
	      }
	      return atom;
	    }

	    function parseGroup(matchA, typeA, matchB, typeB) {
	      var type = null, from = pos;

	      if (match(matchA)) {
	        type = typeA;
	      } else if (match(matchB)) {
	        type = typeB;
	      } else {
	        return false;
	      }

	      var body = parseDisjunction();
	      if (!body) {
	        throw SyntaxError('Expected disjunction');
	      }
	      skip(')');
	      var group = createGroup(type, flattenBody(body), from, pos);

	      if (type == 'normal') {
	        // Keep track of the number of closed groups. This is required for
	        // parseDecimalEscape(). In case the string is parsed a second time the
	        // value already holds the total count and no incrementation is required.
	        if (firstIteration) {
	          closedCaptureCounter++;
	        }
	      }
	      return group;
	    }

	    function parseAnchor() {
	      // Anchor ::
	      //      ^
	      //      $
	      //      \ b
	      //      \ B
	      //      ( ? = Disjunction )
	      //      ( ? ! Disjunction )
	      var res, from = pos;

	      if (match('^')) {
	        return createAnchor('start', 1 /* rawLength */);
	      } else if (match('$')) {
	        return createAnchor('end', 1 /* rawLength */);
	      } else if (match('\\b')) {
	        return createAnchor('boundary', 2 /* rawLength */);
	      } else if (match('\\B')) {
	        return createAnchor('not-boundary', 2 /* rawLength */);
	      } else {
	        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
	      }
	    }

	    function parseQuantifier() {
	      // Quantifier ::
	      //      QuantifierPrefix
	      //      QuantifierPrefix ?
	      //
	      // QuantifierPrefix ::
	      //      *
	      //      +
	      //      ?
	      //      { DecimalDigits }
	      //      { DecimalDigits , }
	      //      { DecimalDigits , DecimalDigits }

	      var res;
	      var quantifier;
	      var min, max;

	      if (match('*')) {
	        quantifier = createQuantifier(0);
	      }
	      else if (match('+')) {
	        quantifier = createQuantifier(1);
	      }
	      else if (match('?')) {
	        quantifier = createQuantifier(0, 1);
	      }
	      else if (res = matchReg(/^\{([0-9]+)\}/)) {
	        min = parseInt(res[1], 10);
	        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
	      }
	      else if (res = matchReg(/^\{([0-9]+),\}/)) {
	        min = parseInt(res[1], 10);
	        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
	      }
	      else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
	        min = parseInt(res[1], 10);
	        max = parseInt(res[2], 10);
	        if (min > max) {
	          throw SyntaxError('numbers out of order in {} quantifier');
	        }
	        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
	      }

	      if (quantifier) {
	        if (match('?')) {
	          quantifier.greedy = false;
	          quantifier.range[1] += 1;
	        }
	      }

	      return quantifier;
	    }

	    function parseAtom() {
	      // Atom ::
	      //      PatternCharacter
	      //      .
	      //      \ AtomEscape
	      //      CharacterClass
	      //      ( Disjunction )
	      //      ( ? : Disjunction )

	      var res;

	      // jviereck: allow ']', '}' here as well to be compatible with browser's
	      //   implementations: ']'.match(/]/);
	      // if (res = matchReg(/^[^^$\\.*+?()[\]{}|]/)) {
	      if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
	        //      PatternCharacter
	        return createCharacter(res);
	      }
	      else if (match('.')) {
	        //      .
	        return createDot();
	      }
	      else if (match('\\')) {
	        //      \ AtomEscape
	        res = parseAtomEscape();
	        if (!res) {
	          throw SyntaxError('atomEscape');
	        }
	        return res;
	      }
	      else if (res = parseCharacterClass()) {
	        return res;
	      }
	      else {
	        //      ( Disjunction )
	        //      ( ? : Disjunction )
	        return parseGroup('(?:', 'ignore', '(', 'normal');
	      }
	    }

	    function parseUnicodeSurrogatePairEscape(firstEscape) {
	      if (hasUnicodeFlag) {
	        var first, second;
	        if (firstEscape.kind == 'unicodeEscape' &&
	          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&
	          current('\\') && next('u') ) {
	          var prevPos = pos;
	          pos++;
	          var secondEscape = parseClassEscape();
	          if (secondEscape.kind == 'unicodeEscape' &&
	            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            firstEscape.range[1] = secondEscape.range[1];
	            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            firstEscape.type = 'value';
	            firstEscape.kind = 'unicodeCodePointEscape';
	            addRaw(firstEscape);
	          }
	          else {
	            pos = prevPos;
	          }
	        }
	      }
	      return firstEscape;
	    }

	    function parseClassEscape() {
	      return parseAtomEscape(true);
	    }

	    function parseAtomEscape(insideCharacterClass) {
	      // AtomEscape ::
	      //      DecimalEscape
	      //      CharacterEscape
	      //      CharacterClassEscape

	      var res;

	      res = parseDecimalEscape();
	      if (res) {
	        return res;
	      }

	      // For ClassEscape
	      if (insideCharacterClass) {
	        if (match('b')) {
	          // 15.10.2.19
	          // The production ClassEscape :: b evaluates by returning the
	          // CharSet containing the one character <BS> (Unicode value 0008).
	          return createEscaped('singleEscape', 0x0008, '\\b');
	        } else if (match('B')) {
	          throw SyntaxError('\\B not possible inside of CharacterClass');
	        }
	      }

	      res = parseCharacterEscape();

	      return res;
	    }


	    function parseDecimalEscape() {
	      // DecimalEscape ::
	      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	      //      CharacterClassEscape :: one of d D s S w W

	      var res, match;

	      if (res = matchReg(/^(?!0)\d+/)) {
	        match = res[0];
	        var refIdx = parseInt(res[0], 10);
	        if (refIdx <= closedCaptureCounter) {
	          // If the number is smaller than the normal-groups found so
	          // far, then it is a reference...
	          return createReference(res[0]);
	        } else {
	          // ... otherwise it needs to be interpreted as a octal (if the
	          // number is in an octal format). If it is NOT octal format,
	          // then the slash is ignored and the number is matched later
	          // as normal characters.

	          // Recall the negative decision to decide if the input must be parsed
	          // a second time with the total normal-groups.
	          backrefDenied.push(refIdx);

	          // Reset the position again, as maybe only parts of the previous
	          // matched numbers are actual octal numbers. E.g. in '019' only
	          // the '01' should be matched.
	          incr(-res[0].length);
	          if (res = matchReg(/^[0-7]{1,3}/)) {
	            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
	          } else {
	            // If we end up here, we have a case like /\91/. Then the
	            // first slash is to be ignored and the 9 & 1 to be treated
	            // like ordinary characters. Create a character for the
	            // first number only here - other number-characters
	            // (if available) will be matched later.
	            res = createCharacter(matchReg(/^[89]/));
	            return updateRawStart(res, res.range[0] - 1);
	          }
	        }
	      }
	      // Only allow octal numbers in the following. All matched numbers start
	      // with a zero (if the do not, the previous if-branch is executed).
	      // If the number is not octal format and starts with zero (e.g. `091`)
	      // then only the zeros `0` is treated here and the `91` are ordinary
	      // characters.
	      // Example:
	      //   /\091/.exec('\091')[0].length === 3
	      else if (res = matchReg(/^[0-7]{1,3}/)) {
	        match = res[0];
	        if (/^0{1,3}$/.test(match)) {
	          // If they are all zeros, then only take the first one.
	          return createEscaped('null', 0x0000, '0', match.length + 1);
	        } else {
	          return createEscaped('octal', parseInt(match, 8), match, 1);
	        }
	      } else if (res = matchReg(/^[dDsSwW]/)) {
	        return createCharacterClassEscape(res[0]);
	      }
	      return false;
	    }

	    function parseCharacterEscape() {
	      // CharacterEscape ::
	      //      ControlEscape
	      //      c ControlLetter
	      //      HexEscapeSequence
	      //      UnicodeEscapeSequence
	      //      IdentityEscape

	      var res;
	      if (res = matchReg(/^[fnrtv]/)) {
	        // ControlEscape
	        var codePoint = 0;
	        switch (res[0]) {
	          case 't': codePoint = 0x009; break;
	          case 'n': codePoint = 0x00A; break;
	          case 'v': codePoint = 0x00B; break;
	          case 'f': codePoint = 0x00C; break;
	          case 'r': codePoint = 0x00D; break;
	        }
	        return createEscaped('singleEscape', codePoint, '\\' + res[0]);
	      } else if (res = matchReg(/^c([a-zA-Z])/)) {
	        // c ControlLetter
	        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
	      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
	        // HexEscapeSequence
	        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
	      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
	        // UnicodeEscapeSequence
	        return parseUnicodeSurrogatePairEscape(
	          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)
	        );
	      } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
	        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)
	        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
	      } else {
	        // IdentityEscape
	        return parseIdentityEscape();
	      }
	    }

	    // Taken from the Esprima parser.
	    function isIdentifierPart(ch) {
	      // Generated by `tools/generate-identifier-regex.js`.
	      var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');

	      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
	        (ch >= 65 && ch <= 90) ||         // A..Z
	        (ch >= 97 && ch <= 122) ||        // a..z
	        (ch >= 48 && ch <= 57) ||         // 0..9
	        (ch === 92) ||                    // \ (backslash)
	        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
	    }

	    function parseIdentityEscape() {
	      // IdentityEscape ::
	      //      SourceCharacter but not IdentifierPart
	      //      <ZWJ>
	      //      <ZWNJ>

	      var ZWJ = '\u200C';
	      var ZWNJ = '\u200D';

	      var res;
	      var tmp;

	      if (!isIdentifierPart(lookahead())) {
	        tmp = incr();
	        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
	      }

	      if (match(ZWJ)) {
	        // <ZWJ>
	        return createEscaped('identifier', 0x200C, ZWJ);
	      } else if (match(ZWNJ)) {
	        // <ZWNJ>
	        return createEscaped('identifier', 0x200D, ZWNJ);
	      }

	      return null;
	    }

	    function parseCharacterClass() {
	      // CharacterClass ::
	      //      [ [lookahead ∉ {^}] ClassRanges ]
	      //      [ ^ ClassRanges ]

	      var res, from = pos;
	      if (res = matchReg(/^\[\^/)) {
	        res = parseClassRanges();
	        skip(']');
	        return createCharacterClass(res, true, from, pos);
	      } else if (match('[')) {
	        res = parseClassRanges();
	        skip(']');
	        return createCharacterClass(res, false, from, pos);
	      }

	      return null;
	    }

	    function parseClassRanges() {
	      // ClassRanges ::
	      //      [empty]
	      //      NonemptyClassRanges

	      var res;
	      if (current(']')) {
	        // Empty array means nothing insinde of the ClassRange.
	        return [];
	      } else {
	        res = parseNonemptyClassRanges();
	        if (!res) {
	          throw SyntaxError('nonEmptyClassRanges');
	        }
	        return res;
	      }
	    }

	    function parseHelperClassRanges(atom) {
	      var from, to, res;
	      if (current('-') && !next(']')) {
	        // ClassAtom - ClassAtom ClassRanges
	        skip('-');

	        res = parseClassAtom();
	        if (!res) {
	          throw SyntaxError('classAtom');
	        }
	        to = pos;
	        var classRanges = parseClassRanges();
	        if (!classRanges) {
	          throw SyntaxError('classRanges');
	        }
	        from = atom.range[0];
	        if (classRanges.type === 'empty') {
	          return [createClassRange(atom, res, from, to)];
	        }
	        return [createClassRange(atom, res, from, to)].concat(classRanges);
	      }

	      res = parseNonemptyClassRangesNoDash();
	      if (!res) {
	        throw SyntaxError('nonEmptyClassRangesNoDash');
	      }

	      return [atom].concat(res);
	    }

	    function parseNonemptyClassRanges() {
	      // NonemptyClassRanges ::
	      //      ClassAtom
	      //      ClassAtom NonemptyClassRangesNoDash
	      //      ClassAtom - ClassAtom ClassRanges

	      var atom = parseClassAtom();
	      if (!atom) {
	        throw SyntaxError('classAtom');
	      }

	      if (current(']')) {
	        // ClassAtom
	        return [atom];
	      }

	      // ClassAtom NonemptyClassRangesNoDash
	      // ClassAtom - ClassAtom ClassRanges
	      return parseHelperClassRanges(atom);
	    }

	    function parseNonemptyClassRangesNoDash() {
	      // NonemptyClassRangesNoDash ::
	      //      ClassAtom
	      //      ClassAtomNoDash NonemptyClassRangesNoDash
	      //      ClassAtomNoDash - ClassAtom ClassRanges

	      var res = parseClassAtom();
	      if (!res) {
	        throw SyntaxError('classAtom');
	      }
	      if (current(']')) {
	        //      ClassAtom
	        return res;
	      }

	      // ClassAtomNoDash NonemptyClassRangesNoDash
	      // ClassAtomNoDash - ClassAtom ClassRanges
	      return parseHelperClassRanges(res);
	    }

	    function parseClassAtom() {
	      // ClassAtom ::
	      //      -
	      //      ClassAtomNoDash
	      if (match('-')) {
	        return createCharacter('-');
	      } else {
	        return parseClassAtomNoDash();
	      }
	    }

	    function parseClassAtomNoDash() {
	      // ClassAtomNoDash ::
	      //      SourceCharacter but not one of \ or ] or -
	      //      \ ClassEscape

	      var res;
	      if (res = matchReg(/^[^\\\]-]/)) {
	        return createCharacter(res[0]);
	      } else if (match('\\')) {
	        res = parseClassEscape();
	        if (!res) {
	          throw SyntaxError('classEscape');
	        }

	        return parseUnicodeSurrogatePairEscape(res);
	      }
	    }

	    var backrefDenied = [];
	    var closedCaptureCounter = 0;
	    var firstIteration = true;
	    var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
	    var pos = 0;

	    // Convert the input to a string and treat the empty string special.
	    str = String(str);
	    if (str === '') {
	      str = '(?:)';
	    }

	    var result = parseDisjunction();

	    if (result.range[1] !== str.length) {
	      throw SyntaxError('Could not parse entire input - got stuck: ' + str);
	    }

	    // The spec requires to interpret the `\2` in `/\2()()/` as backreference.
	    // As the parser collects the number of capture groups as the string is
	    // parsed it is impossible to make these decisions at the point the `\2` is
	    // handled. In case the local decision turns out to be wrongq after the
	    // parsing has finished, the input string is parsed a second time with the
	    // total count of capture groups set.
	    //
	    // SEE: https://github.com/jviereck/regjsparser/issues/70
	    for (var i = 0; i < backrefDenied.length; i++) {
	      if (backrefDenied[i] <= closedCaptureCounter) {
	        // Parse the input a second time.
	        pos = 0;
	        firstIteration = false;
	        return parseDisjunction();
	      }
	    }

	    return result;
	  };

	  var regjsparser = {
	    parse: parse
	  };

	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = regjsparser;
	  } else {
	    window.regjsparser = regjsparser;
	  }

	}());

	},{}],512:[function(require,module,exports){
	var generate = require('regjsgen').generate;
	var parse = require('regjsparser').parse;
	var regenerate = require('regenerate');
	var iuMappings = require('./data/iu-mappings.json');
	var ESCAPE_SETS = require('./data/character-class-escape-sets.js');

	function getCharacterClassEscapeSet(character) {
		if (unicode) {
			if (ignoreCase) {
				return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
			}
			return ESCAPE_SETS.UNICODE[character];
		}
		return ESCAPE_SETS.REGULAR[character];
	}

	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	function has(object, property) {
		return hasOwnProperty.call(object, property);
	}

	// Prepare a Regenerate set containing all code points, used for negative
	// character classes (if any).
	var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
	// Without the `u` flag, the range stops at 0xFFFF.
	// https://mths.be/es6#sec-pattern-semantics
	var BMP_SET = regenerate().addRange(0x0, 0xFFFF);

	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./u`. https://mths.be/es6#sec-atom
	var DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points
		.remove(
			// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):
			0x000A, // Line Feed <LF>
			0x000D, // Carriage Return <CR>
			0x2028, // Line Separator <LS>
			0x2029  // Paragraph Separator <PS>
		);
	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./` (only BMP code points).
	var DOT_SET = DOT_SET_UNICODE.clone()
		.intersection(BMP_SET);

	// Add a range of code points + any case-folded code points in that range to a
	// set.
	regenerate.prototype.iuAddRange = function(min, max) {
		var $this = this;
		do {
			var folded = caseFold(min);
			if (folded) {
				$this.add(folded);
			}
		} while (++min <= max);
		return $this;
	};

	function assign(target, source) {
		for (var key in source) {
			// Note: `hasOwnProperty` is not needed here.
			target[key] = source[key];
		}
	}

	function update(item, pattern) {
		// TODO: Test if memoizing `pattern` here is worth the effort.
		if (!pattern) {
			return;
		}
		var tree = parse(pattern, '');
		switch (tree.type) {
			case 'characterClass':
			case 'group':
			case 'value':
				// No wrapping needed.
				break;
			default:
				// Wrap the pattern in a non-capturing group.
				tree = wrap(tree, pattern);
		}
		assign(item, tree);
	}

	function wrap(tree, pattern) {
		// Wrap the pattern in a non-capturing group.
		return {
			'type': 'group',
			'behavior': 'ignore',
			'body': [tree],
			'raw': '(?:' + pattern + ')'
		};
	}

	function caseFold(codePoint) {
		return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
	}

	var ignoreCase = false;
	var unicode = false;
	function processCharacterClass(characterClassItem) {
		var set = regenerate();
		var body = characterClassItem.body.forEach(function(item) {
			switch (item.type) {
				case 'value':
					set.add(item.codePoint);
					if (ignoreCase && unicode) {
						var folded = caseFold(item.codePoint);
						if (folded) {
							set.add(folded);
						}
					}
					break;
				case 'characterClassRange':
					var min = item.min.codePoint;
					var max = item.max.codePoint;
					set.addRange(min, max);
					if (ignoreCase && unicode) {
						set.iuAddRange(min, max);
					}
					break;
				case 'characterClassEscape':
					set.add(getCharacterClassEscapeSet(item.value));
					break;
				// The `default` clause is only here as a safeguard; it should never be
				// reached. Code coverage tools should ignore it.
				/* istanbul ignore next */
				default:
					throw Error('Unknown term type: ' + item.type);
			}
		});
		if (characterClassItem.negative) {
			set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
		}
		update(characterClassItem, set.toString());
		return characterClassItem;
	}

	function processTerm(item) {
		switch (item.type) {
			case 'dot':
				update(
					item,
					(unicode ? DOT_SET_UNICODE : DOT_SET).toString()
				);
				break;
			case 'characterClass':
				item = processCharacterClass(item);
				break;
			case 'characterClassEscape':
				update(
					item,
					getCharacterClassEscapeSet(item.value).toString()
				);
				break;
			case 'alternative':
			case 'disjunction':
			case 'group':
			case 'quantifier':
				item.body = item.body.map(processTerm);
				break;
			case 'value':
				var codePoint = item.codePoint;
				var set = regenerate(codePoint);
				if (ignoreCase && unicode) {
					var folded = caseFold(codePoint);
					if (folded) {
						set.add(folded);
					}
				}
				update(item, set.toString());
				break;
			case 'anchor':
			case 'empty':
			case 'group':
			case 'reference':
				// Nothing to do here.
				break;
			// The `default` clause is only here as a safeguard; it should never be
			// reached. Code coverage tools should ignore it.
			/* istanbul ignore next */
			default:
				throw Error('Unknown term type: ' + item.type);
		}
		return item;
	};

	module.exports = function(pattern, flags) {
		var tree = parse(pattern, flags);
		ignoreCase = flags ? flags.indexOf('i') > -1 : false;
		unicode = flags ? flags.indexOf('u') > -1 : false;
		assign(tree, processTerm(tree));
		return generate(tree);
	};

	},{"./data/character-class-escape-sets.js":507,"./data/iu-mappings.json":508,"regenerate":509,"regjsgen":510,"regjsparser":511}],513:[function(require,module,exports){
	'use strict';
	var isFinite = require('is-finite');

	module.exports = function (str, n) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string as the first argument');
		}

		if (n < 0 || !isFinite(n)) {
			throw new TypeError('Expected a finite positive number');
		}

		var ret = '';

		do {
			if (n & 1) {
				ret += str;
			}

			str += str;
		} while (n = n >> 1);

		return ret;
	};

	},{"is-finite":514}],514:[function(require,module,exports){
	arguments[4][323][0].apply(exports,arguments)
	},{"dup":323,"number-is-nan":515}],515:[function(require,module,exports){
	arguments[4][324][0].apply(exports,arguments)
	},{"dup":324}],516:[function(require,module,exports){
	'use strict';
	module.exports = /^#!.*/;

	},{}],517:[function(require,module,exports){
	'use strict';
	module.exports = function (str) {
		var isExtendedLengthPath = /^\\\\\?\\/.test(str);
		var hasNonAscii = /[^\x00-\x80]+/.test(str);

		if (isExtendedLengthPath || hasNonAscii) {
			return str;
		}

		return str.replace(/\\/g, '/');
	};

	},{}],518:[function(require,module,exports){
	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;
	exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;
	exports.SourceNode = require('./source-map/source-node').SourceNode;

	},{"./source-map/source-map-consumer":525,"./source-map/source-map-generator":526,"./source-map/source-node":527}],519:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var util = require('./util');

	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };

	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  ArraySet.prototype.size = function ArraySet_size() {
	    return Object.getOwnPropertyNames(this._set).length;
	  };

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var isDuplicate = this.has(aStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[util.toSetString(aStr)] = idx;
	    }
	  };

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    return Object.prototype.hasOwnProperty.call(this._set,
	                                                util.toSetString(aStr));
	  };

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    if (this.has(aStr)) {
	      return this._set[util.toSetString(aStr)];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };

	  exports.ArraySet = ArraySet;

	});

	},{"./util":528,"amdefine":529}],520:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var base64 = require('./base64');

	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011

	  var VLQ_BASE_SHIFT = 5;

	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;

	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;

	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }

	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }

	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;

	    var vlq = toVLQSigned(aValue);

	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);

	    return encoded;
	  };

	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;

	    do {
	      if (aIndex >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }

	      digit = base64.decode(aStr.charCodeAt(aIndex++));
	      if (digit === -1) {
	        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	      }

	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);

	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aIndex;
	  };

	});

	},{"./base64":521,"amdefine":529}],521:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function (number) {
	    if (0 <= number && number < intToCharMap.length) {
	      return intToCharMap[number];
	    }
	    throw new TypeError("Must be between 0 and 63: " + aNumber);
	  };

	  /**
	   * Decode a single base 64 character code digit to an integer. Returns -1 on
	   * failure.
	   */
	  exports.decode = function (charCode) {
	    var bigA = 65;     // 'A'
	    var bigZ = 90;     // 'Z'

	    var littleA = 97;  // 'a'
	    var littleZ = 122; // 'z'

	    var zero = 48;     // '0'
	    var nine = 57;     // '9'

	    var plus = 43;     // '+'
	    var slash = 47;    // '/'

	    var littleOffset = 26;
	    var numberOffset = 52;

	    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	    if (bigA <= charCode && charCode <= bigZ) {
	      return (charCode - bigA);
	    }

	    // 26 - 51: abcdefghijklmnopqrstuvwxyz
	    if (littleA <= charCode && charCode <= littleZ) {
	      return (charCode - littleA + littleOffset);
	    }

	    // 52 - 61: 0123456789
	    if (zero <= charCode && charCode <= nine) {
	      return (charCode - zero + numberOffset);
	    }

	    // 62: +
	    if (charCode == plus) {
	      return 62;
	    }

	    // 63: /
	    if (charCode == slash) {
	      return 63;
	    }

	    // Invalid base64 digit.
	    return -1;
	  };

	});

	},{"amdefine":529}],522:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  exports.GREATEST_LOWER_BOUND = 1;
	  exports.LEAST_UPPER_BOUND = 2;

	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next-closest element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element than the one we are searching for, so we return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // Our needle is greater than aHaystack[mid].
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return aHigh < aHaystack.length ? aHigh : -1;
	      } else {
	        return mid;
	      }
	    }
	    else {
	      // Our needle is less than aHaystack[mid].
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return mid;
	      } else {
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	  }

	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of the closest element if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }

	    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	    if (index < 0) {
	      return -1;
	    }

	    // We have found either the exact element, or the next-closest element than
	    // the one we are searching for. However, there may be more than one such
	    // element. Make sure we always return the smallest of these.
	    while (index - 1 >= 0) {
	      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	        break;
	      }
	      --index;
	    }

	    return index;
	  };

	});

	},{"amdefine":529}],523:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var util = require('./util');

	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	  }

	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }

	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };

	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    var mapping;
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };

	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  };

	  exports.MappingList = MappingList;

	});

	},{"./util":528,"amdefine":529}],524:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  // It turns out that some (most?) JavaScript engines don't self-host
	  // `Array.prototype.sort`. This makes sense because C++ will likely remain
	  // faster than JS when doing raw CPU-intensive sorting. However, when using a
	  // custom comparator function, calling back and forth between the VM's C++ and
	  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
	  // worse generated code for the comparator function than would be optimal. In
	  // fact, when sorting with a comparator, these costs outweigh the benefits of
	  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	  // a ~3500ms mean speed-up in `bench/bench.html`.

	  /**
	   * Swap the elements indexed by `x` and `y` in the array `ary`.
	   *
	   * @param {Array} ary
	   *        The array.
	   * @param {Number} x
	   *        The index of the first item.
	   * @param {Number} y
	   *        The index of the second item.
	   */
	  function swap(ary, x, y) {
	    var temp = ary[x];
	    ary[x] = ary[y];
	    ary[y] = temp;
	  }

	  /**
	   * Returns a random integer within the range `low .. high` inclusive.
	   *
	   * @param {Number} low
	   *        The lower bound on the range.
	   * @param {Number} high
	   *        The upper bound on the range.
	   */
	  function randomIntInRange(low, high) {
	    return Math.round(low + (Math.random() * (high - low)));
	  }

	  /**
	   * The Quick Sort algorithm.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   * @param {Number} p
	   *        Start index of the array
	   * @param {Number} r
	   *        End index of the array
	   */
	  function doQuickSort(ary, comparator, p, r) {
	    // If our lower bound is less than our upper bound, we (1) partition the
	    // array into two pieces and (2) recurse on each half. If it is not, this is
	    // the empty array and our base case.

	    if (p < r) {
	      // (1) Partitioning.
	      //
	      // The partitioning chooses a pivot between `p` and `r` and moves all
	      // elements that are less than or equal to the pivot to the before it, and
	      // all the elements that are greater than it after it. The effect is that
	      // once partition is done, the pivot is in the exact place it will be when
	      // the array is put in sorted order, and it will not need to be moved
	      // again. This runs in O(n) time.

	      // Always choose a random pivot so that an input array which is reverse
	      // sorted does not cause O(n^2) running time.
	      var pivotIndex = randomIntInRange(p, r);
	      var i = p - 1;

	      swap(ary, pivotIndex, r);
	      var pivot = ary[r];

	      // Immediately after `j` is incremented in this loop, the following hold
	      // true:
	      //
	      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	      //
	      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	      for (var j = p; j < r; j++) {
	        if (comparator(ary[j], pivot) <= 0) {
	          i += 1;
	          swap(ary, i, j);
	        }
	      }

	      swap(ary, i + 1, j);
	      var q = i + 1;

	      // (2) Recurse on each half.

	      doQuickSort(ary, comparator, p, q - 1);
	      doQuickSort(ary, comparator, q + 1, r);
	    }
	  }

	  /**
	   * Sort the given array in-place with the given comparator function.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   */
	  exports.quickSort = function (ary, comparator) {
	    doQuickSort(ary, comparator, 0, ary.length - 1);
	  };

	});

	},{"amdefine":529}],525:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var util = require('./util');
	  var binarySearch = require('./binary-search');
	  var ArraySet = require('./array-set').ArraySet;
	  var base64VLQ = require('./base64-vlq');
	  var quickSort = require('./quick-sort').quickSort;

	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    return sourceMap.sections != null
	      ? new IndexedSourceMapConsumer(sourceMap)
	      : new BasicSourceMapConsumer(sourceMap);
	  }

	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	  }

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;

	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.

	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__generatedMappings;
	    }
	  });

	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__originalMappings;
	    }
	  });

	  SourceMapConsumer.prototype._charIsMappingSeparator =
	    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	      var c = aStr.charAt(index);
	      return c === ";" || c === ",";
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };

	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;

	  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }

	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source === null ? null : this._sources.at(mapping.source);
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name === null ? null : this._names.at(mapping.name)
	        };
	      }, this).forEach(aCallback, context);
	    };

	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: Optional. the column number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var line = util.getArg(aArgs, 'line');

	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to 0, we thus find the last mapping for
	      // the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: line,
	        originalColumn: util.getArg(aArgs, 'column', 0)
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      if (!this._sources.has(needle.source)) {
	        return [];
	      }
	      needle.source = this._sources.indexOf(needle.source);

	      var mappings = [];

	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions,
	                                    binarySearch.LEAST_UPPER_BOUND);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (aArgs.column === undefined) {
	          var originalLine = mapping.originalLine;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we found. Since
	          // mappings are sorted, this is guaranteed to find all mappings for
	          // the line we found.
	          while (mapping && mapping.originalLine === originalLine) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        } else {
	          var originalColumn = mapping.originalColumn;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we were searching for.
	          // Since mappings are sorted, this is guaranteed to find all mappings for
	          // the line we are searching for.
	          while (mapping &&
	                 mapping.originalLine === line &&
	                 mapping.originalColumn == originalColumn) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        }
	      }

	      return mappings;
	    };

	  exports.SourceMapConsumer = SourceMapConsumer;

	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);

	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    sources = sources.map(util.normalize);

	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);

	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }

	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);

	      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;

	      // Because we are modifying the entries (by converting string sources and
	      // names to indices into the sources and names ArraySets), we have to make
	      // a copy of the entry or else bad things happen. Shared mutable state
	      // strikes again! See github issue #191.

	      var generatedMappings = aSourceMap._mappings.toArray().slice();
	      var destGeneratedMappings = smc.__generatedMappings = [];
	      var destOriginalMappings = smc.__originalMappings = [];

	      for (var i = 0, length = generatedMappings.length; i < length; i++) {
	        var srcMapping = generatedMappings[i];
	        var destMapping = new Mapping;
	        destMapping.generatedLine = srcMapping.generatedLine;
	        destMapping.generatedColumn = srcMapping.generatedColumn;

	        if (srcMapping.source) {
	          destMapping.source = sources.indexOf(srcMapping.source);
	          destMapping.originalLine = srcMapping.originalLine;
	          destMapping.originalColumn = srcMapping.originalColumn;

	          if (srcMapping.name) {
	            destMapping.name = names.indexOf(srcMapping.name);
	          }

	          destOriginalMappings.push(destMapping);
	        }

	        destGeneratedMappings.push(destMapping);
	      }

	      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

	      return smc;
	    };

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });

	  /**
	   * Provide the JIT with a nice shape / hidden class.
	   */
	  function Mapping() {
	    this.generatedLine = 0;
	    this.generatedColumn = 0;
	    this.source = null;
	    this.originalLine = null;
	    this.originalColumn = null;
	    this.name = null;
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var length = aStr.length;
	      var index = 0;
	      var cachedSegments = {};
	      var temp = {};
	      var originalMappings = [];
	      var generatedMappings = [];
	      var mapping, str, segment, end, value;

	      while (index < length) {
	        if (aStr.charAt(index) === ';') {
	          generatedLine++;
	          index++;
	          previousGeneratedColumn = 0;
	        }
	        else if (aStr.charAt(index) === ',') {
	          index++;
	        }
	        else {
	          mapping = new Mapping();
	          mapping.generatedLine = generatedLine;

	          // Because each offset is encoded relative to the previous one,
	          // many segments often have the same encoding. We can exploit this
	          // fact by caching the parsed variable length fields of each segment,
	          // allowing us to avoid a second parse if we encounter the same
	          // segment again.
	          for (end = index; end < length; end++) {
	            if (this._charIsMappingSeparator(aStr, end)) {
	              break;
	            }
	          }
	          str = aStr.slice(index, end);

	          segment = cachedSegments[str];
	          if (segment) {
	            index += str.length;
	          } else {
	            segment = [];
	            while (index < end) {
	              base64VLQ.decode(aStr, index, temp);
	              value = temp.value;
	              index = temp.rest;
	              segment.push(value);
	            }

	            if (segment.length === 2) {
	              throw new Error('Found a source, but no line and column');
	            }

	            if (segment.length === 3) {
	              throw new Error('Found a source and line, but no column');
	            }

	            cachedSegments[str] = segment;
	          }

	          // Generated column.
	          mapping.generatedColumn = previousGeneratedColumn + segment[0];
	          previousGeneratedColumn = mapping.generatedColumn;

	          if (segment.length > 1) {
	            // Original source.
	            mapping.source = previousSource + segment[1];
	            previousSource += segment[1];

	            // Original line.
	            mapping.originalLine = previousOriginalLine + segment[2];
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;

	            // Original column.
	            mapping.originalColumn = previousOriginalColumn + segment[3];
	            previousOriginalColumn = mapping.originalColumn;

	            if (segment.length > 4) {
	              // Original name.
	              mapping.name = previousName + segment[4];
	              previousName += segment[4];
	            }
	          }

	          generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            originalMappings.push(mapping);
	          }
	        }
	      }

	      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	      this.__generatedMappings = generatedMappings;

	      quickSort(originalMappings, util.compareByOriginalPositions);
	      this.__originalMappings = originalMappings;
	    };

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator, aBias) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.

	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }

	      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	    };

	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];

	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];

	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }

	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._generatedMappings,
	        "generatedLine",
	        "generatedColumn",
	        util.compareByGeneratedPositionsDeflated,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];

	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source !== null) {
	            source = this._sources.at(source);
	            if (this.sourceRoot != null) {
	              source = util.join(this.sourceRoot, source);
	            }
	          }
	          var name = util.getArg(mapping, 'name', null);
	          if (name !== null) {
	            name = this._names.at(name);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: name
	          };
	        }
	      }

	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function BasicSourceMapConsumer_hasContentsOfAllSources() {
	      if (!this.sourcesContent) {
	        return false;
	      }
	      return this.sourcesContent.length >= this._sources.size() &&
	        !this.sourcesContent.some(function (sc) { return sc == null; });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * availible.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }

	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }

	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }

	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }

	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }

	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var source = util.getArg(aArgs, 'source');
	      if (this.sourceRoot != null) {
	        source = util.relative(this.sourceRoot, source);
	      }
	      if (!this._sources.has(source)) {
	        return {
	          line: null,
	          column: null,
	          lastColumn: null
	        };
	      }
	      source = this._sources.indexOf(source);

	      var needle = {
	        source: source,
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._originalMappings,
	        "originalLine",
	        "originalColumn",
	        util.compareByOriginalPositions,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (mapping.source === needle.source) {
	          return {
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          };
	        }
	      }

	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };

	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');

	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    this._sources = new ArraySet();
	    this._names = new ArraySet();

	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');

	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;

	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }

	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      };
	      return sources;
	    }
	  });

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }

	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];

	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }

	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0),
	        bias: aArgs.bias
	      });
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	      return this._sections.every(function (s) {
	        return s.consumer.hasContentsOfAllSources();
	      });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }

	      return {
	        line: null,
	        column: null
	      };
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[i];

	          var source = section.consumer._sources.at(mapping.source);
	          if (section.consumer.sourceRoot !== null) {
	            source = util.join(section.consumer.sourceRoot, source);
	          }
	          this._sources.add(source);
	          source = this._sources.indexOf(source);

	          var name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);

	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.column +
	              (section.generatedOffset.generatedLine === mapping.generatedLine)
	              ? section.generatedOffset.generatedColumn - 1
	              : 0,
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: name
	          };

	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        };
	      };

	      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	      quickSort(this.__originalMappings, util.compareByOriginalPositions);
	    };

	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

	});

	},{"./array-set":519,"./base64-vlq":520,"./binary-search":522,"./quick-sort":524,"./util":528,"amdefine":529}],526:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var base64VLQ = require('./base64-vlq');
	  var util = require('./util');
	  var ArraySet = require('./array-set').ArraySet;
	  var MappingList = require('./mapping-list').MappingList;

	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }

	  SourceMapGenerator.prototype._version = 3;

	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };

	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }

	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };

	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }

	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };

	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);

	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }

	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }

	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }

	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };

	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }

	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };

	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();

	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }

	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }

	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }

	      }, this);
	      this._sources = newSources;
	      this._names = newNames;

	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };

	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };

	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;

	      var mappings = this._mappings.toArray();
	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];

	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }

	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (mapping.source != null) {
	          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
	                                     - previousSource);
	          previousSource = this._sources.indexOf(mapping.source);

	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;

	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;

	          if (mapping.name != null) {
	            result += base64VLQ.encode(this._names.indexOf(mapping.name)
	                                       - previousName);
	            previousName = this._names.indexOf(mapping.name);
	          }
	        }
	      }

	      return result;
	    };

	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };

	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }

	      return map;
	    };

	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this.toJSON());
	    };

	  exports.SourceMapGenerator = SourceMapGenerator;

	});

	},{"./array-set":519,"./base64-vlq":520,"./mapping-list":523,"./util":528,"amdefine":529}],527:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
	  var util = require('./util');

	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;

	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;

	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";

	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }

	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();

	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };

	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;

	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            var code = "";
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }

	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });

	      return node;

	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };

	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };

	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };

	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };

	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };

	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }

	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };

	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };

	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });

	    return { code: generated.code, map: map };
	  };

	  exports.SourceNode = SourceNode;

	});

	},{"./source-map-generator":526,"./util":528,"amdefine":529}],528:[function(require,module,exports){
	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (typeof define !== 'function') {
	    var define = require('amdefine')(module, require);
	}
	define(function (require, exports, module) {

	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;

	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;

	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;

	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;

	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = (path.charAt(0) === '/');

	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');

	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }

	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;

	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }

	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }

	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }

	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }

	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;

	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }

	    aRoot = aRoot.replace(/\/$/, '');

	    // It is possible for the path to be above the root. In this case, simply
	    // checking whether the root is a prefix of the path won't work. Instead, we
	    // need to remove components from the root one by one, until either we find
	    // a prefix that fits, or we run out of components to remove.
	    var level = 0;
	    while (aPath.indexOf(aRoot + '/') !== 0) {
	      var index = aRoot.lastIndexOf("/");
	      if (index < 0) {
	        return aPath;
	      }

	      // If the only part of the root that is left is the scheme (i.e. http://,
	      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	      // have exhausted all components, so the path is not relative to the root.
	      aRoot = aRoot.slice(0, index);
	      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	        return aPath;
	      }

	      ++level;
	    }

	    // Make sure we add a "../" for each component we removed from the root.
	    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	  }
	  exports.relative = relative;

	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;

	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;

	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0 || onlyCompareOriginal) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  };
	  exports.compareByOriginalPositions = compareByOriginalPositions;

	  /**
	   * Comparator between two mappings with deflated source and name indices where
	   * the generated positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0 || onlyCompareGenerated) {
	      return cmp;
	    }

	    cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  };
	  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	  function strcmp(aStr1, aStr2) {
	    if (aStr1 === aStr2) {
	      return 0;
	    }

	    if (aStr1 > aStr2) {
	      return 1;
	    }

	    return -1;
	  }

	  /**
	   * Comparator between two mappings with inflated source and name strings where
	   * the generated positions are compared.
	   */
	  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return strcmp(mappingA.name, mappingB.name);
	  };
	  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

	});

	},{"amdefine":529}],529:[function(require,module,exports){
	(function (process,__filename){
	/** vim: et:ts=4:sw=4:sts=4
	 * @license amdefine 1.0.0 Copyright (c) 2011-2015, The Dojo Foundation All Rights Reserved.
	 * Available via the MIT or new BSD license.
	 * see: http://github.com/jrburke/amdefine for details
	 */

	/*jslint node: true */
	/*global module, process */
	'use strict';

	/**
	 * Creates a define for node.
	 * @param {Object} module the "module" object that is defined by Node for the
	 * current module.
	 * @param {Function} [requireFn]. Node's require function for the current module.
	 * It only needs to be passed in Node versions before 0.5, when module.require
	 * did not exist.
	 * @returns {Function} a define function that is usable for the current node
	 * module.
	 */
	function amdefine(module, requireFn) {
	    'use strict';
	    var defineCache = {},
	        loaderCache = {},
	        alreadyCalled = false,
	        path = require('path'),
	        makeRequire, stringRequire;

	    /**
	     * Trims the . and .. from an array of path segments.
	     * It will keep a leading path segment if a .. will become
	     * the first path segment, to help with module name lookups,
	     * which act like paths, but can be remapped. But the end result,
	     * all paths that use this function should look normalized.
	     * NOTE: this method MODIFIES the input array.
	     * @param {Array} ary the array of path segments.
	     */
	    function trimDots(ary) {
	        var i, part;
	        for (i = 0; ary[i]; i+= 1) {
	            part = ary[i];
	            if (part === '.') {
	                ary.splice(i, 1);
	                i -= 1;
	            } else if (part === '..') {
	                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
	                    //End of the line. Keep at least one non-dot
	                    //path segment at the front so it can be mapped
	                    //correctly to disk. Otherwise, there is likely
	                    //no path mapping for a path starting with '..'.
	                    //This can still fail, but catches the most reasonable
	                    //uses of ..
	                    break;
	                } else if (i > 0) {
	                    ary.splice(i - 1, 2);
	                    i -= 2;
	                }
	            }
	        }
	    }

	    function normalize(name, baseName) {
	        var baseParts;

	        //Adjust any relative paths.
	        if (name && name.charAt(0) === '.') {
	            //If have a base name, try to normalize against it,
	            //otherwise, assume it is a top-level require that will
	            //be relative to baseUrl in the end.
	            if (baseName) {
	                baseParts = baseName.split('/');
	                baseParts = baseParts.slice(0, baseParts.length - 1);
	                baseParts = baseParts.concat(name.split('/'));
	                trimDots(baseParts);
	                name = baseParts.join('/');
	            }
	        }

	        return name;
	    }

	    /**
	     * Create the normalize() function passed to a loader plugin's
	     * normalize method.
	     */
	    function makeNormalize(relName) {
	        return function (name) {
	            return normalize(name, relName);
	        };
	    }

	    function makeLoad(id) {
	        function load(value) {
	            loaderCache[id] = value;
	        }

	        load.fromText = function (id, text) {
	            //This one is difficult because the text can/probably uses
	            //define, and any relative paths and requires should be relative
	            //to that id was it would be found on disk. But this would require
	            //bootstrapping a module/require fairly deeply from node core.
	            //Not sure how best to go about that yet.
	            throw new Error('amdefine does not implement load.fromText');
	        };

	        return load;
	    }

	    makeRequire = function (systemRequire, exports, module, relId) {
	        function amdRequire(deps, callback) {
	            if (typeof deps === 'string') {
	                //Synchronous, single module require('')
	                return stringRequire(systemRequire, exports, module, deps, relId);
	            } else {
	                //Array of dependencies with a callback.

	                //Convert the dependencies to modules.
	                deps = deps.map(function (depName) {
	                    return stringRequire(systemRequire, exports, module, depName, relId);
	                });

	                //Wait for next tick to call back the require call.
	                if (callback) {
	                    process.nextTick(function () {
	                        callback.apply(null, deps);
	                    });
	                }
	            }
	        }

	        amdRequire.toUrl = function (filePath) {
	            if (filePath.indexOf('.') === 0) {
	                return normalize(filePath, path.dirname(module.filename));
	            } else {
	                return filePath;
	            }
	        };

	        return amdRequire;
	    };

	    //Favor explicit value, passed in if the module wants to support Node 0.4.
	    requireFn = requireFn || function req() {
	        return module.require.apply(module, arguments);
	    };

	    function runFactory(id, deps, factory) {
	        var r, e, m, result;

	        if (id) {
	            e = loaderCache[id] = {};
	            m = {
	                id: id,
	                uri: __filename,
	                exports: e
	            };
	            r = makeRequire(requireFn, e, m, id);
	        } else {
	            //Only support one define call per file
	            if (alreadyCalled) {
	                throw new Error('amdefine with no module ID cannot be called more than once per file.');
	            }
	            alreadyCalled = true;

	            //Use the real variables from node
	            //Use module.exports for exports, since
	            //the exports in here is amdefine exports.
	            e = module.exports;
	            m = module;
	            r = makeRequire(requireFn, e, m, module.id);
	        }

	        //If there are dependencies, they are strings, so need
	        //to convert them to dependency values.
	        if (deps) {
	            deps = deps.map(function (depName) {
	                return r(depName);
	            });
	        }

	        //Call the factory with the right dependencies.
	        if (typeof factory === 'function') {
	            result = factory.apply(m.exports, deps);
	        } else {
	            result = factory;
	        }

	        if (result !== undefined) {
	            m.exports = result;
	            if (id) {
	                loaderCache[id] = m.exports;
	            }
	        }
	    }

	    stringRequire = function (systemRequire, exports, module, id, relId) {
	        //Split the ID by a ! so that
	        var index = id.indexOf('!'),
	            originalId = id,
	            prefix, plugin;

	        if (index === -1) {
	            id = normalize(id, relId);

	            //Straight module lookup. If it is one of the special dependencies,
	            //deal with it, otherwise, delegate to node.
	            if (id === 'require') {
	                return makeRequire(systemRequire, exports, module, relId);
	            } else if (id === 'exports') {
	                return exports;
	            } else if (id === 'module') {
	                return module;
	            } else if (loaderCache.hasOwnProperty(id)) {
	                return loaderCache[id];
	            } else if (defineCache[id]) {
	                runFactory.apply(null, defineCache[id]);
	                return loaderCache[id];
	            } else {
	                if(systemRequire) {
	                    return systemRequire(originalId);
	                } else {
	                    throw new Error('No module with ID: ' + id);
	                }
	            }
	        } else {
	            //There is a plugin in play.
	            prefix = id.substring(0, index);
	            id = id.substring(index + 1, id.length);

	            plugin = stringRequire(systemRequire, exports, module, prefix, relId);

	            if (plugin.normalize) {
	                id = plugin.normalize(id, makeNormalize(relId));
	            } else {
	                //Normalize the ID normally.
	                id = normalize(id, relId);
	            }

	            if (loaderCache[id]) {
	                return loaderCache[id];
	            } else {
	                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});

	                return loaderCache[id];
	            }
	        }
	    };

	    //Create a define function specific to the module asking for amdefine.
	    function define(id, deps, factory) {
	        if (Array.isArray(id)) {
	            factory = deps;
	            deps = id;
	            id = undefined;
	        } else if (typeof id !== 'string') {
	            factory = id;
	            id = deps = undefined;
	        }

	        if (deps && !Array.isArray(deps)) {
	            factory = deps;
	            deps = undefined;
	        }

	        if (!deps) {
	            deps = ['require', 'exports', 'module'];
	        }

	        //Set up properties for this module. If an ID, then use
	        //internal cache. If no ID, then use the external variables
	        //for this node module.
	        if (id) {
	            //Put the module in deep freeze until there is a
	            //require call for it.
	            defineCache[id] = [id, deps, factory];
	        } else {
	            runFactory(id, deps, factory);
	        }
	    }

	    //define.require, which has access to all the values in the
	    //cache. Useful for AMD modules that all have IDs in the file,
	    //but need to finally export a value to node based on one of those
	    //IDs.
	    define.require = function (id) {
	        if (loaderCache[id]) {
	            return loaderCache[id];
	        }

	        if (defineCache[id]) {
	            runFactory.apply(null, defineCache[id]);
	            return loaderCache[id];
	        }
	    };

	    define.amd = {};

	    return define;
	}

	module.exports = amdefine;

	}).call(this,require('_process'),"/node_modules/source-map/node_modules/amdefine/amdefine.js")
	},{"_process":14,"path":12}],530:[function(require,module,exports){
	/*!
		strip-json-comments
		Strip comments from JSON. Lets you use comments in your JSON files!
		https://github.com/sindresorhus/strip-json-comments
		by Sindre Sorhus
		MIT License
	*/
	(function () {
		'use strict';

		function stripJsonComments(str) {
			var currentChar;
			var nextChar;
			var insideString = false;
			var insideComment = false;
			var ret = '';

			for (var i = 0; i < str.length; i++) {
				currentChar = str[i];
				nextChar = str[i + 1];

				if (!insideComment && str[i - 1] !== '\\' && currentChar === '"') {
					insideString = !insideString;
				}

				if (insideString) {
					ret += currentChar;
					continue;
				}

				if (!insideComment && currentChar + nextChar === '//') {
					insideComment = 'single';
					i++;
				} else if (insideComment === 'single' && currentChar + nextChar === '\r\n') {
					insideComment = false;
					i++;
					ret += currentChar;
					ret += nextChar;
					continue;
				} else if (insideComment === 'single' && currentChar === '\n') {
					insideComment = false;
				} else if (!insideComment && currentChar + nextChar === '/*') {
					insideComment = 'multi';
					i++;
					continue;
				} else if (insideComment === 'multi' && currentChar + nextChar === '*/') {
					insideComment = false;
					i++;
					continue;
				}

				if (insideComment) {
					continue;
				}

				ret += currentChar;
			}

			return ret;
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = stripJsonComments;
		} else {
			window.stripJsonComments = stripJsonComments;
		}
	})();

	},{}],531:[function(require,module,exports){
	'use strict';
	module.exports = function toFastProperties(obj) {
		/*jshint -W027*/
		function f() {}
		f.prototype = obj;
		new f();
		return;
		eval(obj);
	};

	},{}],532:[function(require,module,exports){
	'use strict';
	module.exports = function (str) {
		var tail = str.length;

		while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
			tail--;
		}

		return str.slice(0, tail);
	};

	},{}],533:[function(require,module,exports){
	(function (process){
	var Module = require("module");

	var resolve = module.exports = function (loc, _require) {
	  try {
	    return (_require || require).resolve(loc);
	  } catch (err) {
	    return null;
	  }
	};

	var relativeMod;

	resolve.relative = function (loc) {
	  // we're in the browser, probably
	  if (typeof Module === "object") return null;

	  if (!relativeMod) {
	    relativeMod = new Module;
	    relativeMod.paths = Module._nodeModulePaths(process.cwd());
	  }

	  try {
	    return Module._resolveFilename(loc, relativeMod);
	  } catch (err) {
	    return null;
	  }
	};

	}).call(this,require('_process'))
	},{"_process":14,"module":4}],534:[function(require,module,exports){
	module.exports={
	  "name": "babel-core",
	  "version": "5.8.15",
	  "description": "A compiler for writing next generation JavaScript",
	  "author": "Sebastian McKenzie <sebmck@gmail.com>",
	  "homepage": "https://babeljs.io/",
	  "license": "MIT",
	  "repository": "babel/babel",
	  "browser": {
	    "./lib/api/register/node.js": "./lib/api/register/browser.js"
	  },
	  "keywords": [
	    "6to5",
	    "babel",
	    "classes",
	    "const",
	    "es6",
	    "harmony",
	    "let",
	    "modules",
	    "transpile",
	    "transpiler",
	    "var"
	  ],
	  "scripts": {
	    "bench": "make bench",
	    "test": "make test"
	  },
	  "dependencies": {
	    "babel-plugin-constant-folding": "^1.0.1",
	    "babel-plugin-dead-code-elimination": "^1.0.2",
	    "babel-plugin-eval": "^1.0.1",
	    "babel-plugin-inline-environment-variables": "^1.0.1",
	    "babel-plugin-jscript": "^1.0.4",
	    "babel-plugin-member-expression-literals": "^1.0.1",
	    "babel-plugin-property-literals": "^1.0.1",
	    "babel-plugin-proto-to-assign": "^1.0.3",
	    "babel-plugin-react-constant-elements": "^1.0.3",
	    "babel-plugin-react-display-name": "^1.0.3",
	    "babel-plugin-remove-console": "^1.0.1",
	    "babel-plugin-remove-debugger": "^1.0.1",
	    "babel-plugin-runtime": "^1.0.7",
	    "babel-plugin-undeclared-variables-check": "^1.0.2",
	    "babel-plugin-undefined-to-void": "^1.1.6",
	    "babylon": "^5.8.12",
	    "bluebird": "^2.9.33",
	    "chalk": "^1.0.0",
	    "convert-source-map": "^1.1.0",
	    "core-js": "^0.9.0",
	    "debug": "^2.1.1",
	    "detect-indent": "^3.0.0",
	    "esutils": "^2.0.0",
	    "fs-readdir-recursive": "^0.1.0",
	    "globals": "^6.4.0",
	    "home-or-tmp": "^1.0.0",
	    "is-integer": "^1.0.4",
	    "js-tokens": "1.0.1",
	    "line-numbers": "0.2.0",
	    "lodash": "^3.10.0",
	    "minimatch": "^2.0.3",
	    "output-file-sync": "^1.1.0",
	    "path-exists": "^1.0.0",
	    "path-is-absolute": "^1.0.0",
	    "private": "^0.1.6",
	    "regenerator": "0.8.34",
	    "regexpu": "^1.1.2",
	    "repeating": "^1.1.2",
	    "resolve": "^1.1.6",
	    "shebang-regex": "^1.0.0",
	    "slash": "^1.0.0",
	    "source-map": "^0.4.0",
	    "source-map-support": "^0.2.10",
	    "strip-json-comments": "^1.0.2",
	    "to-fast-properties": "^1.0.0",
	    "trim-right": "^1.0.0",
	    "try-resolve": "^1.0.0"
	  }
	}
	},{}],535:[function(require,module,exports){
	module.exports={"abstract-expression-call":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"PROPERTY"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"referenceGet"},"computed":false},"computed":true},"arguments":[{"type":"Identifier","name":"OBJECT"}]},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"OBJECT"}]}}]},"abstract-expression-delete":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"PROPERTY"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"referenceDelete"},"computed":false},"computed":true},"arguments":[{"type":"Identifier","name":"OBJECT"}]}}]},"abstract-expression-get":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"PROPERTY"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"referenceGet"},"computed":false},"computed":true},"arguments":[{"type":"Identifier","name":"OBJECT"}]}}]},"abstract-expression-set":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"PROPERTY"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"referenceSet"},"computed":false},"computed":true},"arguments":[{"type":"Identifier","name":"OBJECT"},{"type":"Identifier","name":"VALUE"}]}}]},"array-comprehension-container":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"KEY"},"init":{"type":"ArrayExpression","elements":[]}}],"kind":"var"},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"KEY"}}]},"parenthesizedExpression":true},"arguments":[]}}]},"array-from":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"from"},"computed":false},"arguments":[{"type":"Identifier","name":"VALUE"}]}}]},"array-push":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"KEY"},"property":{"type":"Identifier","name":"push"},"computed":false},"arguments":[{"type":"Identifier","name":"STATEMENT"}]}}]},"call":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"OBJECT"},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"CONTEXT"}]}}]},"class-decorator":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"CLASS_REF"},"right":{"type":"LogicalExpression","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"DECORATOR"},"arguments":[{"type":"Identifier","name":"CLASS_REF"}]},"operator":"||","right":{"type":"Identifier","name":"CLASS_REF"}}}}]},"class-derived-default-constructor":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Super"},"arguments":[{"type":"SpreadElement","argument":{"type":"Identifier","name":"arguments"}}]}}]},"parenthesizedExpression":true}}]},"default-parameter-assign":{"type":"Program","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"VARIABLE_NAME"},"operator":"===","right":{"type":"Identifier","name":"undefined"}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"VARIABLE_NAME"},"right":{"type":"Identifier","name":"DEFAULT_VALUE"}}},"alternate":null}]},"default-parameter":{"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"VARIABLE_NAME"},"init":{"type":"ConditionalExpression","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARGUMENTS"},"property":{"type":"Identifier","name":"length"},"computed":false},"operator":"<=","right":{"type":"Identifier","name":"ARGUMENT_KEY"}},"operator":"||","right":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARGUMENTS"},"property":{"type":"Identifier","name":"ARGUMENT_KEY"},"computed":true},"operator":"===","right":{"type":"Identifier","name":"undefined"}}},"consequent":{"type":"Identifier","name":"DEFAULT_VALUE"},"alternate":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARGUMENTS"},"property":{"type":"Identifier","name":"ARGUMENT_KEY"},"computed":true}}}],"kind":"let"}]},"exports-assign":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"exports"},"property":{"type":"Identifier","name":"KEY"},"computed":false},"right":{"type":"Identifier","name":"VALUE"}}}]},"exports-default-assign":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"module"},"property":{"type":"Identifier","name":"exports"},"computed":false},"right":{"type":"Identifier","name":"VALUE"}}}]},"exports-from-assign":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"exports"},{"type":"Identifier","name":"ID"},{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"enumerable"},"value":{"type":"Literal","value":true},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"get"},"value":{"type":"FunctionExpression","id":{"type":"Identifier","name":"get"},"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"INIT"}}]}},"kind":"init"}]}]}}]},"exports-module-declaration-loose":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"exports"},"property":{"type":"Identifier","name":"__esModule"},"computed":false},"right":{"type":"Literal","value":true}}}]},"exports-module-declaration":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"exports"},{"type":"Literal","value":"__esModule"},{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"value"},"value":{"type":"Literal","value":true},"kind":"init"}]}]}}]},"for-of-array":{"type":"Program","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"KEY"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"KEY"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARR"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"KEY"}},"body":{"type":"ExpressionStatement","expression":{"type":"Identifier","name":"BODY"}}}]},"for-of-loose":{"type":"Program","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"LOOP_OBJECT"},"init":{"type":"Identifier","name":"OBJECT"}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"IS_ARRAY"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"isArray"},"computed":false},"arguments":[{"type":"Identifier","name":"LOOP_OBJECT"}]}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"INDEX"},"init":{"type":"Literal","value":0}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"LOOP_OBJECT"},"init":{"type":"ConditionalExpression","test":{"type":"Identifier","name":"IS_ARRAY"},"consequent":{"type":"Identifier","name":"LOOP_OBJECT"},"alternate":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"LOOP_OBJECT"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"iterator"},"computed":false},"computed":true},"arguments":[]}}}],"kind":"var"},"test":null,"update":null,"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"ID"},"init":null}],"kind":"var"},{"type":"IfStatement","test":{"type":"Identifier","name":"IS_ARRAY"},"consequent":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"INDEX"},"operator":">=","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"LOOP_OBJECT"},"property":{"type":"Identifier","name":"length"},"computed":false}},"consequent":{"type":"BreakStatement","label":null},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"ID"},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"LOOP_OBJECT"},"property":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"INDEX"}},"computed":true}}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"INDEX"},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"LOOP_OBJECT"},"property":{"type":"Identifier","name":"next"},"computed":false},"arguments":[]}}},{"type":"IfStatement","test":{"type":"MemberExpression","object":{"type":"Identifier","name":"INDEX"},"property":{"type":"Identifier","name":"done"},"computed":false},"consequent":{"type":"BreakStatement","label":null},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"ID"},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"INDEX"},"property":{"type":"Identifier","name":"value"},"computed":false}}}]}}]}}]},"for-of":{"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"ITERATOR_COMPLETION"},"init":{"type":"Literal","value":true}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"ITERATOR_HAD_ERROR_KEY"},"init":{"type":"Literal","value":false}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"ITERATOR_ERROR_KEY"},"init":{"type":"Identifier","name":"undefined"}}],"kind":"var"},{"type":"TryStatement","block":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"ITERATOR_KEY"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"OBJECT"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"iterator"},"computed":false},"computed":true},"arguments":[]}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"STEP_KEY"},"init":null}],"kind":"var"},"test":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"ITERATOR_COMPLETION"},"right":{"type":"MemberExpression","object":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"STEP_KEY"},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"ITERATOR_KEY"},"property":{"type":"Identifier","name":"next"},"computed":false},"arguments":[]},"parenthesizedExpression":true},"property":{"type":"Identifier","name":"done"},"computed":false},"parenthesizedExpression":true}},"update":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"ITERATOR_COMPLETION"},"right":{"type":"Literal","value":true}},"body":{"type":"BlockStatement","body":[]}}]},"handler":{"type":"CatchClause","param":{"type":"Identifier","name":"err"},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"ITERATOR_HAD_ERROR_KEY"},"right":{"type":"Literal","value":true}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"ITERATOR_ERROR_KEY"},"right":{"type":"Identifier","name":"err"}}}]}},"guardedHandlers":[],"finalizer":{"type":"BlockStatement","body":[{"type":"TryStatement","block":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"Identifier","name":"ITERATOR_COMPLETION"}},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"ITERATOR_KEY"},"property":{"type":"Literal","value":"return"},"computed":true}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"ITERATOR_KEY"},"property":{"type":"Literal","value":"return"},"computed":true},"arguments":[]}}]},"alternate":null}]},"handler":null,"guardedHandlers":[],"finalizer":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"Identifier","name":"ITERATOR_HAD_ERROR_KEY"},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"Identifier","name":"ITERATOR_ERROR_KEY"}}]},"alternate":null}]}}]}}]},"helper-async-to-generator":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"fn"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"gen"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"fn"},"property":{"type":"Identifier","name":"apply"},"computed":false},"arguments":[{"type":"ThisExpression"},{"type":"Identifier","name":"arguments"}]}}],"kind":"var"},{"type":"ReturnStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"Promise"},"arguments":[{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"resolve"},{"type":"Identifier","name":"reject"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"callNext"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"step"},"property":{"type":"Identifier","name":"bind"},"computed":false},"arguments":[{"type":"Literal","value":null,"rawValue":null},{"type":"Literal","value":"next"}]}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"callThrow"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"step"},"property":{"type":"Identifier","name":"bind"},"computed":false},"arguments":[{"type":"Literal","value":null,"rawValue":null},{"type":"Literal","value":"throw"}]}}],"kind":"var"},{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"step"},"generator":false,"expression":false,"params":[{"type":"Identifier","name":"key"},{"type":"Identifier","name":"arg"}],"body":{"type":"BlockStatement","body":[{"type":"TryStatement","block":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"info"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"gen"},"property":{"type":"Identifier","name":"key"},"computed":true},"arguments":[{"type":"Identifier","name":"arg"}]}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"value"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"info"},"property":{"type":"Identifier","name":"value"},"computed":false}}],"kind":"var"}]},"handler":{"type":"CatchClause","param":{"type":"Identifier","name":"error"},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"reject"},"arguments":[{"type":"Identifier","name":"error"}]}},{"type":"ReturnStatement","argument":null}]}},"guardedHandlers":[],"finalizer":null},{"type":"IfStatement","test":{"type":"MemberExpression","object":{"type":"Identifier","name":"info"},"property":{"type":"Identifier","name":"done"},"computed":false},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"resolve"},"arguments":[{"type":"Identifier","name":"value"}]}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Promise"},"property":{"type":"Identifier","name":"resolve"},"computed":false},"arguments":[{"type":"Identifier","name":"value"}]},"property":{"type":"Identifier","name":"then"},"computed":false},"arguments":[{"type":"Identifier","name":"callNext"},{"type":"Identifier","name":"callThrow"}]}}]}}]}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"callNext"},"arguments":[]}}]}}]}}]}}}]},"parenthesizedExpression":true}}]},"helper-bind":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"Function"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"property":{"type":"Identifier","name":"bind"},"computed":false}}]},"helper-class-call-check":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"instance"},{"type":"Identifier","name":"Constructor"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"BinaryExpression","left":{"type":"Identifier","name":"instance"},"operator":"instanceof","right":{"type":"Identifier","name":"Constructor"},"parenthesizedExpression":true}},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"Literal","value":"Cannot call a class as a function"}]}}]},"alternate":null}]},"parenthesizedExpression":true}}]},"helper-create-class":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"defineProperties"},"generator":false,"expression":false,"params":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"props"}],"body":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"i"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"props"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"i"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"descriptor"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"props"},"property":{"type":"Identifier","name":"i"},"computed":true}}],"kind":"var"},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"enumerable"},"computed":false},"right":{"type":"LogicalExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"enumerable"},"computed":false},"operator":"||","right":{"type":"Literal","value":false}}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"configurable"},"computed":false},"right":{"type":"Literal","value":true}}},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Literal","value":"value"},"operator":"in","right":{"type":"Identifier","name":"descriptor"}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"writable"},"computed":false},"right":{"type":"Literal","value":true}}},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"target"},{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"key"},"computed":false},{"type":"Identifier","name":"descriptor"}]}}]}}]}},{"type":"ReturnStatement","argument":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"Constructor"},{"type":"Identifier","name":"protoProps"},{"type":"Identifier","name":"staticProps"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"Identifier","name":"protoProps"},"consequent":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"defineProperties"},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"Constructor"},"property":{"type":"Identifier","name":"prototype"},"computed":false},{"type":"Identifier","name":"protoProps"}]}},"alternate":null},{"type":"IfStatement","test":{"type":"Identifier","name":"staticProps"},"consequent":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"defineProperties"},"arguments":[{"type":"Identifier","name":"Constructor"},{"type":"Identifier","name":"staticProps"}]}},"alternate":null},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"Constructor"}}]}}}]},"parenthesizedExpression":true},"arguments":[]}}]},"helper-create-decorated-class":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"defineProperties"},"generator":false,"expression":false,"params":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"descriptors"},{"type":"Identifier","name":"initializers"}],"body":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"i"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptors"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"i"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"descriptor"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptors"},"property":{"type":"Identifier","name":"i"},"computed":true}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"decorators"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"decorators"},"computed":false}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"key"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"key"},"computed":false}}],"kind":"var"},{"type":"ExpressionStatement","expression":{"type":"UnaryExpression","operator":"delete","prefix":true,"argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor","leadingComments":null},"property":{"type":"Identifier","name":"key"},"computed":false,"leadingComments":null},"leadingComments":null}},{"type":"ExpressionStatement","expression":{"type":"UnaryExpression","operator":"delete","prefix":true,"argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"decorators"},"computed":false}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"enumerable"},"computed":false},"right":{"type":"LogicalExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"enumerable"},"computed":false},"operator":"||","right":{"type":"Literal","value":false}}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"configurable"},"computed":false},"right":{"type":"Literal","value":true}}},{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"Literal","value":"value"},"operator":"in","right":{"type":"Identifier","name":"descriptor"}},"operator":"||","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"initializer"},"computed":false}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"writable"},"computed":false},"right":{"type":"Literal","value":true}}},"alternate":null},{"type":"IfStatement","test":{"type":"Identifier","name":"decorators"},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"f"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"f"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"decorators"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"f"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"decorator"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"decorators"},"property":{"type":"Identifier","name":"f"},"computed":true}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"decorator"}},"operator":"===","right":{"type":"Literal","value":"function"}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"descriptor"},"right":{"type":"LogicalExpression","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"decorator"},"arguments":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"descriptor"}]},"operator":"||","right":{"type":"Identifier","name":"descriptor"}}}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"BinaryExpression","left":{"type":"BinaryExpression","left":{"type":"BinaryExpression","left":{"type":"Literal","value":"The decorator for method "},"operator":"+","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"key"},"computed":false}},"operator":"+","right":{"type":"Literal","value":" is of the invalid type "}},"operator":"+","right":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"decorator"}}}]}}]}}]}},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"initializer"},"computed":false},"operator":"!==","right":{"type":"Identifier","name":"undefined"}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"initializers"},"property":{"type":"Identifier","name":"key"},"computed":true},"right":{"type":"Identifier","name":"descriptor"}}},{"type":"ContinueStatement","label":null}]},"alternate":null}]},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"descriptor"}]}}]}}]}},{"type":"ReturnStatement","argument":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"Constructor"},{"type":"Identifier","name":"protoProps"},{"type":"Identifier","name":"staticProps"},{"type":"Identifier","name":"protoInitializers"},{"type":"Identifier","name":"staticInitializers"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"Identifier","name":"protoProps"},"consequent":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"defineProperties"},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"Constructor"},"property":{"type":"Identifier","name":"prototype"},"computed":false},{"type":"Identifier","name":"protoProps"},{"type":"Identifier","name":"protoInitializers"}]}},"alternate":null},{"type":"IfStatement","test":{"type":"Identifier","name":"staticProps"},"consequent":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"defineProperties"},"arguments":[{"type":"Identifier","name":"Constructor"},{"type":"Identifier","name":"staticProps"},{"type":"Identifier","name":"staticInitializers"}]}},"alternate":null},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"Constructor"}}]}}}]},"parenthesizedExpression":true},"arguments":[]}}]},"helper-create-decorated-object":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"descriptors"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"target"},"init":{"type":"ObjectExpression","properties":[]}}],"kind":"var"},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"i"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptors"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"i"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"descriptor"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptors"},"property":{"type":"Identifier","name":"i"},"computed":true}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"decorators"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"decorators"},"computed":false}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"key"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"key"},"computed":false}}],"kind":"var"},{"type":"ExpressionStatement","expression":{"type":"UnaryExpression","operator":"delete","prefix":true,"argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor","leadingComments":null},"property":{"type":"Identifier","name":"key"},"computed":false,"leadingComments":null},"leadingComments":null}},{"type":"ExpressionStatement","expression":{"type":"UnaryExpression","operator":"delete","prefix":true,"argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"decorators"},"computed":false}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"enumerable"},"computed":false},"right":{"type":"Literal","value":true}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"configurable"},"computed":false},"right":{"type":"Literal","value":true}}},{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"Literal","value":"value"},"operator":"in","right":{"type":"Identifier","name":"descriptor"}},"operator":"||","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"initializer"},"computed":false}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"writable"},"computed":false},"right":{"type":"Literal","value":true}}},"alternate":null},{"type":"IfStatement","test":{"type":"Identifier","name":"decorators"},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"f"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"f"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"decorators"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"f"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"decorator"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"decorators"},"property":{"type":"Identifier","name":"f"},"computed":true}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"decorator"}},"operator":"===","right":{"type":"Literal","value":"function"}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"descriptor"},"right":{"type":"LogicalExpression","left":{"type":"CallExpression","callee":{"type":"Identifier","name":"decorator"},"arguments":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"descriptor"}]},"operator":"||","right":{"type":"Identifier","name":"descriptor"}}}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"BinaryExpression","left":{"type":"BinaryExpression","left":{"type":"BinaryExpression","left":{"type":"Literal","value":"The decorator for method "},"operator":"+","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"key"},"computed":false}},"operator":"+","right":{"type":"Literal","value":" is of the invalid type "}},"operator":"+","right":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"decorator"}}}]}}]}}]}}]},"alternate":null},{"type":"IfStatement","test":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"initializer"},"computed":false},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"value"},"computed":false},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"initializer"},"computed":false},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"target"}]}}}]},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"descriptor"}]}}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"target"}}]},"parenthesizedExpression":true}}]},"helper-default-props":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"defaultProps"},{"type":"Identifier","name":"props"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"Identifier","name":"defaultProps"},"consequent":{"type":"BlockStatement","body":[{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"propName"},"init":null}],"kind":"var"},"right":{"type":"Identifier","name":"defaultProps"},"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"props"},"property":{"type":"Identifier","name":"propName"},"computed":true}},"operator":"===","right":{"type":"Literal","value":"undefined"}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"props"},"property":{"type":"Identifier","name":"propName"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"defaultProps"},"property":{"type":"Identifier","name":"propName"},"computed":true}}}]},"alternate":null}]}}]},"alternate":null},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"props"}}]},"parenthesizedExpression":true}}]},"helper-defaults":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"defaults"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"keys"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"getOwnPropertyNames"},"computed":false},"arguments":[{"type":"Identifier","name":"defaults"}]}}],"kind":"var"},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":{"type":"Literal","value":0}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"i"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"keys"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"i"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"key"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"keys"},"property":{"type":"Identifier","name":"i"},"computed":true}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"value"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"getOwnPropertyDescriptor"},"computed":false},"arguments":[{"type":"Identifier","name":"defaults"},{"type":"Identifier","name":"key"}]}}],"kind":"var"},{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"LogicalExpression","left":{"type":"Identifier","name":"value"},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"value"},"property":{"type":"Identifier","name":"configurable"},"computed":false}},"operator":"&&","right":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"key"},"computed":true},"operator":"===","right":{"type":"Identifier","name":"undefined"}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"value"}]}}]},"alternate":null}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"obj"}}]},"parenthesizedExpression":true}}]},"helper-define-decorated-property-descriptor":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"descriptors"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_descriptor"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptors"},"property":{"type":"Identifier","name":"key"},"computed":true}}],"kind":"var"},{"type":"IfStatement","test":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"Identifier","name":"_descriptor"}},"consequent":{"type":"ReturnStatement","argument":null,"leadingComments":null,"trailingComments":null},"alternate":null},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"descriptor","leadingComments":null},"init":{"type":"ObjectExpression","properties":[]},"leadingComments":null}],"kind":"var"},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_key"},"init":null}],"kind":"var"},"right":{"type":"Identifier","name":"_descriptor"},"body":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"_key"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"_descriptor"},"property":{"type":"Identifier","name":"_key"},"computed":true}},"trailingComments":null}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor","leadingComments":null},"property":{"type":"Identifier","name":"value"},"computed":false,"leadingComments":null},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"descriptor"},"property":{"type":"Identifier","name":"initializer"},"computed":false},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"target"}]},"leadingComments":null}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"target"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"descriptor"}]}}]},"parenthesizedExpression":true}}]},"helper-define-property":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"key"},{"type":"Identifier","name":"value"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"key","leadingComments":null},"operator":"in","right":{"type":"Identifier","name":"obj"},"leadingComments":null},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperty"},"computed":false},"arguments":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"key"},{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"value"},"value":{"type":"Identifier","name":"value"},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"enumerable"},"value":{"type":"Literal","value":true},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"configurable"},"value":{"type":"Literal","value":true},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"writable"},"value":{"type":"Literal","value":true},"kind":"init"}]}]}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"key"},"computed":true},"right":{"type":"Identifier","name":"value"}}}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"obj"}}]},"parenthesizedExpression":true}}]},"helper-extends":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"LogicalExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"assign"},"computed":false},"operator":"||","right":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"target"}],"body":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":{"type":"Literal","value":1}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"i"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"arguments"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"i"}},"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"source"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"arguments"},"property":{"type":"Identifier","name":"i"},"computed":true}}],"kind":"var"},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"key"},"init":null}],"kind":"var"},"right":{"type":"Identifier","name":"source"},"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"property":{"type":"Identifier","name":"hasOwnProperty"},"computed":false},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"source"},{"type":"Identifier","name":"key"}]},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"target"},"property":{"type":"Identifier","name":"key"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"source"},"property":{"type":"Identifier","name":"key"},"computed":true}}}]},"alternate":null}]}}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"target"}}]}}}}]},"helper-get":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":{"type":"Identifier","name":"get"},"generator":false,"expression":false,"params":[{"type":"Identifier","name":"object"},{"type":"Identifier","name":"property"},{"type":"Identifier","name":"receiver"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"object"},"operator":"===","right":{"type":"Literal","value":null,"rawValue":null}},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"object"},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"Function"},"property":{"type":"Identifier","name":"prototype"},"computed":false}}},"alternate":null},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"desc"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"getOwnPropertyDescriptor"},"computed":false},"arguments":[{"type":"Identifier","name":"object"},{"type":"Identifier","name":"property"}]}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"desc"},"operator":"===","right":{"type":"Identifier","name":"undefined"}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"parent"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"getPrototypeOf"},"computed":false},"arguments":[{"type":"Identifier","name":"object"}]}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"parent"},"operator":"===","right":{"type":"Literal","value":null,"rawValue":null}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"undefined"}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"get"},"arguments":[{"type":"Identifier","name":"parent"},{"type":"Identifier","name":"property"},{"type":"Identifier","name":"receiver"}]}}]}}]},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Literal","value":"value"},"operator":"in","right":{"type":"Identifier","name":"desc"}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"desc"},"property":{"type":"Identifier","name":"value"},"computed":false}}]},"alternate":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"getter"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"desc"},"property":{"type":"Identifier","name":"get"},"computed":false}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"getter"},"operator":"===","right":{"type":"Identifier","name":"undefined"}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"undefined"}}]},"alternate":null},{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"getter"},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"receiver"}]}}]}}}]},"parenthesizedExpression":true}}]},"helper-has-own":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"property":{"type":"Identifier","name":"hasOwnProperty"},"computed":false}}]},"helper-inherits":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"subClass"},{"type":"Identifier","name":"superClass"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"superClass"}},"operator":"!==","right":{"type":"Literal","value":"function"}},"operator":"&&","right":{"type":"BinaryExpression","left":{"type":"Identifier","name":"superClass"},"operator":"!==","right":{"type":"Literal","value":null,"rawValue":null}}},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"BinaryExpression","left":{"type":"Literal","value":"Super expression must either be null or a function, not "},"operator":"+","right":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"superClass"}}}]}}]},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"subClass"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"create"},"computed":false},"arguments":[{"type":"LogicalExpression","left":{"type":"Identifier","name":"superClass"},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"superClass"},"property":{"type":"Identifier","name":"prototype"},"computed":false}},{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"constructor"},"value":{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"value"},"value":{"type":"Identifier","name":"subClass"},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"enumerable"},"value":{"type":"Literal","value":false},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"writable"},"value":{"type":"Literal","value":true},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"configurable"},"value":{"type":"Literal","value":true},"kind":"init"}]},"kind":"init"}]}]}}},{"type":"IfStatement","test":{"type":"Identifier","name":"superClass"},"consequent":{"type":"ExpressionStatement","expression":{"type":"ConditionalExpression","test":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"setPrototypeOf"},"computed":false},"consequent":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"setPrototypeOf"},"computed":false},"arguments":[{"type":"Identifier","name":"subClass"},{"type":"Identifier","name":"superClass"}]},"alternate":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"subClass"},"property":{"type":"Identifier","name":"__proto__"},"computed":false},"right":{"type":"Identifier","name":"superClass"}}}},"alternate":null}]},"parenthesizedExpression":true}}]},"helper-instanceof":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"left"},{"type":"Identifier","name":"right"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"Identifier","name":"right"},"operator":"!=","right":{"type":"Literal","value":null,"rawValue":null}},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"right"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"hasInstance"},"computed":false},"computed":true}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"right"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"hasInstance"},"computed":false},"computed":true},"arguments":[{"type":"Identifier","name":"left"}]}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","left":{"type":"Identifier","name":"left"},"operator":"instanceof","right":{"type":"Identifier","name":"right"}}}]}}]},"parenthesizedExpression":true}}]},"helper-interop-require-default":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"ConditionalExpression","test":{"type":"LogicalExpression","left":{"type":"Identifier","name":"obj"},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"__esModule"},"computed":false}},"consequent":{"type":"Identifier","name":"obj"},"alternate":{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Literal","value":"default"},"value":{"type":"Identifier","name":"obj"},"kind":"init"}]}}}]},"parenthesizedExpression":true}}]},"helper-interop-require-wildcard":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"Identifier","name":"obj"},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"__esModule"},"computed":false}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"obj"}}]},"alternate":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"newObj"},"init":{"type":"ObjectExpression","properties":[]}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"obj"},"operator":"!=","right":{"type":"Literal","value":null,"rawValue":null}},"consequent":{"type":"BlockStatement","body":[{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"key"},"init":null}],"kind":"var"},"right":{"type":"Identifier","name":"obj"},"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"property":{"type":"Identifier","name":"hasOwnProperty"},"computed":false},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"key"}]},"consequent":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"newObj"},"property":{"type":"Identifier","name":"key"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"key"},"computed":true}}},"alternate":null}]}}]},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"newObj"},"property":{"type":"Literal","value":"default"},"computed":true},"right":{"type":"Identifier","name":"obj"}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"newObj"}}]}}]},"parenthesizedExpression":true}}]},"helper-interop-require":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"ConditionalExpression","test":{"type":"LogicalExpression","left":{"type":"Identifier","name":"obj"},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"__esModule"},"computed":false}},"consequent":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Literal","value":"default"},"computed":true},"alternate":{"type":"Identifier","name":"obj"}}}]},"parenthesizedExpression":true}}]},"helper-object-destructuring-empty":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"obj"},"operator":"==","right":{"type":"Literal","value":null,"rawValue":null}},"consequent":{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"Literal","value":"Cannot destructure undefined"}]}},"alternate":null}]},"parenthesizedExpression":true}}]},"helper-object-without-properties":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"keys"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"target"},"init":{"type":"ObjectExpression","properties":[]}}],"kind":"var"},{"type":"ForInStatement","left":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":null}],"kind":"var"},"right":{"type":"Identifier","name":"obj"},"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"keys"},"property":{"type":"Identifier","name":"indexOf"},"computed":false},"arguments":[{"type":"Identifier","name":"i"}]},"operator":">=","right":{"type":"Literal","value":0}},"consequent":{"type":"ContinueStatement","label":null},"alternate":null},{"type":"IfStatement","test":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"property":{"type":"Identifier","name":"hasOwnProperty"},"computed":false},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"obj"},{"type":"Identifier","name":"i"}]}},"consequent":{"type":"ContinueStatement","label":null},"alternate":null},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"target"},"property":{"type":"Identifier","name":"i"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"i"},"computed":true}}}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"target"}}]},"parenthesizedExpression":true}}]},"helper-self-global":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"ConditionalExpression","test":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"global"}},"operator":"===","right":{"type":"Literal","value":"undefined"}},"consequent":{"type":"Identifier","name":"self"},"alternate":{"type":"Identifier","name":"global"}}}]},"helper-set":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":{"type":"Identifier","name":"set"},"generator":false,"expression":false,"params":[{"type":"Identifier","name":"object"},{"type":"Identifier","name":"property"},{"type":"Identifier","name":"value"},{"type":"Identifier","name":"receiver"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"desc"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"getOwnPropertyDescriptor"},"computed":false},"arguments":[{"type":"Identifier","name":"object"},{"type":"Identifier","name":"property"}]}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"desc"},"operator":"===","right":{"type":"Identifier","name":"undefined"}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"parent"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"getPrototypeOf"},"computed":false},"arguments":[{"type":"Identifier","name":"object"}]}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"parent"},"operator":"!==","right":{"type":"Literal","value":null,"rawValue":null}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"set"},"arguments":[{"type":"Identifier","name":"parent"},{"type":"Identifier","name":"property"},{"type":"Identifier","name":"value"},{"type":"Identifier","name":"receiver"}]}}]},"alternate":null}]},"alternate":{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"Literal","value":"value"},"operator":"in","right":{"type":"Identifier","name":"desc"}},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"desc"},"property":{"type":"Identifier","name":"writable"},"computed":false}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"desc"},"property":{"type":"Identifier","name":"value"},"computed":false},"right":{"type":"Identifier","name":"value"}}}]},"alternate":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"setter"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"desc"},"property":{"type":"Identifier","name":"set"},"computed":false}}],"kind":"var"},{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"setter"},"operator":"!==","right":{"type":"Identifier","name":"undefined"}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"setter"},"property":{"type":"Identifier","name":"call"},"computed":false},"arguments":[{"type":"Identifier","name":"receiver"},{"type":"Identifier","name":"value"}]}}]},"alternate":null}]}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"value"}}]},"parenthesizedExpression":true}}]},"helper-slice":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"prototype"},"computed":false},"property":{"type":"Identifier","name":"slice"},"computed":false}}]},"helper-sliced-to-array-loose":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"arr"},{"type":"Identifier","name":"i"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"isArray"},"computed":false},"arguments":[{"type":"Identifier","name":"arr"}]},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"arr"}}]},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"iterator"},"computed":false},"operator":"in","right":{"type":"CallExpression","callee":{"type":"Identifier","name":"Object"},"arguments":[{"type":"Identifier","name":"arr"}]}},"consequent":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_arr"},"init":{"type":"ArrayExpression","elements":[]}}],"kind":"var"},{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_iterator"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"arr"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"iterator"},"computed":false},"computed":true},"arguments":[]}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_step"},"init":null}],"kind":"var"},"test":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"MemberExpression","object":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"_step"},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"_iterator"},"property":{"type":"Identifier","name":"next"},"computed":false},"arguments":[]},"parenthesizedExpression":true},"property":{"type":"Identifier","name":"done"},"computed":false}},"update":null,"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"_arr"},"property":{"type":"Identifier","name":"push"},"computed":false},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"_step"},"property":{"type":"Identifier","name":"value"},"computed":false}]}},{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"Identifier","name":"i"},"operator":"&&","right":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"_arr"},"property":{"type":"Identifier","name":"length"},"computed":false},"operator":"===","right":{"type":"Identifier","name":"i"}}},"consequent":{"type":"BreakStatement","label":null},"alternate":null}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"_arr"}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"Literal","value":"Invalid attempt to destructure non-iterable instance"}]}}]}}}]},"parenthesizedExpression":true}}]},"helper-sliced-to-array":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"sliceIterator","leadingComments":null},"generator":false,"expression":false,"params":[{"type":"Identifier","name":"arr"},{"type":"Identifier","name":"i"}],"body":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_arr","leadingComments":null},"init":{"type":"ArrayExpression","elements":[]},"leadingComments":null}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_n"},"init":{"type":"Literal","value":true}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_d"},"init":{"type":"Literal","value":false}}],"kind":"var"},{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_e"},"init":{"type":"Identifier","name":"undefined"}}],"kind":"var"},{"type":"TryStatement","block":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_i"},"init":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"arr"},"property":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"iterator"},"computed":false},"computed":true},"arguments":[]}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"_s"},"init":null}],"kind":"var"},"test":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"_n"},"right":{"type":"MemberExpression","object":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"_s"},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"_i"},"property":{"type":"Identifier","name":"next"},"computed":false},"arguments":[]},"parenthesizedExpression":true},"property":{"type":"Identifier","name":"done"},"computed":false},"parenthesizedExpression":true}},"update":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"_n"},"right":{"type":"Literal","value":true}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"_arr"},"property":{"type":"Identifier","name":"push"},"computed":false},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"_s"},"property":{"type":"Identifier","name":"value"},"computed":false}]}},{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"Identifier","name":"i"},"operator":"&&","right":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"_arr"},"property":{"type":"Identifier","name":"length"},"computed":false},"operator":"===","right":{"type":"Identifier","name":"i"}}},"consequent":{"type":"BreakStatement","label":null},"alternate":null}]}}]},"handler":{"type":"CatchClause","param":{"type":"Identifier","name":"err"},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"_d"},"right":{"type":"Literal","value":true}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"Identifier","name":"_e"},"right":{"type":"Identifier","name":"err"}}}]}},"guardedHandlers":[],"finalizer":{"type":"BlockStatement","body":[{"type":"TryStatement","block":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"UnaryExpression","operator":"!","prefix":true,"argument":{"type":"Identifier","name":"_n"}},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"_i"},"property":{"type":"Literal","value":"return"},"computed":true}},"consequent":{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"_i"},"property":{"type":"Literal","value":"return"},"computed":true},"arguments":[]}},"alternate":null}]},"handler":null,"guardedHandlers":[],"finalizer":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"Identifier","name":"_d"},"consequent":{"type":"ThrowStatement","argument":{"type":"Identifier","name":"_e"}},"alternate":null}]}}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"_arr"}}]}},{"type":"ReturnStatement","argument":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"arr"},{"type":"Identifier","name":"i"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"isArray"},"computed":false},"arguments":[{"type":"Identifier","name":"arr"}]},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"arr"}}]},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"Symbol"},"property":{"type":"Identifier","name":"iterator"},"computed":false},"operator":"in","right":{"type":"CallExpression","callee":{"type":"Identifier","name":"Object"},"arguments":[{"type":"Identifier","name":"arr"}]}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"Identifier","name":"sliceIterator"},"arguments":[{"type":"Identifier","name":"arr"},{"type":"Identifier","name":"i"}]}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"TypeError"},"arguments":[{"type":"Literal","value":"Invalid attempt to destructure non-iterable instance"}]}}]}}}]}}}]},"parenthesizedExpression":true},"arguments":[]}}]},"helper-tagged-template-literal-loose":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"strings"},{"type":"Identifier","name":"raw"}],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"strings"},"property":{"type":"Identifier","name":"raw"},"computed":false},"right":{"type":"Identifier","name":"raw"}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"strings"}}]},"parenthesizedExpression":true}}]},"helper-tagged-template-literal":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"strings"},{"type":"Identifier","name":"raw"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"freeze"},"computed":false},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"defineProperties"},"computed":false},"arguments":[{"type":"Identifier","name":"strings"},{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"raw"},"value":{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"value"},"value":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Object"},"property":{"type":"Identifier","name":"freeze"},"computed":false},"arguments":[{"type":"Identifier","name":"raw"}]},"kind":"init"}]},"kind":"init"}]}]}]}}]},"parenthesizedExpression":true}}]},"helper-temporal-assert-defined":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"val"},{"type":"Identifier","name":"name"},{"type":"Identifier","name":"undef"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"val"},"operator":"===","right":{"type":"Identifier","name":"undef"}},"consequent":{"type":"BlockStatement","body":[{"type":"ThrowStatement","argument":{"type":"NewExpression","callee":{"type":"Identifier","name":"ReferenceError"},"arguments":[{"type":"BinaryExpression","left":{"type":"Identifier","name":"name"},"operator":"+","right":{"type":"Literal","value":" is not defined - temporal dead zone"}}]}}]},"alternate":null},{"type":"ReturnStatement","argument":{"type":"Literal","value":true}}]},"parenthesizedExpression":true}}]},"helper-temporal-undefined":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"ObjectExpression","properties":[],"parenthesizedExpression":true}}]},"helper-to-array":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"arr"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"ConditionalExpression","test":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"isArray"},"computed":false},"arguments":[{"type":"Identifier","name":"arr"}]},"consequent":{"type":"Identifier","name":"arr"},"alternate":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"from"},"computed":false},"arguments":[{"type":"Identifier","name":"arr"}]}}}]},"parenthesizedExpression":true}}]},"helper-to-consumable-array":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"arr"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"isArray"},"computed":false},"arguments":[{"type":"Identifier","name":"arr"}]},"consequent":{"type":"BlockStatement","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"i"},"init":{"type":"Literal","value":0}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"arr2"},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"Array"},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"arr"},"property":{"type":"Identifier","name":"length"},"computed":false}]}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"i"},"operator":"<","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"arr"},"property":{"type":"Identifier","name":"length"},"computed":false}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"i"}},"body":{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"arr2"},"property":{"type":"Identifier","name":"i"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"arr"},"property":{"type":"Identifier","name":"i"},"computed":true}}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"arr2"}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"Array"},"property":{"type":"Identifier","name":"from"},"computed":false},"arguments":[{"type":"Identifier","name":"arr"}]}}]}}]},"parenthesizedExpression":true}}]},"helper-typeof":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"obj"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"ConditionalExpression","test":{"type":"LogicalExpression","left":{"type":"Identifier","name":"obj"},"operator":"&&","right":{"type":"BinaryExpression","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj"},"property":{"type":"Identifier","name":"constructor"},"computed":false},"operator":"===","right":{"type":"Identifier","name":"Symbol"}}},"consequent":{"type":"Literal","value":"symbol"},"alternate":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"obj"}}}}]},"parenthesizedExpression":true}}]},"let-scoping-return":{"type":"Program","body":[{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"RETURN"}},"operator":"===","right":{"type":"Literal","value":"object"}},"consequent":{"type":"ReturnStatement","argument":{"type":"MemberExpression","object":{"type":"Identifier","name":"RETURN"},"property":{"type":"Identifier","name":"v"},"computed":false}},"alternate":null}]},"named-function":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"GET_OUTER_ID"},"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"Identifier","name":"FUNCTION_ID"}}]}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"FUNCTION"}}]},"parenthesizedExpression":true},"arguments":[]}}]},"property-method-assignment-wrapper-generator":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"FUNCTION_KEY"}],"body":{"type":"BlockStatement","body":[{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"FUNCTION_ID"},"generator":true,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"YieldExpression","delegate":true,"argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"FUNCTION_KEY"},"property":{"type":"Identifier","name":"apply"},"computed":false},"arguments":[{"type":"ThisExpression"},{"type":"Identifier","name":"arguments"}]}}}]}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"FUNCTION_ID"},"property":{"type":"Identifier","name":"toString"},"computed":false},"right":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"FUNCTION_KEY"},"property":{"type":"Identifier","name":"toString"},"computed":false},"arguments":[]}}]}}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"FUNCTION_ID"}}]},"parenthesizedExpression":true},"arguments":[{"type":"Identifier","name":"FUNCTION"}]}}]},"property-method-assignment-wrapper":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"FUNCTION_KEY"}],"body":{"type":"BlockStatement","body":[{"type":"FunctionDeclaration","id":{"type":"Identifier","name":"FUNCTION_ID"},"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"FUNCTION_KEY"},"property":{"type":"Identifier","name":"apply"},"computed":false},"arguments":[{"type":"ThisExpression"},{"type":"Identifier","name":"arguments"}]}}]}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"FUNCTION_ID"},"property":{"type":"Identifier","name":"toString"},"computed":false},"right":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"FUNCTION_KEY"},"property":{"type":"Identifier","name":"toString"},"computed":false},"arguments":[]}}]}}}},{"type":"ReturnStatement","argument":{"type":"Identifier","name":"FUNCTION_ID"}}]},"parenthesizedExpression":true},"arguments":[{"type":"Identifier","name":"FUNCTION"}]}}]},"prototype-identifier":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"MemberExpression","object":{"type":"Identifier","name":"CLASS_NAME"},"property":{"type":"Identifier","name":"prototype"},"computed":false}}]},"require-assign-key":{"type":"Program","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"VARIABLE_NAME"},"init":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"require"},"arguments":[{"type":"Identifier","name":"MODULE_NAME"}]},"property":{"type":"Identifier","name":"KEY"},"computed":false}}],"kind":"var"}]},"require":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"require"},"arguments":[{"type":"Identifier","name":"MODULE_NAME"}]}}]},"rest":{"type":"Program","body":[{"type":"ForStatement","init":{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"LEN"},"init":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARGUMENTS"},"property":{"type":"Identifier","name":"length"},"computed":false}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"ARRAY"},"init":{"type":"CallExpression","callee":{"type":"Identifier","name":"Array"},"arguments":[{"type":"Identifier","name":"ARRAY_LEN"}]}},{"type":"VariableDeclarator","id":{"type":"Identifier","name":"KEY"},"init":{"type":"Identifier","name":"START"}}],"kind":"var"},"test":{"type":"BinaryExpression","left":{"type":"Identifier","name":"KEY"},"operator":"<","right":{"type":"Identifier","name":"LEN"}},"update":{"type":"UpdateExpression","operator":"++","prefix":false,"argument":{"type":"Identifier","name":"KEY"}},"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARRAY"},"property":{"type":"Identifier","name":"ARRAY_KEY"},"computed":true},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"ARGUMENTS"},"property":{"type":"Identifier","name":"KEY"},"computed":true}}}]}}]},"self-contained-helpers-head":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"exports"},"property":{"type":"Literal","value":"default"},"computed":true},"right":{"type":"Identifier","name":"HELPER"}}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"exports"},"property":{"type":"Identifier","name":"__esModule"},"computed":false},"right":{"type":"Literal","value":true}}}]},"system":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"System"},"property":{"type":"Identifier","name":"register"},"computed":false},"arguments":[{"type":"Identifier","name":"MODULE_NAME"},{"type":"Identifier","name":"MODULE_DEPENDENCIES"},{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"EXPORT_IDENTIFIER"}],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"setters"},"value":{"type":"Identifier","name":"SETTERS"},"kind":"init"},{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"execute"},"value":{"type":"Identifier","name":"EXECUTE"},"kind":"init"}]}}]}}]}}]},"tail-call-body":{"type":"Program","body":[{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"AGAIN_ID"},"init":{"type":"Literal","value":true}}],"kind":"var"},{"type":"LabeledStatement","body":{"type":"WhileStatement","test":{"type":"Identifier","name":"AGAIN_ID"},"body":{"type":"ExpressionStatement","expression":{"type":"Identifier","name":"BLOCK"}}},"label":{"type":"Identifier","name":"FUNCTION_ID"}}]}]},"test-exports":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"exports"}},"operator":"!==","right":{"type":"Literal","value":"undefined"}}}]},"test-module":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"module"}},"operator":"!==","right":{"type":"Literal","value":"undefined"}}}]},"umd-commonjs-strict":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"root"},{"type":"Identifier","name":"factory"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"define"}},"operator":"===","right":{"type":"Literal","value":"function"}},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"define"},"property":{"type":"Identifier","name":"amd"},"computed":false}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"define"},"arguments":[{"type":"Identifier","name":"AMD_ARGUMENTS"},{"type":"Identifier","name":"factory"}]}}]},"alternate":{"type":"IfStatement","test":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"exports"}},"operator":"===","right":{"type":"Literal","value":"object"}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"factory"},"arguments":[{"type":"Identifier","name":"COMMON_ARGUMENTS"}]}}]},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"factory"},"arguments":[{"type":"Identifier","name":"BROWSER_ARGUMENTS"}]}}]}}}]},"parenthesizedExpression":true},"arguments":[{"type":"Identifier","name":"UMD_ROOT"},{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"FACTORY_PARAMETERS"}],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"Identifier","name":"FACTORY_BODY"}}]}}]}}]},"umd-runner-body":{"type":"Program","body":[{"type":"ExpressionStatement","expression":{"type":"FunctionExpression","id":null,"generator":false,"expression":false,"params":[{"type":"Identifier","name":"global"},{"type":"Identifier","name":"factory"}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"LogicalExpression","left":{"type":"BinaryExpression","left":{"type":"UnaryExpression","operator":"typeof","prefix":true,"argument":{"type":"Identifier","name":"define"}},"operator":"===","right":{"type":"Literal","value":"function"}},"operator":"&&","right":{"type":"MemberExpression","object":{"type":"Identifier","name":"define"},"property":{"type":"Identifier","name":"amd"},"computed":false}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"define"},"arguments":[{"type":"Identifier","name":"AMD_ARGUMENTS"},{"type":"Identifier","name":"factory"}]}}]},"alternate":{"type":"IfStatement","test":{"type":"Identifier","name":"COMMON_TEST"},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"factory"},"arguments":[{"type":"Identifier","name":"COMMON_ARGUMENTS"}]}}]},"alternate":{"type":"BlockStatement","body":[{"type":"VariableDeclaration","declarations":[{"type":"VariableDeclarator","id":{"type":"Identifier","name":"mod"},"init":{"type":"ObjectExpression","properties":[{"type":"Property","method":false,"shorthand":false,"computed":false,"key":{"type":"Identifier","name":"exports"},"value":{"type":"ObjectExpression","properties":[]},"kind":"init"}]}}],"kind":"var"},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"factory"},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"mod"},"property":{"type":"Identifier","name":"exports"},"computed":false},{"type":"Identifier","name":"BROWSER_ARGUMENTS"}]}},{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"global"},"property":{"type":"Identifier","name":"GLOBAL_ARG"},"computed":false},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"mod"},"property":{"type":"Identifier","name":"exports"},"computed":false}}}]}}}]},"parenthesizedExpression":true}}]}}
	},{}],536:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.parse = parse;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _parser = require("./parser");

	var _parser2 = _interopRequireDefault(_parser);

	require("./parser/util");

	require("./parser/statement");

	require("./parser/lval");

	require("./parser/expression");

	require("./parser/node");

	require("./parser/location");

	require("./parser/comments");

	var _tokenizerTypes = require("./tokenizer/types");

	require("./tokenizer");

	require("./tokenizer/context");

	var _pluginsFlow = require("./plugins/flow");

	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);

	var _pluginsJsx = require("./plugins/jsx");

	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);

	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];

	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}

	exports.tokTypes = _tokenizerTypes.types;
	},{"./parser":540,"./parser/comments":538,"./parser/expression":539,"./parser/location":541,"./parser/lval":542,"./parser/node":543,"./parser/statement":544,"./parser/util":545,"./plugins/flow":546,"./plugins/jsx":547,"./tokenizer":550,"./tokenizer/context":549,"./tokenizer/types":552}],537:[function(require,module,exports){
	// A second optional argument can be given to further configure
	// the parser process. These options are recognized:

	"use strict";

	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // By default, reserved words are not enforced. Disable
	  // `allowReserved` to enforce them. When this option has the
	  // value "never", reserved words and keywords can also not be
	  // used as property names.
	  allowReserved: true,
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  plugins: {},
	  // Babel-specific options
	  features: {},
	  strictMode: null
	};

	// Interpret and default an options object

	exports.defaultOptions = defaultOptions;

	function getOptions(opts) {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}
	},{}],538:[function(require,module,exports){
	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	function last(stack) {
	  return stack[stack.length - 1];
	}

	var pp = _index2["default"].prototype;

	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};

	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;

	  var stack = this.state.commentStack;

	  var lastChild, trailingComments, i;

	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add then as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }

	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }

	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first MethodDefinition,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This this step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }

	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }

	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }

	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }

	  stack.push(node);
	};
	},{"./index":540}],539:[function(require,module,exports){
	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilIdentifier = require("../util/identifier");

	var pp = _index2["default"].prototype;

	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed || prop.method || prop.shorthand) return;

	  var key = prop.key,
	      name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;break;
	    case "Literal":
	      name = String(key.value);break;
	    default:
	      return;
	  }

	  var kind = prop.kind;
	  if (name === "__proto__" && kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};

	// ### Expression parsing

	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.

	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).

	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};

	// Parse an assignment expression. This includes applications of
	// operators like `+=`.

	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }

	  var failOnShorthandAssign = undefined;
	  if (!refShorthandDefaultPos) {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  } else {
	    failOnShorthandAssign = false;
	  }
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }
	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly
	    this.checkLVal(left);
	    if (left.parenthesizedExpression) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return left;
	};

	// Parse a ternary conditional (`?:`) operator.

	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};

	// Start the precedence parser.

	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	};

	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.

	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;
	      var op = this.state.type;
	      this.next();
	      var startPos = this.state.start,
	          startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};

	// Parse unary operators, both prefix and postfix.

	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode(),
	        update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();
	    node.argument = this.parseMaybeUnary();
	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }
	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};

	// Parse call, dot, and `[]`-subscript expressions.

	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseSubscripts(expr, startPos, startLoc);
	  }
	};

	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdent(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();

	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.options.features["es7.trailingFunctionCommas"]);
	      base = this.finishNode(node, "CallExpression");

	      if (possibleAsync && (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.arrow))) {
	        base = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};

	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.options.features["es7.asyncFunctions"]) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};

	// Parse a no-call expression (like argument of `new` or `::` operators).

	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};

	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.

	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inFunction) this.raise(this.state.start, "'super' outside of function or class");
	    case _tokenizerTypes.types._this:
	      var type = this.match(_tokenizerTypes.types._this) ? "ThisExpression" : "Super";
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, type);

	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();

	    case _tokenizerTypes.types._do:
	      if (this.options.features["es7.doExpressions"]) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock();
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }

	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var id = this.parseIdent(true);

	      //
	      if (this.options.features["es7.asyncFunctions"]) {
	        if (id.name === "await") {
	          if (this.inAsync) return this.parseAwait(node);
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdent()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // var foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }

	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }

	      return id;

	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value);
	      node.regex = { pattern: value.pattern, flags: value.flags };
	      return node;

	    case _tokenizerTypes.types.num:case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value);

	    case _tokenizerTypes.types._null:case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.rawValue = node.value = this.match(_tokenizerTypes.types._null) ? null : this.match(_tokenizerTypes.types._true);
	      node.raw = this.state.type.keyword;
	      this.next();
	      return this.finishNode(node, "Literal");

	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);

	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      // check whether this is array comprehension or regular array
	      if (this.options.features["es7.comprehensions"] && this.match(_tokenizerTypes.types._for)) {
	        return this.parseComprehension(node, false);
	      }
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");

	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);

	    case _tokenizerTypes.types._function:
	      node = this.startNode();
	      this.next();
	      return this.parseFunction(node, false);

	    case _tokenizerTypes.types.at:
	      this.parseDecorators();

	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);

	    case _tokenizerTypes.types._new:
	      return this.parseNew();

	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();

	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }

	    default:
	      this.unexpected();
	  }
	};

	pp.parseLiteral = function (value) {
	  var node = this.startNode();
	  node.rawValue = node.value = value;
	  node.raw = this.input.slice(this.state.start, this.state.end);
	  this.next();
	  return this.finishNode(node, "Literal");
	};

	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};

	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;
	  var val = undefined;
	  this.next();

	  if (this.options.features["es7.comprehensions"] && this.match(_tokenizerTypes.types._for)) {
	    return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);
	  }

	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      innerParenStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.options.features["es7.trailingFunctionCommas"]) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }

	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	        innerParenStart = this.state.start;
	      }
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }
	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);

	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    if (innerParenStart) this.unexpected(innerParenStart);
	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }

	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);

	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }

	  val.parenthesizedExpression = true;
	  return val;
	};

	pp.parseParenItem = function (node) {
	  return node;
	};

	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the

	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdent(true);

	  if (this.eat(_tokenizerTypes.types.dot)) {
	    node.meta = meta;
	    node.property = this.parseIdent(true);

	    if (node.property.name !== "target") {
	      this.raise(node.property.start, "The only valid meta property for new is new.target");
	    }

	    return this.finishNode(node, "MetaProperty");
	  }

	  node.callee = this.parseNoCallExpr();

	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.options.features["es7.trailingFunctionCommas"]);
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }

	  return this.finishNode(node, "NewExpression");
	};

	// Parse template expression.

	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};

	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};

	// Parse an object literal or binding pattern.

	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var node = this.startNode(),
	      first = true,
	      propHash = Object.create(null);
	  node.properties = [];
	  var decorators = [];
	  this.next();
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }

	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }
	    if (this.options.features["es7.objectRestSpread"] && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }
	    prop.method = false;
	    prop.shorthand = false;
	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }
	    if (!isPattern) isGenerator = this.eat(_tokenizerTypes.types.star);
	    if (this.options.features["es7.asyncFunctions"] && this.isContextual("async")) {
	      if (isGenerator || isPattern) this.unexpected();
	      var asyncId = this.parseIdent();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }
	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);
	    node.properties.push(this.finishNode(prop, "Property"));
	  }
	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};

	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    prop.kind = "init";
	  } else if (this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "init";
	    prop.method = true;
	    prop.value = this.parseMethod(isGenerator, isAsync);
	  } else if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (!this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR))) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    prop.value = this.parseMethod(false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.value.params.length !== paramCount) {
	      var start = prop.value.start;
	      if (prop.kind === "get") this.raise(start, "getter should have no params");else this.raise(start, "setter should have exactly one param");
	    }
	  } else if (!prop.computed && prop.key.type === "Identifier") {
	    prop.kind = "init";
	    if (isPattern) {
	      if (this.isKeyword(prop.key.name) || this.strict && (_utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name)) || !this.options.allowReserved && this.isReservedWord(prop.key.name)) this.raise(prop.key.start, "Binding " + prop.key.name);
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) refShorthandDefaultPos.start = this.state.start;
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	  } else {
	    this.unexpected();
	  }
	};

	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdent(true);
	  }
	};

	// Initialize empty function node.

	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.options.features["es7.asyncFunctions"]) {
	    node.async = !!isAsync;
	  }
	};

	// Parse object or class method.

	pp.parseMethod = function (isGenerator, isAsync) {
	  var node = this.startNode();
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.options.features["es7.trailingFunctionCommas"]);
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  return this.finishNode(node, "FunctionExpression");
	};

	// Parse arrow function expression with given parameters.

	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};

	// Parse function body and check parameters.

	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);

	  var oldInAsync = this.inAsync;
	  this.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.inAsync = oldInAsync;

	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {
	    var nameHash = Object.create(null),
	        oldStrict = this.strict;
	    this.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    var _arr = node.params;
	    for (var _i = 0; _i < _arr.length; _i++) {
	      var param = _arr[_i];
	      this.checkLVal(param, true, nameHash);
	    }
	    this.strict = oldStrict;
	  }
	};

	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).

	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }

	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};

	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};

	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.

	pp.parseIdent = function (liberal) {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && (!this.options.allowReserved && this.isReservedWord(this.state.value) || this.strict && _utilIdentifier.reservedWords.strict(this.state.value))) this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "Identifier");
	};

	// Parses await expression inside async function.

	pp.parseAwait = function (node) {
	  if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
	    this.unexpected();
	  }
	  node.all = this.eat(_tokenizerTypes.types.star);
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};

	// Parses yield expression inside generator.

	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};

	// Parses array and generator comprehensions.

	pp.parseComprehension = function (node, isGenerator) {
	  node.blocks = [];
	  while (this.match(_tokenizerTypes.types._for)) {
	    var block = this.startNode();
	    this.next();
	    this.expect(_tokenizerTypes.types.parenL);
	    block.left = this.parseBindingAtom();
	    this.checkLVal(block.left, true);
	    this.expectContextual("of");
	    block.right = this.parseExpression();
	    this.expect(_tokenizerTypes.types.parenR);
	    node.blocks.push(this.finishNode(block, "ComprehensionBlock"));
	  }
	  node.filter = this.eat(_tokenizerTypes.types._if) ? this.parseParenExpression() : null;
	  node.body = this.parseExpression();
	  this.expect(isGenerator ? _tokenizerTypes.types.parenR : _tokenizerTypes.types.bracketR);
	  node.generator = isGenerator;
	  return this.finishNode(node, "ComprehensionExpression");
	};
	},{"../tokenizer/types":552,"../util/identifier":553,"./index":540}],540:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// istanbul ignore next

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _utilIdentifier = require("../util/identifier");

	var _options = require("../options");

	var _tokenizer = require("../tokenizer");

	// Registered plugins

	var _tokenizer2 = _interopRequireDefault(_tokenizer);

	var plugins = {};

	exports.plugins = plugins;

	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);

	  function Parser(options, input) {
	    _classCallCheck(this, Parser);

	    _Tokenizer.call(this, input);

	    this.options = _options.getOptions(options);
	    this.isKeyword = _utilIdentifier.isKeyword;
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.loadPlugins(this.options.plugins);

	    // Figure out if it's a module code.
	    this.inModule = this.options.sourceType === "module";
	    this.strict = this.options.strictMode === false ? false : this.inModule;

	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }

	  Parser.prototype.extend = function extend(name, f) {
	    this[name] = f(this[name]);
	  };

	  Parser.prototype.loadPlugins = function loadPlugins(plugins) {
	    for (var _name in plugins) {
	      var plugin = exports.plugins[_name];
	      if (!plugin) throw new Error("Plugin '" + _name + "' not found");
	      plugin(this, plugins[_name]);
	    }
	  };

	  Parser.prototype.parse = function parse() {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };

	  return Parser;
	})(_tokenizer2["default"]);

	exports["default"] = Parser;
	},{"../options":537,"../tokenizer":550,"../util/identifier":553}],541:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _utilLocation = require("../util/location");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var pp = _index2["default"].prototype;

	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};
	},{"../util/location":554,"./index":540}],542:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilIdentifier = require("../util/identifier");

	var pp = _index2["default"].prototype;

	// Convert existing expression atom to assignable pattern
	// if possible.

	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        var _arr = node.properties;
	        for (var _i = 0; _i < _arr.length; _i++) {
	          var prop = _arr[_i];
	          if (prop.type === "SpreadProperty") continue;
	          if (prop.kind !== "init") this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	          this.toAssignable(prop.value, isBinding);
	        }
	        break;

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;

	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;

	      case "MemberExpression":
	        if (!isBinding) break;

	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};

	// Convert list of expression atoms to binding list.

	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};

	// Convert list of expression atoms to a list of

	pp.toReferencedList = function (exprList) {
	  return exprList;
	};

	// Parses spread element.

	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};

	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types.bracketL) ? this.parseBindingAtom() : this.unexpected();
	  return this.finishNode(node, "RestElement");
	};

	// Parses lvalue (assignable) atom.

	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.parseIdent();

	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");

	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);

	    default:
	      this.unexpected();
	  }
	};

	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) first = false;else this.expect(_tokenizerTypes.types.comma);
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};

	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};

	// Parses assignment pattern around given atom if possible.

	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.operator = "=";
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};

	// Verify that a node is an lval — something that can be assigned
	// to.

	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      if (checkClashes) {
	        if (checkClashes[expr.name]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[expr.name] = true;
	        }
	      }
	      break;

	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;

	    case "ObjectPattern":
	      var _arr2 = expr.properties;

	      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
	        var prop = _arr2[_i2];
	        if (prop.type === "Property") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;

	    case "ArrayPattern":
	      var _arr3 = expr.elements;

	      for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
	        var elem = _arr3[_i3];
	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;

	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;

	    case "SpreadProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;

	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};
	},{"../tokenizer/types":552,"../util/identifier":553,"./index":540}],543:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilLocation = require("../util/location");

	// Start an AST node, attaching a start offset.

	var pp = _index2["default"].prototype;

	var Node = (function () {
	  function Node(parser, pos, loc) {
	    _classCallCheck(this, Node);

	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }

	  Node.prototype.__clone = function __clone() {
	    var node2 = new Node();
	    for (var key in this) node2[key] = this[key];
	    return node2;
	  };

	  return Node;
	})();

	exports.Node = Node;

	pp.startNode = function () {
	  return new Node(this, this.state.start, this.state.startLoc);
	};

	pp.startNodeAt = function (pos, loc) {
	  return new Node(this, pos, loc);
	};

	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}

	// Finish an AST node, adding `type` and `end` properties.

	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};

	// Finish node at given position

	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};
	},{"../util/location":554,"./index":540}],544:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilWhitespace = require("../util/whitespace");

	var pp = _index2["default"].prototype;

	// ### Statement parsing

	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;
	  program.body = [];

	  var first = true;
	  while (!this.match(_tokenizerTypes.types.eof)) {
	    var stmt = this.parseStatement(true, true);
	    program.body.push(stmt);
	    if (first) {
	      if (this.isUseStrict(stmt)) this.setStrict(true);
	      first = false;
	    }
	  }
	  this.next();

	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;

	  return this.finishNode(file, "File");
	};

	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };

	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.

	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }

	  var starttype = this.state.type,
	      node = this.startNode();

	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.

	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);

	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);

	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);
	    case _tokenizerTypes.types._let:case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var
	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);
	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) this.raise(this.state.start, "'import' and 'export' may only appear at the top level");

	        if (!this.inModule) this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);

	    case _tokenizerTypes.types.name:
	      if (this.options.features["es7.asyncFunctions"] && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }

	    // If the statement does not start with a statement keyword or a
	    // brace, it's an ExpressionStatement or LabeledStatement. We
	    // simply start parsing an expression, and afterwards, if the
	    // next token is a colon and the expression was a simple
	    // Identifier node, we switch to interpreting it as a label.
	    default:
	      var maybeName = this.state.value,
	          expr = this.parseExpression();

	      if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	        return this.parseLabeledStatement(node, maybeName, expr);
	      } else {
	        return this.parseExpressionStatement(node, expr);
	      }
	  }
	};

	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};

	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }

	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }

	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};

	pp.parseDecorator = function () {
	  if (!this.options.features["es7.decorators"]) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};

	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();

	  if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdent();
	    this.semicolon();
	  }

	  // Verify that there is an actual destination to break or
	  // continue to.
	  for (var i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};

	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};

	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};

	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.

	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);

	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }

	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");
	    if ((this.match(_tokenizerTypes.types._in) || this.isContextual("of")) && _init.declarations.length === 1 && !(varKind !== _tokenizerTypes.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);
	    return this.parseFor(node, _init);
	  }

	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};

	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};

	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};

	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }

	  this.next();

	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }

	  return this.finishNode(node, "ReturnStatement");
	};

	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);

	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  for (var cur, sawDefault; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (!cur) this.unexpected();
	      cur.consequent.push(this.parseStatement(true));
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};

	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};

	// Reused empty array added for node fields that are always empty.

	var empty = [];

	pp.parseTryStatement = function (node) {
	  this.next();
	  node.block = this.parseBlock();
	  node.handler = null;
	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();
	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true);
	    this.expect(_tokenizerTypes.types.parenR);
	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }

	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;

	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }

	  return this.finishNode(node, "TryStatement");
	};

	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};

	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};

	pp.parseWithStatement = function (node) {
	  if (this.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};

	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};

	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  var _arr = this.state.labels;

	  for (var _i = 0; _i < _arr.length; _i++) {
	    var label = _arr[_i];
	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }

	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }

	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};

	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};

	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).

	pp.parseBlock = function (allowStrict) {
	  var node = this.startNode(),
	      first = true,
	      oldStrict = undefined;
	  node.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    var stmt = this.parseStatement(true);
	    node.body.push(stmt);
	    if (first && allowStrict && this.isUseStrict(stmt)) {
	      oldStrict = this.strict;
	      this.setStrict(this.strict = true);
	    }
	    first = false;
	  }
	  if (oldStrict === false) this.setStrict(false);
	  return this.finishNode(node, "BlockStatement");
	};

	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.

	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};

	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.

	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};

	// Parse a list of variable declarations.

	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};

	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};

	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {
	  this.initFunction(node, isAsync);
	  node.generator = this.eat(_tokenizerTypes.types.star);

	  if (isStatement || this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdent();
	  }

	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};

	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.options.features["es7.trailingFunctionCommas"]);
	};

	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseClass = function (node, isStatement) {
	  this.next();
	  this.parseClassId(node, isStatement);
	  this.parseClassSuper(node);
	  var classBody = this.startNode();
	  var hadConstructor = false;
	  classBody.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  var decorators = [];
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) continue;
	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }
	    var method = this.startNode();
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star),
	        isAsync = false;
	    this.parsePropertyName(method);
	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }
	    if (!isGenerator && method.key.type === "Identifier" && !method.computed && this.isClassProperty()) {
	      classBody.body.push(this.parseClassProperty(method));
	      continue;
	    }
	    if (this.options.features["es7.asyncFunctions"] && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async") {
	      isAsync = true;
	      this.parsePropertyName(method);
	    }
	    var isGetSet = false;
	    method.kind = "method";
	    if (!method.computed) {
	      var key = method.key;

	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }
	      if (!method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }
	    }
	    if (method.kind === "constructor" && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }
	    this.parseClassMethod(classBody, method, isGenerator, isAsync);
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.value.params.length !== paramCount) {
	        var start = method.value.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }

	  node.body = this.finishNode(classBody, "ClassBody");
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};

	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon());
	};

	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.options.features["es7.classProperties"]) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  this.semicolon();
	  return this.finishNode(node, "ClassProperty");
	};

	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  method.value = this.parseMethod(isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "MethodDefinition"));
	};

	pp.parseClassId = function (node, isStatement) {
	  node.id = this.match(_tokenizerTypes.types.name) ? this.parseIdent() : isStatement ? this.unexpected() : null;
	};

	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};

	// Parses module export declaration.

	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.options.features["es7.exportExtensions"] && this.eatContextual("as")) {
	      specifier.exported = this.parseIdent();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node);
	    } else {
	      this.parseExportFrom(node);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.options.features["es7.exportExtensions"] && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdent(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdent();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var expr = this.parseMaybeAssign();
	    var needsSemi = true;
	    if (expr.type === "FunctionExpression" || expr.type === "ClassExpression") {
	      needsSemi = false;
	      if (expr.id) {
	        expr.type = expr.type === "FunctionExpression" ? "FunctionDeclaration" : "ClassDeclaration";
	      }
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.declaration = this.parseStatement(true);
	    node.specifiers = [];
	    node.source = null;
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    if (this.eatContextual("from")) {
	      node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    } else {
	      node.source = null;
	    }
	    this.semicolon();
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};

	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async";
	  }

	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }

	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};

	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};

	pp.parseExportFrom = function (node) {
	  this.expectContextual("from");
	  node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  this.semicolon();
	  this.checkExport(node);
	};

	pp.shouldParseExportDeclaration = function () {
	  return this.options.features["es7.asyncFunctions"] && this.isContextual("async");
	};

	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};

	// Parses a comma-separated list of module exports.

	pp.parseExportSpecifiers = function () {
	  var nodes = [],
	      first = true;
	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    var node = this.startNode();
	    node.local = this.parseIdent(this.match(_tokenizerTypes.types._default));
	    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }

	  return nodes;
	};

	// Parses import declaration.

	pp.parseImport = function (node) {
	  this.next();

	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};

	// Parses a comma-separated list of module imports.

	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdent(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }

	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdent();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }

	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    var specifier = this.startNode();
	    specifier.imported = this.parseIdent(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdent() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};

	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};
	},{"../tokenizer/types":552,"../util/whitespace":555,"./index":540}],545:[function(require,module,exports){
	"use strict";

	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilWhitespace = require("../util/whitespace");

	var pp = _index2["default"].prototype;

	// ## Parser utilities

	// Test whether a statement node is the string literal `"use strict"`.

	pp.isUseStrict = function (stmt) {
	  return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && stmt.expression.raw.slice(1, -1) === "use strict";
	};

	// TODO

	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};

	// TODO

	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};

	// Tests whether parsed token is a contextual keyword.

	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};

	// Consumes contextual keyword if possible.

	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};

	// Asserts that following token is given contextual keyword.

	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};

	// Test whether a semicolon can be inserted at the current position.

	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};

	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.

	pp.semicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.canInsertSemicolon()) this.unexpected();
	};

	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.

	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};

	// Raise an unexpected token error.

	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};
	},{"../tokenizer/types":552,"../util/whitespace":555,"./index":540}],546:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _tokenizerTypes = require("../tokenizer/types");

	var _parser = require("../parser");

	var _parser2 = _interopRequireDefault(_parser);

	var pp = _parser2["default"].prototype;

	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};

	pp.flowParseDeclareFunction = function (node) {
	  this.next();

	  var id = node.id = this.parseIdent();

	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();

	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }

	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();

	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");

	  this.finishNode(id, id.type);

	  this.semicolon();

	  return this.finishNode(node, "DeclareFunction");
	};

	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else {
	    this.unexpected();
	  }
	};

	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};

	pp.flowParseDeclareModule = function (node) {
	  this.next();

	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdent();
	  }

	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();

	    // todo: declare check
	    this.next();

	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);

	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};

	// Interfaces

	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdent();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node["extends"] = [];

	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }

	  node.body = this.flowParseObjectType(allowStatic);
	};

	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();

	  node.id = this.parseIdent();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }

	  return this.finishNode(node, "InterfaceExtends");
	};

	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};

	// Type aliases

	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdent();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();

	  return this.finishNode(node, "TypeAlias");
	};

	// Type annotations

	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");

	  return this.finishNode(node, "TypeParameterDeclaration");
	};

	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];

	  this.state.inType = true;

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");

	  this.state.inType = oldInType;

	  return this.finishNode(node, "TypeParameterInstantiation");
	};

	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdent(true);
	};

	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;

	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();

	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};

	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }

	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }

	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();

	  return this.finishNode(node, "FunctionTypeAnnotation");
	};

	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};

	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};

	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node;
	  var optional = false;
	  var propertyKey;
	  var isStatic;

	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];

	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }

	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdent();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }

	  this.expect(_tokenizerTypes.types.braceR);

	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};

	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};

	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);

	  node.typeParameters = null;
	  node.id = id;

	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdent();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }

	  return this.finishNode(node, "GenericTypeAnnotation");
	};

	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};

	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};

	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdent();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};

	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};

	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");

	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");

	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");

	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");

	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");

	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");

	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};

	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp;
	  var type;
	  var isGroupedType = false;

	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdent());

	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();

	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();

	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);

	        this.expect(_tokenizerTypes.types.arrow);

	        node.returnType = this.flowParseType();

	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }

	    case _tokenizerTypes.types.parenL:
	      this.next();

	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }

	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);

	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }

	        return type;
	      }

	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;

	      this.expect(_tokenizerTypes.types.parenR);

	      this.expect(_tokenizerTypes.types.arrow);

	      node.returnType = this.flowParseType();
	      node.typeParameters = null;

	      return this.finishNode(node, "FunctionTypeAnnotation");

	    case _tokenizerTypes.types.string:
	      node.rawValue = node.value = this.state.value;
	      node.raw = this.input.slice(this.state.start, this.state.end);
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");

	    case _tokenizerTypes.types.num:
	      node.rawValue = node.value = this.state.value;
	      node.raw = this.input.slice(this.state.start, this.state.end);
	      this.next();
	      return this.finishNode(node, "NumberLiteralTypeAnnotation");

	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }

	  this.unexpected();
	};

	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};

	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};

	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};

	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};

	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};

	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdent();
	  var isOptionalParam = false;

	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }

	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }

	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }

	  return ident;
	};

	exports["default"] = function (instance) {
	  // function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }

	      return inner.call(this, node, allowExpression);
	    };
	  });

	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });

	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }

	      return inner.call(this, node, expr);
	    };
	  });

	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || inner.call(this);
	    };
	  });

	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();

	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }

	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), [node]);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("parseClassId", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });

	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });

	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });

	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });

	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }

	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });

	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }

	      return exprList;
	    };
	  });

	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });

	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });

	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      var typeParameters;
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      method.value = this.parseMethod(isGenerator, isAsync);
	      method.value.typeParameters = typeParameters;
	      classBody.body.push(this.finishNode(method, "MethodDefinition"));
	    };
	  });

	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdent();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });

	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters;
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }
	      inner.apply(this, arguments);
	      prop.value.typeParameters = typeParameters;
	    };
	  });

	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });

	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";

	      var kind = this.match(_tokenizerTypes.types._typeof) ? "typeof" : this.isContextual("type") ? "type" : null;
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }

	      inner.call(this, node);
	    };
	  });

	  // function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });

	  // var foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });

	  // var foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }

	      return inner.call(this, node, call);
	    };
	  });

	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;

	      if (this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // var foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);

	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // var foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);

	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};

	module.exports = exports["default"];
	},{"../parser":540,"../tokenizer/types":552}],547:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _xhtml = require("./xhtml");

	var _xhtml2 = _interopRequireDefault(_xhtml);

	var _tokenizerTypes = require("../../tokenizer/types");

	var _tokenizerContext = require("../../tokenizer/context");

	var _parser = require("../../parser");

	var _parser2 = _interopRequireDefault(_parser);

	var _utilIdentifier = require("../../util/identifier");

	var _utilWhitespace = require("../../util/whitespace");

	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;

	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);

	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");

	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};

	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};

	var pp = _parser2["default"].prototype;

	// Reads inline JSX contents token.

	pp.jsxReadToken = function () {
	  var out = "",
	      chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);

	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);

	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;

	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};

	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;

	  return out;
	};

	pp.jsxReadString = function (quote) {
	  var out = "",
	      chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};

	pp.jsxReadEntity = function () {
	  var str = "",
	      count = 0,
	      entity;
	  var ch = this.input[this.state.pos];

	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};

	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.

	pp.jsxReadWord = function () {
	  var ch,
	      start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};

	// Transforms JSX element name to string.

	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }

	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }

	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}

	// Parse next token as JSX identifier

	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};

	// Parse namespaced identifier.

	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};

	// Parses element name in any form - namespaced, member
	// or single identifier.

	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};

	// Parses any type of JSX attribute value.

	pp.jsxParseAttributeValue = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      var node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }

	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      return this.parseExprAtom();

	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};

	// JSXEmptyExpression is unique type since it doesn"t actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).

	pp.jsxParseEmptyExpression = function () {
	  var tmp = this.state.start;
	  this.state.start = this.state.lastTokEnd;
	  this.state.lastTokEnd = tmp;

	  tmp = this.state.startLoc;
	  this.state.startLoc = this.state.lastTokEndLoc;
	  this.state.lastTokEndLoc = tmp;

	  return this.finishNode(this.startNode(), "JSXEmptyExpression");
	};

	// Parses JSX expression enclosed into curly brackets.

	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};

	// Parses following JSX attribute name-value pair.

	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};

	// Parses JSX opening tag starting after "<".

	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};

	// Parses JSX closing tag starting after "</".

	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};

	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.

	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;

	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;

	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;

	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;

	        default:
	          this.unexpected();
	      }
	    }

	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }

	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};

	// Parses entire JSX element from current position.

	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};

	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value);
	        // https://github.com/babel/babel/issues/2078
	        node.rawValue = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });

	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();

	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }

	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }

	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }

	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }

	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }

	      return inner.call(this, code);
	    };
	  });

	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};

	module.exports = exports["default"];
	},{"../../parser":540,"../../tokenizer/context":549,"../../tokenizer/types":552,"../../util/identifier":553,"../../util/whitespace":555,"./xhtml":548}],548:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];
	},{}],549:[function(require,module,exports){
	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _types = require("./types");

	var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
	  _classCallCheck(this, TokContext);

	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};

	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};

	// Token-specific context update code

	exports.types = types;
	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }

	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};

	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};

	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};

	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};

	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};

	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }

	  this.state.exprAllowed = false;
	};

	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};
	},{"./types":552}],550:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _utilIdentifier = require("../util/identifier");

	var _types = require("./types");

	var _context = require("./context");

	var _utilLocation = require("../util/location");

	var _utilWhitespace = require("../util/whitespace");

	var _state = require("./state");

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.

	var _state2 = _interopRequireDefault(_state);

	var Token = function Token(state) {
	  _classCallCheck(this, Token);

	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}

	// ## Tokenizer

	// Are we running under Rhino?
	/* global Packages */
	;

	exports.Token = Token;
	var isRhino = typeof Packages === "object" && Object.prototype.toString.call(Packages) === "[object JavaPackage]";

	// Parse a regular expression. Some context-awareness is necessary,
	// since a '/' inside a '[]' set does not end the expression.

	function tryCreateRegexp(src, flags, throwErrorStart) {
	  try {
	    return new RegExp(src, flags);
	  } catch (e) {
	    if (throwErrorStart !== undefined) {
	      if (e instanceof SyntaxError) this.raise(throwErrorStart, "Error parsing regular expression: " + e.message);
	      this.raise(e);
	    }
	  }
	}

	var regexpUnicodeSupport = !!tryCreateRegexp("￿", "u");

	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) return String.fromCharCode(code);
	  return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	}

	// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.

	var containsEsc;

	var Tokenizer = (function () {
	  function Tokenizer(input) {
	    _classCallCheck(this, Tokenizer);

	    this.state = new _state2["default"]();
	    this.state.init(input);
	  }

	  // Move to the next token

	  Tokenizer.prototype.next = function next() {
	    this.state.tokens.push(new Token(this.state));

	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };

	  // TODO

	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };

	  // TODO

	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };

	  // TODO

	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone();
	    this.next();
	    var curr = this.state.clone();
	    this.state = old;
	    return curr;
	  };

	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).

	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };

	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };

	  // Read a single token, updating the parser object's token-related
	  // properties.

	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();

	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);

	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };

	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code, true) || code === 92 /* '\' */) return this.readWord();

	    return this.getTokenFromCode(code);
	  };

	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };

	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc),
	      range: [start, end]
	    };

	    this.state.tokens.push(comment);
	    this.state.comments.push(comment);
	    this.addComment(comment);
	  };

	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");

	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }

	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }

	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.

	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;

	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }

	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;

	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;

	            case 47:
	              this.skipLineComment(2);
	              break;

	            default:
	              break loop;
	          }
	          break;

	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };

	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.

	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;

	    this.updateContext(prevType);
	  };

	  // ### Token reading

	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //

	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }

	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };

	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 42 && this.options.features["es7.exponentiationOperator"]) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }

	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }

	    return this.finishOp(type, width);
	  };

	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };

	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }

	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;

	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }

	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }

	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }

	    return this.finishOp(_types.types.relational, size);
	  };

	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };

	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();

	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);

	      case 58:
	        if (this.options.features["es7.functionBind"] && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }

	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);

	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);

	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);

	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);

	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.

	      case 47:
	        // '/'
	        return this.readToken_slash();

	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);

	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);

	      case 94:
	        // '^'
	        return this.readToken_caret();

	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);

	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);

	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);

	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }

	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };

	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };

	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    // istanbul ignore next

	    var _this = this;

	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    var tmp = content;
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	      if (mods.indexOf("u") >= 0 && !regexpUnicodeSupport) {
	        // Replace each astral symbol and every Unicode escape sequence that
	        // possibly represents an astral symbol or a paired surrogate with a
	        // single ASCII symbol to avoid throwing on regular expressions that
	        // are only valid in combination with the `/u` flag.
	        // Note: replacing with the ASCII symbol `x` might cause false
	        // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	        // perfectly valid pattern that is equivalent to `[a-b]`, but it would
	        // be replaced by `[x-b]` which throws an error.
	        tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (match, code, offset) {
	          code = Number("0x" + code);
	          if (code > 0x10FFFF) _this.raise(start + offset + 3, "Code point out of bounds");
	          return "x";
	        });
	        tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
	      }
	    }
	    // Detect invalid regular expressions.
	    var value = null;
	    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
	    // so don't do detection if we are running under Rhino
	    if (!isRhino) {
	      tryCreateRegexp.call(this, tmp, undefined, start);
	      // Get a regular expression object for this pattern-flag pair, or `null` in
	      // case the current environment doesn't support the flags it uses.
	      value = tryCreateRegexp.call(this, content, mods);
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods,
	      value: value
	    });
	  };

	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.

	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;

	    return total;
	  };

	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };

	  // Read an integer, octal integer, or floating-point number.

	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");

	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };

	  // Read a string value, interpreting backslash-escapes.

	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;

	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };

	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };

	  // Reads template string tokens.

	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };

	  // Used to read escaped characters

	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0 && (this.strict || inTemplate)) {
	            this.raise(this.state.pos - 2, "Octal literal in strict mode");
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };

	  // Used to read character escape sequences ('\x', '\u', '\U').

	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };

	  // Read an identifier, and return it as a string. Sets `containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.

	  Tokenizer.prototype.readWord1 = function readWord1() {
	    containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch, true)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        containsEsc = true;

	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;

	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }

	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }

	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };

	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.

	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!containsEsc && this.isKeyword(word)) type = _types.keywords[word];
	    return this.finishToken(type, word);
	  };

	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }

	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }

	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof) {
	      return true;
	    }

	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }

	    return !this.state.exprAllowed;
	  };

	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };

	  return Tokenizer;
	})();

	exports["default"] = Tokenizer;
	},{"../util/identifier":553,"../util/location":554,"../util/whitespace":555,"./context":549,"./state":551,"./types":552}],551:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _utilLocation = require("../util/location");

	var _context = require("./context");

	var _types = require("./types");

	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }

	  State.prototype.init = function init(input) {
	    this.input = input;

	    // Used to signify the start of a potential arrow function
	    this.potentialArrowAt = -1;

	    // Flags to track whether we are in a function, a generator.
	    this.inFunction = this.inGenerator = false;

	    // Labels in scope.
	    this.labels = [];

	    // Leading decorators.
	    this.decorators = [];

	    // Token store.
	    this.tokens = [];

	    // Comment store.
	    this.comments = [];

	    // Comment attachment store
	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];

	    // The current position of the tokenizer in the input.
	    this.pos = this.lineStart = 0;
	    this.curLine = 1;

	    // Properties of the current token:
	    // Its type
	    this.type = _types.types.eof;
	    // For tokens that include more information than their type, the value
	    this.value = null;
	    // Its start and end offset
	    this.start = this.end = this.pos;
	    // And, if locations are used, the {line, column} object
	    // corresponding to those offsets
	    this.startLoc = this.endLoc = this.curPosition();

	    // Position information for the previous token
	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;

	    // The context stack is used to superficially track syntactic
	    // context to predict whether a regular expression is allowed in a
	    // given position.
	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;

	    return this;
	  };

	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };

	  State.prototype.clone = function clone() {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];
	      if (Array.isArray(val)) val = val.slice();
	      state[key] = val;
	    }
	    return state;
	  };

	  return State;
	})();

	exports["default"] = State;
	module.exports = exports["default"];
	},{"../util/location":554,"./context":549,"./types":552}],552:[function(require,module,exports){
	// ## Token types

	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.

	// All token type variables start with an underscore, to make them
	// easy to recognize.

	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.

	"use strict";

	exports.__esModule = true;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  _classCallCheck(this, TokenType);

	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	exports.TokenType = TokenType;

	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };

	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),

	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};

	// Map keyword names to token types.

	exports.types = types;
	var keywords = {};

	// Succinct definitions of keyword token types
	exports.keywords = keywords;
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}

	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });
	},{}],553:[function(require,module,exports){
	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.

	"use strict";

	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}

	// Reserved word lists for various dialects of the language

	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};

	// And the keywords

	exports.reservedWords = reservedWords;
	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");

	// ## Character categories

	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.

	exports.isKeyword = isKeyword;
	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";

	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;

	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}

	// Test whether a given character code starts an identifier.

	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}

	// Test whether a given character is part of an identifier.

	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}
	},{}],554:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;
	// istanbul ignore next

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _whitespace = require("./whitespace");

	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.

	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);

	  this.line = line;
	  this.column = col;
	};

	exports.Position = Position;

	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);

	  this.start = start;
	  this.end = end;
	}

	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.

	;

	exports.SourceLocation = SourceLocation;

	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}
	},{"./whitespace":555}],555:[function(require,module,exports){
	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	"use strict";

	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	exports.lineBreakG = lineBreakG;

	function isNewLine(code) {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}

	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;
	},{}]},{},[31])(31)
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(391).Buffer, (function() { return this; }())))

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(392)
	var ieee754 = __webpack_require__(393)
	var isArray = __webpack_require__(394)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  function Foo () {}
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    arr.constructor = Foo
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Foo && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object)
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }

	  return res + decodeUtf8Char(tmp)
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	  var i = 0

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 0xDC00) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          leadSurrogate = codePoint
	          continue
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
	          leadSurrogate = null
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else {
	          // valid lead
	          leadSurrogate = codePoint
	          continue
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	      leadSurrogate = null
	    }

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x200000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(391).Buffer))

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 393 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 394 */
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(396);


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(397);


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	__webpack_require__(398);

	__webpack_require__(487);

	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel/polyfill is allowed");
	}
	global._babelPolyfill = true;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(399);
	__webpack_require__(416);
	__webpack_require__(420);
	__webpack_require__(422);
	__webpack_require__(424);
	__webpack_require__(426);
	__webpack_require__(427);
	__webpack_require__(428);
	__webpack_require__(429);
	__webpack_require__(430);
	__webpack_require__(431);
	__webpack_require__(432);
	__webpack_require__(433);
	__webpack_require__(434);
	__webpack_require__(435);
	__webpack_require__(439);
	__webpack_require__(440);
	__webpack_require__(441);
	__webpack_require__(442);
	__webpack_require__(444);
	__webpack_require__(445);
	__webpack_require__(448);
	__webpack_require__(449);
	__webpack_require__(451);
	__webpack_require__(453);
	__webpack_require__(454);
	__webpack_require__(455);
	__webpack_require__(456);
	__webpack_require__(457);
	__webpack_require__(458);
	__webpack_require__(462);
	__webpack_require__(465);
	__webpack_require__(466);
	__webpack_require__(468);
	__webpack_require__(469);
	__webpack_require__(471);
	__webpack_require__(472);
	__webpack_require__(473);
	__webpack_require__(475);
	__webpack_require__(476);
	__webpack_require__(477);
	__webpack_require__(478);
	__webpack_require__(479);
	__webpack_require__(481);
	__webpack_require__(482);
	__webpack_require__(483);
	__webpack_require__(485);
	__webpack_require__(486);
	module.exports = __webpack_require__(400).core;


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	var $                = __webpack_require__(400)
	  , cel              = __webpack_require__(402)
	  , cof              = __webpack_require__(403)
	  , $def             = __webpack_require__(407)
	  , invoke           = __webpack_require__(409)
	  , arrayMethod      = __webpack_require__(410)
	  , IE_PROTO         = __webpack_require__(406).safe('__proto__')
	  , assert           = __webpack_require__(412)
	  , assertObject     = assert.obj
	  , ObjectProto      = Object.prototype
	  , html             = $.html
	  , A                = []
	  , _slice           = A.slice
	  , _join            = A.join
	  , classof          = cof.classof
	  , has              = $.has
	  , defineProperty   = $.setDesc
	  , getOwnDescriptor = $.getDesc
	  , defineProperties = $.setDescs
	  , isFunction       = $.isFunction
	  , isObject         = $.isObject
	  , toObject         = $.toObject
	  , toLength         = $.toLength
	  , toIndex          = $.toIndex
	  , IE8_DOM_DEFINE   = false
	  , $indexOf         = __webpack_require__(413)(false)
	  , $forEach         = arrayMethod(0)
	  , $map             = arrayMethod(1)
	  , $filter          = arrayMethod(2)
	  , $some            = arrayMethod(3)
	  , $every           = arrayMethod(4);

	if(!$.DESC){
	  try {
	    IE8_DOM_DEFINE = defineProperty(cel('div'), 'x',
	      {get: function(){ return 8; }}
	    ).x == 8;
	  } catch(e){ /* empty */ }
	  $.setDesc = function(O, P, Attributes){
	    if(IE8_DOM_DEFINE)try {
	      return defineProperty(O, P, Attributes);
	    } catch(e){ /* empty */ }
	    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	    if('value' in Attributes)assertObject(O)[P] = Attributes.value;
	    return O;
	  };
	  $.getDesc = function(O, P){
	    if(IE8_DOM_DEFINE)try {
	      return getOwnDescriptor(O, P);
	    } catch(e){ /* empty */ }
	    if(has(O, P))return $.desc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
	  };
	  $.setDescs = defineProperties = function(O, Properties){
	    assertObject(O);
	    var keys   = $.getKeys(Properties)
	      , length = keys.length
	      , i = 0
	      , P;
	    while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
	    return O;
	  };
	}
	$def($def.S + $def.F * !$.DESC, 'Object', {
	  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $.getDesc,
	  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	  defineProperty: $.setDesc,
	  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties
	});

	  // IE 8- don't enum bug keys
	var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
	            'toLocaleString,toString,valueOf').split(',')
	  // Additional keys for getOwnPropertyNames
	  , keys2 = keys1.concat('length', 'prototype')
	  , keysLen1 = keys1.length;

	// Create object with `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = cel('iframe')
	    , i      = keysLen1
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict.prototype[keys1[i]];
	  return createDict();
	};
	function createGetKeys(names, length){
	  return function(object){
	    var O      = toObject(object)
	      , i      = 0
	      , result = []
	      , key;
	    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	    // Don't enum bug & hidden keys
	    while(length > i)if(has(O, key = names[i++])){
	      ~$indexOf(result, key) || result.push(key);
	    }
	    return result;
	  };
	}
	function Empty(){}
	$def($def.S, 'Object', {
	  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	  getPrototypeOf: $.getProto = $.getProto || function(O){
	    O = Object(assert.def(O));
	    if(has(O, IE_PROTO))return O[IE_PROTO];
	    if(isFunction(O.constructor) && O instanceof O.constructor){
	      return O.constructor.prototype;
	    } return O instanceof Object ? ObjectProto : null;
	  },
	  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
	  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	  create: $.create = $.create || function(O, /*?*/Properties){
	    var result;
	    if(O !== null){
	      Empty.prototype = assertObject(O);
	      result = new Empty();
	      Empty.prototype = null;
	      // add "__proto__" for Object.getPrototypeOf shim
	      result[IE_PROTO] = O;
	    } else result = createDict();
	    return Properties === undefined ? result : defineProperties(result, Properties);
	  },
	  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
	  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false),
	  // 19.1.2.17 / 15.2.3.8 Object.seal(O)
	  seal: function seal(it){
	    return it; // <- cap
	  },
	  // 19.1.2.5 / 15.2.3.9 Object.freeze(O)
	  freeze: function freeze(it){
	    return it; // <- cap
	  },
	  // 19.1.2.15 / 15.2.3.10 Object.preventExtensions(O)
	  preventExtensions: function preventExtensions(it){
	    return it; // <- cap
	  },
	  // 19.1.2.13 / 15.2.3.11 Object.isSealed(O)
	  isSealed: function isSealed(it){
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.12 / 15.2.3.12 Object.isFrozen(O)
	  isFrozen: function isFrozen(it){
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.11 / 15.2.3.13 Object.isExtensible(O)
	  isExtensible: function isExtensible(it){
	    return isObject(it); // <- cap
	  }
	});

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	$def($def.P, 'Function', {
	  bind: function(that /*, args... */){
	    var fn       = assert.fn(this)
	      , partArgs = _slice.call(arguments, 1);
	    function bound(/* args... */){
	      var args   = partArgs.concat(_slice.call(arguments))
	        , constr = this instanceof bound
	        , ctx    = constr ? $.create(fn.prototype) : that
	        , result = invoke(fn, args, ctx);
	      return constr ? ctx : result;
	    }
	    if(fn.prototype)bound.prototype = fn.prototype;
	    return bound;
	  }
	});

	// Fix for not array-like ES3 string and DOM objects
	if(!(0 in Object('z') && 'z'[0] == 'z')){
	  $.ES5Object = function(it){
	    return cof(it) == 'String' ? it.split('') : Object(it);
	  };
	}

	var buggySlice = true;
	try {
	  if(html)_slice.call(html);
	  buggySlice = false;
	} catch(e){ /* empty */ }

	$def($def.P + $def.F * buggySlice, 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return _slice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});

	$def($def.P + $def.F * ($.ES5Object != Object), 'Array', {
	  join: function join(){
	    return _join.apply($.ES5Object(this), arguments);
	  }
	});

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	$def($def.S, 'Array', {
	  isArray: function(arg){
	    return cof(arg) == 'Array';
	  }
	});
	function createArrayReduce(isRight){
	  return function(callbackfn, memo){
	    assert.fn(callbackfn);
	    var O      = toObject(this)
	      , length = toLength(O.length)
	      , index  = isRight ? length - 1 : 0
	      , i      = isRight ? -1 : 1;
	    if(arguments.length < 2)for(;;){
	      if(index in O){
	        memo = O[index];
	        index += i;
	        break;
	      }
	      index += i;
	      assert(isRight ? index >= 0 : length > index, 'Reduce of empty array with no initial value');
	    }
	    for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
	      memo = callbackfn(memo, O[index], index, this);
	    }
	    return memo;
	  };
	}
	$def($def.P, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: $.each = $.each || function forEach(callbackfn/*, that = undefined */){
	    return $forEach(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn/*, that = undefined */){
	    return $map(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn/*, that = undefined */){
	    return $filter(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn/*, that = undefined */){
	    return $some(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn/*, that = undefined */){
	    return $every(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: createArrayReduce(false),
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: createArrayReduce(true),
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(el /*, fromIndex = 0 */){
	    return $indexOf(this, el, arguments[1]);
	  },
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function(el, fromIndex /* = @[*-1] */){
	    var O      = toObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, $.toInteger(fromIndex));
	    if(index < 0)index = toLength(length + index);
	    for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
	    return -1;
	  }
	});

	// 21.1.3.25 / 15.5.4.20 String.prototype.trim()
	$def($def.P, 'String', {trim: __webpack_require__(414)(/^\s*([\s\S]*\S)?\s*$/, '$1')});

	// 20.3.3.1 / 15.9.4.4 Date.now()
	$def($def.S, 'Date', {now: function(){
	  return +new Date;
	}});

	function lz(num){
	  return num > 9 ? num : '0' + num;
	}

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	// PhantomJS and old webkit had a broken Date implementation.
	var date       = new Date(-5e13 - 1)
	  , brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z'
	      && __webpack_require__(415)(function(){ new Date(NaN).toISOString(); }));
	$def($def.P + $def.F * brokenDate, 'Date', {toISOString: function(){
	  if(!isFinite(this))throw RangeError('Invalid time value');
	  var d = this
	    , y = d.getUTCFullYear()
	    , m = d.getUTCMilliseconds()
	    , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	}});

	if(classof(function(){ return arguments; }()) == 'Object')cof.classof = function(it){
	  var tag = classof(it);
	  return tag == 'Object' && isFunction(it.callee) ? 'Arguments' : tag;
	};

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = typeof self != 'undefined' ? self : Function('return this')()
	  , core   = {}
	  , defineProperty = Object.defineProperty
	  , hasOwnProperty = {}.hasOwnProperty
	  , ceil  = Math.ceil
	  , floor = Math.floor
	  , max   = Math.max
	  , min   = Math.min;
	// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.
	var DESC = !!function(){
	  try {
	    return defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;
	  } catch(e){ /* empty */ }
	}();
	var hide = createDefiner(1);
	// 7.1.4 ToInteger
	function toInteger(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	}
	function desc(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	}
	function simpleSet(object, key, value){
	  object[key] = value;
	  return object;
	}
	function createDefiner(bitmap){
	  return DESC ? function(object, key, value){
	    return $.setDesc(object, key, desc(bitmap, value));
	  } : simpleSet;
	}

	function isObject(it){
	  return it !== null && (typeof it == 'object' || typeof it == 'function');
	}
	function isFunction(it){
	  return typeof it == 'function';
	}
	function assertDefined(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	}

	var $ = module.exports = __webpack_require__(401)({
	  g: global,
	  core: core,
	  html: global.document && document.documentElement,
	  // http://jsperf.com/core-js-isobject
	  isObject:   isObject,
	  isFunction: isFunction,
	  that: function(){
	    return this;
	  },
	  // 7.1.4 ToInteger
	  toInteger: toInteger,
	  // 7.1.15 ToLength
	  toLength: function(it){
	    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	  },
	  toIndex: function(index, length){
	    index = toInteger(index);
	    return index < 0 ? max(index + length, 0) : min(index, length);
	  },
	  has: function(it, key){
	    return hasOwnProperty.call(it, key);
	  },
	  create:     Object.create,
	  getProto:   Object.getPrototypeOf,
	  DESC:       DESC,
	  desc:       desc,
	  getDesc:    Object.getOwnPropertyDescriptor,
	  setDesc:    defineProperty,
	  setDescs:   Object.defineProperties,
	  getKeys:    Object.keys,
	  getNames:   Object.getOwnPropertyNames,
	  getSymbols: Object.getOwnPropertySymbols,
	  assertDefined: assertDefined,
	  // Dummy, fix for not array-like ES3 string in es5 module
	  ES5Object: Object,
	  toObject: function(it){
	    return $.ES5Object(assertDefined(it));
	  },
	  hide: hide,
	  def: createDefiner(0),
	  set: global.Symbol ? simpleSet : hide,
	  each: [].forEach
	});
	/* eslint-disable no-undef */
	if(typeof __e != 'undefined')__e = core;
	if(typeof __g != 'undefined')__g = global;

/***/ },
/* 401 */
/***/ function(module, exports) {

	module.exports = function($){
	  $.FW   = true;
	  $.path = $.g;
	  return $;
	};

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(400)
	  , document = $.g.document
	  , isObject = $.isObject
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(400)
	  , TAG      = __webpack_require__(404)('toStringTag')
	  , toString = {}.toString;
	function cof(it){
	  return toString.call(it).slice(8, -1);
	}
	cof.classof = function(it){
	  var O, T;
	  return it == undefined ? it === undefined ? 'Undefined' : 'Null'
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
	};
	cof.set = function(it, tag, stat){
	  if(it && !$.has(it = stat ? it : it.prototype, TAG))$.hide(it, TAG, tag);
	};
	module.exports = cof;

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(400).g
	  , store  = __webpack_require__(405)('wks');
	module.exports = function(name){
	  return store[name] || (store[name] =
	    global.Symbol && global.Symbol[name] || __webpack_require__(406).safe('Symbol.' + name));
	};

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var $      = __webpack_require__(400)
	  , SHARED = '__core-js_shared__'
	  , store  = $.g[SHARED] || ($.g[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	var sid = 0;
	function uid(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
	}
	uid.safe = __webpack_require__(400).g.Symbol || uid;
	module.exports = uid;

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(400)
	  , global     = $.g
	  , core       = $.core
	  , isFunction = $.isFunction
	  , $redef     = __webpack_require__(408);
	function ctx(fn, that){
	  return function(){
	    return fn.apply(that, arguments);
	  };
	}
	global.core = core;
	// type bitmap
	$def.F = 1;  // forced
	$def.G = 2;  // global
	$def.S = 4;  // static
	$def.P = 8;  // proto
	$def.B = 16; // bind
	$def.W = 32; // wrap
	function $def(type, name, source){
	  var key, own, out, exp
	    , isGlobal = type & $def.G
	    , isProto  = type & $def.P
	    , target   = isGlobal ? global : type & $def.S
	        ? global[name] : (global[name] || {}).prototype
	    , exports  = isGlobal ? core : core[name] || (core[name] = {});
	  if(isGlobal)source = name;
	  for(key in source){
	    // contains in native
	    own = !(type & $def.F) && target && key in target;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    if(type & $def.B && own)exp = ctx(out, global);
	    else exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
	    // extend global
	    if(target && !own)$redef(target, key, out);
	    // export
	    if(exports[key] != out)$.hide(exports, key, exp);
	    if(isProto)(exports.prototype || (exports.prototype = {}))[key] = out;
	  }
	}
	module.exports = $def;

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	var $   = __webpack_require__(400)
	  , tpl = String({}.hasOwnProperty)
	  , SRC = __webpack_require__(406).safe('src')
	  , _toString = Function.toString;

	function $redef(O, key, val, safe){
	  if($.isFunction(val)){
	    var base = O[key];
	    $.hide(val, SRC, base ? String(base) : tpl.replace(/hasOwnProperty/, String(key)));
	    if(!('name' in val))val.name = key;
	  }
	  if(O === $.g){
	    O[key] = val;
	  } else {
	    if(!safe)delete O[key];
	    $.hide(O, key, val);
	  }
	}

	// add fake Function#toString for correct work wrapped methods / constructors
	// with methods similar to LoDash isNative
	$redef(Function.prototype, 'toString', function toString(){
	  return $.has(this, SRC) ? this[SRC] : _toString.call(this);
	});

	$.core.inspectSource = function(it){
	  return _toString.call(it);
	};

	module.exports = $redef;

/***/ },
/* 409 */
/***/ function(module, exports) {

	// Fast apply
	// http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	    case 5: return un ? fn(args[0], args[1], args[2], args[3], args[4])
	                      : fn.call(that, args[0], args[1], args[2], args[3], args[4]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var $   = __webpack_require__(400)
	  , ctx = __webpack_require__(411);
	module.exports = function(TYPE){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
	  return function($this, callbackfn, that){
	    var O      = Object($.assertDefined($this))
	      , self   = $.ES5Object(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = $.toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	// Optional / simple context binding
	var assertFunction = __webpack_require__(412).fn;
	module.exports = function(fn, that, length){
	  assertFunction(fn);
	  if(~length && that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  } return function(/* ...args */){
	      return fn.apply(that, arguments);
	    };
	};

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(400);
	function assert(condition, msg1, msg2){
	  if(!condition)throw TypeError(msg2 ? msg1 + msg2 : msg1);
	}
	assert.def = $.assertDefined;
	assert.fn = function(it){
	  if(!$.isFunction(it))throw TypeError(it + ' is not a function!');
	  return it;
	};
	assert.obj = function(it){
	  if(!$.isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	assert.inst = function(it, Constructor, name){
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
	  return it;
	};
	module.exports = assert;

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var $ = __webpack_require__(400);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = $.toObject($this)
	      , length = $.toLength(O.length)
	      , index  = $.toIndex(fromIndex, length)
	      , value;
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 414 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function(regExp, replace, isStatic){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(isStatic ? it : this).replace(regExp, replacer);
	  };
	};

/***/ },
/* 415 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    exec();
	    return false;
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var $        = __webpack_require__(400)
	  , setTag   = __webpack_require__(403).set
	  , uid      = __webpack_require__(406)
	  , shared   = __webpack_require__(405)
	  , $def     = __webpack_require__(407)
	  , $redef   = __webpack_require__(408)
	  , keyOf    = __webpack_require__(417)
	  , enumKeys = __webpack_require__(418)
	  , assertObject = __webpack_require__(412).obj
	  , ObjectProto = Object.prototype
	  , DESC     = $.DESC
	  , has      = $.has
	  , $create  = $.create
	  , getDesc  = $.getDesc
	  , setDesc  = $.setDesc
	  , desc     = $.desc
	  , $names   = __webpack_require__(419)
	  , getNames = $names.get
	  , toObject = $.toObject
	  , $Symbol  = $.g.Symbol
	  , setter   = false
	  , TAG      = uid('tag')
	  , HIDDEN   = uid('hidden')
	  , _propertyIsEnumerable = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols = shared('symbols')
	  , useNative = $.isFunction($Symbol);

	var setSymbolDesc = DESC ? function(){ // fallback for old Android
	  try {
	    return $create(setDesc({}, HIDDEN, {
	      get: function(){
	        return setDesc(this, HIDDEN, {value: false})[HIDDEN];
	      }
	    }))[HIDDEN] || setDesc;
	  } catch(e){
	    return function(it, key, D){
	      var protoDesc = getDesc(ObjectProto, key);
	      if(protoDesc)delete ObjectProto[key];
	      setDesc(it, key, D);
	      if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
	    };
	  }
	}() : setDesc;

	function wrap(tag){
	  var sym = AllSymbols[tag] = $.set($create($Symbol.prototype), TAG, tag);
	  DESC && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, desc(1, value));
	    }
	  });
	  return sym;
	}

	function defineProperty(it, key, D){
	  if(D && has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, desc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = $create(D, {enumerable: desc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return setDesc(it, key, D);
	}
	function defineProperties(it, P){
	  assertObject(it);
	  var keys = enumKeys(P = toObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)defineProperty(it, key = keys[i++], P[key]);
	  return it;
	}
	function create(it, P){
	  return P === undefined ? $create(it) : defineProperties($create(it), P);
	}
	function propertyIsEnumerable(key){
	  var E = _propertyIsEnumerable.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
	    ? E : true;
	}
	function getOwnPropertyDescriptor(it, key){
	  var D = getDesc(it = toObject(it), key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	}
	function getOwnPropertyNames(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
	  return result;
	}
	function getOwnPropertySymbols(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	}

	// 19.4.1.1 Symbol([description])
	if(!useNative){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments[0]));
	  };
	  $redef($Symbol.prototype, 'toString', function(){
	    return this[TAG];
	  });

	  $.create     = create;
	  $.setDesc    = defineProperty;
	  $.getDesc    = getOwnPropertyDescriptor;
	  $.setDescs   = defineProperties;
	  $.getNames   = $names.get = getOwnPropertyNames;
	  $.getSymbols = getOwnPropertySymbols;

	  if($.DESC && $.FW)$redef(ObjectProto, 'propertyIsEnumerable', propertyIsEnumerable, true);
	}

	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call((
	    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
	    'species,split,toPrimitive,toStringTag,unscopables'
	  ).split(','), function(it){
	    var sym = __webpack_require__(404)(it);
	    symbolStatics[it] = useNative ? sym : wrap(sym);
	  }
	);

	setter = true;

	$def($def.G + $def.W, {Symbol: $Symbol});

	$def($def.S, 'Symbol', symbolStatics);

	$def($def.S + $def.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: getOwnPropertySymbols
	});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setTag($.g.JSON, 'JSON', true);

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(400);
	module.exports = function(object, el){
	  var O      = $.toObject(object)
	    , keys   = $.getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(400);
	module.exports = function(it){
	  var keys       = $.getKeys(it)
	    , getDesc    = $.getDesc
	    , getSymbols = $.getSymbols;
	  if(getSymbols)$.each.call(getSymbols(it), function(key){
	    if(getDesc(it, key).enumerable)keys.push(key);
	  });
	  return keys;
	};

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var $ = __webpack_require__(400)
	  , toString = {}.toString
	  , getNames = $.getNames;

	var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	function getWindowNames(it){
	  try {
	    return getNames(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	}

	module.exports.get = function getOwnPropertyNames(it){
	  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
	  return getNames($.toObject(it));
	};

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $def = __webpack_require__(407);
	$def($def.S, 'Object', {assign: __webpack_require__(421)});

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(400)
	  , enumKeys = __webpack_require__(418);
	// 19.1.2.1 Object.assign(target, source, ...)
	/* eslint-disable no-unused-vars */
	module.exports = Object.assign || function assign(target, source){
	/* eslint-enable no-unused-vars */
	  var T = Object($.assertDefined(target))
	    , l = arguments.length
	    , i = 1;
	  while(l > i){
	    var S      = $.ES5Object(arguments[i++])
	      , keys   = enumKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)T[key = keys[j++]] = S[key];
	  }
	  return T;
	};

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $def = __webpack_require__(407);
	$def($def.S, 'Object', {
	  is: __webpack_require__(423)
	});

/***/ },
/* 423 */
/***/ function(module, exports) {

	module.exports = Object.is || function is(x, y){
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $def = __webpack_require__(407);
	$def($def.S, 'Object', {setPrototypeOf: __webpack_require__(425).set});

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var $      = __webpack_require__(400)
	  , assert = __webpack_require__(412);
	function check(O, proto){
	  assert.obj(O);
	  assert(proto === null || $.isObject(proto), proto, ": can't set as prototype!");
	}
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
	    ? function(buggy, set){
	        try {
	          set = __webpack_require__(411)(Function.call, $.getDesc(Object.prototype, '__proto__').set, 2);
	          set({}, []);
	        } catch(e){ buggy = true; }
	        return function setPrototypeOf(O, proto){
	          check(O, proto);
	          if(buggy)O.__proto__ = proto;
	          else set(O, proto);
	          return O;
	        };
	      }()
	    : undefined),
	  check: check
	};

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(403)
	  , tmp = {};
	tmp[__webpack_require__(404)('toStringTag')] = 'z';
	if(__webpack_require__(400).FW && cof(tmp) != 'z'){
	  __webpack_require__(408)(Object.prototype, 'toString', function toString(){
	    return '[object ' + cof.classof(this) + ']';
	  }, true);
	}

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(400)
	  , $def     = __webpack_require__(407)
	  , isObject = $.isObject
	  , toObject = $.toObject;
	$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
	  'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
	, function(KEY, ID){
	  var fn     = ($.core.Object || {})[KEY] || Object[KEY]
	    , forced = 0
	    , method = {};
	  method[KEY] = ID == 0 ? function freeze(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 1 ? function seal(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 2 ? function preventExtensions(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 3 ? function isFrozen(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 4 ? function isSealed(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 5 ? function isExtensible(it){
	    return isObject(it) ? fn(it) : false;
	  } : ID == 6 ? function getOwnPropertyDescriptor(it, key){
	    return fn(toObject(it), key);
	  } : ID == 7 ? function getPrototypeOf(it){
	    return fn(Object($.assertDefined(it)));
	  } : ID == 8 ? function keys(it){
	    return fn(toObject(it));
	  } : __webpack_require__(419).get;
	  try {
	    fn('z');
	  } catch(e){
	    forced = 1;
	  }
	  $def($def.S + $def.F * forced, 'Object', method);
	});

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(400)
	  , NAME = 'name'
	  , setDesc = $.setDesc
	  , FunctionProto = Function.prototype;
	// 19.2.4.2 name
	NAME in FunctionProto || $.FW && $.DESC && setDesc(FunctionProto, NAME, {
	  configurable: true,
	  get: function(){
	    var match = String(this).match(/^\s*function ([^ (]*)/)
	      , name  = match ? match[1] : '';
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(5, name));
	    return name;
	  },
	  set: function(value){
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(0, value));
	  }
	});

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var $             = __webpack_require__(400)
	  , HAS_INSTANCE  = __webpack_require__(404)('hasInstance')
	  , FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(!$.isFunction(this) || !$.isObject(O))return false;
	  if(!$.isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = $.getProto(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $          = __webpack_require__(400)
	  , isObject   = $.isObject
	  , isFunction = $.isFunction
	  , NUMBER     = 'Number'
	  , $Number    = $.g[NUMBER]
	  , Base       = $Number
	  , proto      = $Number.prototype;
	function toPrimitive(it){
	  var fn, val;
	  if(isFunction(fn = it.valueOf) && !isObject(val = fn.call(it)))return val;
	  if(isFunction(fn = it.toString) && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to number");
	}
	function toNumber(it){
	  if(isObject(it))it = toPrimitive(it);
	  if(typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48){
	    var binary = false;
	    switch(it.charCodeAt(1)){
	      case 66 : case 98  : binary = true;
	      case 79 : case 111 : return parseInt(it.slice(2), binary ? 2 : 8);
	    }
	  } return +it;
	}
	if($.FW && !($Number('0o1') && $Number('0b1'))){
	  $Number = function Number(it){
	    return this instanceof $Number ? new Base(toNumber(it)) : toNumber(it);
	  };
	  $.each.call($.DESC ? $.getNames(Base) : (
	      // ES3:
	      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	      // ES6 (in case, if modules with ES6 Number statics required before):
	      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	    ).split(','), function(key){
	      if($.has(Base, key) && !$.has($Number, key)){
	        $.setDesc($Number, key, $.getDesc(Base, key));
	      }
	    }
	  );
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(408)($.g, NUMBER, $Number);
	}

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var $     = __webpack_require__(400)
	  , $def  = __webpack_require__(407)
	  , abs   = Math.abs
	  , floor = Math.floor
	  , _isFinite = $.g.isFinite
	  , MAX_SAFE_INTEGER = 0x1fffffffffffff; // pow(2, 53) - 1 == 9007199254740991;
	function isInteger(it){
	  return !$.isObject(it) && _isFinite(it) && floor(it) === it;
	}
	$def($def.S, 'Number', {
	  // 20.1.2.1 Number.EPSILON
	  EPSILON: Math.pow(2, -52),
	  // 20.1.2.2 Number.isFinite(number)
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  },
	  // 20.1.2.3 Number.isInteger(number)
	  isInteger: isInteger,
	  // 20.1.2.4 Number.isNaN(number)
	  isNaN: function isNaN(number){
	    return number != number;
	  },
	  // 20.1.2.5 Number.isSafeInteger(number)
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;
	  },
	  // 20.1.2.6 Number.MAX_SAFE_INTEGER
	  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
	  // 20.1.2.10 Number.MIN_SAFE_INTEGER
	  MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,
	  // 20.1.2.12 Number.parseFloat(string)
	  parseFloat: parseFloat,
	  // 20.1.2.13 Number.parseInt(string, radix)
	  parseInt: parseInt
	});

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	var Infinity = 1 / 0
	  , $def  = __webpack_require__(407)
	  , E     = Math.E
	  , pow   = Math.pow
	  , abs   = Math.abs
	  , exp   = Math.exp
	  , log   = Math.log
	  , sqrt  = Math.sqrt
	  , ceil  = Math.ceil
	  , floor = Math.floor
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	function roundTiesToEven(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	}

	// 20.2.2.28 Math.sign(x)
	function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	}
	// 20.2.2.5 Math.asinh(x)
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
	}
	// 20.2.2.14 Math.expm1(x)
	function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
	}

	$def($def.S, 'Math', {
	  // 20.2.2.3 Math.acosh(x)
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;
	  },
	  // 20.2.2.5 Math.asinh(x)
	  asinh: asinh,
	  // 20.2.2.7 Math.atanh(x)
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
	  },
	  // 20.2.2.9 Math.cbrt(x)
	  cbrt: function cbrt(x){
	    return sign(x = +x) * pow(abs(x), 1 / 3);
	  },
	  // 20.2.2.11 Math.clz32(x)
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * Math.LOG2E) : 32;
	  },
	  // 20.2.2.12 Math.cosh(x)
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  },
	  // 20.2.2.14 Math.expm1(x)
	  expm1: expm1,
	  // 20.2.2.16 Math.fround(x)
	  fround: function fround(x){
	    var $abs  = abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  },
	  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , len  = arguments.length
	      , larg = 0
	      , arg, div;
	    while(i < len){
	      arg = abs(arguments[i++]);
	      if(larg < arg){
	        div  = larg / arg;
	        sum  = sum * div * div + 1;
	        larg = arg;
	      } else if(arg > 0){
	        div  = arg / larg;
	        sum += div * div;
	      } else sum += arg;
	    }
	    return larg === Infinity ? Infinity : larg * sqrt(sum);
	  },
	  // 20.2.2.18 Math.imul(x, y)
	  imul: function imul(x, y){
	    var UInt16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UInt16 & xn
	      , yl = UInt16 & yn;
	    return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);
	  },
	  // 20.2.2.20 Math.log1p(x)
	  log1p: function log1p(x){
	    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
	  },
	  // 20.2.2.21 Math.log10(x)
	  log10: function log10(x){
	    return log(x) / Math.LN10;
	  },
	  // 20.2.2.22 Math.log2(x)
	  log2: function log2(x){
	    return log(x) / Math.LN2;
	  },
	  // 20.2.2.28 Math.sign(x)
	  sign: sign,
	  // 20.2.2.30 Math.sinh(x)
	  sinh: function sinh(x){
	    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
	  },
	  // 20.2.2.33 Math.tanh(x)
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  },
	  // 20.2.2.34 Math.trunc(x)
	  trunc: function trunc(it){
	    return (it > 0 ? floor : ceil)(it);
	  }
	});

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	var $def    = __webpack_require__(407)
	  , toIndex = __webpack_require__(400).toIndex
	  , fromCharCode = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res = []
	      , len = arguments.length
	      , i   = 0
	      , code;
	    while(len > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	var $    = __webpack_require__(400)
	  , $def = __webpack_require__(407);

	$def($def.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl = $.toObject(callSite.raw)
	      , len = $.toLength(tpl.length)
	      , sln = arguments.length
	      , res = []
	      , i   = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < sln)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	var set   = __webpack_require__(400).set
	  , $at   = __webpack_require__(436)(true)
	  , ITER  = __webpack_require__(406).safe('iter')
	  , $iter = __webpack_require__(437)
	  , step  = $iter.step;

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(438)(String, 'String', function(iterated){
	  set(this, ITER, {o: String(iterated), i: 0});
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var iter  = this[ITER]
	    , O     = iter.o
	    , index = iter.i
	    , point;
	  if(index >= O.length)return step(1);
	  point = $at(O, index);
	  iter.i += point.length;
	  return step(0, point);
	});

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	// true  -> String#at
	// false -> String#codePointAt
	var $ = __webpack_require__(400);
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String($.assertDefined(that))
	      , i = $.toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l
	      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	        ? TO_STRING ? s.charAt(i) : a
	        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $                 = __webpack_require__(400)
	  , cof               = __webpack_require__(403)
	  , classof           = cof.classof
	  , assert            = __webpack_require__(412)
	  , assertObject      = assert.obj
	  , SYMBOL_ITERATOR   = __webpack_require__(404)('iterator')
	  , FF_ITERATOR       = '@@iterator'
	  , Iterators         = __webpack_require__(405)('iterators')
	  , IteratorPrototype = {};
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	setIterator(IteratorPrototype, $.that);
	function setIterator(O, value){
	  $.hide(O, SYMBOL_ITERATOR, value);
	  // Add iterator for FF iterator protocol
	  if(FF_ITERATOR in [])$.hide(O, FF_ITERATOR, value);
	}

	module.exports = {
	  // Safari has buggy iterators w/o `next`
	  BUGGY: 'keys' in [] && !('next' in [].keys()),
	  Iterators: Iterators,
	  step: function(done, value){
	    return {value: value, done: !!done};
	  },
	  is: function(it){
	    var O      = Object(it)
	      , Symbol = $.g.Symbol;
	    return (Symbol && Symbol.iterator || FF_ITERATOR) in O
	      || SYMBOL_ITERATOR in O
	      || $.has(Iterators, classof(O));
	  },
	  get: function(it){
	    var Symbol = $.g.Symbol
	      , getIter;
	    if(it != undefined){
	      getIter = it[Symbol && Symbol.iterator || FF_ITERATOR]
	        || it[SYMBOL_ITERATOR]
	        || Iterators[classof(it)];
	    }
	    assert($.isFunction(getIter), it, ' is not iterable!');
	    return assertObject(getIter.call(it));
	  },
	  set: setIterator,
	  create: function(Constructor, NAME, next, proto){
	    Constructor.prototype = $.create(proto || IteratorPrototype, {next: $.desc(1, next)});
	    cof.set(Constructor, NAME + ' Iterator');
	  }
	};

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	var $def            = __webpack_require__(407)
	  , $redef          = __webpack_require__(408)
	  , $               = __webpack_require__(400)
	  , cof             = __webpack_require__(403)
	  , $iter           = __webpack_require__(437)
	  , SYMBOL_ITERATOR = __webpack_require__(404)('iterator')
	  , FF_ITERATOR     = '@@iterator'
	  , KEYS            = 'keys'
	  , VALUES          = 'values'
	  , Iterators       = $iter.Iterators;
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
	  $iter.create(Constructor, NAME, next);
	  function createMethod(kind){
	    function $$(that){
	      return new Constructor(that, kind);
	    }
	    switch(kind){
	      case KEYS: return function keys(){ return $$(this); };
	      case VALUES: return function values(){ return $$(this); };
	    } return function entries(){ return $$(this); };
	  }
	  var TAG      = NAME + ' Iterator'
	    , proto    = Base.prototype
	    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , _default = _native || createMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if(_native){
	    var IteratorPrototype = $.getProto(_default.call(new Base));
	    // Set @@toStringTag to native iterators
	    cof.set(IteratorPrototype, TAG, true);
	    // FF fix
	    if($.FW && $.has(proto, FF_ITERATOR))$iter.set(IteratorPrototype, $.that);
	  }
	  // Define iterator
	  if($.FW || FORCE)$iter.set(proto, _default);
	  // Plug for library
	  Iterators[NAME] = _default;
	  Iterators[TAG]  = $.that;
	  if(DEFAULT){
	    methods = {
	      keys:    IS_SET            ? _default : createMethod(KEYS),
	      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
	      entries: DEFAULT != VALUES ? _default : createMethod('entries')
	    };
	    if(FORCE)for(key in methods){
	      if(!(key in proto))$redef(proto, key, methods[key]);
	    } else $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
	  }
	};

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(407)
	  , $at  = __webpack_require__(436)(false);
	$def($def.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(400)
	  , cof  = __webpack_require__(403)
	  , $def = __webpack_require__(407)
	  , toLength = $.toLength;

	// should throw error on regex
	$def($def.P + $def.F * !__webpack_require__(415)(function(){ 'q'.endsWith(/./); }), 'String', {
	  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    var that = String($.assertDefined(this))
	      , endPosition = arguments[1]
	      , len = toLength(that.length)
	      , end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    searchString += '';
	    return that.slice(end - searchString.length, end) === searchString;
	  }
	});

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(400)
	  , cof  = __webpack_require__(403)
	  , $def = __webpack_require__(407);

	$def($def.P, 'String', {
	  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
	  includes: function includes(searchString /*, position = 0 */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    return !!~String($.assertDefined(this)).indexOf(searchString, arguments[1]);
	  }
	});

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(407);

	$def($def.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(443)
	});

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(400);

	module.exports = function repeat(count){
	  var str = String($.assertDefined(this))
	    , res = ''
	    , n   = $.toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(400)
	  , cof  = __webpack_require__(403)
	  , $def = __webpack_require__(407);

	// should throw error on regex
	$def($def.P + $def.F * !__webpack_require__(415)(function(){ 'q'.startsWith(/./); }), 'String', {
	  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    var that  = String($.assertDefined(this))
	      , index = $.toLength(Math.min(arguments[1], that.length));
	    searchString += '';
	    return that.slice(index, index + searchString.length) === searchString;
	  }
	});

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	var $     = __webpack_require__(400)
	  , ctx   = __webpack_require__(411)
	  , $def  = __webpack_require__(407)
	  , $iter = __webpack_require__(437)
	  , call  = __webpack_require__(446);
	$def($def.S + $def.F * !__webpack_require__(447)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = Object($.assertDefined(arrayLike))
	      , mapfn   = arguments[1]
	      , mapping = mapfn !== undefined
	      , f       = mapping ? ctx(mapfn, arguments[2], 2) : undefined
	      , index   = 0
	      , length, result, step, iterator;
	    if($iter.is(O)){
	      iterator = $iter.get(O);
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result   = new (typeof this == 'function' ? this : Array);
	      for(; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, f, [step.value, index], true) : step.value;
	      }
	    } else {
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result = new (typeof this == 'function' ? this : Array)(length = $.toLength(O.length));
	      for(; length > index; index++){
	        result[index] = mapping ? f(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	var assertObject = __webpack_require__(412).obj;
	function close(iterator){
	  var ret = iterator['return'];
	  if(ret !== undefined)assertObject(ret.call(iterator));
	}
	function call(iterator, fn, value, entries){
	  try {
	    return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
	  } catch(e){
	    close(iterator);
	    throw e;
	  }
	}
	call.close = close;
	module.exports = call;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	var SYMBOL_ITERATOR = __webpack_require__(404)('iterator')
	  , SAFE_CLOSING    = false;
	try {
	  var riter = [7][SYMBOL_ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	module.exports = function(exec){
	  if(!SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[SYMBOL_ITERATOR]();
	    iter.next = function(){ safe = true; };
	    arr[SYMBOL_ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(407);
	$def($def.S, 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , length = arguments.length
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      , result = new (typeof this == 'function' ? this : Array)(length);
	    while(length > index)result[index] = arguments[index++];
	    result.length = length;
	    return result;
	  }
	});

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(400)
	  , setUnscope = __webpack_require__(450)
	  , ITER       = __webpack_require__(406).safe('iter')
	  , $iter      = __webpack_require__(437)
	  , step       = $iter.step
	  , Iterators  = $iter.Iterators;

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	__webpack_require__(438)(Array, 'Array', function(iterated, kind){
	  $.set(this, ITER, {o: $.toObject(iterated), i: 0, k: kind});
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var iter  = this[ITER]
	    , O     = iter.o
	    , kind  = iter.k
	    , index = iter.i++;
	  if(!O || index >= O.length){
	    iter.o = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	setUnscope('keys');
	setUnscope('values');
	setUnscope('entries');

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(404)('unscopables');
	if(!(UNSCOPABLES in []))__webpack_require__(400).hide(Array.prototype, UNSCOPABLES, {});
	module.exports = function(key){
	  [][UNSCOPABLES][key] = true;
	};

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(452)(Array);

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	var $       = __webpack_require__(400)
	  , SPECIES = __webpack_require__(404)('species');
	module.exports = function(C){
	  if($.DESC && !(SPECIES in C))$.setDesc(C, SPECIES, {
	    configurable: true,
	    get: $.that
	  });
	};

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $       = __webpack_require__(400)
	  , $def    = __webpack_require__(407)
	  , toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	  copyWithin: function copyWithin(target/* = 0 */, start /* = 0, end = @length */){
	    var O     = Object($.assertDefined(this))
	      , len   = $.toLength(O.length)
	      , to    = toIndex(target, len)
	      , from  = toIndex(start, len)
	      , end   = arguments[2]
	      , fin   = end === undefined ? len : toIndex(end, len)
	      , count = Math.min(fin - from, len - to)
	      , inc   = 1;
	    if(from < to && to < from + count){
	      inc  = -1;
	      from = from + count - 1;
	      to   = to   + count - 1;
	    }
	    while(count-- > 0){
	      if(from in O)O[to] = O[from];
	      else delete O[to];
	      to   += inc;
	      from += inc;
	    } return O;
	  }
	});
	__webpack_require__(450)('copyWithin');

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $       = __webpack_require__(400)
	  , $def    = __webpack_require__(407)
	  , toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	  fill: function fill(value /*, start = 0, end = @length */){
	    var O      = Object($.assertDefined(this))
	      , length = $.toLength(O.length)
	      , index  = toIndex(arguments[1], length)
	      , end    = arguments[2]
	      , endPos = end === undefined ? length : toIndex(end, length);
	    while(endPos > index)O[index++] = value;
	    return O;
	  }
	});
	__webpack_require__(450)('fill');

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var KEY    = 'find'
	  , $def   = __webpack_require__(407)
	  , forced = true
	  , $find  = __webpack_require__(410)(5);
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$def($def.P + $def.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	__webpack_require__(450)(KEY);

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var KEY    = 'findIndex'
	  , $def   = __webpack_require__(407)
	  , forced = true
	  , $find  = __webpack_require__(410)(6);
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$def($def.P + $def.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	__webpack_require__(450)(KEY);

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var $       = __webpack_require__(400)
	  , cof     = __webpack_require__(403)
	  , $RegExp = $.g.RegExp
	  , Base    = $RegExp
	  , proto   = $RegExp.prototype
	  , re      = /a/g
	  // "new" creates a new object
	  , CORRECT_NEW = new $RegExp(re) !== re
	  // RegExp allows a regex with flags as the pattern
	  , ALLOWS_RE_WITH_FLAGS = function(){
	    try {
	      return $RegExp(re, 'i') == '/a/i';
	    } catch(e){ /* empty */ }
	  }();
	if($.FW && $.DESC){
	  if(!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS){
	    $RegExp = function RegExp(pattern, flags){
	      var patternIsRegExp  = cof(pattern) == 'RegExp'
	        , flagsIsUndefined = flags === undefined;
	      if(!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined)return pattern;
	      return CORRECT_NEW
	        ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags)
	        : new Base(patternIsRegExp ? pattern.source : pattern
	          , patternIsRegExp && flagsIsUndefined ? pattern.flags : flags);
	    };
	    $.each.call($.getNames(Base), function(key){
	      key in $RegExp || $.setDesc($RegExp, key, {
	        configurable: true,
	        get: function(){ return Base[key]; },
	        set: function(it){ Base[key] = it; }
	      });
	    });
	    proto.constructor = $RegExp;
	    $RegExp.prototype = proto;
	    __webpack_require__(408)($.g, 'RegExp', $RegExp);
	  }
	  // 21.2.5.3 get RegExp.prototype.flags()
	  if(/./g.flags != 'g')$.setDesc(proto, 'flags', {
	    configurable: true,
	    get: __webpack_require__(414)(/^.*\/(\w*)$/, '$1')
	  });
	}
	__webpack_require__(452)($RegExp);

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $        = __webpack_require__(400)
	  , ctx      = __webpack_require__(411)
	  , cof      = __webpack_require__(403)
	  , $def     = __webpack_require__(407)
	  , assert   = __webpack_require__(412)
	  , forOf    = __webpack_require__(459)
	  , setProto = __webpack_require__(425).set
	  , same     = __webpack_require__(423)
	  , species  = __webpack_require__(452)
	  , SPECIES  = __webpack_require__(404)('species')
	  , RECORD   = __webpack_require__(406).safe('record')
	  , PROMISE  = 'Promise'
	  , global   = $.g
	  , process  = global.process
	  , isNode   = cof(process) == 'process'
	  , asap     = process && process.nextTick || __webpack_require__(460).set
	  , P        = global[PROMISE]
	  , isFunction     = $.isFunction
	  , isObject       = $.isObject
	  , assertFunction = assert.fn
	  , assertObject   = assert.obj
	  , Wrapper;

	function testResolve(sub){
	  var test = new P(function(){});
	  if(sub)test.constructor = Object;
	  return P.resolve(test) === test;
	}

	var useNative = function(){
	  var works = false;
	  function P2(x){
	    var self = new P(x);
	    setProto(self, P2.prototype);
	    return self;
	  }
	  try {
	    works = isFunction(P) && isFunction(P.resolve) && testResolve();
	    setProto(P2, P);
	    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
	    // actual Firefox has broken subclass support, test that
	    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
	      works = false;
	    }
	    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162
	    if(works && $.DESC){
	      var thenableThenGotten = false;
	      P.resolve($.setDesc({}, 'then', {
	        get: function(){ thenableThenGotten = true; }
	      }));
	      works = thenableThenGotten;
	    }
	  } catch(e){ works = false; }
	  return works;
	}();

	// helpers
	function isPromise(it){
	  return isObject(it) && (useNative ? cof.classof(it) == 'Promise' : RECORD in it);
	}
	function sameConstructor(a, b){
	  // library wrapper special case
	  if(!$.FW && a === P && b === Wrapper)return true;
	  return same(a, b);
	}
	function getConstructor(C){
	  var S = assertObject(C)[SPECIES];
	  return S != undefined ? S : C;
	}
	function isThenable(it){
	  var then;
	  if(isObject(it))then = it.then;
	  return isFunction(then) ? then : false;
	}
	function notify(record){
	  var chain = record.c;
	  // strange IE + webpack dev server bug - use .call(global)
	  if(chain.length)asap.call(global, function(){
	    var value = record.v
	      , ok    = record.s == 1
	      , i     = 0;
	    function run(react){
	      var cb = ok ? react.ok : react.fail
	        , ret, then;
	      try {
	        if(cb){
	          if(!ok)record.h = true;
	          ret = cb === true ? value : cb(value);
	          if(ret === react.P){
	            react.rej(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(ret)){
	            then.call(ret, react.res, react.rej);
	          } else react.res(ret);
	        } else react.rej(value);
	      } catch(err){
	        react.rej(err);
	      }
	    }
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    chain.length = 0;
	  });
	}
	function isUnhandled(promise){
	  var record = promise[RECORD]
	    , chain  = record.a || record.c
	    , i      = 0
	    , react;
	  if(record.h)return false;
	  while(chain.length > i){
	    react = chain[i++];
	    if(react.fail || !isUnhandled(react.P))return false;
	  } return true;
	}
	function $reject(value){
	  var record = this
	    , promise;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  record.v = value;
	  record.s = 2;
	  record.a = record.c.slice();
	  setTimeout(function(){
	    // strange IE + webpack dev server bug - use .call(global)
	    asap.call(global, function(){
	      if(isUnhandled(promise = record.p)){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(global.console && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      }
	      record.a = undefined;
	    });
	  }, 1);
	  notify(record);
	}
	function $resolve(value){
	  var record = this
	    , then;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  try {
	    if(then = isThenable(value)){
	      // strange IE + webpack dev server bug - use .call(global)
	      asap.call(global, function(){
	        var wrapper = {r: record, d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      record.v = value;
	      record.s = 1;
	      notify(record);
	    }
	  } catch(e){
	    $reject.call({r: record, d: false}, e); // wrap
	  }
	}

	// constructor polyfill
	if(!useNative){
	  // 25.4.3.1 Promise(executor)
	  P = function Promise(executor){
	    assertFunction(executor);
	    var record = {
	      p: assert.inst(this, P, PROMISE),       // <- promise
	      c: [],                                  // <- awaiting reactions
	      a: undefined,                           // <- checked in isUnhandled reactions
	      s: 0,                                   // <- state
	      d: false,                               // <- done
	      v: undefined,                           // <- value
	      h: false                                // <- handled rejection
	    };
	    $.hide(this, RECORD, record);
	    try {
	      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
	    } catch(err){
	      $reject.call(record, err);
	    }
	  };
	  __webpack_require__(461)(P.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var S = assertObject(assertObject(this).constructor)[SPECIES];
	      var react = {
	        ok:   isFunction(onFulfilled) ? onFulfilled : true,
	        fail: isFunction(onRejected)  ? onRejected  : false
	      };
	      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
	        react.res = assertFunction(res);
	        react.rej = assertFunction(rej);
	      });
	      var record = this[RECORD];
	      record.c.push(react);
	      if(record.a)record.a.push(react);
	      if(record.s)notify(record);
	      return promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	}

	// export
	$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
	cof.set(P, PROMISE);
	species(P);
	species(Wrapper = $.core[PROMISE]);

	// statics
	$def($def.S + $def.F * !useNative, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    return new (getConstructor(this))(function(res, rej){ rej(r); });
	  }
	});
	$def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    return isPromise(x) && sameConstructor(x.constructor, this)
	      ? x : new this(function(res){ res(x); });
	  }
	});
	$def($def.S + $def.F * !(useNative && __webpack_require__(447)(function(iter){
	  P.all(iter)['catch'](function(){});
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C      = getConstructor(this)
	      , values = [];
	    return new C(function(res, rej){
	      forOf(iterable, false, values.push, values);
	      var remaining = values.length
	        , results   = Array(remaining);
	      if(remaining)$.each.call(values, function(promise, index){
	        C.resolve(promise).then(function(value){
	          results[index] = value;
	          --remaining || res(results);
	        }, rej);
	      });
	      else res(results);
	    });
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C = getConstructor(this);
	    return new C(function(res, rej){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(res, rej);
	      });
	    });
	  }
	});

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	var ctx  = __webpack_require__(411)
	  , get  = __webpack_require__(437).get
	  , call = __webpack_require__(446);
	module.exports = function(iterable, entries, fn, that){
	  var iterator = get(iterable)
	    , f        = ctx(fn, that, entries ? 2 : 1)
	    , step;
	  while(!(step = iterator.next()).done){
	    if(call(iterator, f, step.value, entries) === false){
	      return call.close(iterator);
	    }
	  }
	};

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $      = __webpack_require__(400)
	  , ctx    = __webpack_require__(411)
	  , cof    = __webpack_require__(403)
	  , invoke = __webpack_require__(409)
	  , cel    = __webpack_require__(402)
	  , global             = $.g
	  , isFunction         = $.isFunction
	  , html               = $.html
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	function run(){
	  var id = +this;
	  if($.has(queue, id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	}
	function listner(event){
	  run.call(event.data);
	}
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!isFunction(setTask) || !isFunction(clearTask)){
	  setTask = function(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(isFunction(fn) ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(cof(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Modern browsers, skip implementation for WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is object
	  } else if(global.addEventListener && isFunction(global.postMessage) && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id, '*');
	    };
	    global.addEventListener('message', listner, false);
	  // WebWorkers
	  } else if(isFunction(MessageChannel)){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listner;
	    defer = ctx(port.postMessage, port, 1);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	var $redef = __webpack_require__(408);
	module.exports = function(target, src){
	  for(var key in src)$redef(target, key, src[key]);
	  return target;
	};

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(463);

	// 23.1 Map Objects
	__webpack_require__(464)('Map', function(get){
	  return function Map(){ return get(this, arguments[0]); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $        = __webpack_require__(400)
	  , ctx      = __webpack_require__(411)
	  , safe     = __webpack_require__(406).safe
	  , assert   = __webpack_require__(412)
	  , forOf    = __webpack_require__(459)
	  , step     = __webpack_require__(437).step
	  , $has     = $.has
	  , set      = $.set
	  , isObject = $.isObject
	  , hide     = $.hide
	  , isExtensible = Object.isExtensible || isObject
	  , ID       = safe('id')
	  , O1       = safe('O1')
	  , LAST     = safe('last')
	  , FIRST    = safe('first')
	  , ITER     = safe('iter')
	  , SIZE     = $.DESC ? safe('size') : 'size'
	  , id       = 0;

	function fastKey(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!$has(it, ID)){
	    // can't set id to frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add id
	    if(!create)return 'E';
	    // add missing object id
	    hide(it, ID, ++id);
	  // return object id with prefix
	  } return 'O' + it[ID];
	}

	function getEntry(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that[O1][index];
	  // frozen object case
	  for(entry = that[FIRST]; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	}

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      assert.inst(that, C, NAME);
	      set(that, O1, $.create(null));
	      set(that, SIZE, 0);
	      set(that, LAST, undefined);
	      set(that, FIRST, undefined);
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    __webpack_require__(461)(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that[FIRST] = that[LAST] = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that[O1][entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that[FIRST] == entry)that[FIRST] = next;
	          if(that[LAST] == entry)that[LAST] = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        var f = ctx(callbackfn, arguments[1], 3)
	          , entry;
	        while(entry = entry ? entry.n : this[FIRST]){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if($.DESC)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return assert.def(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that[LAST] = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that[LAST],          // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that[FIRST])that[FIRST] = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that[O1][index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  // add .keys, .values, .entries, [@@iterator]
	  // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	  setIter: function(C, NAME, IS_MAP){
	    __webpack_require__(438)(C, NAME, function(iterated, kind){
	      set(this, ITER, {o: iterated, k: kind});
	    }, function(){
	      var iter  = this[ITER]
	        , kind  = iter.k
	        , entry = iter.l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])){
	        // or finish the iteration
	        iter.o = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	  }
	};

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $     = __webpack_require__(400)
	  , $def  = __webpack_require__(407)
	  , BUGGY = __webpack_require__(437).BUGGY
	  , forOf = __webpack_require__(459)
	  , species = __webpack_require__(452)
	  , assertInstance = __webpack_require__(412).inst;

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = $.g[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  function fixMethod(KEY){
	    var fn = proto[KEY];
	    __webpack_require__(408)(proto, KEY,
	      KEY == 'delete' ? function(a){ return fn.call(this, a === 0 ? 0 : a); }
	      : KEY == 'has' ? function has(a){ return fn.call(this, a === 0 ? 0 : a); }
	      : KEY == 'get' ? function get(a){ return fn.call(this, a === 0 ? 0 : a); }
	      : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	      : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  }
	  if(!$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    __webpack_require__(461)(C.prototype, methods);
	  } else {
	    var inst  = new C
	      , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)
	      , buggyZero;
	    // wrap for init collections from iterable
	    if(!__webpack_require__(447)(function(iter){ new C(iter); })){ // eslint-disable-line no-new
	      C = wrapper(function(target, iterable){
	        assertInstance(target, C, NAME);
	        var that = new Base;
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    IS_WEAK || inst.forEach(function(val, key){
	      buggyZero = 1 / key === -Infinity;
	    });
	    // fix converting -0 key to +0
	    if(buggyZero){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    // + fix .add & .set for chaining
	    if(buggyZero || chain !== inst)fixMethod(ADDER);
	  }

	  __webpack_require__(403).set(C, NAME);

	  O[NAME] = C;
	  $def($def.G + $def.W + $def.F * (C != Base), O);
	  species(C);
	  species($.core[NAME]); // for wrapper

	  if(!IS_WEAK)common.setIter(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(463);

	// 23.2 Set Objects
	__webpack_require__(464)('Set', function(get){
	  return function Set(){ return get(this, arguments[0]); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $         = __webpack_require__(400)
	  , weak      = __webpack_require__(467)
	  , leakStore = weak.leakStore
	  , ID        = weak.ID
	  , WEAK      = weak.WEAK
	  , has       = $.has
	  , isObject  = $.isObject
	  , isExtensible = Object.isExtensible || isObject
	  , tmp       = {};

	// 23.3 WeakMap Objects
	var $WeakMap = __webpack_require__(464)('WeakMap', function(get){
	  return function WeakMap(){ return get(this, arguments[0]); };
	}, {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      if(!isExtensible(key))return leakStore(this).get(key);
	      if(has(key, WEAK))return key[WEAK][this[ID]];
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	}, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  $.each.call(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    __webpack_require__(408)(proto, key, function(a, b){
	      // store frozen objects on leaky map
	      if(isObject(a) && !isExtensible(a)){
	        var result = leakStore(this)[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $         = __webpack_require__(400)
	  , safe      = __webpack_require__(406).safe
	  , assert    = __webpack_require__(412)
	  , forOf     = __webpack_require__(459)
	  , $has      = $.has
	  , isObject  = $.isObject
	  , hide      = $.hide
	  , isExtensible = Object.isExtensible || isObject
	  , id        = 0
	  , ID        = safe('id')
	  , WEAK      = safe('weak')
	  , LEAK      = safe('leak')
	  , method    = __webpack_require__(410)
	  , find      = method(5)
	  , findIndex = method(6);
	function findFrozen(store, key){
	  return find(store.array, function(it){
	    return it[0] === key;
	  });
	}
	// fallback for frozen keys
	function leakStore(that){
	  return that[LEAK] || hide(that, LEAK, {
	    array: [],
	    get: function(key){
	      var entry = findFrozen(this, key);
	      if(entry)return entry[1];
	    },
	    has: function(key){
	      return !!findFrozen(this, key);
	    },
	    set: function(key, value){
	      var entry = findFrozen(this, key);
	      if(entry)entry[1] = value;
	      else this.array.push([key, value]);
	    },
	    'delete': function(key){
	      var index = findIndex(this.array, function(it){
	        return it[0] === key;
	      });
	      if(~index)this.array.splice(index, 1);
	      return !!~index;
	    }
	  })[LEAK];
	}

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      $.set(assert.inst(that, C, NAME), ID, id++);
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    __webpack_require__(461)(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        if(!isExtensible(key))return leakStore(this)['delete'](key);
	        return $has(key, WEAK) && $has(key[WEAK], this[ID]) && delete key[WEAK][this[ID]];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        if(!isExtensible(key))return leakStore(this).has(key);
	        return $has(key, WEAK) && $has(key[WEAK], this[ID]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    if(!isExtensible(assert.obj(key))){
	      leakStore(that).set(key, value);
	    } else {
	      $has(key, WEAK) || hide(key, WEAK, {});
	      key[WEAK][that[ID]] = value;
	    } return that;
	  },
	  leakStore: leakStore,
	  WEAK: WEAK,
	  ID: ID
	};

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(467);

	// 23.4 WeakSet Objects
	__webpack_require__(464)('WeakSet', function(get){
	  return function WeakSet(){ return get(this, arguments[0]); };
	}, {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	var $         = __webpack_require__(400)
	  , $def      = __webpack_require__(407)
	  , setProto  = __webpack_require__(425)
	  , $iter     = __webpack_require__(437)
	  , ITERATOR  = __webpack_require__(404)('iterator')
	  , ITER      = __webpack_require__(406).safe('iter')
	  , step      = $iter.step
	  , assert    = __webpack_require__(412)
	  , isObject  = $.isObject
	  , getProto  = $.getProto
	  , $Reflect  = $.g.Reflect
	  , _apply    = Function.apply
	  , assertObject = assert.obj
	  , _isExtensible = Object.isExtensible || isObject
	  , _preventExtensions = Object.preventExtensions
	  // IE TP has broken Reflect.enumerate
	  , buggyEnumerate = !($Reflect && $Reflect.enumerate && ITERATOR in $Reflect.enumerate({}));

	function Enumerate(iterated){
	  $.set(this, ITER, {o: iterated, k: undefined, i: 0});
	}
	$iter.create(Enumerate, 'Object', function(){
	  var iter = this[ITER]
	    , keys = iter.k
	    , key;
	  if(keys == undefined){
	    iter.k = keys = [];
	    for(key in iter.o)keys.push(key);
	  }
	  do {
	    if(iter.i >= keys.length)return step(1);
	  } while(!((key = keys[iter.i++]) in iter.o));
	  return step(0, key);
	});

	var reflect = {
	  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	  apply: function apply(target, thisArgument, argumentsList){
	    return _apply.call(target, thisArgument, argumentsList);
	  },
	  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	  construct: function construct(target, argumentsList /*, newTarget*/){
	    var proto    = assert.fn(arguments.length < 3 ? target : arguments[2]).prototype
	      , instance = $.create(isObject(proto) ? proto : Object.prototype)
	      , result   = _apply.call(target, instance, argumentsList);
	    return isObject(result) ? result : instance;
	  },
	  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    assertObject(target);
	    try {
	      $.setDesc(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  },
	  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = $.getDesc(assertObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  },
	  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
	  get: function get(target, propertyKey/*, receiver*/){
	    var receiver = arguments.length < 3 ? target : arguments[2]
	      , desc = $.getDesc(assertObject(target), propertyKey), proto;
	    if(desc)return $.has(desc, 'value')
	      ? desc.value
	      : desc.get === undefined
	        ? undefined
	        : desc.get.call(receiver);
	    return isObject(proto = getProto(target))
	      ? get(proto, propertyKey, receiver)
	      : undefined;
	  },
	  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return $.getDesc(assertObject(target), propertyKey);
	  },
	  // 26.1.8 Reflect.getPrototypeOf(target)
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(assertObject(target));
	  },
	  // 26.1.9 Reflect.has(target, propertyKey)
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  },
	  // 26.1.10 Reflect.isExtensible(target)
	  isExtensible: function isExtensible(target){
	    return _isExtensible(assertObject(target));
	  },
	  // 26.1.11 Reflect.ownKeys(target)
	  ownKeys: __webpack_require__(470),
	  // 26.1.12 Reflect.preventExtensions(target)
	  preventExtensions: function preventExtensions(target){
	    assertObject(target);
	    try {
	      if(_preventExtensions)_preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  },
	  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	  set: function set(target, propertyKey, V/*, receiver*/){
	    var receiver = arguments.length < 4 ? target : arguments[3]
	      , ownDesc  = $.getDesc(assertObject(target), propertyKey)
	      , existingDescriptor, proto;
	    if(!ownDesc){
	      if(isObject(proto = getProto(target))){
	        return set(proto, propertyKey, V, receiver);
	      }
	      ownDesc = $.desc(0);
	    }
	    if($.has(ownDesc, 'value')){
	      if(ownDesc.writable === false || !isObject(receiver))return false;
	      existingDescriptor = $.getDesc(receiver, propertyKey) || $.desc(0);
	      existingDescriptor.value = V;
	      $.setDesc(receiver, propertyKey, existingDescriptor);
	      return true;
	    }
	    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	  }
	};
	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	if(setProto)reflect.setPrototypeOf = function setPrototypeOf(target, proto){
	  setProto.check(target, proto);
	  try {
	    setProto.set(target, proto);
	    return true;
	  } catch(e){
	    return false;
	  }
	};

	$def($def.G, {Reflect: {}});

	$def($def.S + $def.F * buggyEnumerate, 'Reflect', {
	  // 26.1.5 Reflect.enumerate(target)
	  enumerate: function enumerate(target){
	    return new Enumerate(assertObject(target));
	  }
	});

	$def($def.S, 'Reflect', reflect);

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	var $            = __webpack_require__(400)
	  , assertObject = __webpack_require__(412).obj;
	module.exports = function ownKeys(it){
	  assertObject(it);
	  var keys       = $.getNames(it)
	    , getSymbols = $.getSymbols;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def      = __webpack_require__(407)
	  , $includes = __webpack_require__(413)(true);
	$def($def.P, 'Array', {
	  // https://github.com/domenic/Array.prototype.includes
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments[1]);
	  }
	});
	__webpack_require__(450)('includes');

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/mathiasbynens/String.prototype.at
	'use strict';
	var $def = __webpack_require__(407)
	  , $at  = __webpack_require__(436)(true);
	$def($def.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(407)
	  , $pad = __webpack_require__(474);
	$def($def.P, 'String', {
	  lpad: function lpad(n){
	    return $pad(this, n, arguments[1], true);
	  }
	});

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.ecmascript.org/doku.php?id=strawman:string_padding
	var $      = __webpack_require__(400)
	  , repeat = __webpack_require__(443);

	module.exports = function(that, minLength, fillChar, left){
	  // 1. Let O be CheckObjectCoercible(this value).
	  // 2. Let S be ToString(O).
	  var S = String($.assertDefined(that));
	  // 4. If intMinLength is undefined, return S.
	  if(minLength === undefined)return S;
	  // 4. Let intMinLength be ToInteger(minLength).
	  var intMinLength = $.toInteger(minLength);
	  // 5. Let fillLen be the number of characters in S minus intMinLength.
	  var fillLen = intMinLength - S.length;
	  // 6. If fillLen < 0, then throw a RangeError exception.
	  // 7. If fillLen is +∞, then throw a RangeError exception.
	  if(fillLen < 0 || fillLen === Infinity){
	    throw new RangeError('Cannot satisfy string length ' + minLength + ' for string: ' + S);
	  }
	  // 8. Let sFillStr be the string represented by fillStr.
	  // 9. If sFillStr is undefined, let sFillStr be a space character.
	  var sFillStr = fillChar === undefined ? ' ' : String(fillChar);
	  // 10. Let sFillVal be a String made of sFillStr, repeated until fillLen is met.
	  var sFillVal = repeat.call(sFillStr, Math.ceil(fillLen / sFillStr.length));
	  // truncate if we overflowed
	  if(sFillVal.length > fillLen)sFillVal = left
	    ? sFillVal.slice(sFillVal.length - fillLen)
	    : sFillVal.slice(0, fillLen);
	  // 11. Return a string made from sFillVal, followed by S.
	  // 11. Return a String made from S, followed by sFillVal.
	  return left ? sFillVal.concat(S) : S.concat(sFillVal);
	};

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(407)
	  , $pad = __webpack_require__(474);
	$def($def.P, 'String', {
	  rpad: function rpad(n){
	    return $pad(this, n, arguments[1], false);
	  }
	});

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/benjamingr/RexExp.escape
	var $def = __webpack_require__(407);
	$def($def.S, 'RegExp', {
	  escape: __webpack_require__(414)(/[\\^$*+?.()|[\]{}]/g, '\\$&', true)
	});


/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/WebReflection/9353781
	var $       = __webpack_require__(400)
	  , $def    = __webpack_require__(407)
	  , ownKeys = __webpack_require__(470);

	$def($def.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O      = $.toObject(object)
	      , result = {};
	    $.each.call(ownKeys(O), function(key){
	      $.setDesc(result, key, $.desc(0, $.getDesc(O, key)));
	    });
	    return result;
	  }
	});

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	// http://goo.gl/XkBrjD
	var $    = __webpack_require__(400)
	  , $def = __webpack_require__(407);
	function createObjectToArray(isEntries){
	  return function(object){
	    var O      = $.toObject(object)
	      , keys   = $.getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = Array(length)
	      , key;
	    if(isEntries)while(length > i)result[i] = [key = keys[i++], O[key]];
	    else while(length > i)result[i] = O[keys[i++]];
	    return result;
	  };
	}
	$def($def.S, 'Object', {
	  values:  createObjectToArray(false),
	  entries: createObjectToArray(true)
	});

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	__webpack_require__(480)('Map');

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $def  = __webpack_require__(407)
	  , forOf = __webpack_require__(459);
	module.exports = function(NAME){
	  $def($def.P, NAME, {
	    toJSON: function toJSON(){
	      var arr = [];
	      forOf(this, false, arr.push, arr);
	      return arr;
	    }
	  });
	};

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	__webpack_require__(480)('Set');

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	// JavaScript 1.6 / Strawman array statics shim
	var $       = __webpack_require__(400)
	  , $def    = __webpack_require__(407)
	  , $Array  = $.core.Array || Array
	  , statics = {};
	function setStatics(keys, length){
	  $.each.call(keys.split(','), function(key){
	    if(length == undefined && key in $Array)statics[key] = $Array[key];
	    else if(key in [])statics[key] = __webpack_require__(411)(Function.call, [][key], length);
	  });
	}
	setStatics('pop,reverse,shift,keys,values,entries', 1);
	setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
	setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
	           'reduce,reduceRight,copyWithin,fill,turn');
	$def($def.S, 'Array', statics);

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var $         = __webpack_require__(400)
	  , $def      = __webpack_require__(407)
	  , invoke    = __webpack_require__(409)
	  , partial   = __webpack_require__(484)
	  , navigator = $.g.navigator
	  , MSIE      = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	function wrap(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      $.isFunction(fn) ? fn : Function(fn)
	    ), time);
	  } : set;
	}
	$def($def.G + $def.B + $def.F * MSIE, {
	  setTimeout:  wrap($.g.setTimeout),
	  setInterval: wrap($.g.setInterval)
	});

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $      = __webpack_require__(400)
	  , invoke = __webpack_require__(409)
	  , assertFunction = __webpack_require__(412).fn;
	module.exports = function(/* ...pargs */){
	  var fn     = assertFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = $.path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that    = this
	      , _length = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !_length)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(_length > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	var $def  = __webpack_require__(407)
	  , $task = __webpack_require__(460);
	$def($def.G + $def.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(449);
	var $           = __webpack_require__(400)
	  , Iterators   = __webpack_require__(437).Iterators
	  , ITERATOR    = __webpack_require__(404)('iterator')
	  , ArrayValues = Iterators.Array
	  , NL          = $.g.NodeList
	  , HTC         = $.g.HTMLCollection
	  , NLProto     = NL && NL.prototype
	  , HTCProto    = HTC && HTC.prototype;
	if($.FW){
	  if(NL && !(ITERATOR in NLProto))$.hide(NLProto, ITERATOR, ArrayValues);
	  if(HTC && !(ITERATOR in HTCProto))$.hide(HTCProto, ITERATOR, ArrayValues);
	}
	Iterators.NodeList = Iterators.HTMLCollection = ArrayValues;

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function(global) {
	  "use strict";

	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var iteratorSymbol =
	    typeof Symbol === "function" && Symbol.iterator || "@@iterator";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);

	    generator._invoke = makeInvokeMethod(
	      innerFn, self || null,
	      new Context(tryLocsList || [])
	    );

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    genFun.__proto__ = GeneratorFunctionPrototype;
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `value instanceof AwaitArgument` to determine if the yielded value is
	  // meant to be awaited. Some may consider the name of this method too
	  // cutesy, but they are curmudgeons.
	  runtime.awrap = function(arg) {
	    return new AwaitArgument(arg);
	  };

	  function AwaitArgument(arg) {
	    this.arg = arg;
	  }

	  function AsyncIterator(generator) {
	    // This invoke function is written in a style that assumes some
	    // calling function (or Promise) will handle exceptions.
	    function invoke(method, arg) {
	      var result = generator[method](arg);
	      var value = result.value;
	      return value instanceof AwaitArgument
	        ? Promise.resolve(value.arg).then(invokeNext, invokeThrow)
	        : Promise.resolve(value).then(function(unwrapped) {
	            // When a yielded Promise is resolved, its final value becomes
	            // the .value of the Promise<{value,done}> result for the
	            // current iteration. If the Promise is rejected, however, the
	            // result for this iteration will be rejected with the same
	            // reason. Note that rejections of yielded Promises are not
	            // thrown back into the generator function, as is the case
	            // when an awaited Promise is rejected. This difference in
	            // behavior between yield and await is important, because it
	            // allows the consumer to decide what to do with the yielded
	            // rejection (swallow it and continue, manually .throw it back
	            // into the generator, abandon iteration, whatever). With
	            // await, by contrast, there is no opportunity to examine the
	            // rejection reason outside the generator function, so the
	            // only option is to throw it from the await expression, and
	            // let the generator function handle the exception.
	            result.value = unwrapped;
	            return result;
	          });
	    }

	    if (typeof process === "object" && process.domain) {
	      invoke = process.domain.bind(invoke);
	    }

	    var invokeNext = invoke.bind(generator, "next");
	    var invokeThrow = invoke.bind(generator, "throw");
	    var invokeReturn = invoke.bind(generator, "return");
	    var previousPromise;

	    function enqueue(method, arg) {
	      var enqueueResult =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(function() {
	          return invoke(method, arg);
	        }) : new Promise(function(resolve) {
	          resolve(invoke(method, arg));
	        });

	      // Avoid propagating enqueueResult failures to Promises returned by
	      // later invocations of the iterator.
	      previousPromise = enqueueResult["catch"](function(ignored){});

	      return enqueueResult;
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;

	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }

	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }

	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );

	          if (record.type === "throw") {
	            context.delegate = null;

	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }

	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;

	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }

	          context.delegate = null;
	        }

	        if (method === "next") {
	          if (state === GenStateSuspendedYield) {
	            context.sent = arg;
	          } else {
	            context.sent = undefined;
	          }

	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }

	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }

	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          var info = {
	            value: record.arg,
	            done: context.done
	          };

	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      this.sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }

	      return ContinueSentinel;
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(17)))

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint new-cap:0 no-unused-vars:0 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _reactAddons = __webpack_require__(270);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var Editor = _reactAddons2["default"].createClass({
	  displayName: "Editor",

	  componentDidMount: function componentDidMount() {
	    this.editor = CodeMirror.fromTextArea(this.refs.editor.getDOMNode(), {
	      mode: "javascript",
	      lineNumbers: false,
	      lineWrapping: true,
	      smartIndent: false,
	      matchBrackets: true,
	      theme: this.props.theme,
	      readOnly: this.props.readOnly
	    });
	    this.editor.on("change", this._handleChange);
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.readOnly) {
	      this.editor.setValue(this.props.codeText);
	    }
	  },

	  _handleChange: function _handleChange() {
	    if (!this.props.readOnly && this.props.onChange) {
	      this.props.onChange(this.editor.getValue());
	    }
	  },

	  render: function render() {
	    var editor = _reactAddons2["default"].createElement("textarea", { ref: "editor", defaultValue: this.props.codeText });

	    return _reactAddons2["default"].createElement(
	      "div",
	      { style: this.props.style, className: this.props.className },
	      editor
	    );
	  }
	});

	exports["default"] = Editor;
	module.exports = exports["default"];

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	/* eslint new-cap:0 no-unused-vars:0 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _reactAddons = __webpack_require__(270);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var _babelCoreBrowser = __webpack_require__(390);

	var _babelCoreBrowser2 = _interopRequireDefault(_babelCoreBrowser);

	var getType = function getType(el) {
	  var t = typeof el;

	  if (Array.isArray(el)) {
	    t = "array";
	  } else if (el === null) {
	    t = "null";
	  }

	  return t;
	};

	var wrapMap = {
	  wrapnumber: function wrapnumber(num) {
	    return _reactAddons2["default"].createElement(
	      "span",
	      { style: { color: "#6170d5" } },
	      num
	    );
	  },

	  wrapstring: function wrapstring(str) {
	    return _reactAddons2["default"].createElement(
	      "span",
	      { style: { color: "#F2777A" } },
	      "'" + str + "'"
	    );
	  },

	  wrapboolean: function wrapboolean(bool) {
	    return _reactAddons2["default"].createElement(
	      "span",
	      { style: { color: "#48A1CF" } },
	      bool ? "true" : "false"
	    );
	  },

	  wraparray: function wraparray(arr) {
	    return _reactAddons2["default"].createElement(
	      "span",
	      null,
	      "[",
	      arr.map(function (entry, i) {
	        return _reactAddons2["default"].createElement(
	          "span",
	          null,
	          wrapMap["wrap" + getType(entry)](entry),
	          i !== arr.length - 1 ? ", " : ""
	        );
	      }),
	      "]"
	    );
	  },

	  wrapobject: function wrapobject(obj) {
	    var pairs = [];
	    var first = true;

	    for (var key in obj) {
	      pairs.push(_reactAddons2["default"].createElement(
	        "span",
	        null,
	        _reactAddons2["default"].createElement(
	          "span",
	          { style: { color: "#8A6BA1" } },
	          (first ? "" : ", ") + key
	        ),
	        ": ",
	        wrapMap["wrap" + getType(obj[key])](obj[key])
	      ));

	      first = false;
	    }

	    return _reactAddons2["default"].createElement(
	      "i",
	      null,
	      "Object {",
	      pairs,
	      "}"
	    );
	  },

	  wrapfunction: function wrapfunction() {
	    return _reactAddons2["default"].createElement(
	      "i",
	      { style: { color: "#48A1CF" } },
	      "function"
	    );
	  },

	  wrapnull: function wrapnull() {
	    return _reactAddons2["default"].createElement(
	      "span",
	      { style: { color: "#777" } },
	      "null"
	    );
	  },

	  wrapundefined: function wrapundefined() {
	    return _reactAddons2["default"].createElement(
	      "span",
	      { style: { color: "#777" } },
	      "undefined"
	    );
	  }
	};

	var Preview = _reactAddons2["default"].createClass({
	  displayName: "Preview",

	  propTypes: {
	    code: _reactAddons2["default"].PropTypes.string.isRequired,
	    scope: _reactAddons2["default"].PropTypes.object.isRequired
	  },

	  componentDidMount: function componentDidMount() {
	    this._executeCode();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    clearTimeout(this.timeoutID);
	    if (this.props.code !== prevProps.code) {
	      this._executeCode();
	    }
	  },

	  _compileCode: function _compileCode() {
	    return _babelCoreBrowser2["default"].transform("\n      (function(" + Object.keys(this.props.scope).join(",") + ") {\n        var list = [];\n        var console = { log(...x) {\n          list.push({val: x, multipleArgs: x.length !== 1})\n        }};\n        " + this.props.code + "\n        return list;\n      });\n    ", { stage: 1 }).code;
	  },

	  _setTimeout: function _setTimeout() {
	    clearTimeout(this.timeoutID);
	    this.timeoutID = setTimeout.apply(null, arguments);
	  },

	  _executeCode: function _executeCode() {
	    var mountNode = this.refs.mount.getDOMNode();

	    try {
	      _reactAddons2["default"].unmountComponentAtNode(mountNode);
	    } catch (e) {
	      console.error(e);
	    }

	    try {
	      var scope = [];
	      for (var s in this.props.scope) {
	        if (this.props.scope.hasOwnProperty(s)) {
	          scope.push(this.props.scope[s]);
	        }
	      }
	      scope.push(mountNode);
	      var compiledCode = this._compileCode();
	      var Component = _reactAddons2["default"].createElement(_reactAddons2["default"].createClass({
	        _createConsoleLine: function _createConsoleLine(x, multipleArgs) {
	          var _this = this;

	          return _reactAddons2["default"].createElement(
	            "span",
	            { style: { marginRight: "20px" } },
	            multipleArgs ? x.map(function (y) {
	              return _this._createConsoleLine([y], false);
	            }) : wrapMap["wrap" + getType(x[0])](x[0])
	          );
	        },

	        render: function render() {
	          var _this2 = this;

	          return _reactAddons2["default"].createElement(
	            "div",
	            { style: { padding: 15, fontFamily: "Consolas, Courier, monospace" } },
	            eval(compiledCode).apply(null, scope).map(function (x) {
	              return _reactAddons2["default"].createElement(
	                "div",
	                {
	                  style: {
	                    borderBottom: "1px solid #ccc",
	                    padding: "4px 0"
	                  } },
	                _this2._createConsoleLine(x.val, x.multipleArgs)
	              );
	            })
	          );
	        }
	      }));
	      _reactAddons2["default"].render(Component, mountNode);
	    } catch (err) {
	      this._setTimeout(function () {
	        _reactAddons2["default"].render(_reactAddons2["default"].createElement(
	          "div",
	          { className: "playgroundError" },
	          err.toString()
	        ), mountNode);
	      }, 500);
	    }
	  },

	  render: function render() {
	    return _reactAddons2["default"].createElement("div", { ref: "mount" });
	  }
	});

	exports["default"] = Preview;
	module.exports = exports["default"];

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var _reactAddons = __webpack_require__(270);

	var _reactAddons2 = _interopRequireDefault(_reactAddons);

	var propTypesArray = [{
	  key: "array",
	  test: _reactAddons2["default"].PropTypes.array,
	  isRequired: _reactAddons2["default"].PropTypes.array.isRequired
	}, {
	  key: "boolean",
	  test: _reactAddons2["default"].PropTypes.bool,
	  isRequired: _reactAddons2["default"].PropTypes.bool.isRequired
	}, {
	  key: "function",
	  test: _reactAddons2["default"].PropTypes.func,
	  isRequired: _reactAddons2["default"].PropTypes.func.isRequired
	}, {
	  key: "number",
	  test: _reactAddons2["default"].PropTypes.number,
	  isRequired: _reactAddons2["default"].PropTypes.number.isRequired
	}, {
	  key: "object",
	  test: _reactAddons2["default"].PropTypes.object,
	  isRequired: _reactAddons2["default"].PropTypes.array.isRequired
	}, {
	  key: "string",
	  test: _reactAddons2["default"].PropTypes.string,
	  isRequired: _reactAddons2["default"].PropTypes.string.isRequired
	}, {
	  key: "node",
	  test: _reactAddons2["default"].PropTypes.node,
	  isRequired: _reactAddons2["default"].PropTypes.node.isRequired
	}, {
	  key: "element",
	  test: _reactAddons2["default"].PropTypes.element,
	  isRequired: _reactAddons2["default"].PropTypes.element.isRequired
	}];

	var getReactPropType = function getReactPropType(propTypeFunc) {
	  var propType = {
	    name: "custom",
	    isRequire: false
	  };

	  for (var i = 0; i < propTypesArray.length; i++) {
	    if (propTypeFunc === propTypesArray[i].test) {
	      propType.name = propTypesArray[i].key;

	      break;
	    }

	    if (propTypeFunc === propTypesArray[i].isRequired) {
	      propType.name = propTypesArray[i].key;
	      propType.isRequired = true;

	      break;
	    }
	  }

	  return propType;
	};

	module.exports = _reactAddons2["default"].createClass({
	  displayName: "exports",

	  propTypes: {
	    componentClass: _reactAddons2["default"].PropTypes.renderable,
	    propDescriptionMap: _reactAddons2["default"].PropTypes.object,
	    ignore: _reactAddons2["default"].PropTypes.array
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      propDescriptionMap: {},
	      ignore: []
	    };
	  },
	  render: function render() {
	    var propTypes = [];

	    for (var propName in this.props.componentClass.propTypes) {
	      if (this.props.ignore.indexOf(propName)) {
	        propTypes.push({
	          propName: propName,
	          type: getReactPropType(this.props.componentClass.propTypes[propName]),
	          description: this.props.propDescriptionMap[propName] || ""
	        });
	      }
	    }

	    return _reactAddons2["default"].createElement(
	      "div",
	      null,
	      _reactAddons2["default"].createElement(
	        "ul",
	        null,
	        propTypes.map(function (propObj) {
	          return _reactAddons2["default"].createElement(
	            "li",
	            { key: propObj.propName },
	            _reactAddons2["default"].createElement(
	              "b",
	              null,
	              propObj.propName
	            ),
	            _reactAddons2["default"].createElement(
	              "i",
	              null,
	              ": " + propObj.type.name
	            ),
	            propObj.description && " - " + propObj.description,
	            _reactAddons2["default"].createElement(
	              "b",
	              null,
	              propObj.type.isRequired ? " required" : ""
	            )
	          );
	        })
	      )
	    );
	  }
	});

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * marked - a markdown parser
	 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
	 * https://github.com/chjj/marked
	 */

	;(function() {

	/**
	 * Block-Level Grammar
	 */

	var block = {
	  newline: /^\n+/,
	  code: /^( {4}[^\n]+\n*)+/,
	  fences: noop,
	  hr: /^( *[-*_]){3,} *(?:\n+|$)/,
	  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,
	  nptable: noop,
	  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,
	  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
	  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
	  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
	  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,
	  table: noop,
	  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,
	  text: /^[^\n]+/
	};

	block.bullet = /(?:[*+-]|\d+\.)/;
	block.item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
	block.item = replace(block.item, 'gm')
	  (/bull/g, block.bullet)
	  ();

	block.list = replace(block.list)
	  (/bull/g, block.bullet)
	  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
	  ('def', '\\n+(?=' + block.def.source + ')')
	  ();

	block.blockquote = replace(block.blockquote)
	  ('def', block.def)
	  ();

	block._tag = '(?!(?:'
	  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
	  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
	  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b';

	block.html = replace(block.html)
	  ('comment', /<!--[\s\S]*?-->/)
	  ('closed', /<(tag)[\s\S]+?<\/\1>/)
	  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
	  (/tag/g, block._tag)
	  ();

	block.paragraph = replace(block.paragraph)
	  ('hr', block.hr)
	  ('heading', block.heading)
	  ('lheading', block.lheading)
	  ('blockquote', block.blockquote)
	  ('tag', '<' + block._tag)
	  ('def', block.def)
	  ();

	/**
	 * Normal Block Grammar
	 */

	block.normal = merge({}, block);

	/**
	 * GFM Block Grammar
	 */

	block.gfm = merge({}, block.normal, {
	  fences: /^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,
	  paragraph: /^/,
	  heading: /^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/
	});

	block.gfm.paragraph = replace(block.paragraph)
	  ('(?!', '(?!'
	    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
	    + block.list.source.replace('\\1', '\\3') + '|')
	  ();

	/**
	 * GFM + Tables Block Grammar
	 */

	block.tables = merge({}, block.gfm, {
	  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
	  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
	});

	/**
	 * Block Lexer
	 */

	function Lexer(options) {
	  this.tokens = [];
	  this.tokens.links = {};
	  this.options = options || marked.defaults;
	  this.rules = block.normal;

	  if (this.options.gfm) {
	    if (this.options.tables) {
	      this.rules = block.tables;
	    } else {
	      this.rules = block.gfm;
	    }
	  }
	}

	/**
	 * Expose Block Rules
	 */

	Lexer.rules = block;

	/**
	 * Static Lex Method
	 */

	Lexer.lex = function(src, options) {
	  var lexer = new Lexer(options);
	  return lexer.lex(src);
	};

	/**
	 * Preprocessing
	 */

	Lexer.prototype.lex = function(src) {
	  src = src
	    .replace(/\r\n|\r/g, '\n')
	    .replace(/\t/g, '    ')
	    .replace(/\u00a0/g, ' ')
	    .replace(/\u2424/g, '\n');

	  return this.token(src, true);
	};

	/**
	 * Lexing
	 */

	Lexer.prototype.token = function(src, top, bq) {
	  var src = src.replace(/^ +$/gm, '')
	    , next
	    , loose
	    , cap
	    , bull
	    , b
	    , item
	    , space
	    , i
	    , l;

	  while (src) {
	    // newline
	    if (cap = this.rules.newline.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[0].length > 1) {
	        this.tokens.push({
	          type: 'space'
	        });
	      }
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      cap = cap[0].replace(/^ {4}/gm, '');
	      this.tokens.push({
	        type: 'code',
	        text: !this.options.pedantic
	          ? cap.replace(/\n+$/, '')
	          : cap
	      });
	      continue;
	    }

	    // fences (gfm)
	    if (cap = this.rules.fences.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'code',
	        lang: cap[2],
	        text: cap[3] || ''
	      });
	      continue;
	    }

	    // heading
	    if (cap = this.rules.heading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[1].length,
	        text: cap[2]
	      });
	      continue;
	    }

	    // table no leading pipe (gfm)
	    if (top && (cap = this.rules.nptable.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i].split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // lheading
	    if (cap = this.rules.lheading.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'heading',
	        depth: cap[2] === '=' ? 1 : 2,
	        text: cap[1]
	      });
	      continue;
	    }

	    // hr
	    if (cap = this.rules.hr.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'hr'
	      });
	      continue;
	    }

	    // blockquote
	    if (cap = this.rules.blockquote.exec(src)) {
	      src = src.substring(cap[0].length);

	      this.tokens.push({
	        type: 'blockquote_start'
	      });

	      cap = cap[0].replace(/^ *> ?/gm, '');

	      // Pass `top` to keep the current
	      // "toplevel" state. This is exactly
	      // how markdown.pl works.
	      this.token(cap, top, true);

	      this.tokens.push({
	        type: 'blockquote_end'
	      });

	      continue;
	    }

	    // list
	    if (cap = this.rules.list.exec(src)) {
	      src = src.substring(cap[0].length);
	      bull = cap[2];

	      this.tokens.push({
	        type: 'list_start',
	        ordered: bull.length > 1
	      });

	      // Get each top-level item.
	      cap = cap[0].match(this.rules.item);

	      next = false;
	      l = cap.length;
	      i = 0;

	      for (; i < l; i++) {
	        item = cap[i];

	        // Remove the list item's bullet
	        // so it is seen as the next token.
	        space = item.length;
	        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

	        // Outdent whatever the
	        // list item contains. Hacky.
	        if (~item.indexOf('\n ')) {
	          space -= item.length;
	          item = !this.options.pedantic
	            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
	            : item.replace(/^ {1,4}/gm, '');
	        }

	        // Determine whether the next list item belongs here.
	        // Backpedal if it does not belong in this list.
	        if (this.options.smartLists && i !== l - 1) {
	          b = block.bullet.exec(cap[i + 1])[0];
	          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
	            src = cap.slice(i + 1).join('\n') + src;
	            i = l - 1;
	          }
	        }

	        // Determine whether item is loose or not.
	        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
	        // for discount behavior.
	        loose = next || /\n\n(?!\s*$)/.test(item);
	        if (i !== l - 1) {
	          next = item.charAt(item.length - 1) === '\n';
	          if (!loose) loose = next;
	        }

	        this.tokens.push({
	          type: loose
	            ? 'loose_item_start'
	            : 'list_item_start'
	        });

	        // Recurse.
	        this.token(item, false, bq);

	        this.tokens.push({
	          type: 'list_item_end'
	        });
	      }

	      this.tokens.push({
	        type: 'list_end'
	      });

	      continue;
	    }

	    // html
	    if (cap = this.rules.html.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: this.options.sanitize
	          ? 'paragraph'
	          : 'html',
	        pre: !this.options.sanitizer
	          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
	        text: cap[0]
	      });
	      continue;
	    }

	    // def
	    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.links[cap[1].toLowerCase()] = {
	        href: cap[2],
	        title: cap[3]
	      };
	      continue;
	    }

	    // table (gfm)
	    if (top && (cap = this.rules.table.exec(src))) {
	      src = src.substring(cap[0].length);

	      item = {
	        type: 'table',
	        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
	        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
	        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n')
	      };

	      for (i = 0; i < item.align.length; i++) {
	        if (/^ *-+: *$/.test(item.align[i])) {
	          item.align[i] = 'right';
	        } else if (/^ *:-+: *$/.test(item.align[i])) {
	          item.align[i] = 'center';
	        } else if (/^ *:-+ *$/.test(item.align[i])) {
	          item.align[i] = 'left';
	        } else {
	          item.align[i] = null;
	        }
	      }

	      for (i = 0; i < item.cells.length; i++) {
	        item.cells[i] = item.cells[i]
	          .replace(/^ *\| *| *\| *$/g, '')
	          .split(/ *\| */);
	      }

	      this.tokens.push(item);

	      continue;
	    }

	    // top-level paragraph
	    if (top && (cap = this.rules.paragraph.exec(src))) {
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'paragraph',
	        text: cap[1].charAt(cap[1].length - 1) === '\n'
	          ? cap[1].slice(0, -1)
	          : cap[1]
	      });
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      // Top-level should never reach here.
	      src = src.substring(cap[0].length);
	      this.tokens.push({
	        type: 'text',
	        text: cap[0]
	      });
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return this.tokens;
	};

	/**
	 * Inline-Level Grammar
	 */

	var inline = {
	  escape: /^\\([\\`*{}\[\]()#+\-.!_>])/,
	  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
	  url: noop,
	  tag: /^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,
	  link: /^!?\[(inside)\]\(href\)/,
	  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
	  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
	  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
	  em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
	  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
	  br: /^ {2,}\n(?!\s*$)/,
	  del: noop,
	  text: /^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/
	};

	inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
	inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

	inline.link = replace(inline.link)
	  ('inside', inline._inside)
	  ('href', inline._href)
	  ();

	inline.reflink = replace(inline.reflink)
	  ('inside', inline._inside)
	  ();

	/**
	 * Normal Inline Grammar
	 */

	inline.normal = merge({}, inline);

	/**
	 * Pedantic Inline Grammar
	 */

	inline.pedantic = merge({}, inline.normal, {
	  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
	  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
	});

	/**
	 * GFM Inline Grammar
	 */

	inline.gfm = merge({}, inline.normal, {
	  escape: replace(inline.escape)('])', '~|])')(),
	  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
	  del: /^~~(?=\S)([\s\S]*?\S)~~/,
	  text: replace(inline.text)
	    (']|', '~]|')
	    ('|', '|https?://|')
	    ()
	});

	/**
	 * GFM + Line Breaks Inline Grammar
	 */

	inline.breaks = merge({}, inline.gfm, {
	  br: replace(inline.br)('{2,}', '*')(),
	  text: replace(inline.gfm.text)('{2,}', '*')()
	});

	/**
	 * Inline Lexer & Compiler
	 */

	function InlineLexer(links, options) {
	  this.options = options || marked.defaults;
	  this.links = links;
	  this.rules = inline.normal;
	  this.renderer = this.options.renderer || new Renderer;
	  this.renderer.options = this.options;

	  if (!this.links) {
	    throw new
	      Error('Tokens array requires a `links` property.');
	  }

	  if (this.options.gfm) {
	    if (this.options.breaks) {
	      this.rules = inline.breaks;
	    } else {
	      this.rules = inline.gfm;
	    }
	  } else if (this.options.pedantic) {
	    this.rules = inline.pedantic;
	  }
	}

	/**
	 * Expose Inline Rules
	 */

	InlineLexer.rules = inline;

	/**
	 * Static Lexing/Compiling Method
	 */

	InlineLexer.output = function(src, links, options) {
	  var inline = new InlineLexer(links, options);
	  return inline.output(src);
	};

	/**
	 * Lexing/Compiling
	 */

	InlineLexer.prototype.output = function(src) {
	  var out = ''
	    , link
	    , text
	    , href
	    , cap;

	  while (src) {
	    // escape
	    if (cap = this.rules.escape.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += cap[1];
	      continue;
	    }

	    // autolink
	    if (cap = this.rules.autolink.exec(src)) {
	      src = src.substring(cap[0].length);
	      if (cap[2] === '@') {
	        text = cap[1].charAt(6) === ':'
	          ? this.mangle(cap[1].substring(7))
	          : this.mangle(cap[1]);
	        href = this.mangle('mailto:') + text;
	      } else {
	        text = escape(cap[1]);
	        href = text;
	      }
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // url (gfm)
	    if (!this.inLink && (cap = this.rules.url.exec(src))) {
	      src = src.substring(cap[0].length);
	      text = escape(cap[1]);
	      href = text;
	      out += this.renderer.link(href, null, text);
	      continue;
	    }

	    // tag
	    if (cap = this.rules.tag.exec(src)) {
	      if (!this.inLink && /^<a /i.test(cap[0])) {
	        this.inLink = true;
	      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
	        this.inLink = false;
	      }
	      src = src.substring(cap[0].length);
	      out += this.options.sanitize
	        ? this.options.sanitizer
	          ? this.options.sanitizer(cap[0])
	          : escape(cap[0])
	        : cap[0]
	      continue;
	    }

	    // link
	    if (cap = this.rules.link.exec(src)) {
	      src = src.substring(cap[0].length);
	      this.inLink = true;
	      out += this.outputLink(cap, {
	        href: cap[2],
	        title: cap[3]
	      });
	      this.inLink = false;
	      continue;
	    }

	    // reflink, nolink
	    if ((cap = this.rules.reflink.exec(src))
	        || (cap = this.rules.nolink.exec(src))) {
	      src = src.substring(cap[0].length);
	      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
	      link = this.links[link.toLowerCase()];
	      if (!link || !link.href) {
	        out += cap[0].charAt(0);
	        src = cap[0].substring(1) + src;
	        continue;
	      }
	      this.inLink = true;
	      out += this.outputLink(cap, link);
	      this.inLink = false;
	      continue;
	    }

	    // strong
	    if (cap = this.rules.strong.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.strong(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // em
	    if (cap = this.rules.em.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.em(this.output(cap[2] || cap[1]));
	      continue;
	    }

	    // code
	    if (cap = this.rules.code.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.codespan(escape(cap[2], true));
	      continue;
	    }

	    // br
	    if (cap = this.rules.br.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.br();
	      continue;
	    }

	    // del (gfm)
	    if (cap = this.rules.del.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.del(this.output(cap[1]));
	      continue;
	    }

	    // text
	    if (cap = this.rules.text.exec(src)) {
	      src = src.substring(cap[0].length);
	      out += this.renderer.text(escape(this.smartypants(cap[0])));
	      continue;
	    }

	    if (src) {
	      throw new
	        Error('Infinite loop on byte: ' + src.charCodeAt(0));
	    }
	  }

	  return out;
	};

	/**
	 * Compile Link
	 */

	InlineLexer.prototype.outputLink = function(cap, link) {
	  var href = escape(link.href)
	    , title = link.title ? escape(link.title) : null;

	  return cap[0].charAt(0) !== '!'
	    ? this.renderer.link(href, title, this.output(cap[1]))
	    : this.renderer.image(href, title, escape(cap[1]));
	};

	/**
	 * Smartypants Transformations
	 */

	InlineLexer.prototype.smartypants = function(text) {
	  if (!this.options.smartypants) return text;
	  return text
	    // em-dashes
	    .replace(/---/g, '\u2014')
	    // en-dashes
	    .replace(/--/g, '\u2013')
	    // opening singles
	    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
	    // closing singles & apostrophes
	    .replace(/'/g, '\u2019')
	    // opening doubles
	    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
	    // closing doubles
	    .replace(/"/g, '\u201d')
	    // ellipses
	    .replace(/\.{3}/g, '\u2026');
	};

	/**
	 * Mangle Links
	 */

	InlineLexer.prototype.mangle = function(text) {
	  if (!this.options.mangle) return text;
	  var out = ''
	    , l = text.length
	    , i = 0
	    , ch;

	  for (; i < l; i++) {
	    ch = text.charCodeAt(i);
	    if (Math.random() > 0.5) {
	      ch = 'x' + ch.toString(16);
	    }
	    out += '&#' + ch + ';';
	  }

	  return out;
	};

	/**
	 * Renderer
	 */

	function Renderer(options) {
	  this.options = options || {};
	}

	Renderer.prototype.code = function(code, lang, escaped) {
	  if (this.options.highlight) {
	    var out = this.options.highlight(code, lang);
	    if (out != null && out !== code) {
	      escaped = true;
	      code = out;
	    }
	  }

	  if (!lang) {
	    return '<pre><code>'
	      + (escaped ? code : escape(code, true))
	      + '\n</code></pre>';
	  }

	  return '<pre><code class="'
	    + this.options.langPrefix
	    + escape(lang, true)
	    + '">'
	    + (escaped ? code : escape(code, true))
	    + '\n</code></pre>\n';
	};

	Renderer.prototype.blockquote = function(quote) {
	  return '<blockquote>\n' + quote + '</blockquote>\n';
	};

	Renderer.prototype.html = function(html) {
	  return html;
	};

	Renderer.prototype.heading = function(text, level, raw) {
	  return '<h'
	    + level
	    + ' id="'
	    + this.options.headerPrefix
	    + raw.toLowerCase().replace(/[^\w]+/g, '-')
	    + '">'
	    + text
	    + '</h'
	    + level
	    + '>\n';
	};

	Renderer.prototype.hr = function() {
	  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
	};

	Renderer.prototype.list = function(body, ordered) {
	  var type = ordered ? 'ol' : 'ul';
	  return '<' + type + '>\n' + body + '</' + type + '>\n';
	};

	Renderer.prototype.listitem = function(text) {
	  return '<li>' + text + '</li>\n';
	};

	Renderer.prototype.paragraph = function(text) {
	  return '<p>' + text + '</p>\n';
	};

	Renderer.prototype.table = function(header, body) {
	  return '<table>\n'
	    + '<thead>\n'
	    + header
	    + '</thead>\n'
	    + '<tbody>\n'
	    + body
	    + '</tbody>\n'
	    + '</table>\n';
	};

	Renderer.prototype.tablerow = function(content) {
	  return '<tr>\n' + content + '</tr>\n';
	};

	Renderer.prototype.tablecell = function(content, flags) {
	  var type = flags.header ? 'th' : 'td';
	  var tag = flags.align
	    ? '<' + type + ' style="text-align:' + flags.align + '">'
	    : '<' + type + '>';
	  return tag + content + '</' + type + '>\n';
	};

	// span level renderer
	Renderer.prototype.strong = function(text) {
	  return '<strong>' + text + '</strong>';
	};

	Renderer.prototype.em = function(text) {
	  return '<em>' + text + '</em>';
	};

	Renderer.prototype.codespan = function(text) {
	  return '<code>' + text + '</code>';
	};

	Renderer.prototype.br = function() {
	  return this.options.xhtml ? '<br/>' : '<br>';
	};

	Renderer.prototype.del = function(text) {
	  return '<del>' + text + '</del>';
	};

	Renderer.prototype.link = function(href, title, text) {
	  if (this.options.sanitize) {
	    try {
	      var prot = decodeURIComponent(unescape(href))
	        .replace(/[^\w:]/g, '')
	        .toLowerCase();
	    } catch (e) {
	      return '';
	    }
	    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {
	      return '';
	    }
	  }
	  var out = '<a href="' + href + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += '>' + text + '</a>';
	  return out;
	};

	Renderer.prototype.image = function(href, title, text) {
	  var out = '<img src="' + href + '" alt="' + text + '"';
	  if (title) {
	    out += ' title="' + title + '"';
	  }
	  out += this.options.xhtml ? '/>' : '>';
	  return out;
	};

	Renderer.prototype.text = function(text) {
	  return text;
	};

	/**
	 * Parsing & Compiling
	 */

	function Parser(options) {
	  this.tokens = [];
	  this.token = null;
	  this.options = options || marked.defaults;
	  this.options.renderer = this.options.renderer || new Renderer;
	  this.renderer = this.options.renderer;
	  this.renderer.options = this.options;
	}

	/**
	 * Static Parse Method
	 */

	Parser.parse = function(src, options, renderer) {
	  var parser = new Parser(options, renderer);
	  return parser.parse(src);
	};

	/**
	 * Parse Loop
	 */

	Parser.prototype.parse = function(src) {
	  this.inline = new InlineLexer(src.links, this.options, this.renderer);
	  this.tokens = src.reverse();

	  var out = '';
	  while (this.next()) {
	    out += this.tok();
	  }

	  return out;
	};

	/**
	 * Next Token
	 */

	Parser.prototype.next = function() {
	  return this.token = this.tokens.pop();
	};

	/**
	 * Preview Next Token
	 */

	Parser.prototype.peek = function() {
	  return this.tokens[this.tokens.length - 1] || 0;
	};

	/**
	 * Parse Text Tokens
	 */

	Parser.prototype.parseText = function() {
	  var body = this.token.text;

	  while (this.peek().type === 'text') {
	    body += '\n' + this.next().text;
	  }

	  return this.inline.output(body);
	};

	/**
	 * Parse Current Token
	 */

	Parser.prototype.tok = function() {
	  switch (this.token.type) {
	    case 'space': {
	      return '';
	    }
	    case 'hr': {
	      return this.renderer.hr();
	    }
	    case 'heading': {
	      return this.renderer.heading(
	        this.inline.output(this.token.text),
	        this.token.depth,
	        this.token.text);
	    }
	    case 'code': {
	      return this.renderer.code(this.token.text,
	        this.token.lang,
	        this.token.escaped);
	    }
	    case 'table': {
	      var header = ''
	        , body = ''
	        , i
	        , row
	        , cell
	        , flags
	        , j;

	      // header
	      cell = '';
	      for (i = 0; i < this.token.header.length; i++) {
	        flags = { header: true, align: this.token.align[i] };
	        cell += this.renderer.tablecell(
	          this.inline.output(this.token.header[i]),
	          { header: true, align: this.token.align[i] }
	        );
	      }
	      header += this.renderer.tablerow(cell);

	      for (i = 0; i < this.token.cells.length; i++) {
	        row = this.token.cells[i];

	        cell = '';
	        for (j = 0; j < row.length; j++) {
	          cell += this.renderer.tablecell(
	            this.inline.output(row[j]),
	            { header: false, align: this.token.align[j] }
	          );
	        }

	        body += this.renderer.tablerow(cell);
	      }
	      return this.renderer.table(header, body);
	    }
	    case 'blockquote_start': {
	      var body = '';

	      while (this.next().type !== 'blockquote_end') {
	        body += this.tok();
	      }

	      return this.renderer.blockquote(body);
	    }
	    case 'list_start': {
	      var body = ''
	        , ordered = this.token.ordered;

	      while (this.next().type !== 'list_end') {
	        body += this.tok();
	      }

	      return this.renderer.list(body, ordered);
	    }
	    case 'list_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.token.type === 'text'
	          ? this.parseText()
	          : this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'loose_item_start': {
	      var body = '';

	      while (this.next().type !== 'list_item_end') {
	        body += this.tok();
	      }

	      return this.renderer.listitem(body);
	    }
	    case 'html': {
	      var html = !this.token.pre && !this.options.pedantic
	        ? this.inline.output(this.token.text)
	        : this.token.text;
	      return this.renderer.html(html);
	    }
	    case 'paragraph': {
	      return this.renderer.paragraph(this.inline.output(this.token.text));
	    }
	    case 'text': {
	      return this.renderer.paragraph(this.parseText());
	    }
	  }
	};

	/**
	 * Helpers
	 */

	function escape(html, encode) {
	  return html
	    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	    .replace(/"/g, '&quot;')
	    .replace(/'/g, '&#39;');
	}

	function unescape(html) {
	  return html.replace(/&([#\w]+);/g, function(_, n) {
	    n = n.toLowerCase();
	    if (n === 'colon') return ':';
	    if (n.charAt(0) === '#') {
	      return n.charAt(1) === 'x'
	        ? String.fromCharCode(parseInt(n.substring(2), 16))
	        : String.fromCharCode(+n.substring(1));
	    }
	    return '';
	  });
	}

	function replace(regex, opt) {
	  regex = regex.source;
	  opt = opt || '';
	  return function self(name, val) {
	    if (!name) return new RegExp(regex, opt);
	    val = val.source || val;
	    val = val.replace(/(^|[^\[])\^/g, '$1');
	    regex = regex.replace(name, val);
	    return self;
	  };
	}

	function noop() {}
	noop.exec = noop;

	function merge(obj) {
	  var i = 1
	    , target
	    , key;

	  for (; i < arguments.length; i++) {
	    target = arguments[i];
	    for (key in target) {
	      if (Object.prototype.hasOwnProperty.call(target, key)) {
	        obj[key] = target[key];
	      }
	    }
	  }

	  return obj;
	}


	/**
	 * Marked
	 */

	function marked(src, opt, callback) {
	  if (callback || typeof opt === 'function') {
	    if (!callback) {
	      callback = opt;
	      opt = null;
	    }

	    opt = merge({}, marked.defaults, opt || {});

	    var highlight = opt.highlight
	      , tokens
	      , pending
	      , i = 0;

	    try {
	      tokens = Lexer.lex(src, opt)
	    } catch (e) {
	      return callback(e);
	    }

	    pending = tokens.length;

	    var done = function(err) {
	      if (err) {
	        opt.highlight = highlight;
	        return callback(err);
	      }

	      var out;

	      try {
	        out = Parser.parse(tokens, opt);
	      } catch (e) {
	        err = e;
	      }

	      opt.highlight = highlight;

	      return err
	        ? callback(err)
	        : callback(null, out);
	    };

	    if (!highlight || highlight.length < 3) {
	      return done();
	    }

	    delete opt.highlight;

	    if (!pending) return done();

	    for (; i < tokens.length; i++) {
	      (function(token) {
	        if (token.type !== 'code') {
	          return --pending || done();
	        }
	        return highlight(token.text, token.lang, function(err, code) {
	          if (err) return done(err);
	          if (code == null || code === token.text) {
	            return --pending || done();
	          }
	          token.text = code;
	          token.escaped = true;
	          --pending || done();
	        });
	      })(tokens[i]);
	    }

	    return;
	  }
	  try {
	    if (opt) opt = merge({}, marked.defaults, opt);
	    return Parser.parse(Lexer.lex(src, opt), opt);
	  } catch (e) {
	    e.message += '\nPlease report this to https://github.com/chjj/marked.';
	    if ((opt || marked.defaults).silent) {
	      return '<p>An error occured:</p><pre>'
	        + escape(e.message + '', true)
	        + '</pre>';
	    }
	    throw e;
	  }
	}

	/**
	 * Options
	 */

	marked.options =
	marked.setOptions = function(opt) {
	  merge(marked.defaults, opt);
	  return marked;
	};

	marked.defaults = {
	  gfm: true,
	  tables: true,
	  breaks: false,
	  pedantic: false,
	  sanitize: false,
	  sanitizer: null,
	  mangle: true,
	  smartLists: false,
	  silent: false,
	  highlight: null,
	  langPrefix: 'lang-',
	  smartypants: false,
	  headerPrefix: '',
	  renderer: new Renderer,
	  xhtml: false
	};

	/**
	 * Expose
	 */

	marked.Parser = Parser;
	marked.parser = Parser.parse;

	marked.Renderer = Renderer;

	marked.Lexer = Lexer;
	marked.lexer = Lexer.lex;

	marked.InlineLexer = InlineLexer;
	marked.inlineLexer = InlineLexer.output;

	marked.parse = marked;

	if (true) {
	  module.exports = marked;
	} else if (typeof define === 'function' && define.amd) {
	  define(function() { return marked; });
	} else {
	  this.marked = marked;
	}

	}).call(function() {
	  return this || (typeof window !== 'undefined' ? window : global);
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(15);
	var Matter = __webpack_require__(171);
	var merge = __webpack_require__(176);

	module.exports = merge({}, Matter, { Matter: Matter, React: React });

/***/ }
/******/ ]);